import {
  __commonJS
} from "./chunk-DFKQJ226.js";

// node_modules/agora-rtc-sdk-ng/AgoraRTC_N-production.js
var require_AgoraRTC_N_production = __commonJS({
  "node_modules/agora-rtc-sdk-ng/AgoraRTC_N-production.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).AgoraRTC = t();
    }(exports, function() {
      "use strict";
      function e(e2, t2) {
        return t2.forEach(function(t3) {
          t3 && "string" != typeof t3 && !Array.isArray(t3) && Object.keys(t3).forEach(function(i2) {
            if ("default" !== i2 && !(i2 in e2)) {
              var r2 = Object.getOwnPropertyDescriptor(t3, i2);
              Object.defineProperty(e2, i2, r2.get ? r2 : { enumerable: true, get: function() {
                return t3[i2];
              } });
            }
          });
        }), Object.freeze(e2);
      }
      var t = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {}, i = function(e2) {
        try {
          return !!e2();
        } catch (e3) {
          return true;
        }
      }, r = !i(function() {
        var e2 = function() {
        }.bind();
        return "function" != typeof e2 || e2.hasOwnProperty("prototype");
      }), n = r, o = Function.prototype, s = o.bind, a = o.call, c = n && s.bind(a, a), d = n ? function(e2) {
        return e2 && c(e2);
      } : function(e2) {
        return e2 && function() {
          return a.apply(e2, arguments);
        };
      }, u = d({}.isPrototypeOf), l = function(e2) {
        return e2 && e2.Math == Math && e2;
      }, h = l("object" == typeof globalThis && globalThis) || l("object" == typeof window && window) || l("object" == typeof self && self) || l("object" == typeof t && t) || function() {
        return this;
      }() || Function("return this")(), p = r, _ = Function.prototype, E = _.apply, f = _.call, m = "object" == typeof Reflect && Reflect.apply || (p ? f.bind(E) : function() {
        return f.apply(E, arguments);
      }), g = function(e2) {
        return "function" == typeof e2;
      }, S = {}, T = !i(function() {
        return 7 != Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1];
      }), v = r, R = Function.prototype.call, I = v ? R.bind(R) : function() {
        return R.apply(R, arguments);
      }, y = {}, C = {}.propertyIsEnumerable, A = Object.getOwnPropertyDescriptor, O = A && !C.call({ 1: 2 }, 1);
      y.f = O ? function(e2) {
        var t2 = A(this, e2);
        return !!t2 && t2.enumerable;
      } : C;
      var b, w, N = function(e2, t2) {
        return { enumerable: !(1 & e2), configurable: !(2 & e2), writable: !(4 & e2), value: t2 };
      }, D = d, P = D({}.toString), L = D("".slice), k = function(e2) {
        return L(P(e2), 8, -1);
      }, M = d, U = i, x = k, V = h.Object, j = M("".split), F = U(function() {
        return !V("z").propertyIsEnumerable(0);
      }) ? function(e2) {
        return "String" == x(e2) ? j(e2, "") : V(e2);
      } : V, B = h.TypeError, G = function(e2) {
        if (null == e2)
          throw B("Can't call method on " + e2);
        return e2;
      }, W = F, H = G, K = function(e2) {
        return W(H(e2));
      }, Y = g, q = function(e2) {
        return "object" == typeof e2 ? null !== e2 : Y(e2);
      }, J = {}, X = J, z = h, Q = g, Z = function(e2) {
        return Q(e2) ? e2 : void 0;
      }, $ = function(e2, t2) {
        return arguments.length < 2 ? Z(X[e2]) || Z(z[e2]) : X[e2] && X[e2][t2] || z[e2] && z[e2][t2];
      }, ee = $("navigator", "userAgent") || "", te = h, ie = ee, re = te.process, ne = te.Deno, oe = re && re.versions || ne && ne.version, se = oe && oe.v8;
      se && (w = (b = se.split("."))[0] > 0 && b[0] < 4 ? 1 : +(b[0] + b[1])), !w && ie && (!(b = ie.match(/Edge\/(\d+)/)) || b[1] >= 74) && (b = ie.match(/Chrome\/(\d+)/)) && (w = +b[1]);
      var ae = w, ce = ae, de = i, ue = !!Object.getOwnPropertySymbols && !de(function() {
        var e2 = Symbol();
        return !String(e2) || !(Object(e2) instanceof Symbol) || !Symbol.sham && ce && ce < 41;
      }), le = ue && !Symbol.sham && "symbol" == typeof Symbol.iterator, he = $, pe = g, _e = u, Ee = le, fe = h.Object, me = Ee ? function(e2) {
        return "symbol" == typeof e2;
      } : function(e2) {
        var t2 = he("Symbol");
        return pe(t2) && _e(t2.prototype, fe(e2));
      }, ge = h.String, Se = function(e2) {
        try {
          return ge(e2);
        } catch (e3) {
          return "Object";
        }
      }, Te = g, ve = Se, Re = h.TypeError, Ie = function(e2) {
        if (Te(e2))
          return e2;
        throw Re(ve(e2) + " is not a function");
      }, ye = Ie, Ce = function(e2, t2) {
        var i2 = e2[t2];
        return null == i2 ? void 0 : ye(i2);
      }, Ae = I, Oe = g, be = q, we = h.TypeError, Ne = { exports: {} }, De = h, Pe = Object.defineProperty, Le = function(e2, t2) {
        try {
          Pe(De, e2, { value: t2, configurable: true, writable: true });
        } catch (i2) {
          De[e2] = t2;
        }
        return t2;
      }, ke = "__core-js_shared__", Me = h[ke] || Le(ke, {}), Ue = Me;
      (Ne.exports = function(e2, t2) {
        return Ue[e2] || (Ue[e2] = void 0 !== t2 ? t2 : {});
      })("versions", []).push({ version: "3.20.3", mode: "pure", copyright: "Â© 2014-2022 Denis Pushkarev (zloirock.ru)", license: "https://github.com/zloirock/core-js/blob/v3.20.3/LICENSE", source: "https://github.com/zloirock/core-js" });
      var xe = G, Ve = h.Object, je = function(e2) {
        return Ve(xe(e2));
      }, Fe = je, Be = d({}.hasOwnProperty), Ge = Object.hasOwn || function(e2, t2) {
        return Be(Fe(e2), t2);
      }, We = d, He = 0, Ke = Math.random(), Ye = We(1 .toString), qe = function(e2) {
        return "Symbol(" + (void 0 === e2 ? "" : e2) + ")_" + Ye(++He + Ke, 36);
      }, Je = h, Xe = Ne.exports, ze = Ge, Qe = qe, Ze = ue, $e = le, et = Xe("wks"), tt = Je.Symbol, it = tt && tt.for, rt = $e ? tt : tt && tt.withoutSetter || Qe, nt = function(e2) {
        if (!ze(et, e2) || !Ze && "string" != typeof et[e2]) {
          var t2 = "Symbol." + e2;
          Ze && ze(tt, e2) ? et[e2] = tt[e2] : et[e2] = $e && it ? it(t2) : rt(t2);
        }
        return et[e2];
      }, ot = I, st = q, at = me, ct = Ce, dt = function(e2, t2) {
        var i2, r2;
        if ("string" === t2 && Oe(i2 = e2.toString) && !be(r2 = Ae(i2, e2)))
          return r2;
        if (Oe(i2 = e2.valueOf) && !be(r2 = Ae(i2, e2)))
          return r2;
        if ("string" !== t2 && Oe(i2 = e2.toString) && !be(r2 = Ae(i2, e2)))
          return r2;
        throw we("Can't convert object to primitive value");
      }, ut = nt, lt = h.TypeError, ht = ut("toPrimitive"), pt = function(e2, t2) {
        if (!st(e2) || at(e2))
          return e2;
        var i2, r2 = ct(e2, ht);
        if (r2) {
          if (void 0 === t2 && (t2 = "default"), i2 = ot(r2, e2, t2), !st(i2) || at(i2))
            return i2;
          throw lt("Can't convert object to primitive value");
        }
        return void 0 === t2 && (t2 = "number"), dt(e2, t2);
      }, _t = me, Et = function(e2) {
        var t2 = pt(e2, "string");
        return _t(t2) ? t2 : t2 + "";
      }, ft = q, mt = h.document, gt = ft(mt) && ft(mt.createElement), St = function(e2) {
        return gt ? mt.createElement(e2) : {};
      }, Tt = St, vt = !T && !i(function() {
        return 7 != Object.defineProperty(Tt("div"), "a", { get: function() {
          return 7;
        } }).a;
      }), Rt = T, It = I, yt = y, Ct = N, At = K, Ot = Et, bt = Ge, wt = vt, Nt = Object.getOwnPropertyDescriptor;
      S.f = Rt ? Nt : function(e2, t2) {
        if (e2 = At(e2), t2 = Ot(t2), wt)
          try {
            return Nt(e2, t2);
          } catch (e3) {
          }
        if (bt(e2, t2))
          return Ct(!It(yt.f, e2, t2), e2[t2]);
      };
      var Dt = i, Pt = g, Lt = /#|\.prototype\./, kt = function(e2, t2) {
        var i2 = Ut[Mt(e2)];
        return i2 == Vt || i2 != xt && (Pt(t2) ? Dt(t2) : !!t2);
      }, Mt = kt.normalize = function(e2) {
        return String(e2).replace(Lt, ".").toLowerCase();
      }, Ut = kt.data = {}, xt = kt.NATIVE = "N", Vt = kt.POLYFILL = "P", jt = kt, Ft = Ie, Bt = r, Gt = d(d.bind), Wt = function(e2, t2) {
        return Ft(e2), void 0 === t2 ? e2 : Bt ? Gt(e2, t2) : function() {
          return e2.apply(t2, arguments);
        };
      }, Ht = {}, Kt = T && i(function() {
        return 42 != Object.defineProperty(function() {
        }, "prototype", { value: 42, writable: false }).prototype;
      }), Yt = h, qt = q, Jt = Yt.String, Xt = Yt.TypeError, zt = function(e2) {
        if (qt(e2))
          return e2;
        throw Xt(Jt(e2) + " is not an object");
      }, Qt = T, Zt = vt, $t = Kt, ei = zt, ti = Et, ii = h.TypeError, ri = Object.defineProperty, ni = Object.getOwnPropertyDescriptor, oi = "enumerable", si = "configurable", ai = "writable";
      Ht.f = Qt ? $t ? function(e2, t2, i2) {
        if (ei(e2), t2 = ti(t2), ei(i2), "function" == typeof e2 && "prototype" === t2 && "value" in i2 && ai in i2 && !i2.writable) {
          var r2 = ni(e2, t2);
          r2 && r2.writable && (e2[t2] = i2.value, i2 = { configurable: si in i2 ? i2.configurable : r2.configurable, enumerable: oi in i2 ? i2.enumerable : r2.enumerable, writable: false });
        }
        return ri(e2, t2, i2);
      } : ri : function(e2, t2, i2) {
        if (ei(e2), t2 = ti(t2), ei(i2), Zt)
          try {
            return ri(e2, t2, i2);
          } catch (e3) {
          }
        if ("get" in i2 || "set" in i2)
          throw ii("Accessors not supported");
        return "value" in i2 && (e2[t2] = i2.value), e2;
      };
      var ci = Ht, di = N, ui = T ? function(e2, t2, i2) {
        return ci.f(e2, t2, di(1, i2));
      } : function(e2, t2, i2) {
        return e2[t2] = i2, e2;
      }, li = h, hi = m, pi = d, _i = g, Ei = S.f, fi = jt, mi = J, gi = Wt, Si = ui, Ti = Ge, vi = function(e2) {
        var t2 = function(i2, r2, n2) {
          if (this instanceof t2) {
            switch (arguments.length) {
              case 0:
                return new e2();
              case 1:
                return new e2(i2);
              case 2:
                return new e2(i2, r2);
            }
            return new e2(i2, r2, n2);
          }
          return hi(e2, this, arguments);
        };
        return t2.prototype = e2.prototype, t2;
      }, Ri = function(e2, t2) {
        var i2, r2, n2, o2, s2, a2, c2, d2, u2 = e2.target, l2 = e2.global, h2 = e2.stat, p2 = e2.proto, _2 = l2 ? li : h2 ? li[u2] : (li[u2] || {}).prototype, E2 = l2 ? mi : mi[u2] || Si(mi, u2, {})[u2], f2 = E2.prototype;
        for (n2 in t2)
          i2 = !fi(l2 ? n2 : u2 + (h2 ? "." : "#") + n2, e2.forced) && _2 && Ti(_2, n2), s2 = E2[n2], i2 && (a2 = e2.noTargetGet ? (d2 = Ei(_2, n2)) && d2.value : _2[n2]), o2 = i2 && a2 ? a2 : t2[n2], i2 && typeof s2 == typeof o2 || (c2 = e2.bind && i2 ? gi(o2, li) : e2.wrap && i2 ? vi(o2) : p2 && _i(o2) ? pi(o2) : o2, (e2.sham || o2 && o2.sham || s2 && s2.sham) && Si(c2, "sham", true), Si(E2, n2, c2), p2 && (Ti(mi, r2 = u2 + "Prototype") || Si(mi, r2, {}), Si(mi[r2], n2, o2), e2.real && f2 && !f2[n2] && Si(f2, n2, o2)));
      }, Ii = Math.ceil, yi = Math.floor, Ci = function(e2) {
        var t2 = +e2;
        return t2 != t2 || 0 === t2 ? 0 : (t2 > 0 ? yi : Ii)(t2);
      }, Ai = Ci, Oi = Math.min, bi = function(e2) {
        return e2 > 0 ? Oi(Ai(e2), 9007199254740991) : 0;
      }, wi = function(e2) {
        return bi(e2.length);
      }, Ni = Ie, Di = je, Pi = F, Li = wi, ki = h.TypeError, Mi = function(e2) {
        return function(t2, i2, r2, n2) {
          Ni(i2);
          var o2 = Di(t2), s2 = Pi(o2), a2 = Li(o2), c2 = e2 ? a2 - 1 : 0, d2 = e2 ? -1 : 1;
          if (r2 < 2)
            for (; ; ) {
              if (c2 in s2) {
                n2 = s2[c2], c2 += d2;
                break;
              }
              if (c2 += d2, e2 ? c2 < 0 : a2 <= c2)
                throw ki("Reduce of empty array with no initial value");
            }
          for (; e2 ? c2 >= 0 : a2 > c2; c2 += d2)
            c2 in s2 && (n2 = i2(n2, s2[c2], c2, o2));
          return n2;
        };
      }, Ui = { left: Mi(false), right: Mi(true) }, xi = i, Vi = function(e2, t2) {
        var i2 = [][e2];
        return !!i2 && xi(function() {
          i2.call(null, t2 || function() {
            throw 1;
          }, 1);
        });
      }, ji = "process" == k(h.process), Fi = Ui.left, Bi = ae, Gi = ji;
      Ri({ target: "Array", proto: true, forced: !Vi("reduce") || !Gi && Bi > 79 && Bi < 83 }, { reduce: function(e2) {
        var t2 = arguments.length;
        return Fi(this, e2, t2, t2 > 1 ? arguments[1] : void 0);
      } });
      var Wi = J, Hi = function(e2) {
        return Wi[e2 + "Prototype"];
      }, Ki = Hi("Array").reduce, Yi = u, qi = Ki, Ji = Array.prototype, Xi = function(e2) {
        var t2 = e2.reduce;
        return e2 === Ji || Yi(Ji, e2) && t2 === Ji.reduce ? qi : t2;
      }, zi = Xi;
      let Qi = true, Zi = true;
      function $i(e2, t2, i2) {
        const r2 = e2.match(t2);
        return r2 && r2.length >= i2 && parseInt(r2[i2], 10);
      }
      function er(e2, t2, i2) {
        if (!e2.RTCPeerConnection)
          return;
        const r2 = e2.RTCPeerConnection.prototype, n2 = r2.addEventListener;
        r2.addEventListener = function(e3, r3) {
          if (e3 !== t2)
            return n2.apply(this, arguments);
          const o3 = (e4) => {
            const t3 = i2(e4);
            t3 && (r3.handleEvent ? r3.handleEvent(t3) : r3(t3));
          };
          return this._eventMap = this._eventMap || {}, this._eventMap[t2] || (this._eventMap[t2] = /* @__PURE__ */ new Map()), this._eventMap[t2].set(r3, o3), n2.apply(this, [e3, o3]);
        };
        const o2 = r2.removeEventListener;
        r2.removeEventListener = function(e3, i3) {
          if (e3 !== t2 || !this._eventMap || !this._eventMap[t2])
            return o2.apply(this, arguments);
          if (!this._eventMap[t2].has(i3))
            return o2.apply(this, arguments);
          const r3 = this._eventMap[t2].get(i3);
          return this._eventMap[t2].delete(i3), 0 === this._eventMap[t2].size && delete this._eventMap[t2], 0 === Object.keys(this._eventMap).length && delete this._eventMap, o2.apply(this, [e3, r3]);
        }, Object.defineProperty(r2, "on" + t2, { get() {
          return this["_on" + t2];
        }, set(e3) {
          this["_on" + t2] && (this.removeEventListener(t2, this["_on" + t2]), delete this["_on" + t2]), e3 && this.addEventListener(t2, this["_on" + t2] = e3);
        }, enumerable: true, configurable: true });
      }
      function tr(e2) {
        return "boolean" != typeof e2 ? new Error("Argument type: " + typeof e2 + ". Please use a boolean.") : (Qi = e2, e2 ? "adapter.js logging disabled" : "adapter.js logging enabled");
      }
      function ir(e2) {
        return "boolean" != typeof e2 ? new Error("Argument type: " + typeof e2 + ". Please use a boolean.") : (Zi = !e2, "adapter.js deprecation warnings " + (e2 ? "disabled" : "enabled"));
      }
      function rr() {
        if ("object" == typeof window) {
          if (Qi)
            return;
          "undefined" != typeof console && "function" == typeof console.log && console.log.apply(console, arguments);
        }
      }
      function nr(e2, t2) {
        Zi && console.warn(e2 + " is deprecated, please use " + t2 + " instead.");
      }
      function or(e2) {
        const t2 = { browser: null, version: null };
        if (void 0 === e2 || !e2.navigator)
          return t2.browser = "Not a browser.", t2;
        const { navigator: i2 } = e2;
        if (i2.mozGetUserMedia)
          t2.browser = "firefox", t2.version = $i(i2.userAgent, /Firefox\/(\d+)\./, 1);
        else if (i2.webkitGetUserMedia || false === e2.isSecureContext && e2.webkitRTCPeerConnection)
          t2.browser = "chrome", t2.version = $i(i2.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
        else {
          if (!e2.RTCPeerConnection || !i2.userAgent.match(/AppleWebKit\/(\d+)\./))
            return t2.browser = "Not a supported browser.", t2;
          t2.browser = "safari", t2.version = $i(i2.userAgent, /AppleWebKit\/(\d+)\./, 1), t2.supportsUnifiedPlan = e2.RTCRtpTransceiver && "currentDirection" in e2.RTCRtpTransceiver.prototype;
        }
        return t2;
      }
      function sr(e2) {
        return "[object Object]" === Object.prototype.toString.call(e2);
      }
      function ar(e2) {
        var t2;
        return sr(e2) ? zi(t2 = Object.keys(e2)).call(t2, function(t3, i2) {
          const r2 = sr(e2[i2]), n2 = r2 ? ar(e2[i2]) : e2[i2], o2 = r2 && !Object.keys(n2).length;
          return void 0 === n2 || o2 ? t3 : Object.assign(t3, { [i2]: n2 });
        }, {}) : e2;
      }
      function cr(e2, t2, i2) {
        const r2 = i2 ? "outbound-rtp" : "inbound-rtp", n2 = /* @__PURE__ */ new Map();
        if (null === t2)
          return n2;
        const o2 = [];
        return e2.forEach((e3) => {
          "track" === e3.type && e3.trackIdentifier === t2.id && o2.push(e3);
        }), o2.forEach((t3) => {
          e2.forEach((i3) => {
            i3.type === r2 && i3.trackId === t3.id && function e3(t4, i4, r3) {
              i4 && !r3.has(i4.id) && (r3.set(i4.id, i4), Object.keys(i4).forEach((n3) => {
                n3.endsWith("Id") ? e3(t4, t4.get(i4[n3]), r3) : n3.endsWith("Ids") && i4[n3].forEach((i5) => {
                  e3(t4, t4.get(i5), r3);
                });
              }));
            }(e2, i3, n2);
          });
        }), n2;
      }
      var dr = Ne.exports, ur = qe, lr = dr("keys"), hr = function(e2) {
        return lr[e2] || (lr[e2] = ur(e2));
      }, pr = !i(function() {
        function e2() {
        }
        return e2.prototype.constructor = null, Object.getPrototypeOf(new e2()) !== e2.prototype;
      }), _r = h, Er = Ge, fr = g, mr = je, gr = pr, Sr = hr("IE_PROTO"), Tr = _r.Object, vr = Tr.prototype, Rr = gr ? Tr.getPrototypeOf : function(e2) {
        var t2 = mr(e2);
        if (Er(t2, Sr))
          return t2[Sr];
        var i2 = t2.constructor;
        return fr(i2) && t2 instanceof i2 ? i2.prototype : t2 instanceof Tr ? vr : null;
      }, Ir = h, yr = g, Cr = Ir.String, Ar = Ir.TypeError, Or = d, br = zt, wr = function(e2) {
        if ("object" == typeof e2 || yr(e2))
          return e2;
        throw Ar("Can't set " + Cr(e2) + " as a prototype");
      }, Nr = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var e2, t2 = false, i2 = {};
        try {
          (e2 = Or(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set))(i2, []), t2 = i2 instanceof Array;
        } catch (e3) {
        }
        return function(i3, r2) {
          return br(i3), wr(r2), t2 ? e2(i3, r2) : i3.__proto__ = r2, i3;
        };
      }() : void 0), Dr = {}, Pr = Ci, Lr = Math.max, kr = Math.min, Mr = function(e2, t2) {
        var i2 = Pr(e2);
        return i2 < 0 ? Lr(i2 + t2, 0) : kr(i2, t2);
      }, Ur = K, xr = Mr, Vr = wi, jr = function(e2) {
        return function(t2, i2, r2) {
          var n2, o2 = Ur(t2), s2 = Vr(o2), a2 = xr(r2, s2);
          if (e2 && i2 != i2) {
            for (; s2 > a2; )
              if ((n2 = o2[a2++]) != n2)
                return true;
          } else
            for (; s2 > a2; a2++)
              if ((e2 || a2 in o2) && o2[a2] === i2)
                return e2 || a2 || 0;
          return !e2 && -1;
        };
      }, Fr = { includes: jr(true), indexOf: jr(false) }, Br = {}, Gr = Ge, Wr = K, Hr = Fr.indexOf, Kr = Br, Yr = d([].push), qr = function(e2, t2) {
        var i2, r2 = Wr(e2), n2 = 0, o2 = [];
        for (i2 in r2)
          !Gr(Kr, i2) && Gr(r2, i2) && Yr(o2, i2);
        for (; t2.length > n2; )
          Gr(r2, i2 = t2[n2++]) && (~Hr(o2, i2) || Yr(o2, i2));
        return o2;
      }, Jr = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"], Xr = qr, zr = Jr.concat("length", "prototype");
      Dr.f = Object.getOwnPropertyNames || function(e2) {
        return Xr(e2, zr);
      };
      var Qr = {};
      Qr.f = Object.getOwnPropertySymbols;
      var Zr = $, $r = Dr, en = Qr, tn = zt, rn = d([].concat), nn = Zr("Reflect", "ownKeys") || function(e2) {
        var t2 = $r.f(tn(e2)), i2 = en.f;
        return i2 ? rn(t2, i2(e2)) : t2;
      }, on = Ge, sn = nn, an = S, cn = Ht, dn = {}, un = qr, ln = Jr, hn = Object.keys || function(e2) {
        return un(e2, ln);
      }, pn = T, _n = Kt, En = Ht, fn = zt, mn = K, gn = hn;
      dn.f = pn && !_n ? Object.defineProperties : function(e2, t2) {
        fn(e2);
        for (var i2, r2 = mn(t2), n2 = gn(t2), o2 = n2.length, s2 = 0; o2 > s2; )
          En.f(e2, i2 = n2[s2++], r2[i2]);
        return e2;
      };
      var Sn, Tn = $("document", "documentElement"), vn = zt, Rn = dn, In = Jr, yn = Br, Cn = Tn, An = St, On = hr("IE_PROTO"), bn = function() {
      }, wn = function(e2) {
        return "<script>" + e2 + "<\/script>";
      }, Nn = function(e2) {
        e2.write(wn("")), e2.close();
        var t2 = e2.parentWindow.Object;
        return e2 = null, t2;
      }, Dn = function() {
        try {
          Sn = new ActiveXObject("htmlfile");
        } catch (e3) {
        }
        var e2, t2;
        Dn = "undefined" != typeof document ? document.domain && Sn ? Nn(Sn) : ((t2 = An("iframe")).style.display = "none", Cn.appendChild(t2), t2.src = String("javascript:"), (e2 = t2.contentWindow.document).open(), e2.write(wn("document.F=Object")), e2.close(), e2.F) : Nn(Sn);
        for (var i2 = In.length; i2--; )
          delete Dn.prototype[In[i2]];
        return Dn();
      };
      yn[On] = true;
      var Pn = Object.create || function(e2, t2) {
        var i2;
        return null !== e2 ? (bn.prototype = vn(e2), i2 = new bn(), bn.prototype = null, i2[On] = e2) : i2 = Dn(), void 0 === t2 ? i2 : Rn.f(i2, t2);
      }, Ln = d("".replace), kn = String(Error("zxcasd").stack), Mn = /\n\s*at [^:]*:[^\n]*/, Un = Mn.test(kn), xn = q, Vn = ui, jn = {}, Fn = jn, Bn = nt("iterator"), Gn = Array.prototype, Wn = function(e2) {
        return void 0 !== e2 && (Fn.Array === e2 || Gn[Bn] === e2);
      }, Hn = {};
      Hn[nt("toStringTag")] = "z";
      var Kn = "[object z]" === String(Hn), Yn = h, qn = Kn, Jn = g, Xn = k, zn = nt("toStringTag"), Qn = Yn.Object, Zn = "Arguments" == Xn(function() {
        return arguments;
      }()), $n = qn ? Xn : function(e2) {
        var t2, i2, r2;
        return void 0 === e2 ? "Undefined" : null === e2 ? "Null" : "string" == typeof (i2 = function(e3, t3) {
          try {
            return e3[t3];
          } catch (e4) {
          }
        }(t2 = Qn(e2), zn)) ? i2 : Zn ? Xn(t2) : "Object" == (r2 = Xn(t2)) && Jn(t2.callee) ? "Arguments" : r2;
      }, eo = $n, to = Ce, io = jn, ro = nt("iterator"), no = function(e2) {
        if (null != e2)
          return to(e2, ro) || to(e2, "@@iterator") || io[eo(e2)];
      }, oo = I, so = Ie, ao = zt, co = Se, uo = no, lo = h.TypeError, ho = function(e2, t2) {
        var i2 = arguments.length < 2 ? uo(e2) : t2;
        if (so(i2))
          return ao(oo(i2, e2));
        throw lo(co(e2) + " is not iterable");
      }, po = I, _o = zt, Eo = Ce, fo = function(e2, t2, i2) {
        var r2, n2;
        _o(e2);
        try {
          if (!(r2 = Eo(e2, "return"))) {
            if ("throw" === t2)
              throw i2;
            return i2;
          }
          r2 = po(r2, e2);
        } catch (e3) {
          n2 = true, r2 = e3;
        }
        if ("throw" === t2)
          throw i2;
        if (n2)
          throw r2;
        return _o(r2), i2;
      }, mo = Wt, go = I, So = zt, To = Se, vo = Wn, Ro = wi, Io = u, yo = ho, Co = no, Ao = fo, Oo = h.TypeError, bo = function(e2, t2) {
        this.stopped = e2, this.result = t2;
      }, wo = bo.prototype, No = function(e2, t2, i2) {
        var r2, n2, o2, s2, a2, c2, d2, u2 = i2 && i2.that, l2 = !(!i2 || !i2.AS_ENTRIES), h2 = !(!i2 || !i2.IS_ITERATOR), p2 = !(!i2 || !i2.INTERRUPTED), _2 = mo(t2, u2), E2 = function(e3) {
          return r2 && Ao(r2, "normal", e3), new bo(true, e3);
        }, f2 = function(e3) {
          return l2 ? (So(e3), p2 ? _2(e3[0], e3[1], E2) : _2(e3[0], e3[1])) : p2 ? _2(e3, E2) : _2(e3);
        };
        if (h2)
          r2 = e2;
        else {
          if (!(n2 = Co(e2)))
            throw Oo(To(e2) + " is not iterable");
          if (vo(n2)) {
            for (o2 = 0, s2 = Ro(e2); s2 > o2; o2++)
              if ((a2 = f2(e2[o2])) && Io(wo, a2))
                return a2;
            return new bo(false);
          }
          r2 = yo(e2, n2);
        }
        for (c2 = r2.next; !(d2 = go(c2, r2)).done; ) {
          try {
            a2 = f2(d2.value);
          } catch (e3) {
            Ao(r2, "throw", e3);
          }
          if ("object" == typeof a2 && a2 && Io(wo, a2))
            return a2;
        }
        return new bo(false);
      }, Do = $n, Po = h.String, Lo = function(e2) {
        if ("Symbol" === Do(e2))
          throw TypeError("Cannot convert a Symbol value to a string");
        return Po(e2);
      }, ko = Lo, Mo = N, Uo = !i(function() {
        var e2 = Error("a");
        return !("stack" in e2) || (Object.defineProperty(e2, "stack", Mo(1, 7)), 7 !== e2.stack);
      }), xo = Ri, Vo = h, jo = u, Fo = Rr, Bo = Nr, Go = function(e2, t2, i2) {
        for (var r2 = sn(t2), n2 = cn.f, o2 = an.f, s2 = 0; s2 < r2.length; s2++) {
          var a2 = r2[s2];
          on(e2, a2) || i2 && on(i2, a2) || n2(e2, a2, o2(t2, a2));
        }
      }, Wo = Pn, Ho = ui, Ko = N, Yo = function(e2, t2) {
        if (Un && "string" == typeof e2)
          for (; t2--; )
            e2 = Ln(e2, Mn, "");
        return e2;
      }, qo = function(e2, t2) {
        xn(t2) && "cause" in t2 && Vn(e2, "cause", t2.cause);
      }, Jo = No, Xo = function(e2, t2) {
        return void 0 === e2 ? arguments.length < 2 ? "" : t2 : ko(e2);
      }, zo = Uo, Qo = nt("toStringTag"), Zo = Vo.Error, $o = [].push, es = function(e2, t2) {
        var i2, r2 = arguments.length > 2 ? arguments[2] : void 0, n2 = jo(ts, this);
        Bo ? i2 = Bo(new Zo(), n2 ? Fo(this) : ts) : (i2 = n2 ? this : Wo(ts), Ho(i2, Qo, "Error")), void 0 !== t2 && Ho(i2, "message", Xo(t2)), zo && Ho(i2, "stack", Yo(i2.stack, 1)), qo(i2, r2);
        var o2 = [];
        return Jo(e2, $o, { that: o2 }), Ho(i2, "errors", o2), i2;
      };
      Bo ? Bo(es, Zo) : Go(es, Zo, { name: true });
      var ts = es.prototype = Wo(Zo.prototype, { constructor: Ko(1, es), message: Ko(1, ""), name: Ko(1, "AggregateError") });
      xo({ global: true }, { AggregateError: es });
      var is = g, rs = Me, ns = d(Function.toString);
      is(rs.inspectSource) || (rs.inspectSource = function(e2) {
        return ns(e2);
      });
      var os, ss, as, cs = rs.inspectSource, ds = g, us = cs, ls = h.WeakMap, hs = ds(ls) && /native code/.test(us(ls)), ps = h, _s = d, Es = q, fs = ui, ms = Ge, gs = Me, Ss = hr, Ts = Br, vs = "Object already initialized", Rs = ps.TypeError, Is = ps.WeakMap;
      if (hs || gs.state) {
        var ys = gs.state || (gs.state = new Is()), Cs = _s(ys.get), As = _s(ys.has), Os = _s(ys.set);
        os = function(e2, t2) {
          if (As(ys, e2))
            throw new Rs(vs);
          return t2.facade = e2, Os(ys, e2, t2), t2;
        }, ss = function(e2) {
          return Cs(ys, e2) || {};
        }, as = function(e2) {
          return As(ys, e2);
        };
      } else {
        var bs = Ss("state");
        Ts[bs] = true, os = function(e2, t2) {
          if (ms(e2, bs))
            throw new Rs(vs);
          return t2.facade = e2, fs(e2, bs, t2), t2;
        }, ss = function(e2) {
          return ms(e2, bs) ? e2[bs] : {};
        }, as = function(e2) {
          return ms(e2, bs);
        };
      }
      var ws, Ns, Ds, Ps = { set: os, get: ss, has: as, enforce: function(e2) {
        return as(e2) ? ss(e2) : os(e2, {});
      }, getterFor: function(e2) {
        return function(t2) {
          var i2;
          if (!Es(t2) || (i2 = ss(t2)).type !== e2)
            throw Rs("Incompatible receiver, " + e2 + " required");
          return i2;
        };
      } }, Ls = T, ks = Ge, Ms = Function.prototype, Us = Ls && Object.getOwnPropertyDescriptor, xs = ks(Ms, "name"), Vs = { EXISTS: xs, PROPER: xs && "something" === function() {
      }.name, CONFIGURABLE: xs && (!Ls || Ls && Us(Ms, "name").configurable) }, js = ui, Fs = function(e2, t2, i2, r2) {
        r2 && r2.enumerable ? e2[t2] = i2 : js(e2, t2, i2);
      }, Bs = i, Gs = g, Ws = Pn, Hs = Rr, Ks = Fs, Ys = nt("iterator"), qs = false;
      [].keys && ("next" in (Ds = [].keys()) ? (Ns = Hs(Hs(Ds))) !== Object.prototype && (ws = Ns) : qs = true);
      var Js = null == ws || Bs(function() {
        var e2 = {};
        return ws[Ys].call(e2) !== e2;
      });
      Gs((ws = Js ? {} : Ws(ws))[Ys]) || Ks(ws, Ys, function() {
        return this;
      });
      var Xs = { IteratorPrototype: ws, BUGGY_SAFARI_ITERATORS: qs }, zs = $n, Qs = Kn ? {}.toString : function() {
        return "[object " + zs(this) + "]";
      }, Zs = Kn, $s = Ht.f, ea = ui, ta = Ge, ia = Qs, ra = nt("toStringTag"), na = function(e2, t2, i2, r2) {
        if (e2) {
          var n2 = i2 ? e2 : e2.prototype;
          ta(n2, ra) || $s(n2, ra, { configurable: true, value: t2 }), r2 && !Zs && ea(n2, "toString", ia);
        }
      }, oa = Xs.IteratorPrototype, sa = Pn, aa = N, ca = na, da = jn, ua = function() {
        return this;
      }, la = function(e2, t2, i2, r2) {
        var n2 = t2 + " Iterator";
        return e2.prototype = sa(oa, { next: aa(+!r2, i2) }), ca(e2, n2, false, true), da[n2] = ua, e2;
      }, ha = Ri, pa = I, _a = la, Ea = Rr, fa = na, ma = Fs, ga = jn, Sa = Vs.PROPER, Ta = Xs.BUGGY_SAFARI_ITERATORS, va = nt("iterator"), Ra = "keys", Ia = "values", ya = "entries", Ca = function() {
        return this;
      }, Aa = function(e2, t2, i2, r2, n2, o2, s2) {
        _a(i2, t2, r2);
        var a2, c2, d2, u2 = function(e3) {
          if (e3 === n2 && E2)
            return E2;
          if (!Ta && e3 in p2)
            return p2[e3];
          switch (e3) {
            case Ra:
            case Ia:
            case ya:
              return function() {
                return new i2(this, e3);
              };
          }
          return function() {
            return new i2(this);
          };
        }, l2 = t2 + " Iterator", h2 = false, p2 = e2.prototype, _2 = p2[va] || p2["@@iterator"] || n2 && p2[n2], E2 = !Ta && _2 || u2(n2), f2 = "Array" == t2 && p2.entries || _2;
        if (f2 && (a2 = Ea(f2.call(new e2()))) !== Object.prototype && a2.next && (fa(a2, l2, true, true), ga[l2] = Ca), Sa && n2 == Ia && _2 && _2.name !== Ia && (h2 = true, E2 = function() {
          return pa(_2, this);
        }), n2)
          if (c2 = { values: u2(Ia), keys: o2 ? E2 : u2(Ra), entries: u2(ya) }, s2)
            for (d2 in c2)
              (Ta || h2 || !(d2 in p2)) && ma(p2, d2, c2[d2]);
          else
            ha({ target: t2, proto: true, forced: Ta || h2 }, c2);
        return s2 && p2[va] !== E2 && ma(p2, va, E2, { name: n2 }), ga[t2] = E2, c2;
      }, Oa = K, ba = jn, wa = Ps;
      Ht.f;
      var Na = Aa, Da = "Array Iterator", Pa = wa.set, La = wa.getterFor(Da);
      Na(Array, "Array", function(e2, t2) {
        Pa(this, { type: Da, target: Oa(e2), index: 0, kind: t2 });
      }, function() {
        var e2 = La(this), t2 = e2.target, i2 = e2.kind, r2 = e2.index++;
        return !t2 || r2 >= t2.length ? (e2.target = void 0, { value: void 0, done: true }) : "keys" == i2 ? { value: r2, done: false } : "values" == i2 ? { value: t2[r2], done: false } : { value: [r2, t2[r2]], done: false };
      }, "values"), ba.Arguments = ba.Array;
      var ka = h.Promise, Ma = Fs, Ua = function(e2, t2, i2) {
        for (var r2 in t2)
          i2 && i2.unsafe && e2[r2] ? e2[r2] = t2[r2] : Ma(e2, r2, t2[r2], i2);
        return e2;
      }, xa = $, Va = Ht, ja = T, Fa = nt("species"), Ba = u, Ga = h.TypeError, Wa = function(e2, t2) {
        if (Ba(t2, e2))
          return e2;
        throw Ga("Incorrect invocation");
      }, Ha = nt("iterator"), Ka = false;
      try {
        var Ya = 0, qa = { next: function() {
          return { done: !!Ya++ };
        }, return: function() {
          Ka = true;
        } };
        qa[Ha] = function() {
          return this;
        }, Array.from(qa, function() {
          throw 2;
        });
      } catch (e2) {
      }
      var Ja = d, Xa = i, za = g, Qa = $n, Za = cs, $a = function() {
      }, ec = [], tc = $("Reflect", "construct"), ic = /^\s*(?:class|function)\b/, rc = Ja(ic.exec), nc = !ic.exec($a), oc = function(e2) {
        if (!za(e2))
          return false;
        try {
          return tc($a, ec, e2), true;
        } catch (e3) {
          return false;
        }
      }, sc = function(e2) {
        if (!za(e2))
          return false;
        switch (Qa(e2)) {
          case "AsyncFunction":
          case "GeneratorFunction":
          case "AsyncGeneratorFunction":
            return false;
        }
        try {
          return nc || !!rc(ic, Za(e2));
        } catch (e3) {
          return true;
        }
      };
      sc.sham = true;
      var ac, cc, dc, uc, lc = !tc || Xa(function() {
        var e2;
        return oc(oc.call) || !oc(Object) || !oc(function() {
          e2 = true;
        }) || e2;
      }) ? sc : oc, hc = lc, pc = Se, _c = h.TypeError, Ec = zt, fc = function(e2) {
        if (hc(e2))
          return e2;
        throw _c(pc(e2) + " is not a constructor");
      }, mc = nt("species"), gc = function(e2, t2) {
        var i2, r2 = Ec(e2).constructor;
        return void 0 === r2 || null == (i2 = Ec(r2)[mc]) ? t2 : fc(i2);
      }, Sc = d([].slice), Tc = /(?:ipad|iphone|ipod).*applewebkit/i.test(ee), vc = h, Rc = m, Ic = Wt, yc = g, Cc = Ge, Ac = i, Oc = Tn, bc = Sc, wc = St, Nc = Tc, Dc = ji, Pc = vc.setImmediate, Lc = vc.clearImmediate, kc = vc.process, Mc = vc.Dispatch, Uc = vc.Function, xc = vc.MessageChannel, Vc = vc.String, jc = 0, Fc = {}, Bc = "onreadystatechange";
      try {
        ac = vc.location;
      } catch (e2) {
      }
      var Gc = function(e2) {
        if (Cc(Fc, e2)) {
          var t2 = Fc[e2];
          delete Fc[e2], t2();
        }
      }, Wc = function(e2) {
        return function() {
          Gc(e2);
        };
      }, Hc = function(e2) {
        Gc(e2.data);
      }, Kc = function(e2) {
        vc.postMessage(Vc(e2), ac.protocol + "//" + ac.host);
      };
      Pc && Lc || (Pc = function(e2) {
        var t2 = bc(arguments, 1);
        return Fc[++jc] = function() {
          Rc(yc(e2) ? e2 : Uc(e2), void 0, t2);
        }, cc(jc), jc;
      }, Lc = function(e2) {
        delete Fc[e2];
      }, Dc ? cc = function(e2) {
        kc.nextTick(Wc(e2));
      } : Mc && Mc.now ? cc = function(e2) {
        Mc.now(Wc(e2));
      } : xc && !Nc ? (uc = (dc = new xc()).port2, dc.port1.onmessage = Hc, cc = Ic(uc.postMessage, uc)) : vc.addEventListener && yc(vc.postMessage) && !vc.importScripts && ac && "file:" !== ac.protocol && !Ac(Kc) ? (cc = Kc, vc.addEventListener("message", Hc, false)) : cc = Bc in wc("script") ? function(e2) {
        Oc.appendChild(wc("script")).onreadystatechange = function() {
          Oc.removeChild(this), Gc(e2);
        };
      } : function(e2) {
        setTimeout(Wc(e2), 0);
      });
      var Yc, qc, Jc, Xc, zc, Qc, Zc, $c, ed = { set: Pc, clear: Lc }, td = h, id = /ipad|iphone|ipod/i.test(ee) && void 0 !== td.Pebble, rd = /web0s(?!.*chrome)/i.test(ee), nd = h, od = Wt, sd = S.f, ad = ed.set, cd = Tc, dd = id, ud = rd, ld = ji, hd = nd.MutationObserver || nd.WebKitMutationObserver, pd = nd.document, _d = nd.process, Ed = nd.Promise, fd = sd(nd, "queueMicrotask"), md = fd && fd.value;
      md || (Yc = function() {
        var e2, t2;
        for (ld && (e2 = _d.domain) && e2.exit(); qc; ) {
          t2 = qc.fn, qc = qc.next;
          try {
            t2();
          } catch (e3) {
            throw qc ? Xc() : Jc = void 0, e3;
          }
        }
        Jc = void 0, e2 && e2.enter();
      }, cd || ld || ud || !hd || !pd ? !dd && Ed && Ed.resolve ? ((Zc = Ed.resolve(void 0)).constructor = Ed, $c = od(Zc.then, Zc), Xc = function() {
        $c(Yc);
      }) : ld ? Xc = function() {
        _d.nextTick(Yc);
      } : (ad = od(ad, nd), Xc = function() {
        ad(Yc);
      }) : (zc = true, Qc = pd.createTextNode(""), new hd(Yc).observe(Qc, { characterData: true }), Xc = function() {
        Qc.data = zc = !zc;
      }));
      var gd = md || function(e2) {
        var t2 = { fn: e2, next: void 0 };
        Jc && (Jc.next = t2), qc || (qc = t2, Xc()), Jc = t2;
      }, Sd = {}, Td = Ie, vd = function(e2) {
        var t2, i2;
        this.promise = new e2(function(e3, r2) {
          if (void 0 !== t2 || void 0 !== i2)
            throw TypeError("Bad Promise constructor");
          t2 = e3, i2 = r2;
        }), this.resolve = Td(t2), this.reject = Td(i2);
      };
      Sd.f = function(e2) {
        return new vd(e2);
      };
      var Rd = zt, Id = q, yd = Sd, Cd = function(e2, t2) {
        if (Rd(e2), Id(t2) && t2.constructor === e2)
          return t2;
        var i2 = yd.f(e2);
        return (0, i2.resolve)(t2), i2.promise;
      }, Ad = h, Od = function(e2) {
        try {
          return { error: false, value: e2() };
        } catch (e3) {
          return { error: true, value: e3 };
        }
      }, bd = function() {
        this.head = null, this.tail = null;
      };
      bd.prototype = { add: function(e2) {
        var t2 = { item: e2, next: null };
        this.head ? this.tail.next = t2 : this.head = t2, this.tail = t2;
      }, get: function() {
        var e2 = this.head;
        if (e2)
          return this.head = e2.next, this.tail === e2 && (this.tail = null), e2.item;
      } };
      var wd, Nd, Dd, Pd = "object" == typeof window, Ld = Ri, kd = h, Md = $, Ud = I, xd = ka, Vd = Ua, jd = na, Fd = function(e2) {
        var t2 = xa(e2), i2 = Va.f;
        ja && t2 && !t2[Fa] && i2(t2, Fa, { configurable: true, get: function() {
          return this;
        } });
      }, Bd = Ie, Gd = g, Wd = q, Hd = Wa, Kd = cs, Yd = No, qd = function(e2, t2) {
        if (!t2 && !Ka)
          return false;
        var i2 = false;
        try {
          var r2 = {};
          r2[Ha] = function() {
            return { next: function() {
              return { done: i2 = true };
            } };
          }, e2(r2);
        } catch (e3) {
        }
        return i2;
      }, Jd = gc, Xd = ed.set, zd = gd, Qd = Cd, Zd = function(e2, t2) {
        var i2 = Ad.console;
        i2 && i2.error && (1 == arguments.length ? i2.error(e2) : i2.error(e2, t2));
      }, $d = Sd, eu = Od, tu = bd, iu = Ps, ru = jt, nu = Pd, ou = ji, su = ae, au = nt("species"), cu = "Promise", du = iu.getterFor(cu), uu = iu.set, lu = iu.getterFor(cu), hu = xd && xd.prototype, pu = xd, _u = hu, Eu = kd.TypeError, fu = kd.document, mu = kd.process, gu = $d.f, Su = gu, Tu = !!(fu && fu.createEvent && kd.dispatchEvent), vu = Gd(kd.PromiseRejectionEvent), Ru = "unhandledrejection", Iu = ru(cu, function() {
        var e2 = Kd(pu), t2 = e2 !== String(pu);
        if (!t2 && 66 === su)
          return true;
        if (!_u.finally)
          return true;
        if (su >= 51 && /native code/.test(e2))
          return false;
        var i2 = new pu(function(e3) {
          e3(1);
        }), r2 = function(e3) {
          e3(function() {
          }, function() {
          });
        };
        return (i2.constructor = {})[au] = r2, !(i2.then(function() {
        }) instanceof r2) || !t2 && nu && !vu;
      }), yu = Iu || !qd(function(e2) {
        pu.all(e2).catch(function() {
        });
      }), Cu = function(e2) {
        var t2;
        return !(!Wd(e2) || !Gd(t2 = e2.then)) && t2;
      }, Au = function(e2, t2) {
        var i2, r2, n2, o2 = t2.value, s2 = 1 == t2.state, a2 = s2 ? e2.ok : e2.fail, c2 = e2.resolve, d2 = e2.reject, u2 = e2.domain;
        try {
          a2 ? (s2 || (2 === t2.rejection && Du(t2), t2.rejection = 1), true === a2 ? i2 = o2 : (u2 && u2.enter(), i2 = a2(o2), u2 && (u2.exit(), n2 = true)), i2 === e2.promise ? d2(Eu("Promise-chain cycle")) : (r2 = Cu(i2)) ? Ud(r2, i2, c2, d2) : c2(i2)) : d2(o2);
        } catch (e3) {
          u2 && !n2 && u2.exit(), d2(e3);
        }
      }, Ou = function(e2, t2) {
        e2.notified || (e2.notified = true, zd(function() {
          for (var i2, r2 = e2.reactions; i2 = r2.get(); )
            Au(i2, e2);
          e2.notified = false, t2 && !e2.rejection && wu(e2);
        }));
      }, bu = function(e2, t2, i2) {
        var r2, n2;
        Tu ? ((r2 = fu.createEvent("Event")).promise = t2, r2.reason = i2, r2.initEvent(e2, false, true), kd.dispatchEvent(r2)) : r2 = { promise: t2, reason: i2 }, !vu && (n2 = kd["on" + e2]) ? n2(r2) : e2 === Ru && Zd("Unhandled promise rejection", i2);
      }, wu = function(e2) {
        Ud(Xd, kd, function() {
          var t2, i2 = e2.facade, r2 = e2.value;
          if (Nu(e2) && (t2 = eu(function() {
            ou ? mu.emit("unhandledRejection", r2, i2) : bu(Ru, i2, r2);
          }), e2.rejection = ou || Nu(e2) ? 2 : 1, t2.error))
            throw t2.value;
        });
      }, Nu = function(e2) {
        return 1 !== e2.rejection && !e2.parent;
      }, Du = function(e2) {
        Ud(Xd, kd, function() {
          var t2 = e2.facade;
          ou ? mu.emit("rejectionHandled", t2) : bu("rejectionhandled", t2, e2.value);
        });
      }, Pu = function(e2, t2, i2) {
        return function(r2) {
          e2(t2, r2, i2);
        };
      }, Lu = function(e2, t2, i2) {
        e2.done || (e2.done = true, i2 && (e2 = i2), e2.value = t2, e2.state = 2, Ou(e2, true));
      }, ku = function(e2, t2, i2) {
        if (!e2.done) {
          e2.done = true, i2 && (e2 = i2);
          try {
            if (e2.facade === t2)
              throw Eu("Promise can't be resolved itself");
            var r2 = Cu(t2);
            r2 ? zd(function() {
              var i3 = { done: false };
              try {
                Ud(r2, t2, Pu(ku, i3, e2), Pu(Lu, i3, e2));
              } catch (t3) {
                Lu(i3, t3, e2);
              }
            }) : (e2.value = t2, e2.state = 1, Ou(e2, false));
          } catch (t3) {
            Lu({ done: false }, t3, e2);
          }
        }
      };
      Iu && (_u = (pu = function(e2) {
        Hd(this, _u), Bd(e2), Ud(wd, this);
        var t2 = du(this);
        try {
          e2(Pu(ku, t2), Pu(Lu, t2));
        } catch (e3) {
          Lu(t2, e3);
        }
      }).prototype, (wd = function(e2) {
        uu(this, { type: cu, done: false, notified: false, parent: false, reactions: new tu(), rejection: false, state: 0, value: void 0 });
      }).prototype = Vd(_u, { then: function(e2, t2) {
        var i2 = lu(this), r2 = gu(Jd(this, pu));
        return i2.parent = true, r2.ok = !Gd(e2) || e2, r2.fail = Gd(t2) && t2, r2.domain = ou ? mu.domain : void 0, 0 == i2.state ? i2.reactions.add(r2) : zd(function() {
          Au(r2, i2);
        }), r2.promise;
      }, catch: function(e2) {
        return this.then(void 0, e2);
      } }), Nd = function() {
        var e2 = new wd(), t2 = du(e2);
        this.promise = e2, this.resolve = Pu(ku, t2), this.reject = Pu(Lu, t2);
      }, $d.f = gu = function(e2) {
        return e2 === pu || e2 === Dd ? new Nd(e2) : Su(e2);
      }), Ld({ global: true, wrap: true, forced: Iu }, { Promise: pu }), jd(pu, cu, false, true), Fd(cu), Dd = Md(cu), Ld({ target: cu, stat: true, forced: Iu }, { reject: function(e2) {
        var t2 = gu(this);
        return Ud(t2.reject, void 0, e2), t2.promise;
      } }), Ld({ target: cu, stat: true, forced: true }, { resolve: function(e2) {
        return Qd(this === Dd ? pu : this, e2);
      } }), Ld({ target: cu, stat: true, forced: yu }, { all: function(e2) {
        var t2 = this, i2 = gu(t2), r2 = i2.resolve, n2 = i2.reject, o2 = eu(function() {
          var i3 = Bd(t2.resolve), o3 = [], s2 = 0, a2 = 1;
          Yd(e2, function(e3) {
            var c2 = s2++, d2 = false;
            a2++, Ud(i3, t2, e3).then(function(e4) {
              d2 || (d2 = true, o3[c2] = e4, --a2 || r2(o3));
            }, n2);
          }), --a2 || r2(o3);
        });
        return o2.error && n2(o2.value), i2.promise;
      }, race: function(e2) {
        var t2 = this, i2 = gu(t2), r2 = i2.reject, n2 = eu(function() {
          var n3 = Bd(t2.resolve);
          Yd(e2, function(e3) {
            Ud(n3, t2, e3).then(i2.resolve, r2);
          });
        });
        return n2.error && r2(n2.value), i2.promise;
      } });
      var Mu = I, Uu = Ie, xu = Sd, Vu = Od, ju = No;
      Ri({ target: "Promise", stat: true }, { allSettled: function(e2) {
        var t2 = this, i2 = xu.f(t2), r2 = i2.resolve, n2 = i2.reject, o2 = Vu(function() {
          var i3 = Uu(t2.resolve), n3 = [], o3 = 0, s2 = 1;
          ju(e2, function(e3) {
            var a2 = o3++, c2 = false;
            s2++, Mu(i3, t2, e3).then(function(e4) {
              c2 || (c2 = true, n3[a2] = { status: "fulfilled", value: e4 }, --s2 || r2(n3));
            }, function(e4) {
              c2 || (c2 = true, n3[a2] = { status: "rejected", reason: e4 }, --s2 || r2(n3));
            });
          }), --s2 || r2(n3);
        });
        return o2.error && n2(o2.value), i2.promise;
      } });
      var Fu = Ie, Bu = $, Gu = I, Wu = Sd, Hu = Od, Ku = No, Yu = "No one promise resolved";
      Ri({ target: "Promise", stat: true }, { any: function(e2) {
        var t2 = this, i2 = Bu("AggregateError"), r2 = Wu.f(t2), n2 = r2.resolve, o2 = r2.reject, s2 = Hu(function() {
          var r3 = Fu(t2.resolve), s3 = [], a2 = 0, c2 = 1, d2 = false;
          Ku(e2, function(e3) {
            var u2 = a2++, l2 = false;
            c2++, Gu(r3, t2, e3).then(function(e4) {
              l2 || d2 || (d2 = true, n2(e4));
            }, function(e4) {
              l2 || d2 || (l2 = true, s3[u2] = e4, --c2 || o2(new i2(s3, Yu)));
            });
          }), --c2 || o2(new i2(s3, Yu));
        });
        return s2.error && o2(s2.value), r2.promise;
      } });
      var qu = ka, Ju = $, Xu = g, zu = gc, Qu = Cd;
      Ri({ target: "Promise", proto: true, real: true, forced: !!qu && i(function() {
        qu.prototype.finally.call({ then: function() {
        } }, function() {
        });
      }) }, { finally: function(e2) {
        var t2 = zu(this, Ju("Promise")), i2 = Xu(e2);
        return this.then(i2 ? function(i3) {
          return Qu(t2, e2()).then(function() {
            return i3;
          });
        } : e2, i2 ? function(i3) {
          return Qu(t2, e2()).then(function() {
            throw i3;
          });
        } : e2);
      } });
      var Zu = d, $u = Ci, el = Lo, tl = G, il = Zu("".charAt), rl = Zu("".charCodeAt), nl = Zu("".slice), ol = function(e2) {
        return function(t2, i2) {
          var r2, n2, o2 = el(tl(t2)), s2 = $u(i2), a2 = o2.length;
          return s2 < 0 || s2 >= a2 ? e2 ? "" : void 0 : (r2 = rl(o2, s2)) < 55296 || r2 > 56319 || s2 + 1 === a2 || (n2 = rl(o2, s2 + 1)) < 56320 || n2 > 57343 ? e2 ? il(o2, s2) : r2 : e2 ? nl(o2, s2, s2 + 2) : n2 - 56320 + (r2 - 55296 << 10) + 65536;
        };
      }, sl = { codeAt: ol(false), charAt: ol(true) }, al = sl.charAt, cl = Lo, dl = Ps, ul = Aa, ll = "String Iterator", hl = dl.set, pl = dl.getterFor(ll);
      ul(String, "String", function(e2) {
        hl(this, { type: ll, string: cl(e2), index: 0 });
      }, function() {
        var e2, t2 = pl(this), i2 = t2.string, r2 = t2.index;
        return r2 >= i2.length ? { value: void 0, done: true } : (e2 = al(i2, r2), t2.index += e2.length, { value: e2, done: false });
      });
      var _l = J.Promise, El = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 }, fl = h, ml = $n, gl = ui, Sl = jn, Tl = nt("toStringTag");
      for (var vl in El) {
        var Rl = fl[vl], Il = Rl && Rl.prototype;
        Il && ml(Il) !== Tl && gl(Il, Tl, vl), Sl[vl] = Sl.Array;
      }
      var yl = _l, Cl = yl;
      const Al = rr;
      function Ol(e2, t2) {
        const i2 = e2 && e2.navigator;
        if (!i2.mediaDevices)
          return;
        const r2 = function(e3) {
          if ("object" != typeof e3 || e3.mandatory || e3.optional)
            return e3;
          const t3 = {};
          return Object.keys(e3).forEach((i3) => {
            if ("require" === i3 || "advanced" === i3 || "mediaSource" === i3)
              return;
            const r3 = "object" == typeof e3[i3] ? e3[i3] : { ideal: e3[i3] };
            void 0 !== r3.exact && "number" == typeof r3.exact && (r3.min = r3.max = r3.exact);
            const n3 = function(e4, t4) {
              return e4 ? e4 + t4.charAt(0).toUpperCase() + t4.slice(1) : "deviceId" === t4 ? "sourceId" : t4;
            };
            if (void 0 !== r3.ideal) {
              t3.optional = t3.optional || [];
              let e4 = {};
              "number" == typeof r3.ideal ? (e4[n3("min", i3)] = r3.ideal, t3.optional.push(e4), e4 = {}, e4[n3("max", i3)] = r3.ideal, t3.optional.push(e4)) : (e4[n3("", i3)] = r3.ideal, t3.optional.push(e4));
            }
            void 0 !== r3.exact && "number" != typeof r3.exact ? (t3.mandatory = t3.mandatory || {}, t3.mandatory[n3("", i3)] = r3.exact) : ["min", "max"].forEach((e4) => {
              void 0 !== r3[e4] && (t3.mandatory = t3.mandatory || {}, t3.mandatory[n3(e4, i3)] = r3[e4]);
            });
          }), e3.advanced && (t3.optional = (t3.optional || []).concat(e3.advanced)), t3;
        }, n2 = function(e3, n3) {
          if (t2.version >= 61)
            return n3(e3);
          if ((e3 = JSON.parse(JSON.stringify(e3))) && "object" == typeof e3.audio) {
            const t3 = function(e4, t4, i3) {
              t4 in e4 && !(i3 in e4) && (e4[i3] = e4[t4], delete e4[t4]);
            };
            t3((e3 = JSON.parse(JSON.stringify(e3))).audio, "autoGainControl", "googAutoGainControl"), t3(e3.audio, "noiseSuppression", "googNoiseSuppression"), e3.audio = r2(e3.audio);
          }
          if (e3 && "object" == typeof e3.video) {
            let o3 = e3.video.facingMode;
            o3 = o3 && ("object" == typeof o3 ? o3 : { ideal: o3 });
            const s2 = t2.version < 66;
            if (o3 && ("user" === o3.exact || "environment" === o3.exact || "user" === o3.ideal || "environment" === o3.ideal) && (!i2.mediaDevices.getSupportedConstraints || !i2.mediaDevices.getSupportedConstraints().facingMode || s2)) {
              let t3;
              if (delete e3.video.facingMode, "environment" === o3.exact || "environment" === o3.ideal ? t3 = ["back", "rear"] : "user" !== o3.exact && "user" !== o3.ideal || (t3 = ["front"]), t3)
                return i2.mediaDevices.enumerateDevices().then((i3) => {
                  let s3 = (i3 = i3.filter((e4) => "videoinput" === e4.kind)).find((e4) => t3.some((t4) => e4.label.toLowerCase().includes(t4)));
                  return !s3 && i3.length && t3.includes("back") && (s3 = i3[i3.length - 1]), s3 && (e3.video.deviceId = o3.exact ? { exact: s3.deviceId } : { ideal: s3.deviceId }), e3.video = r2(e3.video), Al("chrome: " + JSON.stringify(e3)), n3(e3);
                });
            }
            e3.video = r2(e3.video);
          }
          return Al("chrome: " + JSON.stringify(e3)), n3(e3);
        }, o2 = function(e3) {
          return t2.version >= 64 ? e3 : { name: { PermissionDeniedError: "NotAllowedError", PermissionDismissedError: "NotAllowedError", InvalidStateError: "NotAllowedError", DevicesNotFoundError: "NotFoundError", ConstraintNotSatisfiedError: "OverconstrainedError", TrackStartError: "NotReadableError", MediaDeviceFailedDueToShutdown: "NotAllowedError", MediaDeviceKillSwitchOn: "NotAllowedError", TabCaptureError: "AbortError", ScreenCaptureError: "AbortError", DeviceCaptureError: "AbortError" }[e3.name] || e3.name, message: e3.message, constraint: e3.constraint || e3.constraintName, toString() {
            return this.name + (this.message && ": ") + this.message;
          } };
        };
        if (i2.getUserMedia = function(e3, t3, r3) {
          n2(e3, (e4) => {
            i2.webkitGetUserMedia(e4, t3, (e5) => {
              r3 && r3(o2(e5));
            });
          });
        }.bind(i2), i2.mediaDevices.getUserMedia) {
          const e3 = i2.mediaDevices.getUserMedia.bind(i2.mediaDevices);
          i2.mediaDevices.getUserMedia = function(t3) {
            return n2(t3, (t4) => e3(t4).then((e4) => {
              if (t4.audio && !e4.getAudioTracks().length || t4.video && !e4.getVideoTracks().length)
                throw e4.getTracks().forEach((e5) => {
                  e5.stop();
                }), new DOMException("", "NotFoundError");
              return e4;
            }, (e4) => Cl.reject(o2(e4))));
          };
        }
      }
      function bl(e2) {
        e2.MediaStream = e2.MediaStream || e2.webkitMediaStream;
      }
      function wl(e2) {
        if ("object" == typeof e2 && e2.RTCPeerConnection && !("ontrack" in e2.RTCPeerConnection.prototype)) {
          Object.defineProperty(e2.RTCPeerConnection.prototype, "ontrack", { get() {
            return this._ontrack;
          }, set(e3) {
            this._ontrack && this.removeEventListener("track", this._ontrack), this.addEventListener("track", this._ontrack = e3);
          }, enumerable: true, configurable: true });
          const t2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
          e2.RTCPeerConnection.prototype.setRemoteDescription = function() {
            return this._ontrackpoly || (this._ontrackpoly = (t3) => {
              t3.stream.addEventListener("addtrack", (i2) => {
                let r2;
                r2 = e2.RTCPeerConnection.prototype.getReceivers ? this.getReceivers().find((e3) => e3.track && e3.track.id === i2.track.id) : { track: i2.track };
                const n2 = new Event("track");
                n2.track = i2.track, n2.receiver = r2, n2.transceiver = { receiver: r2 }, n2.streams = [t3.stream], this.dispatchEvent(n2);
              }), t3.stream.getTracks().forEach((i2) => {
                let r2;
                r2 = e2.RTCPeerConnection.prototype.getReceivers ? this.getReceivers().find((e3) => e3.track && e3.track.id === i2.id) : { track: i2 };
                const n2 = new Event("track");
                n2.track = i2, n2.receiver = r2, n2.transceiver = { receiver: r2 }, n2.streams = [t3.stream], this.dispatchEvent(n2);
              });
            }, this.addEventListener("addstream", this._ontrackpoly)), t2.apply(this, arguments);
          };
        } else
          er(e2, "track", (e3) => (e3.transceiver || Object.defineProperty(e3, "transceiver", { value: { receiver: e3.receiver } }), e3));
      }
      function Nl(e2) {
        if ("object" == typeof e2 && e2.RTCPeerConnection && !("getSenders" in e2.RTCPeerConnection.prototype) && "createDTMFSender" in e2.RTCPeerConnection.prototype) {
          const t2 = function(e3, t3) {
            return { track: t3, get dtmf() {
              return void 0 === this._dtmf && ("audio" === t3.kind ? this._dtmf = e3.createDTMFSender(t3) : this._dtmf = null), this._dtmf;
            }, _pc: e3 };
          };
          if (!e2.RTCPeerConnection.prototype.getSenders) {
            e2.RTCPeerConnection.prototype.getSenders = function() {
              return this._senders = this._senders || [], this._senders.slice();
            };
            const i3 = e2.RTCPeerConnection.prototype.addTrack;
            e2.RTCPeerConnection.prototype.addTrack = function(e3, r4) {
              let n2 = i3.apply(this, arguments);
              return n2 || (n2 = t2(this, e3), this._senders.push(n2)), n2;
            };
            const r3 = e2.RTCPeerConnection.prototype.removeTrack;
            e2.RTCPeerConnection.prototype.removeTrack = function(e3) {
              r3.apply(this, arguments);
              const t3 = this._senders.indexOf(e3);
              -1 !== t3 && this._senders.splice(t3, 1);
            };
          }
          const i2 = e2.RTCPeerConnection.prototype.addStream;
          e2.RTCPeerConnection.prototype.addStream = function(e3) {
            this._senders = this._senders || [], i2.apply(this, [e3]), e3.getTracks().forEach((e4) => {
              this._senders.push(t2(this, e4));
            });
          };
          const r2 = e2.RTCPeerConnection.prototype.removeStream;
          e2.RTCPeerConnection.prototype.removeStream = function(e3) {
            this._senders = this._senders || [], r2.apply(this, [e3]), e3.getTracks().forEach((e4) => {
              const t3 = this._senders.find((t4) => t4.track === e4);
              t3 && this._senders.splice(this._senders.indexOf(t3), 1);
            });
          };
        } else if ("object" == typeof e2 && e2.RTCPeerConnection && "getSenders" in e2.RTCPeerConnection.prototype && "createDTMFSender" in e2.RTCPeerConnection.prototype && e2.RTCRtpSender && !("dtmf" in e2.RTCRtpSender.prototype)) {
          const t2 = e2.RTCPeerConnection.prototype.getSenders;
          e2.RTCPeerConnection.prototype.getSenders = function() {
            const e3 = t2.apply(this, []);
            return e3.forEach((e4) => e4._pc = this), e3;
          }, Object.defineProperty(e2.RTCRtpSender.prototype, "dtmf", { get() {
            return void 0 === this._dtmf && ("audio" === this.track.kind ? this._dtmf = this._pc.createDTMFSender(this.track) : this._dtmf = null), this._dtmf;
          } });
        }
      }
      function Dl(e2) {
        if (!e2.RTCPeerConnection)
          return;
        const t2 = e2.RTCPeerConnection.prototype.getStats;
        e2.RTCPeerConnection.prototype.getStats = function() {
          const [e3, i2, r2] = arguments;
          if (arguments.length > 0 && "function" == typeof e3)
            return t2.apply(this, arguments);
          if (0 === t2.length && (0 === arguments.length || "function" != typeof e3))
            return t2.apply(this, []);
          const n2 = function(e4) {
            const t3 = {};
            return e4.result().forEach((e5) => {
              const i3 = { id: e5.id, timestamp: e5.timestamp, type: { localcandidate: "local-candidate", remotecandidate: "remote-candidate" }[e5.type] || e5.type };
              e5.names().forEach((t4) => {
                i3[t4] = e5.stat(t4);
              }), t3[i3.id] = i3;
            }), t3;
          }, o2 = function(e4) {
            return new Map(Object.keys(e4).map((t3) => [t3, e4[t3]]));
          };
          if (arguments.length >= 2) {
            const r3 = function(e4) {
              i2(o2(n2(e4)));
            };
            return t2.apply(this, [r3, e3]);
          }
          return new Cl((e4, i3) => {
            t2.apply(this, [function(t3) {
              e4(o2(n2(t3)));
            }, i3]);
          }).then(i2, r2);
        };
      }
      function Pl(e2) {
        if (!("object" == typeof e2 && e2.RTCPeerConnection && e2.RTCRtpSender && e2.RTCRtpReceiver))
          return;
        if (!("getStats" in e2.RTCRtpSender.prototype)) {
          const t3 = e2.RTCPeerConnection.prototype.getSenders;
          t3 && (e2.RTCPeerConnection.prototype.getSenders = function() {
            const e3 = t3.apply(this, []);
            return e3.forEach((e4) => e4._pc = this), e3;
          });
          const i2 = e2.RTCPeerConnection.prototype.addTrack;
          i2 && (e2.RTCPeerConnection.prototype.addTrack = function() {
            const e3 = i2.apply(this, arguments);
            return e3._pc = this, e3;
          }), e2.RTCRtpSender.prototype.getStats = function() {
            const e3 = this;
            return this._pc.getStats().then((t4) => cr(t4, e3.track, true));
          };
        }
        if (!("getStats" in e2.RTCRtpReceiver.prototype)) {
          const t3 = e2.RTCPeerConnection.prototype.getReceivers;
          t3 && (e2.RTCPeerConnection.prototype.getReceivers = function() {
            const e3 = t3.apply(this, []);
            return e3.forEach((e4) => e4._pc = this), e3;
          }), er(e2, "track", (e3) => (e3.receiver._pc = e3.srcElement, e3)), e2.RTCRtpReceiver.prototype.getStats = function() {
            const e3 = this;
            return this._pc.getStats().then((t4) => cr(t4, e3.track, false));
          };
        }
        if (!("getStats" in e2.RTCRtpSender.prototype) || !("getStats" in e2.RTCRtpReceiver.prototype))
          return;
        const t2 = e2.RTCPeerConnection.prototype.getStats;
        e2.RTCPeerConnection.prototype.getStats = function() {
          if (arguments.length > 0 && arguments[0] instanceof e2.MediaStreamTrack) {
            const e3 = arguments[0];
            let t3, i2, r2;
            return this.getSenders().forEach((i3) => {
              i3.track === e3 && (t3 ? r2 = true : t3 = i3);
            }), this.getReceivers().forEach((t4) => (t4.track === e3 && (i2 ? r2 = true : i2 = t4), t4.track === e3)), r2 || t3 && i2 ? Cl.reject(new DOMException("There are more than one sender or receiver for the track.", "InvalidAccessError")) : t3 ? t3.getStats() : i2 ? i2.getStats() : Cl.reject(new DOMException("There is no sender or receiver for the track.", "InvalidAccessError"));
          }
          return t2.apply(this, arguments);
        };
      }
      function Ll(e2) {
        e2.RTCPeerConnection.prototype.getLocalStreams = function() {
          return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, Object.keys(this._shimmedLocalStreams).map((e3) => this._shimmedLocalStreams[e3][0]);
        };
        const t2 = e2.RTCPeerConnection.prototype.addTrack;
        e2.RTCPeerConnection.prototype.addTrack = function(e3, i3) {
          if (!i3)
            return t2.apply(this, arguments);
          this._shimmedLocalStreams = this._shimmedLocalStreams || {};
          const r3 = t2.apply(this, arguments);
          return this._shimmedLocalStreams[i3.id] ? -1 === this._shimmedLocalStreams[i3.id].indexOf(r3) && this._shimmedLocalStreams[i3.id].push(r3) : this._shimmedLocalStreams[i3.id] = [i3, r3], r3;
        };
        const i2 = e2.RTCPeerConnection.prototype.addStream;
        e2.RTCPeerConnection.prototype.addStream = function(e3) {
          this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e3.getTracks().forEach((e4) => {
            if (this.getSenders().find((t4) => t4.track === e4))
              throw new DOMException("Track already exists.", "InvalidAccessError");
          });
          const t3 = this.getSenders();
          i2.apply(this, arguments);
          const r3 = this.getSenders().filter((e4) => -1 === t3.indexOf(e4));
          this._shimmedLocalStreams[e3.id] = [e3].concat(r3);
        };
        const r2 = e2.RTCPeerConnection.prototype.removeStream;
        e2.RTCPeerConnection.prototype.removeStream = function(e3) {
          return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, delete this._shimmedLocalStreams[e3.id], r2.apply(this, arguments);
        };
        const n2 = e2.RTCPeerConnection.prototype.removeTrack;
        e2.RTCPeerConnection.prototype.removeTrack = function(e3) {
          return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e3 && Object.keys(this._shimmedLocalStreams).forEach((t3) => {
            const i3 = this._shimmedLocalStreams[t3].indexOf(e3);
            -1 !== i3 && this._shimmedLocalStreams[t3].splice(i3, 1), 1 === this._shimmedLocalStreams[t3].length && delete this._shimmedLocalStreams[t3];
          }), n2.apply(this, arguments);
        };
      }
      function kl(e2, t2) {
        if (!e2.RTCPeerConnection)
          return;
        if (e2.RTCPeerConnection.prototype.addTrack && t2.version >= 65)
          return Ll(e2);
        const i2 = e2.RTCPeerConnection.prototype.getLocalStreams;
        e2.RTCPeerConnection.prototype.getLocalStreams = function() {
          const e3 = i2.apply(this);
          return this._reverseStreams = this._reverseStreams || {}, e3.map((e4) => this._reverseStreams[e4.id]);
        };
        const r2 = e2.RTCPeerConnection.prototype.addStream;
        e2.RTCPeerConnection.prototype.addStream = function(t3) {
          if (this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, t3.getTracks().forEach((e3) => {
            if (this.getSenders().find((t4) => t4.track === e3))
              throw new DOMException("Track already exists.", "InvalidAccessError");
          }), !this._reverseStreams[t3.id]) {
            const i3 = new e2.MediaStream(t3.getTracks());
            this._streams[t3.id] = i3, this._reverseStreams[i3.id] = t3, t3 = i3;
          }
          r2.apply(this, [t3]);
        };
        const n2 = e2.RTCPeerConnection.prototype.removeStream;
        function o2(e3, t3) {
          let i3 = t3.sdp;
          return Object.keys(e3._reverseStreams || []).forEach((t4) => {
            const r3 = e3._reverseStreams[t4], n3 = e3._streams[r3.id];
            i3 = i3.replace(new RegExp(n3.id, "g"), r3.id);
          }), new RTCSessionDescription({ type: t3.type, sdp: i3 });
        }
        function s2(e3, t3) {
          let i3 = t3.sdp;
          return Object.keys(e3._reverseStreams || []).forEach((t4) => {
            const r3 = e3._reverseStreams[t4], n3 = e3._streams[r3.id];
            i3 = i3.replace(new RegExp(r3.id, "g"), n3.id);
          }), new RTCSessionDescription({ type: t3.type, sdp: i3 });
        }
        e2.RTCPeerConnection.prototype.removeStream = function(e3) {
          this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, n2.apply(this, [this._streams[e3.id] || e3]), delete this._reverseStreams[this._streams[e3.id] ? this._streams[e3.id].id : e3.id], delete this._streams[e3.id];
        }, e2.RTCPeerConnection.prototype.addTrack = function(t3, i3) {
          if ("closed" === this.signalingState)
            throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
          const r3 = [].slice.call(arguments, 1);
          if (1 !== r3.length || !r3[0].getTracks().find((e3) => e3 === t3))
            throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.", "NotSupportedError");
          const n3 = this.getSenders().find((e3) => e3.track === t3);
          if (n3)
            throw new DOMException("Track already exists.", "InvalidAccessError");
          this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {};
          const o3 = this._streams[i3.id];
          if (o3)
            o3.addTrack(t3), Cl.resolve().then(() => {
              this.dispatchEvent(new Event("negotiationneeded"));
            });
          else {
            const r4 = new e2.MediaStream([t3]);
            this._streams[i3.id] = r4, this._reverseStreams[r4.id] = i3, this.addStream(r4);
          }
          return this.getSenders().find((e3) => e3.track === t3);
        }, ["createOffer", "createAnswer"].forEach(function(t3) {
          const i3 = e2.RTCPeerConnection.prototype[t3], r3 = { [t3]() {
            const e3 = arguments;
            return arguments.length && "function" == typeof arguments[0] ? i3.apply(this, [(t4) => {
              const i4 = o2(this, t4);
              e3[0].apply(null, [i4]);
            }, (t4) => {
              e3[1] && e3[1].apply(null, t4);
            }, arguments[2]]) : i3.apply(this, arguments).then((e4) => o2(this, e4));
          } };
          e2.RTCPeerConnection.prototype[t3] = r3[t3];
        });
        const a2 = e2.RTCPeerConnection.prototype.setLocalDescription;
        e2.RTCPeerConnection.prototype.setLocalDescription = function() {
          return arguments.length && arguments[0].type ? (arguments[0] = s2(this, arguments[0]), a2.apply(this, arguments)) : a2.apply(this, arguments);
        };
        const c2 = Object.getOwnPropertyDescriptor(e2.RTCPeerConnection.prototype, "localDescription");
        Object.defineProperty(e2.RTCPeerConnection.prototype, "localDescription", { get() {
          const e3 = c2.get.apply(this);
          return "" === e3.type ? e3 : o2(this, e3);
        } }), e2.RTCPeerConnection.prototype.removeTrack = function(e3) {
          if ("closed" === this.signalingState)
            throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
          if (!e3._pc)
            throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.", "TypeError");
          if (!(e3._pc === this))
            throw new DOMException("Sender was not created by this connection.", "InvalidAccessError");
          let t3;
          this._streams = this._streams || {}, Object.keys(this._streams).forEach((i3) => {
            this._streams[i3].getTracks().find((t4) => e3.track === t4) && (t3 = this._streams[i3]);
          }), t3 && (1 === t3.getTracks().length ? this.removeStream(this._reverseStreams[t3.id]) : t3.removeTrack(e3.track), this.dispatchEvent(new Event("negotiationneeded")));
        };
      }
      function Ml(e2, t2) {
        !e2.RTCPeerConnection && e2.webkitRTCPeerConnection && (e2.RTCPeerConnection = e2.webkitRTCPeerConnection), e2.RTCPeerConnection && t2.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(t3) {
          const i2 = e2.RTCPeerConnection.prototype[t3], r2 = { [t3]() {
            return arguments[0] = new ("addIceCandidate" === t3 ? e2.RTCIceCandidate : e2.RTCSessionDescription)(arguments[0]), i2.apply(this, arguments);
          } };
          e2.RTCPeerConnection.prototype[t3] = r2[t3];
        });
      }
      function Ul(e2, t2) {
        er(e2, "negotiationneeded", (e3) => {
          const i2 = e3.target;
          if (!(t2.version < 72 || i2.getConfiguration && "plan-b" === i2.getConfiguration().sdpSemantics) || "stable" === i2.signalingState)
            return e3;
        });
      }
      var xl = Object.freeze({ __proto__: null, shimMediaStream: bl, shimOnTrack: wl, shimGetSendersWithDtmf: Nl, shimGetStats: Dl, shimSenderReceiverGetStats: Pl, shimAddTrackRemoveTrackWithNative: Ll, shimAddTrackRemoveTrack: kl, shimPeerConnection: Ml, fixNegotiationNeeded: Ul, shimGetUserMedia: Ol, shimGetDisplayMedia: function(e2, t2) {
        e2.navigator.mediaDevices && "getDisplayMedia" in e2.navigator.mediaDevices || e2.navigator.mediaDevices && ("function" == typeof t2 ? e2.navigator.mediaDevices.getDisplayMedia = function(i2) {
          return t2(i2).then((t3) => {
            const r2 = i2.video && i2.video.width, n2 = i2.video && i2.video.height, o2 = i2.video && i2.video.frameRate;
            return i2.video = { mandatory: { chromeMediaSource: "desktop", chromeMediaSourceId: t3, maxFrameRate: o2 || 3 } }, r2 && (i2.video.mandatory.maxWidth = r2), n2 && (i2.video.mandatory.maxHeight = n2), e2.navigator.mediaDevices.getUserMedia(i2);
          });
        } : console.error("shimGetDisplayMedia: getSourceId argument is not a function"));
      } });
      function Vl(e2, t2) {
        const i2 = e2 && e2.navigator, r2 = e2 && e2.MediaStreamTrack;
        if (i2.getUserMedia = function(e3, t3, r3) {
          nr("navigator.getUserMedia", "navigator.mediaDevices.getUserMedia"), i2.mediaDevices.getUserMedia(e3).then(t3, r3);
        }, !(t2.version > 55 && "autoGainControl" in i2.mediaDevices.getSupportedConstraints())) {
          const e3 = function(e4, t4, i3) {
            t4 in e4 && !(i3 in e4) && (e4[i3] = e4[t4], delete e4[t4]);
          }, t3 = i2.mediaDevices.getUserMedia.bind(i2.mediaDevices);
          if (i2.mediaDevices.getUserMedia = function(i3) {
            return "object" == typeof i3 && "object" == typeof i3.audio && (i3 = JSON.parse(JSON.stringify(i3)), e3(i3.audio, "autoGainControl", "mozAutoGainControl"), e3(i3.audio, "noiseSuppression", "mozNoiseSuppression")), t3(i3);
          }, r2 && r2.prototype.getSettings) {
            const t4 = r2.prototype.getSettings;
            r2.prototype.getSettings = function() {
              const i3 = t4.apply(this, arguments);
              return e3(i3, "mozAutoGainControl", "autoGainControl"), e3(i3, "mozNoiseSuppression", "noiseSuppression"), i3;
            };
          }
          if (r2 && r2.prototype.applyConstraints) {
            const t4 = r2.prototype.applyConstraints;
            r2.prototype.applyConstraints = function(i3) {
              return "audio" === this.kind && "object" == typeof i3 && (i3 = JSON.parse(JSON.stringify(i3)), e3(i3, "autoGainControl", "mozAutoGainControl"), e3(i3, "noiseSuppression", "mozNoiseSuppression")), t4.apply(this, [i3]);
            };
          }
        }
      }
      function jl(e2) {
        "object" == typeof e2 && e2.RTCTrackEvent && "receiver" in e2.RTCTrackEvent.prototype && !("transceiver" in e2.RTCTrackEvent.prototype) && Object.defineProperty(e2.RTCTrackEvent.prototype, "transceiver", { get() {
          return { receiver: this.receiver };
        } });
      }
      function Fl(e2, t2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection && !e2.mozRTCPeerConnection)
          return;
        !e2.RTCPeerConnection && e2.mozRTCPeerConnection && (e2.RTCPeerConnection = e2.mozRTCPeerConnection), t2.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(t3) {
          const i3 = e2.RTCPeerConnection.prototype[t3], r3 = { [t3]() {
            return arguments[0] = new ("addIceCandidate" === t3 ? e2.RTCIceCandidate : e2.RTCSessionDescription)(arguments[0]), i3.apply(this, arguments);
          } };
          e2.RTCPeerConnection.prototype[t3] = r3[t3];
        });
        const i2 = { inboundrtp: "inbound-rtp", outboundrtp: "outbound-rtp", candidatepair: "candidate-pair", localcandidate: "local-candidate", remotecandidate: "remote-candidate" }, r2 = e2.RTCPeerConnection.prototype.getStats;
        e2.RTCPeerConnection.prototype.getStats = function() {
          const [e3, n2, o2] = arguments;
          return r2.apply(this, [e3 || null]).then((e4) => {
            if (t2.version < 53 && !n2)
              try {
                e4.forEach((e5) => {
                  e5.type = i2[e5.type] || e5.type;
                });
              } catch (t3) {
                if ("TypeError" !== t3.name)
                  throw t3;
                e4.forEach((t4, r3) => {
                  e4.set(r3, Object.assign({}, t4, { type: i2[t4.type] || t4.type }));
                });
              }
            return e4;
          }).then(n2, o2);
        };
      }
      function Bl(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection || !e2.RTCRtpSender)
          return;
        if (e2.RTCRtpSender && "getStats" in e2.RTCRtpSender.prototype)
          return;
        const t2 = e2.RTCPeerConnection.prototype.getSenders;
        t2 && (e2.RTCPeerConnection.prototype.getSenders = function() {
          const e3 = t2.apply(this, []);
          return e3.forEach((e4) => e4._pc = this), e3;
        });
        const i2 = e2.RTCPeerConnection.prototype.addTrack;
        i2 && (e2.RTCPeerConnection.prototype.addTrack = function() {
          const e3 = i2.apply(this, arguments);
          return e3._pc = this, e3;
        }), e2.RTCRtpSender.prototype.getStats = function() {
          return this.track ? this._pc.getStats(this.track) : Cl.resolve(/* @__PURE__ */ new Map());
        };
      }
      function Gl(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection || !e2.RTCRtpSender)
          return;
        if (e2.RTCRtpSender && "getStats" in e2.RTCRtpReceiver.prototype)
          return;
        const t2 = e2.RTCPeerConnection.prototype.getReceivers;
        t2 && (e2.RTCPeerConnection.prototype.getReceivers = function() {
          const e3 = t2.apply(this, []);
          return e3.forEach((e4) => e4._pc = this), e3;
        }), er(e2, "track", (e3) => (e3.receiver._pc = e3.srcElement, e3)), e2.RTCRtpReceiver.prototype.getStats = function() {
          return this._pc.getStats(this.track);
        };
      }
      function Wl(e2) {
        e2.RTCPeerConnection && !("removeStream" in e2.RTCPeerConnection.prototype) && (e2.RTCPeerConnection.prototype.removeStream = function(e3) {
          nr("removeStream", "removeTrack"), this.getSenders().forEach((t2) => {
            t2.track && e3.getTracks().includes(t2.track) && this.removeTrack(t2);
          });
        });
      }
      function Hl(e2) {
        e2.DataChannel && !e2.RTCDataChannel && (e2.RTCDataChannel = e2.DataChannel);
      }
      function Kl(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection)
          return;
        const t2 = e2.RTCPeerConnection.prototype.addTransceiver;
        t2 && (e2.RTCPeerConnection.prototype.addTransceiver = function() {
          this.setParametersPromises = [];
          let e3 = arguments[1] && arguments[1].sendEncodings;
          void 0 === e3 && (e3 = []), e3 = [...e3];
          const i2 = e3.length > 0;
          i2 && e3.forEach((e4) => {
            if ("rid" in e4) {
              if (!/^[a-z0-9]{0,16}$/i.test(e4.rid))
                throw new TypeError("Invalid RID value provided.");
            }
            if ("scaleResolutionDownBy" in e4 && !(parseFloat(e4.scaleResolutionDownBy) >= 1))
              throw new RangeError("scale_resolution_down_by must be >= 1.0");
            if ("maxFramerate" in e4 && !(parseFloat(e4.maxFramerate) >= 0))
              throw new RangeError("max_framerate must be >= 0.0");
          });
          const r2 = t2.apply(this, arguments);
          if (i2) {
            const { sender: t3 } = r2, i3 = t3.getParameters();
            (!("encodings" in i3) || 1 === i3.encodings.length && 0 === Object.keys(i3.encodings[0]).length) && (i3.encodings = e3, t3.sendEncodings = e3, this.setParametersPromises.push(t3.setParameters(i3).then(() => {
              delete t3.sendEncodings;
            }).catch(() => {
              delete t3.sendEncodings;
            })));
          }
          return r2;
        });
      }
      function Yl(e2) {
        if ("object" != typeof e2 || !e2.RTCRtpSender)
          return;
        const t2 = e2.RTCRtpSender.prototype.getParameters;
        t2 && (e2.RTCRtpSender.prototype.getParameters = function() {
          const e3 = t2.apply(this, arguments);
          return "encodings" in e3 || (e3.encodings = [].concat(this.sendEncodings || [{}])), e3;
        });
      }
      function ql(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection)
          return;
        const t2 = e2.RTCPeerConnection.prototype.createOffer;
        e2.RTCPeerConnection.prototype.createOffer = function() {
          return this.setParametersPromises && this.setParametersPromises.length ? Cl.all(this.setParametersPromises).then(() => t2.apply(this, arguments)).finally(() => {
            this.setParametersPromises = [];
          }) : t2.apply(this, arguments);
        };
      }
      function Jl(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection)
          return;
        const t2 = e2.RTCPeerConnection.prototype.createAnswer;
        e2.RTCPeerConnection.prototype.createAnswer = function() {
          return this.setParametersPromises && this.setParametersPromises.length ? Cl.all(this.setParametersPromises).then(() => t2.apply(this, arguments)).finally(() => {
            this.setParametersPromises = [];
          }) : t2.apply(this, arguments);
        };
      }
      var Xl = Object.freeze({ __proto__: null, shimOnTrack: jl, shimPeerConnection: Fl, shimSenderGetStats: Bl, shimReceiverGetStats: Gl, shimRemoveStream: Wl, shimRTCDataChannel: Hl, shimAddTransceiver: Kl, shimGetParameters: Yl, shimCreateOffer: ql, shimCreateAnswer: Jl, shimGetUserMedia: Vl, shimGetDisplayMedia: function(e2, t2) {
        e2.navigator.mediaDevices && "getDisplayMedia" in e2.navigator.mediaDevices || e2.navigator.mediaDevices && (e2.navigator.mediaDevices.getDisplayMedia = function(i2) {
          if (!i2 || !i2.video) {
            const e3 = new DOMException("getDisplayMedia without video constraints is undefined");
            return e3.name = "NotFoundError", e3.code = 8, Cl.reject(e3);
          }
          return true === i2.video ? i2.video = { mediaSource: t2 } : i2.video.mediaSource = t2, e2.navigator.mediaDevices.getUserMedia(i2);
        });
      } });
      function zl(e2) {
        if ("object" == typeof e2 && e2.RTCPeerConnection) {
          if ("getLocalStreams" in e2.RTCPeerConnection.prototype || (e2.RTCPeerConnection.prototype.getLocalStreams = function() {
            return this._localStreams || (this._localStreams = []), this._localStreams;
          }), !("addStream" in e2.RTCPeerConnection.prototype)) {
            const t2 = e2.RTCPeerConnection.prototype.addTrack;
            e2.RTCPeerConnection.prototype.addStream = function(e3) {
              this._localStreams || (this._localStreams = []), this._localStreams.includes(e3) || this._localStreams.push(e3), e3.getAudioTracks().forEach((i2) => t2.call(this, i2, e3)), e3.getVideoTracks().forEach((i2) => t2.call(this, i2, e3));
            }, e2.RTCPeerConnection.prototype.addTrack = function(e3) {
              for (var i2 = arguments.length, r2 = new Array(i2 > 1 ? i2 - 1 : 0), n2 = 1; n2 < i2; n2++)
                r2[n2 - 1] = arguments[n2];
              return r2 && r2.forEach((e4) => {
                this._localStreams ? this._localStreams.includes(e4) || this._localStreams.push(e4) : this._localStreams = [e4];
              }), t2.apply(this, arguments);
            };
          }
          "removeStream" in e2.RTCPeerConnection.prototype || (e2.RTCPeerConnection.prototype.removeStream = function(e3) {
            this._localStreams || (this._localStreams = []);
            const t2 = this._localStreams.indexOf(e3);
            if (-1 === t2)
              return;
            this._localStreams.splice(t2, 1);
            const i2 = e3.getTracks();
            this.getSenders().forEach((e4) => {
              i2.includes(e4.track) && this.removeTrack(e4);
            });
          });
        }
      }
      function Ql(e2) {
        if ("object" == typeof e2 && e2.RTCPeerConnection && ("getRemoteStreams" in e2.RTCPeerConnection.prototype || (e2.RTCPeerConnection.prototype.getRemoteStreams = function() {
          return this._remoteStreams ? this._remoteStreams : [];
        }), !("onaddstream" in e2.RTCPeerConnection.prototype))) {
          Object.defineProperty(e2.RTCPeerConnection.prototype, "onaddstream", { get() {
            return this._onaddstream;
          }, set(e3) {
            this._onaddstream && (this.removeEventListener("addstream", this._onaddstream), this.removeEventListener("track", this._onaddstreampoly)), this.addEventListener("addstream", this._onaddstream = e3), this.addEventListener("track", this._onaddstreampoly = (e4) => {
              e4.streams.forEach((e5) => {
                if (this._remoteStreams || (this._remoteStreams = []), this._remoteStreams.includes(e5))
                  return;
                this._remoteStreams.push(e5);
                const t3 = new Event("addstream");
                t3.stream = e5, this.dispatchEvent(t3);
              });
            });
          } });
          const t2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
          e2.RTCPeerConnection.prototype.setRemoteDescription = function() {
            const e3 = this;
            return this._onaddstreampoly || this.addEventListener("track", this._onaddstreampoly = function(t3) {
              t3.streams.forEach((t4) => {
                if (e3._remoteStreams || (e3._remoteStreams = []), e3._remoteStreams.indexOf(t4) >= 0)
                  return;
                e3._remoteStreams.push(t4);
                const i2 = new Event("addstream");
                i2.stream = t4, e3.dispatchEvent(i2);
              });
            }), t2.apply(e3, arguments);
          };
        }
      }
      function Zl(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection)
          return;
        const t2 = e2.RTCPeerConnection.prototype, i2 = t2.createOffer, r2 = t2.createAnswer, n2 = t2.setLocalDescription, o2 = t2.setRemoteDescription, s2 = t2.addIceCandidate;
        t2.createOffer = function(e3, t3) {
          const r3 = arguments.length >= 2 ? arguments[2] : arguments[0], n3 = i2.apply(this, [r3]);
          return t3 ? (n3.then(e3, t3), Cl.resolve()) : n3;
        }, t2.createAnswer = function(e3, t3) {
          const i3 = arguments.length >= 2 ? arguments[2] : arguments[0], n3 = r2.apply(this, [i3]);
          return t3 ? (n3.then(e3, t3), Cl.resolve()) : n3;
        };
        let a2 = function(e3, t3, i3) {
          const r3 = n2.apply(this, [e3]);
          return i3 ? (r3.then(t3, i3), Cl.resolve()) : r3;
        };
        t2.setLocalDescription = a2, a2 = function(e3, t3, i3) {
          const r3 = o2.apply(this, [e3]);
          return i3 ? (r3.then(t3, i3), Cl.resolve()) : r3;
        }, t2.setRemoteDescription = a2, a2 = function(e3, t3, i3) {
          const r3 = s2.apply(this, [e3]);
          return i3 ? (r3.then(t3, i3), Cl.resolve()) : r3;
        }, t2.addIceCandidate = a2;
      }
      function $l(e2) {
        const t2 = e2 && e2.navigator;
        if (t2.mediaDevices && t2.mediaDevices.getUserMedia) {
          const e3 = t2.mediaDevices, i2 = e3.getUserMedia.bind(e3);
          t2.mediaDevices.getUserMedia = (e4) => i2(eh(e4));
        }
        !t2.getUserMedia && t2.mediaDevices && t2.mediaDevices.getUserMedia && (t2.getUserMedia = function(e3, i2, r2) {
          t2.mediaDevices.getUserMedia(e3).then(i2, r2);
        }.bind(t2));
      }
      function eh(e2) {
        return e2 && void 0 !== e2.video ? Object.assign({}, e2, { video: ar(e2.video) }) : e2;
      }
      function th(e2) {
        if (!e2.RTCPeerConnection)
          return;
        const t2 = e2.RTCPeerConnection;
        e2.RTCPeerConnection = function(e3, i2) {
          if (e3 && e3.iceServers) {
            const t3 = [];
            for (let i3 = 0; i3 < e3.iceServers.length; i3++) {
              let r2 = e3.iceServers[i3];
              !r2.hasOwnProperty("urls") && r2.hasOwnProperty("url") ? (nr("RTCIceServer.url", "RTCIceServer.urls"), r2 = JSON.parse(JSON.stringify(r2)), r2.urls = r2.url, delete r2.url, t3.push(r2)) : t3.push(e3.iceServers[i3]);
            }
            e3.iceServers = t3;
          }
          return new t2(e3, i2);
        }, e2.RTCPeerConnection.prototype = t2.prototype, "generateCertificate" in t2 && Object.defineProperty(e2.RTCPeerConnection, "generateCertificate", { get: () => t2.generateCertificate });
      }
      function ih(e2) {
        "object" == typeof e2 && e2.RTCTrackEvent && "receiver" in e2.RTCTrackEvent.prototype && !("transceiver" in e2.RTCTrackEvent.prototype) && Object.defineProperty(e2.RTCTrackEvent.prototype, "transceiver", { get() {
          return { receiver: this.receiver };
        } });
      }
      function rh(e2) {
        const t2 = e2.RTCPeerConnection.prototype.createOffer;
        e2.RTCPeerConnection.prototype.createOffer = function(e3) {
          if (e3) {
            void 0 !== e3.offerToReceiveAudio && (e3.offerToReceiveAudio = !!e3.offerToReceiveAudio);
            const t3 = this.getTransceivers().find((e4) => "audio" === e4.receiver.track.kind);
            false === e3.offerToReceiveAudio && t3 ? "sendrecv" === t3.direction ? t3.setDirection ? t3.setDirection("sendonly") : t3.direction = "sendonly" : "recvonly" === t3.direction && (t3.setDirection ? t3.setDirection("inactive") : t3.direction = "inactive") : true !== e3.offerToReceiveAudio || t3 || this.addTransceiver("audio", { direction: "recvonly" }), void 0 !== e3.offerToReceiveVideo && (e3.offerToReceiveVideo = !!e3.offerToReceiveVideo);
            const i2 = this.getTransceivers().find((e4) => "video" === e4.receiver.track.kind);
            false === e3.offerToReceiveVideo && i2 ? "sendrecv" === i2.direction ? i2.setDirection ? i2.setDirection("sendonly") : i2.direction = "sendonly" : "recvonly" === i2.direction && (i2.setDirection ? i2.setDirection("inactive") : i2.direction = "inactive") : true !== e3.offerToReceiveVideo || i2 || this.addTransceiver("video", { direction: "recvonly" });
          }
          return t2.apply(this, arguments);
        };
      }
      function nh(e2) {
        "object" != typeof e2 || e2.AudioContext || (e2.AudioContext = e2.webkitAudioContext);
      }
      var oh = Object.freeze({ __proto__: null, shimLocalStreamsAPI: zl, shimRemoteStreamsAPI: Ql, shimCallbacksAPI: Zl, shimGetUserMedia: $l, shimConstraints: eh, shimRTCIceServerUrls: th, shimTrackEventTransceiver: ih, shimCreateOfferLegacy: rh, shimAudioContext: nh }), sh = "	\n\v\f\r Â áââââââââââââ¯âã\u2028\u2029\uFEFF", ah = G, ch = Lo, dh = d("".replace), uh = "[	\n\v\f\r Â áââââââââââââ¯âã\u2028\u2029\uFEFF]", lh = RegExp("^" + uh + uh + "*"), hh = RegExp(uh + uh + "*$"), ph = function(e2) {
        return function(t2) {
          var i2 = ch(ah(t2));
          return 1 & e2 && (i2 = dh(i2, lh, "")), 2 & e2 && (i2 = dh(i2, hh, "")), i2;
        };
      }, _h = { start: ph(1), end: ph(2), trim: ph(3) }, Eh = Vs.PROPER, fh = i, mh = sh, gh = _h.trim;
      Ri({ target: "String", proto: true, forced: function(e2) {
        return fh(function() {
          return !!mh[e2]() || "âÂá " !== "âÂá "[e2]() || Eh && mh[e2].name !== e2;
        });
      }("trim") }, { trim: function() {
        return gh(this);
      } });
      var Sh = Hi("String").trim, Th = u, vh = Sh, Rh = String.prototype, Ih = function(e2) {
        var t2 = e2.trim;
        return "string" == typeof e2 || e2 === Rh || Th(Rh, e2) && t2 === Rh.trim ? vh : t2;
      }, yh = { exports: {} };
      !function(e2) {
        const t2 = { generateIdentifier: function() {
          return Math.random().toString(36).substr(2, 10);
        } };
        t2.localCName = t2.generateIdentifier(), t2.splitLines = function(e3) {
          return Ih(e3).call(e3).split("\n").map((e4) => Ih(e4).call(e4));
        }, t2.splitSections = function(e3) {
          return e3.split("\nm=").map((e4, t3) => {
            var i2;
            return Ih(i2 = t3 > 0 ? "m=" + e4 : e4).call(i2) + "\r\n";
          });
        }, t2.getDescription = function(e3) {
          const i2 = t2.splitSections(e3);
          return i2 && i2[0];
        }, t2.getMediaSections = function(e3) {
          const i2 = t2.splitSections(e3);
          return i2.shift(), i2;
        }, t2.matchPrefix = function(e3, i2) {
          return t2.splitLines(e3).filter((e4) => 0 === e4.indexOf(i2));
        }, t2.parseCandidate = function(e3) {
          let t3;
          t3 = 0 === e3.indexOf("a=candidate:") ? e3.substring(12).split(" ") : e3.substring(10).split(" ");
          const i2 = { foundation: t3[0], component: { 1: "rtp", 2: "rtcp" }[t3[1]] || t3[1], protocol: t3[2].toLowerCase(), priority: parseInt(t3[3], 10), ip: t3[4], address: t3[4], port: parseInt(t3[5], 10), type: t3[7] };
          for (let e4 = 8; e4 < t3.length; e4 += 2)
            switch (t3[e4]) {
              case "raddr":
                i2.relatedAddress = t3[e4 + 1];
                break;
              case "rport":
                i2.relatedPort = parseInt(t3[e4 + 1], 10);
                break;
              case "tcptype":
                i2.tcpType = t3[e4 + 1];
                break;
              case "ufrag":
                i2.ufrag = t3[e4 + 1], i2.usernameFragment = t3[e4 + 1];
                break;
              default:
                void 0 === i2[t3[e4]] && (i2[t3[e4]] = t3[e4 + 1]);
            }
          return i2;
        }, t2.writeCandidate = function(e3) {
          const t3 = [];
          t3.push(e3.foundation);
          const i2 = e3.component;
          "rtp" === i2 ? t3.push(1) : "rtcp" === i2 ? t3.push(2) : t3.push(i2), t3.push(e3.protocol.toUpperCase()), t3.push(e3.priority), t3.push(e3.address || e3.ip), t3.push(e3.port);
          const r2 = e3.type;
          return t3.push("typ"), t3.push(r2), "host" !== r2 && e3.relatedAddress && e3.relatedPort && (t3.push("raddr"), t3.push(e3.relatedAddress), t3.push("rport"), t3.push(e3.relatedPort)), e3.tcpType && "tcp" === e3.protocol.toLowerCase() && (t3.push("tcptype"), t3.push(e3.tcpType)), (e3.usernameFragment || e3.ufrag) && (t3.push("ufrag"), t3.push(e3.usernameFragment || e3.ufrag)), "candidate:" + t3.join(" ");
        }, t2.parseIceOptions = function(e3) {
          return e3.substr(14).split(" ");
        }, t2.parseRtpMap = function(e3) {
          let t3 = e3.substr(9).split(" ");
          const i2 = { payloadType: parseInt(t3.shift(), 10) };
          return t3 = t3[0].split("/"), i2.name = t3[0], i2.clockRate = parseInt(t3[1], 10), i2.channels = 3 === t3.length ? parseInt(t3[2], 10) : 1, i2.numChannels = i2.channels, i2;
        }, t2.writeRtpMap = function(e3) {
          let t3 = e3.payloadType;
          void 0 !== e3.preferredPayloadType && (t3 = e3.preferredPayloadType);
          const i2 = e3.channels || e3.numChannels || 1;
          return "a=rtpmap:" + t3 + " " + e3.name + "/" + e3.clockRate + (1 !== i2 ? "/" + i2 : "") + "\r\n";
        }, t2.parseExtmap = function(e3) {
          const t3 = e3.substr(9).split(" ");
          return { id: parseInt(t3[0], 10), direction: t3[0].indexOf("/") > 0 ? t3[0].split("/")[1] : "sendrecv", uri: t3[1] };
        }, t2.writeExtmap = function(e3) {
          return "a=extmap:" + (e3.id || e3.preferredId) + (e3.direction && "sendrecv" !== e3.direction ? "/" + e3.direction : "") + " " + e3.uri + "\r\n";
        }, t2.parseFmtp = function(e3) {
          const t3 = {};
          let i2;
          const r2 = e3.substr(e3.indexOf(" ") + 1).split(";");
          for (let e4 = 0; e4 < r2.length; e4++) {
            var n2, o2;
            i2 = Ih(n2 = r2[e4]).call(n2).split("="), t3[Ih(o2 = i2[0]).call(o2)] = i2[1];
          }
          return t3;
        }, t2.writeFmtp = function(e3) {
          let t3 = "", i2 = e3.payloadType;
          if (void 0 !== e3.preferredPayloadType && (i2 = e3.preferredPayloadType), e3.parameters && Object.keys(e3.parameters).length) {
            const r2 = [];
            Object.keys(e3.parameters).forEach((t4) => {
              void 0 !== e3.parameters[t4] ? r2.push(t4 + "=" + e3.parameters[t4]) : r2.push(t4);
            }), t3 += "a=fmtp:" + i2 + " " + r2.join(";") + "\r\n";
          }
          return t3;
        }, t2.parseRtcpFb = function(e3) {
          const t3 = e3.substr(e3.indexOf(" ") + 1).split(" ");
          return { type: t3.shift(), parameter: t3.join(" ") };
        }, t2.writeRtcpFb = function(e3) {
          let t3 = "", i2 = e3.payloadType;
          return void 0 !== e3.preferredPayloadType && (i2 = e3.preferredPayloadType), e3.rtcpFeedback && e3.rtcpFeedback.length && e3.rtcpFeedback.forEach((e4) => {
            t3 += "a=rtcp-fb:" + i2 + " " + e4.type + (e4.parameter && e4.parameter.length ? " " + e4.parameter : "") + "\r\n";
          }), t3;
        }, t2.parseSsrcMedia = function(e3) {
          const t3 = e3.indexOf(" "), i2 = { ssrc: parseInt(e3.substr(7, t3 - 7), 10) }, r2 = e3.indexOf(":", t3);
          return r2 > -1 ? (i2.attribute = e3.substr(t3 + 1, r2 - t3 - 1), i2.value = e3.substr(r2 + 1)) : i2.attribute = e3.substr(t3 + 1), i2;
        }, t2.parseSsrcGroup = function(e3) {
          const t3 = e3.substr(13).split(" ");
          return { semantics: t3.shift(), ssrcs: t3.map((e4) => parseInt(e4, 10)) };
        }, t2.getMid = function(e3) {
          const i2 = t2.matchPrefix(e3, "a=mid:")[0];
          if (i2)
            return i2.substr(6);
        }, t2.parseFingerprint = function(e3) {
          const t3 = e3.substr(14).split(" ");
          return { algorithm: t3[0].toLowerCase(), value: t3[1].toUpperCase() };
        }, t2.getDtlsParameters = function(e3, i2) {
          return { role: "auto", fingerprints: t2.matchPrefix(e3 + i2, "a=fingerprint:").map(t2.parseFingerprint) };
        }, t2.writeDtlsParameters = function(e3, t3) {
          let i2 = "a=setup:" + t3 + "\r\n";
          return e3.fingerprints.forEach((e4) => {
            i2 += "a=fingerprint:" + e4.algorithm + " " + e4.value + "\r\n";
          }), i2;
        }, t2.parseCryptoLine = function(e3) {
          const t3 = e3.substr(9).split(" ");
          return { tag: parseInt(t3[0], 10), cryptoSuite: t3[1], keyParams: t3[2], sessionParams: t3.slice(3) };
        }, t2.writeCryptoLine = function(e3) {
          return "a=crypto:" + e3.tag + " " + e3.cryptoSuite + " " + ("object" == typeof e3.keyParams ? t2.writeCryptoKeyParams(e3.keyParams) : e3.keyParams) + (e3.sessionParams ? " " + e3.sessionParams.join(" ") : "") + "\r\n";
        }, t2.parseCryptoKeyParams = function(e3) {
          if (0 !== e3.indexOf("inline:"))
            return null;
          const t3 = e3.substr(7).split("|");
          return { keyMethod: "inline", keySalt: t3[0], lifeTime: t3[1], mkiValue: t3[2] ? t3[2].split(":")[0] : void 0, mkiLength: t3[2] ? t3[2].split(":")[1] : void 0 };
        }, t2.writeCryptoKeyParams = function(e3) {
          return e3.keyMethod + ":" + e3.keySalt + (e3.lifeTime ? "|" + e3.lifeTime : "") + (e3.mkiValue && e3.mkiLength ? "|" + e3.mkiValue + ":" + e3.mkiLength : "");
        }, t2.getCryptoParameters = function(e3, i2) {
          return t2.matchPrefix(e3 + i2, "a=crypto:").map(t2.parseCryptoLine);
        }, t2.getIceParameters = function(e3, i2) {
          const r2 = t2.matchPrefix(e3 + i2, "a=ice-ufrag:")[0], n2 = t2.matchPrefix(e3 + i2, "a=ice-pwd:")[0];
          return r2 && n2 ? { usernameFragment: r2.substr(12), password: n2.substr(10) } : null;
        }, t2.writeIceParameters = function(e3) {
          let t3 = "a=ice-ufrag:" + e3.usernameFragment + "\r\na=ice-pwd:" + e3.password + "\r\n";
          return e3.iceLite && (t3 += "a=ice-lite\r\n"), t3;
        }, t2.parseRtpParameters = function(e3) {
          const i2 = { codecs: [], headerExtensions: [], fecMechanisms: [], rtcp: [] }, r2 = t2.splitLines(e3)[0].split(" ");
          for (let n2 = 3; n2 < r2.length; n2++) {
            const o2 = r2[n2], s2 = t2.matchPrefix(e3, "a=rtpmap:" + o2 + " ")[0];
            if (s2) {
              const r3 = t2.parseRtpMap(s2), n3 = t2.matchPrefix(e3, "a=fmtp:" + o2 + " ");
              switch (r3.parameters = n3.length ? t2.parseFmtp(n3[0]) : {}, r3.rtcpFeedback = t2.matchPrefix(e3, "a=rtcp-fb:" + o2 + " ").map(t2.parseRtcpFb), i2.codecs.push(r3), r3.name.toUpperCase()) {
                case "RED":
                case "ULPFEC":
                  i2.fecMechanisms.push(r3.name.toUpperCase());
              }
            }
          }
          return t2.matchPrefix(e3, "a=extmap:").forEach((e4) => {
            i2.headerExtensions.push(t2.parseExtmap(e4));
          }), i2;
        }, t2.writeRtpDescription = function(e3, i2) {
          let r2 = "";
          r2 += "m=" + e3 + " ", r2 += i2.codecs.length > 0 ? "9" : "0", r2 += " UDP/TLS/RTP/SAVPF ", r2 += i2.codecs.map((e4) => void 0 !== e4.preferredPayloadType ? e4.preferredPayloadType : e4.payloadType).join(" ") + "\r\n", r2 += "c=IN IP4 0.0.0.0\r\n", r2 += "a=rtcp:9 IN IP4 0.0.0.0\r\n", i2.codecs.forEach((e4) => {
            r2 += t2.writeRtpMap(e4), r2 += t2.writeFmtp(e4), r2 += t2.writeRtcpFb(e4);
          });
          let n2 = 0;
          return i2.codecs.forEach((e4) => {
            e4.maxptime > n2 && (n2 = e4.maxptime);
          }), n2 > 0 && (r2 += "a=maxptime:" + n2 + "\r\n"), i2.headerExtensions && i2.headerExtensions.forEach((e4) => {
            r2 += t2.writeExtmap(e4);
          }), r2;
        }, t2.parseRtpEncodingParameters = function(e3) {
          const i2 = [], r2 = t2.parseRtpParameters(e3), n2 = -1 !== r2.fecMechanisms.indexOf("RED"), o2 = -1 !== r2.fecMechanisms.indexOf("ULPFEC"), s2 = t2.matchPrefix(e3, "a=ssrc:").map((e4) => t2.parseSsrcMedia(e4)).filter((e4) => "cname" === e4.attribute), a2 = s2.length > 0 && s2[0].ssrc;
          let c2;
          const d2 = t2.matchPrefix(e3, "a=ssrc-group:FID").map((e4) => e4.substr(17).split(" ").map((e5) => parseInt(e5, 10)));
          d2.length > 0 && d2[0].length > 1 && d2[0][0] === a2 && (c2 = d2[0][1]), r2.codecs.forEach((e4) => {
            if ("RTX" === e4.name.toUpperCase() && e4.parameters.apt) {
              let t3 = { ssrc: a2, codecPayloadType: parseInt(e4.parameters.apt, 10) };
              a2 && c2 && (t3.rtx = { ssrc: c2 }), i2.push(t3), n2 && (t3 = JSON.parse(JSON.stringify(t3)), t3.fec = { ssrc: a2, mechanism: o2 ? "red+ulpfec" : "red" }, i2.push(t3));
            }
          }), 0 === i2.length && a2 && i2.push({ ssrc: a2 });
          let u2 = t2.matchPrefix(e3, "b=");
          return u2.length && (u2 = 0 === u2[0].indexOf("b=TIAS:") ? parseInt(u2[0].substr(7), 10) : 0 === u2[0].indexOf("b=AS:") ? 1e3 * parseInt(u2[0].substr(5), 10) * 0.95 - 16e3 : void 0, i2.forEach((e4) => {
            e4.maxBitrate = u2;
          })), i2;
        }, t2.parseRtcpParameters = function(e3) {
          const i2 = {}, r2 = t2.matchPrefix(e3, "a=ssrc:").map((e4) => t2.parseSsrcMedia(e4)).filter((e4) => "cname" === e4.attribute)[0];
          r2 && (i2.cname = r2.value, i2.ssrc = r2.ssrc);
          const n2 = t2.matchPrefix(e3, "a=rtcp-rsize");
          i2.reducedSize = n2.length > 0, i2.compound = 0 === n2.length;
          const o2 = t2.matchPrefix(e3, "a=rtcp-mux");
          return i2.mux = o2.length > 0, i2;
        }, t2.writeRtcpParameters = function(e3) {
          let t3 = "";
          return e3.reducedSize && (t3 += "a=rtcp-rsize\r\n"), e3.mux && (t3 += "a=rtcp-mux\r\n"), void 0 !== e3.ssrc && e3.cname && (t3 += "a=ssrc:" + e3.ssrc + " cname:" + e3.cname + "\r\n"), t3;
        }, t2.parseMsid = function(e3) {
          let i2;
          const r2 = t2.matchPrefix(e3, "a=msid:");
          if (1 === r2.length)
            return i2 = r2[0].substr(7).split(" "), { stream: i2[0], track: i2[1] };
          const n2 = t2.matchPrefix(e3, "a=ssrc:").map((e4) => t2.parseSsrcMedia(e4)).filter((e4) => "msid" === e4.attribute);
          return n2.length > 0 ? (i2 = n2[0].value.split(" "), { stream: i2[0], track: i2[1] }) : void 0;
        }, t2.parseSctpDescription = function(e3) {
          const i2 = t2.parseMLine(e3), r2 = t2.matchPrefix(e3, "a=max-message-size:");
          let n2;
          r2.length > 0 && (n2 = parseInt(r2[0].substr(19), 10)), isNaN(n2) && (n2 = 65536);
          const o2 = t2.matchPrefix(e3, "a=sctp-port:");
          if (o2.length > 0)
            return { port: parseInt(o2[0].substr(12), 10), protocol: i2.fmt, maxMessageSize: n2 };
          const s2 = t2.matchPrefix(e3, "a=sctpmap:");
          if (s2.length > 0) {
            const e4 = s2[0].substr(10).split(" ");
            return { port: parseInt(e4[0], 10), protocol: e4[1], maxMessageSize: n2 };
          }
        }, t2.writeSctpDescription = function(e3, t3) {
          let i2 = [];
          return i2 = "DTLS/SCTP" !== e3.protocol ? ["m=" + e3.kind + " 9 " + e3.protocol + " " + t3.protocol + "\r\n", "c=IN IP4 0.0.0.0\r\n", "a=sctp-port:" + t3.port + "\r\n"] : ["m=" + e3.kind + " 9 " + e3.protocol + " " + t3.port + "\r\n", "c=IN IP4 0.0.0.0\r\n", "a=sctpmap:" + t3.port + " " + t3.protocol + " 65535\r\n"], void 0 !== t3.maxMessageSize && i2.push("a=max-message-size:" + t3.maxMessageSize + "\r\n"), i2.join("");
        }, t2.generateSessionId = function() {
          return Math.random().toString().substr(2, 21);
        }, t2.writeSessionBoilerplate = function(e3, i2, r2) {
          let n2;
          const o2 = void 0 !== i2 ? i2 : 2;
          n2 = e3 || t2.generateSessionId();
          return "v=0\r\no=" + (r2 || "thisisadapterortc") + " " + n2 + " " + o2 + " IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n";
        }, t2.getDirection = function(e3, i2) {
          const r2 = t2.splitLines(e3);
          for (let e4 = 0; e4 < r2.length; e4++)
            switch (r2[e4]) {
              case "a=sendrecv":
              case "a=sendonly":
              case "a=recvonly":
              case "a=inactive":
                return r2[e4].substr(2);
            }
          return i2 ? t2.getDirection(i2) : "sendrecv";
        }, t2.getKind = function(e3) {
          return t2.splitLines(e3)[0].split(" ")[0].substr(2);
        }, t2.isRejected = function(e3) {
          return "0" === e3.split(" ", 2)[1];
        }, t2.parseMLine = function(e3) {
          const i2 = t2.splitLines(e3)[0].substr(2).split(" ");
          return { kind: i2[0], port: parseInt(i2[1], 10), protocol: i2[2], fmt: i2.slice(3).join(" ") };
        }, t2.parseOLine = function(e3) {
          const i2 = t2.matchPrefix(e3, "o=")[0].substr(2).split(" ");
          return { username: i2[0], sessionId: i2[1], sessionVersion: parseInt(i2[2], 10), netType: i2[3], addressType: i2[4], address: i2[5] };
        }, t2.isValidSDP = function(e3) {
          if ("string" != typeof e3 || 0 === e3.length)
            return false;
          const i2 = t2.splitLines(e3);
          for (let e4 = 0; e4 < i2.length; e4++)
            if (i2[e4].length < 2 || "=" !== i2[e4].charAt(1))
              return false;
          return true;
        }, e2.exports = t2;
      }(yh);
      var Ch = yh.exports, Ah = Object.freeze(e({ __proto__: null, default: Ch }, [yh.exports]));
      function Oh(e2) {
        if (!e2.RTCIceCandidate || e2.RTCIceCandidate && "foundation" in e2.RTCIceCandidate.prototype)
          return;
        const t2 = e2.RTCIceCandidate;
        e2.RTCIceCandidate = function(e3) {
          if ("object" == typeof e3 && e3.candidate && 0 === e3.candidate.indexOf("a=") && ((e3 = JSON.parse(JSON.stringify(e3))).candidate = e3.candidate.substr(2)), e3.candidate && e3.candidate.length) {
            const i2 = new t2(e3), r2 = Ch.parseCandidate(e3.candidate), n2 = Object.assign(i2, r2);
            return n2.toJSON = function() {
              return { candidate: n2.candidate, sdpMid: n2.sdpMid, sdpMLineIndex: n2.sdpMLineIndex, usernameFragment: n2.usernameFragment };
            }, n2;
          }
          return new t2(e3);
        }, e2.RTCIceCandidate.prototype = t2.prototype, er(e2, "icecandidate", (t3) => (t3.candidate && Object.defineProperty(t3, "candidate", { value: new e2.RTCIceCandidate(t3.candidate), writable: "false" }), t3));
      }
      function bh(e2) {
        !e2.RTCIceCandidate || e2.RTCIceCandidate && "relayProtocol" in e2.RTCIceCandidate.prototype || er(e2, "icecandidate", (e3) => {
          if (e3.candidate) {
            const t2 = Ch.parseCandidate(e3.candidate.candidate);
            "relay" === t2.type && (e3.candidate.relayProtocol = { 0: "tls", 1: "tcp", 2: "udp" }[t2.priority >> 24]);
          }
          return e3;
        });
      }
      function wh(e2, t2) {
        if (!e2.RTCPeerConnection)
          return;
        "sctp" in e2.RTCPeerConnection.prototype || Object.defineProperty(e2.RTCPeerConnection.prototype, "sctp", { get() {
          return void 0 === this._sctp ? null : this._sctp;
        } });
        const i2 = function(e3) {
          if (!e3 || !e3.sdp)
            return false;
          const t3 = Ch.splitSections(e3.sdp);
          return t3.shift(), t3.some((e4) => {
            const t4 = Ch.parseMLine(e4);
            return t4 && "application" === t4.kind && -1 !== t4.protocol.indexOf("SCTP");
          });
        }, r2 = function(e3) {
          const t3 = e3.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
          if (null === t3 || t3.length < 2)
            return -1;
          const i3 = parseInt(t3[1], 10);
          return i3 != i3 ? -1 : i3;
        }, n2 = function(e3) {
          let i3 = 65536;
          return "firefox" === t2.browser && (i3 = t2.version < 57 ? -1 === e3 ? 16384 : 2147483637 : t2.version < 60 ? 57 === t2.version ? 65535 : 65536 : 2147483637), i3;
        }, o2 = function(e3, i3) {
          let r3 = 65536;
          "firefox" === t2.browser && 57 === t2.version && (r3 = 65535);
          const n3 = Ch.matchPrefix(e3.sdp, "a=max-message-size:");
          return n3.length > 0 ? r3 = parseInt(n3[0].substr(19), 10) : "firefox" === t2.browser && -1 !== i3 && (r3 = 2147483637), r3;
        }, s2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
        e2.RTCPeerConnection.prototype.setRemoteDescription = function() {
          if (this._sctp = null, "chrome" === t2.browser && t2.version >= 76) {
            const { sdpSemantics: e3 } = this.getConfiguration();
            "plan-b" === e3 && Object.defineProperty(this, "sctp", { get() {
              return void 0 === this._sctp ? null : this._sctp;
            }, enumerable: true, configurable: true });
          }
          if (i2(arguments[0])) {
            const e3 = r2(arguments[0]), t3 = n2(e3), i3 = o2(arguments[0], e3);
            let s3;
            s3 = 0 === t3 && 0 === i3 ? Number.POSITIVE_INFINITY : 0 === t3 || 0 === i3 ? Math.max(t3, i3) : Math.min(t3, i3);
            const a2 = {};
            Object.defineProperty(a2, "maxMessageSize", { get: () => s3 }), this._sctp = a2;
          }
          return s2.apply(this, arguments);
        };
      }
      function Nh(e2) {
        if (!e2.RTCPeerConnection || !("createDataChannel" in e2.RTCPeerConnection.prototype))
          return;
        function t2(e3, t3) {
          const i3 = e3.send;
          e3.send = function() {
            const r2 = arguments[0], n2 = r2.length || r2.size || r2.byteLength;
            if ("open" === e3.readyState && t3.sctp && n2 > t3.sctp.maxMessageSize)
              throw new TypeError("Message too large (can send a maximum of " + t3.sctp.maxMessageSize + " bytes)");
            return i3.apply(e3, arguments);
          };
        }
        const i2 = e2.RTCPeerConnection.prototype.createDataChannel;
        e2.RTCPeerConnection.prototype.createDataChannel = function() {
          const e3 = i2.apply(this, arguments);
          return t2(e3, this), e3;
        }, er(e2, "datachannel", (e3) => (t2(e3.channel, e3.target), e3));
      }
      function Dh(e2) {
        if (!e2.RTCPeerConnection || "connectionState" in e2.RTCPeerConnection.prototype)
          return;
        const t2 = e2.RTCPeerConnection.prototype;
        Object.defineProperty(t2, "connectionState", { get() {
          return { completed: "connected", checking: "connecting" }[this.iceConnectionState] || this.iceConnectionState;
        }, enumerable: true, configurable: true }), Object.defineProperty(t2, "onconnectionstatechange", { get() {
          return this._onconnectionstatechange || null;
        }, set(e3) {
          this._onconnectionstatechange && (this.removeEventListener("connectionstatechange", this._onconnectionstatechange), delete this._onconnectionstatechange), e3 && this.addEventListener("connectionstatechange", this._onconnectionstatechange = e3);
        }, enumerable: true, configurable: true }), ["setLocalDescription", "setRemoteDescription"].forEach((e3) => {
          const i2 = t2[e3];
          t2[e3] = function() {
            return this._connectionstatechangepoly || (this._connectionstatechangepoly = (e4) => {
              const t3 = e4.target;
              if (t3._lastConnectionState !== t3.connectionState) {
                t3._lastConnectionState = t3.connectionState;
                const i3 = new Event("connectionstatechange", e4);
                t3.dispatchEvent(i3);
              }
              return e4;
            }, this.addEventListener("iceconnectionstatechange", this._connectionstatechangepoly)), i2.apply(this, arguments);
          };
        });
      }
      function Ph(e2, t2) {
        if (!e2.RTCPeerConnection)
          return;
        if ("chrome" === t2.browser && t2.version >= 71)
          return;
        if ("safari" === t2.browser && t2.version >= 605)
          return;
        const i2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
        e2.RTCPeerConnection.prototype.setRemoteDescription = function(t3) {
          if (t3 && t3.sdp && -1 !== t3.sdp.indexOf("\na=extmap-allow-mixed")) {
            const i3 = t3.sdp.split("\n").filter((e3) => "a=extmap-allow-mixed" !== Ih(e3).call(e3)).join("\n");
            e2.RTCSessionDescription && t3 instanceof e2.RTCSessionDescription ? arguments[0] = new e2.RTCSessionDescription({ type: t3.type, sdp: i3 }) : t3.sdp = i3;
          }
          return i2.apply(this, arguments);
        };
      }
      function Lh(e2, t2) {
        if (!e2.RTCPeerConnection || !e2.RTCPeerConnection.prototype)
          return;
        const i2 = e2.RTCPeerConnection.prototype.addIceCandidate;
        i2 && 0 !== i2.length && (e2.RTCPeerConnection.prototype.addIceCandidate = function() {
          return arguments[0] ? ("chrome" === t2.browser && t2.version < 78 || "firefox" === t2.browser && t2.version < 68 || "safari" === t2.browser) && arguments[0] && "" === arguments[0].candidate ? Cl.resolve() : i2.apply(this, arguments) : (arguments[1] && arguments[1].apply(null), Cl.resolve());
        });
      }
      function kh(e2, t2) {
        if (!e2.RTCPeerConnection || !e2.RTCPeerConnection.prototype)
          return;
        const i2 = e2.RTCPeerConnection.prototype.setLocalDescription;
        i2 && 0 !== i2.length && (e2.RTCPeerConnection.prototype.setLocalDescription = function() {
          let e3 = arguments[0] || {};
          if ("object" != typeof e3 || e3.type && e3.sdp)
            return i2.apply(this, arguments);
          if (e3 = { type: e3.type, sdp: e3.sdp }, !e3.type)
            switch (this.signalingState) {
              case "stable":
              case "have-local-offer":
              case "have-remote-pranswer":
                e3.type = "offer";
                break;
              default:
                e3.type = "answer";
            }
          if (e3.sdp || "offer" !== e3.type && "answer" !== e3.type)
            return i2.apply(this, [e3]);
          const t3 = "offer" === e3.type ? this.createOffer : this.createAnswer;
          return t3.apply(this).then((e4) => i2.apply(this, [e4]));
        });
      }
      var Mh = Object.freeze({ __proto__: null, shimRTCIceCandidate: Oh, shimRTCIceCandidateRelayProtocol: bh, shimMaxMessageSize: wh, shimSendThrowTypeError: Nh, shimConnectionState: Dh, removeExtmapAllowMixed: Ph, shimAddIceCandidateNullOrEmpty: Lh, shimParameterlessSetLocalDescription: kh });
      let Uh, xh;
      !function() {
        let { window: e2 } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { shimChrome: true, shimFirefox: true, shimSafari: true };
        const i2 = rr, r2 = or(e2), n2 = { browserDetails: r2, commonShim: Mh, extractVersion: $i, disableLog: tr, disableWarnings: ir, sdp: Ah };
        switch (r2.browser) {
          case "chrome":
            if (!xl || !Ml || !t2.shimChrome)
              return i2("Chrome shim is not included in this adapter release."), n2;
            if (null === r2.version)
              return i2("Chrome shim can not determine version, not shimming."), n2;
            i2("adapter.js shimming chrome."), n2.browserShim = xl, Lh(e2, r2), kh(e2), Ol(e2, r2), bl(e2), Ml(e2, r2), wl(e2), kl(e2, r2), Nl(e2), Dl(e2), Pl(e2), Ul(e2, r2), Oh(e2), bh(e2), Dh(e2), wh(e2, r2), Nh(e2), Ph(e2, r2);
            break;
          case "firefox":
            if (!Xl || !Fl || !t2.shimFirefox)
              return i2("Firefox shim is not included in this adapter release."), n2;
            i2("adapter.js shimming firefox."), n2.browserShim = Xl, Lh(e2, r2), kh(e2), Vl(e2, r2), Fl(e2, r2), jl(e2), Wl(e2), Bl(e2), Gl(e2), Hl(e2), Kl(e2), Yl(e2), ql(e2), Jl(e2), Oh(e2), Dh(e2), wh(e2, r2), Nh(e2);
            break;
          case "safari":
            if (!oh || !t2.shimSafari)
              return i2("Safari shim is not included in this adapter release."), n2;
            i2("adapter.js shimming safari."), n2.browserShim = oh, Lh(e2, r2), kh(e2), th(e2), rh(e2), Zl(e2), zl(e2), Ql(e2), ih(e2), $l(e2), nh(e2), Oh(e2), bh(e2), wh(e2, r2), Nh(e2), Ph(e2, r2);
            break;
          default:
            i2("Unsupported browser!");
        }
      }({ window: "undefined" == typeof window ? void 0 : window }), function(e2) {
        e2.WIN_10 = "Windows 10", e2.WIN_81 = "Windows 8.1", e2.WIN_8 = "Windows 8", e2.WIN_7 = "Windows 7", e2.WIN_VISTA = "Windows Vista", e2.WIN_SERVER_2003 = "Windows Server 2003", e2.WIN_XP = "Windows XP", e2.WIN_2000 = "Windows 2000", e2.ANDROID = "Android", e2.OPEN_BSD = "Open BSD", e2.SUN_OS = "Sun OS", e2.LINUX = "Linux", e2.IOS = "iOS", e2.MAC_OS = "Mac OS", e2.QNX = "QNX", e2.UNIX = "UNIX", e2.BEOS = "BeOS", e2.OS_2 = "OS/2", e2.SEARCH_BOT = "Search Bot";
      }(Uh || (Uh = {})), function(e2) {
        e2.CHROME = "Chrome", e2.SAFARI = "Safari", e2.EDGE = "Edge", e2.FIREFOX = "Firefox", e2.OPERA = "OPR", e2.QQ = "QQBrowser", e2.WECHAT = "MicroMessenger";
      }(xh || (xh = {}));
      var Vh = { exports: {} };
      !function(e2, i2) {
        !function(t2, r2) {
          var n2 = "function", o2 = "undefined", s2 = "object", a2 = "string", c2 = "model", d2 = "name", u2 = "type", l2 = "vendor", h2 = "version", p2 = "architecture", _2 = "console", E2 = "mobile", f2 = "tablet", m2 = "smarttv", g2 = "wearable", S2 = "embedded", T2 = "Amazon", v2 = "Apple", R2 = "ASUS", I2 = "BlackBerry", y2 = "Firefox", C2 = "Google", A2 = "Huawei", O2 = "LG", b2 = "Microsoft", w2 = "Motorola", N2 = "Opera", D2 = "Samsung", P2 = "Sharp", L2 = "Sony", k2 = "Xiaomi", M2 = "Zebra", U2 = "Facebook", x2 = function(e3) {
            for (var t3 = {}, i3 = 0; i3 < e3.length; i3++)
              t3[e3[i3].toUpperCase()] = e3[i3];
            return t3;
          }, V2 = function(e3, t3) {
            return typeof e3 === a2 && -1 !== j2(t3).indexOf(j2(e3));
          }, j2 = function(e3) {
            return e3.toLowerCase();
          }, F2 = function(e3, t3) {
            if (typeof e3 === a2)
              return e3 = e3.replace(/^\s\s*/, "").replace(/\s\s*$/, ""), typeof t3 === o2 ? e3 : e3.substring(0, 350);
          }, B2 = function(e3, t3) {
            for (var i3, o3, a3, c3, d3, u3, l3 = 0; l3 < t3.length && !d3; ) {
              var h3 = t3[l3], p3 = t3[l3 + 1];
              for (i3 = o3 = 0; i3 < h3.length && !d3; )
                if (d3 = h3[i3++].exec(e3))
                  for (a3 = 0; a3 < p3.length; a3++)
                    u3 = d3[++o3], typeof (c3 = p3[a3]) === s2 && c3.length > 0 ? 2 === c3.length ? typeof c3[1] == n2 ? this[c3[0]] = c3[1].call(this, u3) : this[c3[0]] = c3[1] : 3 === c3.length ? typeof c3[1] !== n2 || c3[1].exec && c3[1].test ? this[c3[0]] = u3 ? u3.replace(c3[1], c3[2]) : r2 : this[c3[0]] = u3 ? c3[1].call(this, u3, c3[2]) : r2 : 4 === c3.length && (this[c3[0]] = u3 ? c3[3].call(this, u3.replace(c3[1], c3[2])) : r2) : this[c3] = u3 || r2;
              l3 += 2;
            }
          }, G2 = function(e3, t3) {
            for (var i3 in t3)
              if (typeof t3[i3] === s2 && t3[i3].length > 0) {
                for (var n3 = 0; n3 < t3[i3].length; n3++)
                  if (V2(t3[i3][n3], e3))
                    return "?" === i3 ? r2 : i3;
              } else if (V2(t3[i3], e3))
                return "?" === i3 ? r2 : i3;
            return e3;
          }, W2 = { ME: "4.90", "NT 3.11": "NT3.51", "NT 4.0": "NT4.0", 2e3: "NT 5.0", XP: ["NT 5.1", "NT 5.2"], Vista: "NT 6.0", 7: "NT 6.1", 8: "NT 6.2", 8.1: "NT 6.3", 10: ["NT 6.4", "NT 10.0"], RT: "ARM" }, H2 = { browser: [[/\b(?:crmo|crios)\/([\w\.]+)/i], [h2, [d2, "Chrome"]], [/edg(?:e|ios|a)?\/([\w\.]+)/i], [h2, [d2, "Edge"]], [/(opera mini)\/([-\w\.]+)/i, /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i, /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i], [d2, h2], [/opios[\/ ]+([\w\.]+)/i], [h2, [d2, "Opera Mini"]], [/\bopr\/([\w\.]+)/i], [h2, [d2, N2]], [/(kindle)\/([\w\.]+)/i, /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i, /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i, /(ba?idubrowser)[\/ ]?([\w\.]+)/i, /(?:ms|\()(ie) ([\w\.]+)/i, /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i, /(weibo)__([\d\.]+)/i], [d2, h2], [/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i], [h2, [d2, "UCBrowser"]], [/microm.+\bqbcore\/([\w\.]+)/i, /\bqbcore\/([\w\.]+).+microm/i], [h2, [d2, "WeChat(Win) Desktop"]], [/micromessenger\/([\w\.]+)/i], [h2, [d2, "WeChat"]], [/konqueror\/([\w\.]+)/i], [h2, [d2, "Konqueror"]], [/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i], [h2, [d2, "IE"]], [/yabrowser\/([\w\.]+)/i], [h2, [d2, "Yandex"]], [/(avast|avg)\/([\w\.]+)/i], [[d2, /(.+)/, "$1 Secure Browser"], h2], [/\bfocus\/([\w\.]+)/i], [h2, [d2, "Firefox Focus"]], [/\bopt\/([\w\.]+)/i], [h2, [d2, "Opera Touch"]], [/coc_coc\w+\/([\w\.]+)/i], [h2, [d2, "Coc Coc"]], [/dolfin\/([\w\.]+)/i], [h2, [d2, "Dolphin"]], [/coast\/([\w\.]+)/i], [h2, [d2, "Opera Coast"]], [/miuibrowser\/([\w\.]+)/i], [h2, [d2, "MIUI Browser"]], [/fxios\/([-\w\.]+)/i], [h2, [d2, y2]], [/\bqihu|(qi?ho?o?|360)browser/i], [[d2, "360 Browser"]], [/(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i], [[d2, /(.+)/, "$1 Browser"], h2], [/(comodo_dragon)\/([\w\.]+)/i], [[d2, /_/g, " "], h2], [/(electron)\/([\w\.]+) safari/i, /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i, /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i], [d2, h2], [/(metasr)[\/ ]?([\w\.]+)/i, /(lbbrowser)/i, /\[(linkedin)app\]/i], [d2], [/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i], [[d2, U2], h2], [/safari (line)\/([\w\.]+)/i, /\b(line)\/([\w\.]+)\/iab/i, /(chromium|instagram)[\/ ]([-\w\.]+)/i], [d2, h2], [/\bgsa\/([\w\.]+) .*safari\//i], [h2, [d2, "GSA"]], [/headlesschrome(?:\/([\w\.]+)| )/i], [h2, [d2, "Chrome Headless"]], [/ wv\).+(chrome)\/([\w\.]+)/i], [[d2, "Chrome WebView"], h2], [/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i], [h2, [d2, "Android Browser"]], [/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i], [d2, h2], [/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i], [h2, [d2, "Mobile Safari"]], [/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i], [h2, d2], [/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i], [d2, [h2, G2, { "1.0": "/8", 1.2: "/1", 1.3: "/3", "2.0": "/412", "2.0.2": "/416", "2.0.3": "/417", "2.0.4": "/419", "?": "/" }]], [/(webkit|khtml)\/([\w\.]+)/i], [d2, h2], [/(navigator|netscape\d?)\/([-\w\.]+)/i], [[d2, "Netscape"], h2], [/mobile vr; rv:([\w\.]+)\).+firefox/i], [h2, [d2, "Firefox Reality"]], [/ekiohf.+(flow)\/([\w\.]+)/i, /(swiftfox)/i, /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i, /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i, /(firefox)\/([\w\.]+)/i, /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i, /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i, /(links) \(([\w\.]+)/i], [d2, h2]], cpu: [[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i], [[p2, "amd64"]], [/(ia32(?=;))/i], [[p2, j2]], [/((?:i[346]|x)86)[;\)]/i], [[p2, "ia32"]], [/\b(aarch64|arm(v?8e?l?|_?64))\b/i], [[p2, "arm64"]], [/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i], [[p2, "armhf"]], [/windows (ce|mobile); ppc;/i], [[p2, "arm"]], [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i], [[p2, /ower/, "", j2]], [/(sun4\w)[;\)]/i], [[p2, "sparc"]], [/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i], [[p2, j2]]], device: [[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i], [c2, [l2, D2], [u2, f2]], [/\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i, /samsung[- ]([-\w]+)/i, /sec-(sgh\w+)/i], [c2, [l2, D2], [u2, E2]], [/\((ip(?:hone|od)[\w ]*);/i], [c2, [l2, v2], [u2, E2]], [/\((ipad);[-\w\),; ]+apple/i, /applecoremedia\/[\w\.]+ \((ipad)/i, /\b(ipad)\d\d?,\d\d?[;\]].+ios/i], [c2, [l2, v2], [u2, f2]], [/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i], [c2, [l2, A2], [u2, f2]], [/(?:huawei|honor)([-\w ]+)[;\)]/i, /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i], [c2, [l2, A2], [u2, E2]], [/\b(poco[\w ]+)(?: bui|\))/i, /\b; (\w+) build\/hm\1/i, /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i, /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i, /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i], [[c2, /_/g, " "], [l2, k2], [u2, E2]], [/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i], [[c2, /_/g, " "], [l2, k2], [u2, f2]], [/; (\w+) bui.+ oppo/i, /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i], [c2, [l2, "OPPO"], [u2, E2]], [/vivo (\w+)(?: bui|\))/i, /\b(v[12]\d{3}\w?[at])(?: bui|;)/i], [c2, [l2, "Vivo"], [u2, E2]], [/\b(rmx[12]\d{3})(?: bui|;|\))/i], [c2, [l2, "Realme"], [u2, E2]], [/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i, /\bmot(?:orola)?[- ](\w*)/i, /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i], [c2, [l2, w2], [u2, E2]], [/\b(mz60\d|xoom[2 ]{0,2}) build\//i], [c2, [l2, w2], [u2, f2]], [/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i], [c2, [l2, O2], [u2, f2]], [/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i, /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i, /\blg-?([\d\w]+) bui/i], [c2, [l2, O2], [u2, E2]], [/(ideatab[-\w ]+)/i, /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i], [c2, [l2, "Lenovo"], [u2, f2]], [/(?:maemo|nokia).*(n900|lumia \d+)/i, /nokia[-_ ]?([-\w\.]*)/i], [[c2, /_/g, " "], [l2, "Nokia"], [u2, E2]], [/(pixel c)\b/i], [c2, [l2, C2], [u2, f2]], [/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i], [c2, [l2, C2], [u2, E2]], [/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i], [c2, [l2, L2], [u2, E2]], [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i], [[c2, "Xperia Tablet"], [l2, L2], [u2, f2]], [/ (kb2005|in20[12]5|be20[12][59])\b/i, /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i], [c2, [l2, "OnePlus"], [u2, E2]], [/(alexa)webm/i, /(kf[a-z]{2}wi)( bui|\))/i, /(kf[a-z]+)( bui|\)).+silk\//i], [c2, [l2, T2], [u2, f2]], [/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i], [[c2, /(.+)/g, "Fire Phone $1"], [l2, T2], [u2, E2]], [/(playbook);[-\w\),; ]+(rim)/i], [c2, l2, [u2, f2]], [/\b((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10; (\w+)/i], [c2, [l2, I2], [u2, E2]], [/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i], [c2, [l2, R2], [u2, f2]], [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i], [c2, [l2, R2], [u2, E2]], [/(nexus 9)/i], [c2, [l2, "HTC"], [u2, f2]], [/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i, /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i, /(alcatel|geeksphone|nexian|panasonic|sony(?!-bra))[-_ ]?([-\w]*)/i], [l2, [c2, /_/g, " "], [u2, E2]], [/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i], [c2, [l2, "Acer"], [u2, f2]], [/droid.+; (m[1-5] note) bui/i, /\bmz-([-\w]{2,})/i], [c2, [l2, "Meizu"], [u2, E2]], [/\b(sh-?[altvz]?\d\d[a-ekm]?)/i], [c2, [l2, P2], [u2, E2]], [/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i, /(hp) ([\w ]+\w)/i, /(asus)-?(\w+)/i, /(microsoft); (lumia[\w ]+)/i, /(lenovo)[-_ ]?([-\w]+)/i, /(jolla)/i, /(oppo) ?([\w ]+) bui/i], [l2, c2, [u2, E2]], [/(archos) (gamepad2?)/i, /(hp).+(touchpad(?!.+tablet)|tablet)/i, /(kindle)\/([\w\.]+)/i, /(nook)[\w ]+build\/(\w+)/i, /(dell) (strea[kpr\d ]*[\dko])/i, /(le[- ]+pan)[- ]+(\w{1,9}) bui/i, /(trinity)[- ]*(t\d{3}) bui/i, /(gigaset)[- ]+(q\w{1,9}) bui/i, /(vodafone) ([\w ]+)(?:\)| bui)/i], [l2, c2, [u2, f2]], [/(surface duo)/i], [c2, [l2, b2], [u2, f2]], [/droid [\d\.]+; (fp\du?)(?: b|\))/i], [c2, [l2, "Fairphone"], [u2, E2]], [/(u304aa)/i], [c2, [l2, "AT&T"], [u2, E2]], [/\bsie-(\w*)/i], [c2, [l2, "Siemens"], [u2, E2]], [/\b(rct\w+) b/i], [c2, [l2, "RCA"], [u2, f2]], [/\b(venue[\d ]{2,7}) b/i], [c2, [l2, "Dell"], [u2, f2]], [/\b(q(?:mv|ta)\w+) b/i], [c2, [l2, "Verizon"], [u2, f2]], [/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i], [c2, [l2, "Barnes & Noble"], [u2, f2]], [/\b(tm\d{3}\w+) b/i], [c2, [l2, "NuVision"], [u2, f2]], [/\b(k88) b/i], [c2, [l2, "ZTE"], [u2, f2]], [/\b(nx\d{3}j) b/i], [c2, [l2, "ZTE"], [u2, E2]], [/\b(gen\d{3}) b.+49h/i], [c2, [l2, "Swiss"], [u2, E2]], [/\b(zur\d{3}) b/i], [c2, [l2, "Swiss"], [u2, f2]], [/\b((zeki)?tb.*\b) b/i], [c2, [l2, "Zeki"], [u2, f2]], [/\b([yr]\d{2}) b/i, /\b(dragon[- ]+touch |dt)(\w{5}) b/i], [[l2, "Dragon Touch"], c2, [u2, f2]], [/\b(ns-?\w{0,9}) b/i], [c2, [l2, "Insignia"], [u2, f2]], [/\b((nxa|next)-?\w{0,9}) b/i], [c2, [l2, "NextBook"], [u2, f2]], [/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i], [[l2, "Voice"], c2, [u2, E2]], [/\b(lvtel\-)?(v1[12]) b/i], [[l2, "LvTel"], c2, [u2, E2]], [/\b(ph-1) /i], [c2, [l2, "Essential"], [u2, E2]], [/\b(v(100md|700na|7011|917g).*\b) b/i], [c2, [l2, "Envizen"], [u2, f2]], [/\b(trio[-\w\. ]+) b/i], [c2, [l2, "MachSpeed"], [u2, f2]], [/\btu_(1491) b/i], [c2, [l2, "Rotor"], [u2, f2]], [/(shield[\w ]+) b/i], [c2, [l2, "Nvidia"], [u2, f2]], [/(sprint) (\w+)/i], [l2, c2, [u2, E2]], [/(kin\.[onetw]{3})/i], [[c2, /\./g, " "], [l2, b2], [u2, E2]], [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i], [c2, [l2, M2], [u2, f2]], [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i], [c2, [l2, M2], [u2, E2]], [/(ouya)/i, /(nintendo) ([wids3utch]+)/i], [l2, c2, [u2, _2]], [/droid.+; (shield) bui/i], [c2, [l2, "Nvidia"], [u2, _2]], [/(playstation [345portablevi]+)/i], [c2, [l2, L2], [u2, _2]], [/\b(xbox(?: one)?(?!; xbox))[\); ]/i], [c2, [l2, b2], [u2, _2]], [/smart-tv.+(samsung)/i], [l2, [u2, m2]], [/hbbtv.+maple;(\d+)/i], [[c2, /^/, "SmartTV"], [l2, D2], [u2, m2]], [/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i], [[l2, O2], [u2, m2]], [/(apple) ?tv/i], [l2, [c2, "Apple TV"], [u2, m2]], [/crkey/i], [[c2, "Chromecast"], [l2, C2], [u2, m2]], [/droid.+aft(\w)( bui|\))/i], [c2, [l2, T2], [u2, m2]], [/\(dtv[\);].+(aquos)/i, /(aquos-tv[\w ]+)\)/i], [c2, [l2, P2], [u2, m2]], [/(bravia[\w ]+)( bui|\))/i], [c2, [l2, L2], [u2, m2]], [/(mitv-\w{5}) bui/i], [c2, [l2, k2], [u2, m2]], [/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i, /hbbtv\/\d+\.\d+\.\d+ +\([\w ]*; *(\w[^;]*);([^;]*)/i], [[l2, F2], [c2, F2], [u2, m2]], [/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i], [[u2, m2]], [/((pebble))app/i], [l2, c2, [u2, g2]], [/droid.+; (glass) \d/i], [c2, [l2, C2], [u2, g2]], [/droid.+; (wt63?0{2,3})\)/i], [c2, [l2, M2], [u2, g2]], [/(quest( 2)?)/i], [c2, [l2, U2], [u2, g2]], [/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i], [l2, [u2, S2]], [/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i], [c2, [u2, E2]], [/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i], [c2, [u2, f2]], [/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i], [[u2, f2]], [/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i], [[u2, E2]], [/(android[-\w\. ]{0,9});.+buil/i], [c2, [l2, "Generic"]]], engine: [[/windows.+ edge\/([\w\.]+)/i], [h2, [d2, "EdgeHTML"]], [/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i], [h2, [d2, "Blink"]], [/(presto)\/([\w\.]+)/i, /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i, /ekioh(flow)\/([\w\.]+)/i, /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i, /(icab)[\/ ]([23]\.[\d\.]+)/i], [d2, h2], [/rv\:([\w\.]{1,9})\b.+(gecko)/i], [h2, d2]], os: [[/microsoft (windows) (vista|xp)/i], [d2, h2], [/(windows) nt 6\.2; (arm)/i, /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i, /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i], [d2, [h2, G2, W2]], [/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i], [[d2, "Windows"], [h2, G2, W2]], [/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i, /cfnetwork\/.+darwin/i], [[h2, /_/g, "."], [d2, "iOS"]], [/(mac os x) ?([\w\. ]*)/i, /(macintosh|mac_powerpc\b)(?!.+haiku)/i], [[d2, "Mac OS"], [h2, /_/g, "."]], [/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i], [h2, d2], [/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i, /(blackberry)\w*\/([\w\.]*)/i, /(tizen|kaios)[\/ ]([\w\.]+)/i, /\((series40);/i], [d2, h2], [/\(bb(10);/i], [h2, [d2, I2]], [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i], [h2, [d2, "Symbian"]], [/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i], [h2, [d2, "Firefox OS"]], [/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i], [h2, [d2, "webOS"]], [/crkey\/([\d\.]+)/i], [h2, [d2, "Chromecast"]], [/(cros) [\w]+ ([\w\.]+\w)/i], [[d2, "Chromium OS"], h2], [/(nintendo|playstation) ([wids345portablevuch]+)/i, /(xbox); +xbox ([^\);]+)/i, /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i, /(mint)[\/\(\) ]?(\w*)/i, /(mageia|vectorlinux)[; ]/i, /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i, /(hurd|linux) ?([\w\.]*)/i, /(gnu) ?([\w\.]*)/i, /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, /(haiku) (\w+)/i], [d2, h2], [/(sunos) ?([\w\.\d]*)/i], [[d2, "Solaris"], h2], [/((?:open)?solaris)[-\/ ]?([\w\.]*)/i, /(aix) ((\d)(?=\.|\)| )[\w\.])*/i, /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i, /(unix) ?([\w\.]*)/i], [d2, h2]] }, K2 = function(e3, i3) {
            if (typeof e3 === s2 && (i3 = e3, e3 = r2), !(this instanceof K2))
              return new K2(e3, i3).getResult();
            var n3 = e3 || (typeof t2 !== o2 && t2.navigator && t2.navigator.userAgent ? t2.navigator.userAgent : ""), c3 = i3 ? function(e4, t3) {
              var i4 = {};
              for (var r3 in e4)
                t3[r3] && t3[r3].length % 2 == 0 ? i4[r3] = t3[r3].concat(e4[r3]) : i4[r3] = e4[r3];
              return i4;
            }(H2, i3) : H2;
            return this.getBrowser = function() {
              var e4 = {};
              return e4.name = r2, e4.version = r2, B2.call(e4, n3, c3.browser), e4.major = function(e5) {
                return typeof e5 === a2 ? e5.replace(/[^\d\.]/g, "").split(".")[0] : r2;
              }(e4.version), e4;
            }, this.getCPU = function() {
              var e4 = {};
              return e4.architecture = r2, B2.call(e4, n3, c3.cpu), e4;
            }, this.getDevice = function() {
              var e4 = {};
              return e4.vendor = r2, e4.model = r2, e4.type = r2, B2.call(e4, n3, c3.device), e4;
            }, this.getEngine = function() {
              var e4 = {};
              return e4.name = r2, e4.version = r2, B2.call(e4, n3, c3.engine), e4;
            }, this.getOS = function() {
              var e4 = {};
              return e4.name = r2, e4.version = r2, B2.call(e4, n3, c3.os), e4;
            }, this.getResult = function() {
              return { ua: this.getUA(), browser: this.getBrowser(), engine: this.getEngine(), os: this.getOS(), device: this.getDevice(), cpu: this.getCPU() };
            }, this.getUA = function() {
              return n3;
            }, this.setUA = function(e4) {
              return n3 = typeof e4 === a2 && e4.length > 350 ? F2(e4, 350) : e4, this;
            }, this.setUA(n3), this;
          };
          K2.VERSION = "0.7.32", K2.BROWSER = x2([d2, h2, "major"]), K2.CPU = x2([p2]), K2.DEVICE = x2([c2, l2, u2, _2, E2, m2, f2, g2, S2]), K2.ENGINE = K2.OS = x2([d2, h2]), e2.exports && (i2 = e2.exports = K2), i2.UAParser = K2;
          var Y2 = typeof t2 !== o2 && (t2.jQuery || t2.Zepto);
          if (Y2 && !Y2.ua) {
            var q2 = new K2();
            Y2.ua = q2.getResult(), Y2.ua.get = function() {
              return q2.getUA();
            }, Y2.ua.set = function(e3) {
              q2.setUA(e3);
              var t3 = q2.getResult();
              for (var i3 in t3)
                Y2.ua[i3] = t3[i3];
            };
          }
        }("object" == typeof window ? window : t);
      }(Vh, Vh.exports);
      const jh = new (0, Vh.exports)();
      let Fh = jh.getResult();
      function Bh(e2) {
        return e2 && jh.setUA(e2), Fh = jh.getResult(), { name: Gh(Fh), version: Wh(Fh), os: Hh(Fh), osVersion: Fh.os.version };
      }
      function Gh(e2) {
        if ("Blink" === e2.engine.name && "WeChat" !== e2.browser.name)
          return xh.CHROME;
        switch (e2.browser.name) {
          case "Chrome Headless":
          case "Chrome":
          case "Chromium":
            return xh.CHROME;
          case "Safari":
          case "Mobile Safari":
            return xh.SAFARI;
          case "Edge":
            return xh.EDGE;
          case "Firefox":
            return xh.FIREFOX;
          case "QQBrowser":
            return xh.QQ;
          case "Opera":
            return xh.OPERA;
          case "WeChat":
            return xh.WECHAT;
          default:
            return e2.browser.name || "";
        }
      }
      function Wh(e2) {
        let t2;
        return t2 = "Blink" === e2.engine.name ? e2.engine.version || "" : e2.browser.version || "", t2.split(".")[0];
      }
      function Hh(e2) {
        switch (e2.os.name) {
          case "Windows":
            return e2.os.version ? e2.os.name + " " + e2.os.version : e2.os.name;
          default:
            return e2.os.name || "";
        }
      }
      function Kh() {
        return Bh().os;
      }
      function Yh() {
        const e2 = Bh();
        return !!("WebKit" === Fh.engine.name && e2.os === Uh.MAC_OS && navigator.maxTouchPoints && navigator.maxTouchPoints > 0 && e2.name !== xh.SAFARI || Zh() && e2.name !== xh.SAFARI);
      }
      function qh() {
        const e2 = Bh();
        if (Yh()) {
          if (e2.os === Uh.MAC_OS)
            return true;
          if (e2.os === Uh.IOS) {
            const e3 = Fh.os.version && Fh.os.version.split(".");
            if (e3 && 14 === Number(e3[0]) && e3[1] && Number(e3[1]) >= 3)
              return true;
            if (e3 && Number(e3[0]) > 14)
              return true;
          }
        }
        return false;
      }
      function Jh() {
        return "WebKit" === Fh.engine.name;
      }
      function Xh() {
        return Bh().name === xh.CHROME;
      }
      function zh() {
        return Bh().name === xh.SAFARI;
      }
      function Qh() {
        return Bh().name === xh.FIREFOX;
      }
      function Zh() {
        return Bh().os === Uh.IOS;
      }
      function $h() {
        const e2 = Bh();
        return !(e2.name !== xh.CHROME || !e2.osVersion) && Number(e2.version) <= 90;
      }
      function ep() {
        const e2 = Bh();
        if (e2.os !== Uh.IOS || !e2.osVersion)
          return false;
        const t2 = e2.osVersion.split(".");
        return 15 === Number(t2[0]);
      }
      function tp() {
        const e2 = Bh();
        if (e2.os !== Uh.IOS || !e2.osVersion)
          return false;
        const t2 = e2.osVersion.split(".");
        return 15 === Number(t2[0]) && 0 === Number(t2[1]);
      }
      function ip() {
        const e2 = Bh();
        if (e2.os !== Uh.IOS || !e2.osVersion)
          return false;
        const t2 = e2.osVersion.split(".");
        return 15 === Number(t2[0]) && Number(t2[1]) >= 1;
      }
      function rp() {
        const e2 = Bh();
        if (e2.os !== Uh.IOS || !e2.osVersion)
          return false;
        const t2 = e2.osVersion.split(".");
        return 15 === Number(t2[0]) && Number(t2[1]) >= 2;
      }
      function np() {
        return zh() && navigator.maxTouchPoints > 0;
      }
      function op() {
        return Bh().name === xh.WECHAT;
      }
      function sp() {
        return window.navigator.appVersion && null !== window.navigator.appVersion.match(/Chrome\/([\w\W]*?)\./) && window.navigator.appVersion.match(/Chrome\/([\w\W]*?)\./)[1] <= 35;
      }
      function ap() {
        const e2 = Bh();
        if (e2.name === xh.EDGE || e2.name === xh.SAFARI)
          return false;
        return !!navigator.userAgent.toLocaleLowerCase().match(/chrome\/[\d]./i);
      }
      function cp() {
        return Bh().os === Uh.ANDROID;
      }
      function dp() {
        const e2 = Bh();
        return "Android" === e2.os && ("Chrome" === e2.name || e2.name === xh.WECHAT || /chrome|chromium/i.test(navigator.userAgent));
      }
      var up = { exports: {} }, lp = Ri, hp = T, pp = Ht.f;
      lp({ target: "Object", stat: true, forced: Object.defineProperty !== pp, sham: !hp }, { defineProperty: pp });
      var _p = J.Object, Ep = up.exports = function(e2, t2, i2) {
        return _p.defineProperty(e2, t2, i2);
      };
      _p.defineProperty.sham && (Ep.sham = true);
      var fp = up.exports;
      function mp(e2, t2, i2) {
        return t2 in e2 ? fp(e2, t2, { value: i2, enumerable: true, configurable: true, writable: true }) : e2[t2] = i2, e2;
      }
      var gp, Sp = { exports: {} }, Tp = function(e2, t2) {
        return function() {
          for (var i2 = new Array(arguments.length), r2 = 0; r2 < i2.length; r2++)
            i2[r2] = arguments[r2];
          return e2.apply(t2, i2);
        };
      }, vp = Tp, Rp = Object.prototype.toString, Ip = (gp = /* @__PURE__ */ Object.create(null), function(e2) {
        var t2 = Rp.call(e2);
        return gp[t2] || (gp[t2] = t2.slice(8, -1).toLowerCase());
      });
      function yp(e2) {
        return e2 = e2.toLowerCase(), function(t2) {
          return Ip(t2) === e2;
        };
      }
      function Cp(e2) {
        return Array.isArray(e2);
      }
      function Ap(e2) {
        return void 0 === e2;
      }
      var Op = yp("ArrayBuffer");
      function bp(e2) {
        return null !== e2 && "object" == typeof e2;
      }
      function wp(e2) {
        if ("object" !== Ip(e2))
          return false;
        var t2 = Object.getPrototypeOf(e2);
        return null === t2 || t2 === Object.prototype;
      }
      var Np = yp("Date"), Dp = yp("File"), Pp = yp("Blob"), Lp = yp("FileList");
      function kp(e2) {
        return "[object Function]" === Rp.call(e2);
      }
      var Mp = yp("URLSearchParams");
      function Up(e2, t2) {
        if (null != e2)
          if ("object" != typeof e2 && (e2 = [e2]), Cp(e2))
            for (var i2 = 0, r2 = e2.length; i2 < r2; i2++)
              t2.call(null, e2[i2], i2, e2);
          else
            for (var n2 in e2)
              Object.prototype.hasOwnProperty.call(e2, n2) && t2.call(null, e2[n2], n2, e2);
      }
      var xp, Vp = (xp = "undefined" != typeof Uint8Array && Object.getPrototypeOf(Uint8Array), function(e2) {
        return xp && e2 instanceof xp;
      }), jp = { isArray: Cp, isArrayBuffer: Op, isBuffer: function(e2) {
        return null !== e2 && !Ap(e2) && null !== e2.constructor && !Ap(e2.constructor) && "function" == typeof e2.constructor.isBuffer && e2.constructor.isBuffer(e2);
      }, isFormData: function(e2) {
        var t2 = "[object FormData]";
        return e2 && ("function" == typeof FormData && e2 instanceof FormData || Rp.call(e2) === t2 || kp(e2.toString) && e2.toString() === t2);
      }, isArrayBufferView: function(e2) {
        return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(e2) : e2 && e2.buffer && Op(e2.buffer);
      }, isString: function(e2) {
        return "string" == typeof e2;
      }, isNumber: function(e2) {
        return "number" == typeof e2;
      }, isObject: bp, isPlainObject: wp, isUndefined: Ap, isDate: Np, isFile: Dp, isBlob: Pp, isFunction: kp, isStream: function(e2) {
        return bp(e2) && kp(e2.pipe);
      }, isURLSearchParams: Mp, isStandardBrowserEnv: function() {
        return ("undefined" == typeof navigator || "ReactNative" !== navigator.product && "NativeScript" !== navigator.product && "NS" !== navigator.product) && ("undefined" != typeof window && "undefined" != typeof document);
      }, forEach: Up, merge: function e2() {
        var t2 = {};
        function i2(i3, r3) {
          wp(t2[r3]) && wp(i3) ? t2[r3] = e2(t2[r3], i3) : wp(i3) ? t2[r3] = e2({}, i3) : Cp(i3) ? t2[r3] = i3.slice() : t2[r3] = i3;
        }
        for (var r2 = 0, n2 = arguments.length; r2 < n2; r2++)
          Up(arguments[r2], i2);
        return t2;
      }, extend: function(e2, t2, i2) {
        return Up(t2, function(t3, r2) {
          e2[r2] = i2 && "function" == typeof t3 ? vp(t3, i2) : t3;
        }), e2;
      }, trim: function(e2) {
        return e2.trim ? e2.trim() : e2.replace(/^\s+|\s+$/g, "");
      }, stripBOM: function(e2) {
        return 65279 === e2.charCodeAt(0) && (e2 = e2.slice(1)), e2;
      }, inherits: function(e2, t2, i2, r2) {
        e2.prototype = Object.create(t2.prototype, r2), e2.prototype.constructor = e2, i2 && Object.assign(e2.prototype, i2);
      }, toFlatObject: function(e2, t2, i2) {
        var r2, n2, o2, s2 = {};
        t2 = t2 || {};
        do {
          for (n2 = (r2 = Object.getOwnPropertyNames(e2)).length; n2-- > 0; )
            s2[o2 = r2[n2]] || (t2[o2] = e2[o2], s2[o2] = true);
          e2 = Object.getPrototypeOf(e2);
        } while (e2 && (!i2 || i2(e2, t2)) && e2 !== Object.prototype);
        return t2;
      }, kindOf: Ip, kindOfTest: yp, endsWith: function(e2, t2, i2) {
        e2 = String(e2), (void 0 === i2 || i2 > e2.length) && (i2 = e2.length), i2 -= t2.length;
        var r2 = e2.indexOf(t2, i2);
        return -1 !== r2 && r2 === i2;
      }, toArray: function(e2) {
        if (!e2)
          return null;
        var t2 = e2.length;
        if (Ap(t2))
          return null;
        for (var i2 = new Array(t2); t2-- > 0; )
          i2[t2] = e2[t2];
        return i2;
      }, isTypedArray: Vp, isFileList: Lp }, Fp = jp;
      function Bp(e2) {
        return encodeURIComponent(e2).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      }
      var Gp = function(e2, t2, i2) {
        if (!t2)
          return e2;
        var r2;
        if (i2)
          r2 = i2(t2);
        else if (Fp.isURLSearchParams(t2))
          r2 = t2.toString();
        else {
          var n2 = [];
          Fp.forEach(t2, function(e3, t3) {
            null != e3 && (Fp.isArray(e3) ? t3 += "[]" : e3 = [e3], Fp.forEach(e3, function(e4) {
              Fp.isDate(e4) ? e4 = e4.toISOString() : Fp.isObject(e4) && (e4 = JSON.stringify(e4)), n2.push(Bp(t3) + "=" + Bp(e4));
            }));
          }), r2 = n2.join("&");
        }
        if (r2) {
          var o2 = e2.indexOf("#");
          -1 !== o2 && (e2 = e2.slice(0, o2)), e2 += (-1 === e2.indexOf("?") ? "?" : "&") + r2;
        }
        return e2;
      }, Wp = jp;
      function Hp() {
        this.handlers = [];
      }
      Hp.prototype.use = function(e2, t2, i2) {
        return this.handlers.push({ fulfilled: e2, rejected: t2, synchronous: !!i2 && i2.synchronous, runWhen: i2 ? i2.runWhen : null }), this.handlers.length - 1;
      }, Hp.prototype.eject = function(e2) {
        this.handlers[e2] && (this.handlers[e2] = null);
      }, Hp.prototype.forEach = function(e2) {
        Wp.forEach(this.handlers, function(t2) {
          null !== t2 && e2(t2);
        });
      };
      var Kp = Hp, Yp = jp, qp = jp;
      function Jp(e2, t2, i2, r2, n2) {
        Error.call(this), this.message = e2, this.name = "AxiosError", t2 && (this.code = t2), i2 && (this.config = i2), r2 && (this.request = r2), n2 && (this.response = n2);
      }
      qp.inherits(Jp, Error, { toJSON: function() {
        return { message: this.message, name: this.name, description: this.description, number: this.number, fileName: this.fileName, lineNumber: this.lineNumber, columnNumber: this.columnNumber, stack: this.stack, config: this.config, code: this.code, status: this.response && this.response.status ? this.response.status : null };
      } });
      var Xp = Jp.prototype, zp = {};
      ["ERR_BAD_OPTION_VALUE", "ERR_BAD_OPTION", "ECONNABORTED", "ETIMEDOUT", "ERR_NETWORK", "ERR_FR_TOO_MANY_REDIRECTS", "ERR_DEPRECATED", "ERR_BAD_RESPONSE", "ERR_BAD_REQUEST", "ERR_CANCELED"].forEach(function(e2) {
        zp[e2] = { value: e2 };
      }), Object.defineProperties(Jp, zp), Object.defineProperty(Xp, "isAxiosError", { value: true }), Jp.from = function(e2, t2, i2, r2, n2, o2) {
        var s2 = Object.create(Xp);
        return qp.toFlatObject(e2, s2, function(e3) {
          return e3 !== Error.prototype;
        }), Jp.call(s2, e2.message, t2, i2, r2, n2), s2.name = e2.name, o2 && Object.assign(s2, o2), s2;
      };
      var Qp = Jp, Zp = { silentJSONParsing: true, forcedJSONParsing: true, clarifyTimeoutError: false }, $p = jp;
      var e_ = function(e2, t2) {
        t2 = t2 || new FormData();
        var i2 = [];
        function r2(e3) {
          return null === e3 ? "" : $p.isDate(e3) ? e3.toISOString() : $p.isArrayBuffer(e3) || $p.isTypedArray(e3) ? "function" == typeof Blob ? new Blob([e3]) : Buffer.from(e3) : e3;
        }
        return function e3(n2, o2) {
          if ($p.isPlainObject(n2) || $p.isArray(n2)) {
            if (-1 !== i2.indexOf(n2))
              throw Error("Circular reference detected in " + o2);
            i2.push(n2), $p.forEach(n2, function(i3, n3) {
              if (!$p.isUndefined(i3)) {
                var s2, a2 = o2 ? o2 + "." + n3 : n3;
                if (i3 && !o2 && "object" == typeof i3) {
                  if ($p.endsWith(n3, "{}"))
                    i3 = JSON.stringify(i3);
                  else if ($p.endsWith(n3, "[]") && (s2 = $p.toArray(i3)))
                    return void s2.forEach(function(e4) {
                      !$p.isUndefined(e4) && t2.append(a2, r2(e4));
                    });
                }
                e3(i3, a2);
              }
            }), i2.pop();
          } else
            t2.append(o2, r2(n2));
        }(e2), t2;
      }, t_ = Qp, i_ = jp, r_ = i_.isStandardBrowserEnv() ? { write: function(e2, t2, i2, r2, n2, o2) {
        var s2 = [];
        s2.push(e2 + "=" + encodeURIComponent(t2)), i_.isNumber(i2) && s2.push("expires=" + new Date(i2).toGMTString()), i_.isString(r2) && s2.push("path=" + r2), i_.isString(n2) && s2.push("domain=" + n2), true === o2 && s2.push("secure"), document.cookie = s2.join("; ");
      }, read: function(e2) {
        var t2 = document.cookie.match(new RegExp("(^|;\\s*)(" + e2 + ")=([^;]*)"));
        return t2 ? decodeURIComponent(t2[3]) : null;
      }, remove: function(e2) {
        this.write(e2, "", Date.now() - 864e5);
      } } : { write: function() {
      }, read: function() {
        return null;
      }, remove: function() {
      } }, n_ = function(e2) {
        return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(e2);
      }, o_ = function(e2, t2) {
        return t2 ? e2.replace(/\/+$/, "") + "/" + t2.replace(/^\/+/, "") : e2;
      }, s_ = function(e2, t2) {
        return e2 && !n_(t2) ? o_(e2, t2) : t2;
      }, a_ = jp, c_ = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"], d_ = jp, u_ = d_.isStandardBrowserEnv() ? function() {
        var e2, t2 = /(msie|trident)/i.test(navigator.userAgent), i2 = document.createElement("a");
        function r2(e3) {
          var r3 = e3;
          return t2 && (i2.setAttribute("href", r3), r3 = i2.href), i2.setAttribute("href", r3), { href: i2.href, protocol: i2.protocol ? i2.protocol.replace(/:$/, "") : "", host: i2.host, search: i2.search ? i2.search.replace(/^\?/, "") : "", hash: i2.hash ? i2.hash.replace(/^#/, "") : "", hostname: i2.hostname, port: i2.port, pathname: "/" === i2.pathname.charAt(0) ? i2.pathname : "/" + i2.pathname };
        }
        return e2 = r2(window.location.href), function(t3) {
          var i3 = d_.isString(t3) ? r2(t3) : t3;
          return i3.protocol === e2.protocol && i3.host === e2.host;
        };
      }() : function() {
        return true;
      }, l_ = Qp;
      function h_(e2) {
        l_.call(this, null == e2 ? "canceled" : e2, l_.ERR_CANCELED), this.name = "CanceledError";
      }
      jp.inherits(h_, l_, { __CANCEL__: true });
      var p_ = h_, __ = jp, E_ = function(e2, t2, i2) {
        var r2 = i2.config.validateStatus;
        i2.status && r2 && !r2(i2.status) ? t2(new t_("Request failed with status code " + i2.status, [t_.ERR_BAD_REQUEST, t_.ERR_BAD_RESPONSE][Math.floor(i2.status / 100) - 4], i2.config, i2.request, i2)) : e2(i2);
      }, f_ = r_, m_ = Gp, g_ = s_, S_ = function(e2) {
        var t2, i2, r2, n2 = {};
        return e2 ? (a_.forEach(e2.split("\n"), function(e3) {
          if (r2 = e3.indexOf(":"), t2 = a_.trim(e3.substr(0, r2)).toLowerCase(), i2 = a_.trim(e3.substr(r2 + 1)), t2) {
            if (n2[t2] && c_.indexOf(t2) >= 0)
              return;
            n2[t2] = "set-cookie" === t2 ? (n2[t2] ? n2[t2] : []).concat([i2]) : n2[t2] ? n2[t2] + ", " + i2 : i2;
          }
        }), n2) : n2;
      }, T_ = u_, v_ = Zp, R_ = Qp, I_ = p_, y_ = function(e2) {
        var t2 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(e2);
        return t2 && t2[1] || "";
      }, C_ = function(e2) {
        return new Promise(function(t2, i2) {
          var r2, n2 = e2.data, o2 = e2.headers, s2 = e2.responseType;
          function a2() {
            e2.cancelToken && e2.cancelToken.unsubscribe(r2), e2.signal && e2.signal.removeEventListener("abort", r2);
          }
          __.isFormData(n2) && __.isStandardBrowserEnv() && delete o2["Content-Type"];
          var c2 = new XMLHttpRequest();
          if (e2.auth) {
            var d2 = e2.auth.username || "", u2 = e2.auth.password ? unescape(encodeURIComponent(e2.auth.password)) : "";
            o2.Authorization = "Basic " + btoa(d2 + ":" + u2);
          }
          var l2 = g_(e2.baseURL, e2.url);
          function h2() {
            if (c2) {
              var r3 = "getAllResponseHeaders" in c2 ? S_(c2.getAllResponseHeaders()) : null, n3 = { data: s2 && "text" !== s2 && "json" !== s2 ? c2.response : c2.responseText, status: c2.status, statusText: c2.statusText, headers: r3, config: e2, request: c2 };
              E_(function(e3) {
                t2(e3), a2();
              }, function(e3) {
                i2(e3), a2();
              }, n3), c2 = null;
            }
          }
          if (c2.open(e2.method.toUpperCase(), m_(l2, e2.params, e2.paramsSerializer), true), c2.timeout = e2.timeout, "onloadend" in c2 ? c2.onloadend = h2 : c2.onreadystatechange = function() {
            c2 && 4 === c2.readyState && (0 !== c2.status || c2.responseURL && 0 === c2.responseURL.indexOf("file:")) && setTimeout(h2);
          }, c2.onabort = function() {
            c2 && (i2(new R_("Request aborted", R_.ECONNABORTED, e2, c2)), c2 = null);
          }, c2.onerror = function() {
            i2(new R_("Network Error", R_.ERR_NETWORK, e2, c2, c2)), c2 = null;
          }, c2.ontimeout = function() {
            var t3 = e2.timeout ? "timeout of " + e2.timeout + "ms exceeded" : "timeout exceeded", r3 = e2.transitional || v_;
            e2.timeoutErrorMessage && (t3 = e2.timeoutErrorMessage), i2(new R_(t3, r3.clarifyTimeoutError ? R_.ETIMEDOUT : R_.ECONNABORTED, e2, c2)), c2 = null;
          }, __.isStandardBrowserEnv()) {
            var p2 = (e2.withCredentials || T_(l2)) && e2.xsrfCookieName ? f_.read(e2.xsrfCookieName) : void 0;
            p2 && (o2[e2.xsrfHeaderName] = p2);
          }
          "setRequestHeader" in c2 && __.forEach(o2, function(e3, t3) {
            void 0 === n2 && "content-type" === t3.toLowerCase() ? delete o2[t3] : c2.setRequestHeader(t3, e3);
          }), __.isUndefined(e2.withCredentials) || (c2.withCredentials = !!e2.withCredentials), s2 && "json" !== s2 && (c2.responseType = e2.responseType), "function" == typeof e2.onDownloadProgress && c2.addEventListener("progress", e2.onDownloadProgress), "function" == typeof e2.onUploadProgress && c2.upload && c2.upload.addEventListener("progress", e2.onUploadProgress), (e2.cancelToken || e2.signal) && (r2 = function(e3) {
            c2 && (i2(!e3 || e3 && e3.type ? new I_() : e3), c2.abort(), c2 = null);
          }, e2.cancelToken && e2.cancelToken.subscribe(r2), e2.signal && (e2.signal.aborted ? r2() : e2.signal.addEventListener("abort", r2))), n2 || (n2 = null);
          var _2 = y_(l2);
          _2 && -1 === ["http", "https", "file"].indexOf(_2) ? i2(new R_("Unsupported protocol " + _2 + ":", R_.ERR_BAD_REQUEST, e2)) : c2.send(n2);
        });
      }, A_ = jp, O_ = function(e2, t2) {
        Yp.forEach(e2, function(i2, r2) {
          r2 !== t2 && r2.toUpperCase() === t2.toUpperCase() && (e2[t2] = i2, delete e2[r2]);
        });
      }, b_ = Qp, w_ = e_, N_ = { "Content-Type": "application/x-www-form-urlencoded" };
      function D_(e2, t2) {
        !A_.isUndefined(e2) && A_.isUndefined(e2["Content-Type"]) && (e2["Content-Type"] = t2);
      }
      var P_, L_ = { transitional: Zp, adapter: (("undefined" != typeof XMLHttpRequest || "undefined" != typeof process && "[object process]" === Object.prototype.toString.call(process)) && (P_ = C_), P_), transformRequest: [function(e2, t2) {
        if (O_(t2, "Accept"), O_(t2, "Content-Type"), A_.isFormData(e2) || A_.isArrayBuffer(e2) || A_.isBuffer(e2) || A_.isStream(e2) || A_.isFile(e2) || A_.isBlob(e2))
          return e2;
        if (A_.isArrayBufferView(e2))
          return e2.buffer;
        if (A_.isURLSearchParams(e2))
          return D_(t2, "application/x-www-form-urlencoded;charset=utf-8"), e2.toString();
        var i2, r2 = A_.isObject(e2), n2 = t2 && t2["Content-Type"];
        if ((i2 = A_.isFileList(e2)) || r2 && "multipart/form-data" === n2) {
          var o2 = this.env && this.env.FormData;
          return w_(i2 ? { "files[]": e2 } : e2, o2 && new o2());
        }
        return r2 || "application/json" === n2 ? (D_(t2, "application/json"), function(e3, t3, i3) {
          if (A_.isString(e3))
            try {
              return (t3 || JSON.parse)(e3), A_.trim(e3);
            } catch (e4) {
              if ("SyntaxError" !== e4.name)
                throw e4;
            }
          return (i3 || JSON.stringify)(e3);
        }(e2)) : e2;
      }], transformResponse: [function(e2) {
        var t2 = this.transitional || L_.transitional, i2 = t2 && t2.silentJSONParsing, r2 = t2 && t2.forcedJSONParsing, n2 = !i2 && "json" === this.responseType;
        if (n2 || r2 && A_.isString(e2) && e2.length)
          try {
            return JSON.parse(e2);
          } catch (e3) {
            if (n2) {
              if ("SyntaxError" === e3.name)
                throw b_.from(e3, b_.ERR_BAD_RESPONSE, this, null, this.response);
              throw e3;
            }
          }
        return e2;
      }], timeout: 0, xsrfCookieName: "XSRF-TOKEN", xsrfHeaderName: "X-XSRF-TOKEN", maxContentLength: -1, maxBodyLength: -1, env: { FormData: null }, validateStatus: function(e2) {
        return e2 >= 200 && e2 < 300;
      }, headers: { common: { Accept: "application/json, text/plain, */*" } } };
      A_.forEach(["delete", "get", "head"], function(e2) {
        L_.headers[e2] = {};
      }), A_.forEach(["post", "put", "patch"], function(e2) {
        L_.headers[e2] = A_.merge(N_);
      });
      var k_ = L_, M_ = jp, U_ = k_, x_ = function(e2) {
        return !(!e2 || !e2.__CANCEL__);
      }, V_ = jp, j_ = function(e2, t2, i2) {
        var r2 = this || U_;
        return M_.forEach(i2, function(i3) {
          e2 = i3.call(r2, e2, t2);
        }), e2;
      }, F_ = x_, B_ = k_, G_ = p_;
      function W_(e2) {
        if (e2.cancelToken && e2.cancelToken.throwIfRequested(), e2.signal && e2.signal.aborted)
          throw new G_();
      }
      var H_ = jp, K_ = function(e2, t2) {
        t2 = t2 || {};
        var i2 = {};
        function r2(e3, t3) {
          return H_.isPlainObject(e3) && H_.isPlainObject(t3) ? H_.merge(e3, t3) : H_.isPlainObject(t3) ? H_.merge({}, t3) : H_.isArray(t3) ? t3.slice() : t3;
        }
        function n2(i3) {
          return H_.isUndefined(t2[i3]) ? H_.isUndefined(e2[i3]) ? void 0 : r2(void 0, e2[i3]) : r2(e2[i3], t2[i3]);
        }
        function o2(e3) {
          if (!H_.isUndefined(t2[e3]))
            return r2(void 0, t2[e3]);
        }
        function s2(i3) {
          return H_.isUndefined(t2[i3]) ? H_.isUndefined(e2[i3]) ? void 0 : r2(void 0, e2[i3]) : r2(void 0, t2[i3]);
        }
        function a2(i3) {
          return i3 in t2 ? r2(e2[i3], t2[i3]) : i3 in e2 ? r2(void 0, e2[i3]) : void 0;
        }
        var c2 = { url: o2, method: o2, data: o2, baseURL: s2, transformRequest: s2, transformResponse: s2, paramsSerializer: s2, timeout: s2, timeoutMessage: s2, withCredentials: s2, adapter: s2, responseType: s2, xsrfCookieName: s2, xsrfHeaderName: s2, onUploadProgress: s2, onDownloadProgress: s2, decompress: s2, maxContentLength: s2, maxBodyLength: s2, beforeRedirect: s2, transport: s2, httpAgent: s2, httpsAgent: s2, cancelToken: s2, socketPath: s2, responseEncoding: s2, validateStatus: a2 };
        return H_.forEach(Object.keys(e2).concat(Object.keys(t2)), function(e3) {
          var t3 = c2[e3] || n2, r3 = t3(e3);
          H_.isUndefined(r3) && t3 !== a2 || (i2[e3] = r3);
        }), i2;
      }, Y_ = "0.27.2", q_ = Y_, J_ = Qp, X_ = {};
      ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(e2, t2) {
        X_[e2] = function(i2) {
          return typeof i2 === e2 || "a" + (t2 < 1 ? "n " : " ") + e2;
        };
      });
      var z_ = {};
      X_.transitional = function(e2, t2, i2) {
        function r2(e3, t3) {
          return "[Axios v" + q_ + "] Transitional option '" + e3 + "'" + t3 + (i2 ? ". " + i2 : "");
        }
        return function(i3, n2, o2) {
          if (false === e2)
            throw new J_(r2(n2, " has been removed" + (t2 ? " in " + t2 : "")), J_.ERR_DEPRECATED);
          return t2 && !z_[n2] && (z_[n2] = true, console.warn(r2(n2, " has been deprecated since v" + t2 + " and will be removed in the near future"))), !e2 || e2(i3, n2, o2);
        };
      };
      var Q_ = jp, Z_ = Gp, $_ = Kp, eE = function(e2) {
        return W_(e2), e2.headers = e2.headers || {}, e2.data = j_.call(e2, e2.data, e2.headers, e2.transformRequest), e2.headers = V_.merge(e2.headers.common || {}, e2.headers[e2.method] || {}, e2.headers), V_.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function(t2) {
          delete e2.headers[t2];
        }), (e2.adapter || B_.adapter)(e2).then(function(t2) {
          return W_(e2), t2.data = j_.call(e2, t2.data, t2.headers, e2.transformResponse), t2;
        }, function(t2) {
          return F_(t2) || (W_(e2), t2 && t2.response && (t2.response.data = j_.call(e2, t2.response.data, t2.response.headers, e2.transformResponse))), Promise.reject(t2);
        });
      }, tE = K_, iE = s_, rE = { assertOptions: function(e2, t2, i2) {
        if ("object" != typeof e2)
          throw new J_("options must be an object", J_.ERR_BAD_OPTION_VALUE);
        for (var r2 = Object.keys(e2), n2 = r2.length; n2-- > 0; ) {
          var o2 = r2[n2], s2 = t2[o2];
          if (s2) {
            var a2 = e2[o2], c2 = void 0 === a2 || s2(a2, o2, e2);
            if (true !== c2)
              throw new J_("option " + o2 + " must be " + c2, J_.ERR_BAD_OPTION_VALUE);
          } else if (true !== i2)
            throw new J_("Unknown option " + o2, J_.ERR_BAD_OPTION);
        }
      }, validators: X_ }, nE = rE.validators;
      function oE(e2) {
        this.defaults = e2, this.interceptors = { request: new $_(), response: new $_() };
      }
      oE.prototype.request = function(e2, t2) {
        "string" == typeof e2 ? (t2 = t2 || {}).url = e2 : t2 = e2 || {}, (t2 = tE(this.defaults, t2)).method ? t2.method = t2.method.toLowerCase() : this.defaults.method ? t2.method = this.defaults.method.toLowerCase() : t2.method = "get";
        var i2 = t2.transitional;
        void 0 !== i2 && rE.assertOptions(i2, { silentJSONParsing: nE.transitional(nE.boolean), forcedJSONParsing: nE.transitional(nE.boolean), clarifyTimeoutError: nE.transitional(nE.boolean) }, false);
        var r2 = [], n2 = true;
        this.interceptors.request.forEach(function(e3) {
          "function" == typeof e3.runWhen && false === e3.runWhen(t2) || (n2 = n2 && e3.synchronous, r2.unshift(e3.fulfilled, e3.rejected));
        });
        var o2, s2 = [];
        if (this.interceptors.response.forEach(function(e3) {
          s2.push(e3.fulfilled, e3.rejected);
        }), !n2) {
          var a2 = [eE, void 0];
          for (Array.prototype.unshift.apply(a2, r2), a2 = a2.concat(s2), o2 = Promise.resolve(t2); a2.length; )
            o2 = o2.then(a2.shift(), a2.shift());
          return o2;
        }
        for (var c2 = t2; r2.length; ) {
          var d2 = r2.shift(), u2 = r2.shift();
          try {
            c2 = d2(c2);
          } catch (e3) {
            u2(e3);
            break;
          }
        }
        try {
          o2 = eE(c2);
        } catch (e3) {
          return Promise.reject(e3);
        }
        for (; s2.length; )
          o2 = o2.then(s2.shift(), s2.shift());
        return o2;
      }, oE.prototype.getUri = function(e2) {
        e2 = tE(this.defaults, e2);
        var t2 = iE(e2.baseURL, e2.url);
        return Z_(t2, e2.params, e2.paramsSerializer);
      }, Q_.forEach(["delete", "get", "head", "options"], function(e2) {
        oE.prototype[e2] = function(t2, i2) {
          return this.request(tE(i2 || {}, { method: e2, url: t2, data: (i2 || {}).data }));
        };
      }), Q_.forEach(["post", "put", "patch"], function(e2) {
        function t2(t3) {
          return function(i2, r2, n2) {
            return this.request(tE(n2 || {}, { method: e2, headers: t3 ? { "Content-Type": "multipart/form-data" } : {}, url: i2, data: r2 }));
          };
        }
        oE.prototype[e2] = t2(), oE.prototype[e2 + "Form"] = t2(true);
      });
      var sE = oE, aE = p_;
      function cE(e2) {
        if ("function" != typeof e2)
          throw new TypeError("executor must be a function.");
        var t2;
        this.promise = new Promise(function(e3) {
          t2 = e3;
        });
        var i2 = this;
        this.promise.then(function(e3) {
          if (i2._listeners) {
            var t3, r2 = i2._listeners.length;
            for (t3 = 0; t3 < r2; t3++)
              i2._listeners[t3](e3);
            i2._listeners = null;
          }
        }), this.promise.then = function(e3) {
          var t3, r2 = new Promise(function(e4) {
            i2.subscribe(e4), t3 = e4;
          }).then(e3);
          return r2.cancel = function() {
            i2.unsubscribe(t3);
          }, r2;
        }, e2(function(e3) {
          i2.reason || (i2.reason = new aE(e3), t2(i2.reason));
        });
      }
      cE.prototype.throwIfRequested = function() {
        if (this.reason)
          throw this.reason;
      }, cE.prototype.subscribe = function(e2) {
        this.reason ? e2(this.reason) : this._listeners ? this._listeners.push(e2) : this._listeners = [e2];
      }, cE.prototype.unsubscribe = function(e2) {
        if (this._listeners) {
          var t2 = this._listeners.indexOf(e2);
          -1 !== t2 && this._listeners.splice(t2, 1);
        }
      }, cE.source = function() {
        var e2;
        return { token: new cE(function(t2) {
          e2 = t2;
        }), cancel: e2 };
      };
      var dE = cE, uE = jp, lE = jp, hE = Tp, pE = sE, _E = K_;
      var EE = function e2(t2) {
        var i2 = new pE(t2), r2 = hE(pE.prototype.request, i2);
        return lE.extend(r2, pE.prototype, i2), lE.extend(r2, i2), r2.create = function(i3) {
          return e2(_E(t2, i3));
        }, r2;
      }(k_);
      EE.Axios = pE, EE.CanceledError = p_, EE.CancelToken = dE, EE.isCancel = x_, EE.VERSION = Y_, EE.toFormData = e_, EE.AxiosError = Qp, EE.Cancel = EE.CanceledError, EE.all = function(e2) {
        return Promise.all(e2);
      }, EE.spread = function(e2) {
        return function(t2) {
          return e2.apply(null, t2);
        };
      }, EE.isAxiosError = function(e2) {
        return uE.isObject(e2) && true === e2.isAxiosError;
      }, Sp.exports = EE, Sp.exports.default = EE;
      var fE = Sp.exports;
      class mE {
        constructor(e2) {
          mp(this, "logger", void 0), mp(this, "prefixLists", []), this.logger = e2;
        }
        debug() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          this.logger.debug(...this.prefixLists, ...t2);
        }
        info() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          this.logger.info(...this.prefixLists, ...t2);
        }
        warning() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          this.logger.warning(...this.prefixLists, ...t2);
        }
        error() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          this.logger.error(...this.prefixLists, ...t2);
        }
        prefix(e2) {
          return this.prefixLists.push(e2), this;
        }
        popPrefix() {
          return this.prefixLists.pop(), this;
        }
      }
      class gE {
        constructor() {
          mp(this, "_events", {}), mp(this, "addListener", this.on);
        }
        getListeners(e2) {
          return this._events[e2] ? this._events[e2].map((e3) => e3.listener) : [];
        }
        on(e2, t2) {
          this._events[e2] || (this._events[e2] = []);
          const i2 = this._events[e2];
          -1 === this._indexOfListener(i2, t2) && i2.push({ listener: t2, once: false });
        }
        once(e2, t2) {
          this._events[e2] || (this._events[e2] = []);
          const i2 = this._events[e2];
          -1 === this._indexOfListener(i2, t2) && i2.push({ listener: t2, once: true });
        }
        off(e2, t2) {
          if (!this._events[e2])
            return;
          const i2 = this._events[e2], r2 = this._indexOfListener(i2, t2);
          -1 !== r2 && i2.splice(r2, 1), 0 === this._events[e2].length && delete this._events[e2];
        }
        removeAllListeners(e2) {
          e2 ? delete this._events[e2] : this._events = {};
        }
        emit(e2) {
          this._events[e2] || (this._events[e2] = []);
          const t2 = this._events[e2].map((e3) => e3);
          for (var i2 = arguments.length, r2 = new Array(i2 > 1 ? i2 - 1 : 0), n2 = 1; n2 < i2; n2++)
            r2[n2 - 1] = arguments[n2];
          for (let i3 = 0; i3 < t2.length; i3 += 1) {
            const n3 = t2[i3];
            n3.once && this.off(e2, n3.listener), n3.listener.apply(this, r2 || []);
          }
        }
        _indexOfListener(e2, t2) {
          let i2 = e2.length;
          for (; i2--; )
            if (e2[i2].listener === t2)
              return i2;
          return -1;
        }
      }
      const SE = new class extends gE {
        reportLogUploadError(e2) {
          this.emit("REPORT_LOG_UPLOAD", e2);
        }
      }();
      let TE;
      !function(e2) {
        e2.UNEXPECTED_ERROR = "UNEXPECTED_ERROR", e2.UNEXPECTED_RESPONSE = "UNEXPECTED_RESPONSE", e2.TIMEOUT = "TIMEOUT", e2.INVALID_PARAMS = "INVALID_PARAMS", e2.NOT_READABLE = "NOT_READABLE", e2.NOT_SUPPORTED = "NOT_SUPPORTED", e2.INVALID_OPERATION = "INVALID_OPERATION", e2.OPERATION_ABORTED = "OPERATION_ABORTED", e2.WEB_SECURITY_RESTRICT = "WEB_SECURITY_RESTRICT", e2.EXCHANGE_SDP_FAILED = "EXCHANGE_SDP_FAILED", e2.NETWORK_ERROR = "NETWORK_ERROR", e2.NETWORK_TIMEOUT = "NETWORK_TIMEOUT", e2.NETWORK_RESPONSE_ERROR = "NETWORK_RESPONSE_ERROR", e2.API_INVOKE_TIMEOUT = "API_INVOKE_TIMEOUT", e2.ENUMERATE_DEVICES_FAILED = "ENUMERATE_DEVICES_FAILED", e2.DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND", e2.ELECTRON_IS_NULL = "ELECTRON_IS_NULL", e2.ELECTRON_DESKTOP_CAPTURER_GET_SOURCES_ERROR = "ELECTRON_DESKTOP_CAPTURER_GET_SOURCES_ERROR", e2.CHROME_PLUGIN_NO_RESPONSE = "CHROME_PLUGIN_NO_RESPONSE", e2.CHROME_PLUGIN_NOT_INSTALL = "CHROME_PLUGIN_NOT_INSTALL", e2.MEDIA_OPTION_INVALID = "MEDIA_OPTION_INVALID", e2.PERMISSION_DENIED = "PERMISSION_DENIED", e2.CONSTRAINT_NOT_SATISFIED = "CONSTRAINT_NOT_SATISFIED", e2.TRACK_IS_DISABLED = "TRACK_IS_DISABLED", e2.GET_VIDEO_ELEMENT_VISIBLE_ERROR = "GET_VIDEO_ELEMENT_VISIBLE_ERROR", e2.SHARE_AUDIO_NOT_ALLOWED = "SHARE_AUDIO_NOT_ALLOWED", e2.LOW_STREAM_ENCODING_ERROR = "LOW_STREAM_ENCODING_ERROR", e2.SET_ENCODING_PARAMETER_ERROR = "SET_ENCODING_PARAMETER_ERROR", e2.TRACK_STATE_UNREACHABLE = "TRACK_STATE_UNREACHABLE", e2.INVALID_UINT_UID_FROM_STRING_UID = "INVALID_UINT_UID_FROM_STRING_UID", e2.CAN_NOT_GET_PROXY_SERVER = "CAN_NOT_GET_PROXY_SERVER", e2.CAN_NOT_GET_GATEWAY_SERVER = "CAN_NOT_GET_GATEWAY_SERVER", e2.VOID_GATEWAY_ADDRESS = "VOID_GATEWAY_ADDRESS", e2.UID_CONFLICT = "UID_CONFLICT", e2.MULTI_UNILBS_RESPONSE_ERROR = "MULTI_UNILBS_RESPONSE_ERROR", e2.UPDATE_TICKET_FAILED = "UPDATE_TICKET_FAILED", e2.INVALID_LOCAL_TRACK = "INVALID_LOCAL_TRACK", e2.INVALID_TRACK = "INVALID_TRACK", e2.SENDER_NOT_FOUND = "SENDER_NOT_FOUND", e2.CREATE_OFFER_FAILED = "CREATE_OFFER_FAILED", e2.SET_ANSWER_FAILED = "SET_ANSWER_FAILED", e2.ICE_FAILED = "ICE_FAILED", e2.PC_CLOSED = "PC_CLOSED", e2.SENDER_REPLACE_FAILED = "SENDER_REPLACE_FAILED", e2.GET_LOCAL_CAPABILITIES_FAILED = "GET_LOCAL_CAPABILITIES_FAILED", e2.GET_LOCAL_CONNECTION_PARAMS_FAILED = "GET_LOCAL_CONNECTION_PARAMS_FAILED", e2.SUBSCRIBE_FAILED = "SUBSCRIBE_FAILED", e2.UNSUBSCRIBE_FAILED = "UNSUBSCRIBE_FAILED", e2.GATEWAY_P2P_LOST = "GATEWAY_P2P_LOST", e2.NO_ICE_CANDIDATE = "NO_ICE_CANDIDATE", e2.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS = "CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS", e2.EXIST_DISABLED_VIDEO_TRACK = "EXIST_DISABLED_VIDEO_TRACK", e2.INVALID_REMOTE_USER = "INVALID_REMOTE_USER", e2.REMOTE_USER_IS_NOT_PUBLISHED = "REMOTE_USER_IS_NOT_PUBLISHED", e2.CUSTOM_REPORT_SEND_FAILED = "CUSTOM_REPORT_SEND_FAILED", e2.CUSTOM_REPORT_FREQUENCY_TOO_HIGH = "CUSTOM_REPORT_FREQUENCY_TOO_HIGH", e2.FETCH_AUDIO_FILE_FAILED = "FETCH_AUDIO_FILE_FAILED", e2.READ_LOCAL_AUDIO_FILE_ERROR = "READ_LOCAL_AUDIO_FILE_ERROR", e2.DECODE_AUDIO_FILE_FAILED = "DECODE_AUDIO_FILE_FAILED", e2.WS_ABORT = "WS_ABORT", e2.WS_DISCONNECT = "WS_DISCONNECT", e2.WS_ERR = "WS_ERR", e2.LIVE_STREAMING_TASK_CONFLICT = "LIVE_STREAMING_TASK_CONFLICT", e2.LIVE_STREAMING_INVALID_ARGUMENT = "LIVE_STREAMING_INVALID_ARGUMENT", e2.LIVE_STREAMING_INTERNAL_SERVER_ERROR = "LIVE_STREAMING_INTERNAL_SERVER_ERROR", e2.LIVE_STREAMING_PUBLISH_STREAM_NOT_AUTHORIZED = "LIVE_STREAMING_PUBLISH_STREAM_NOT_AUTHORIZED", e2.LIVE_STREAMING_TRANSCODING_NOT_SUPPORTED = "LIVE_STREAMING_TRANSCODING_NOT_SUPPORTED", e2.LIVE_STREAMING_CDN_ERROR = "LIVE_STREAMING_CDN_ERROR", e2.LIVE_STREAMING_INVALID_RAW_STREAM = "LIVE_STREAMING_INVALID_RAW_STREAM", e2.LIVE_STREAMING_WARN_STREAM_NUM_REACH_LIMIT = "LIVE_STREAMING_WARN_STREAM_NUM_REACH_LIMIT", e2.LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE = "LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE", e2.LIVE_STREAMING_WARN_FREQUENT_REQUEST = "LIVE_STREAMING_WARN_FREQUENT_REQUEST", e2.WEBGL_INTERNAL_ERROR = "WEBGL_INTERNAL_ERROR", e2.BEAUTY_PROCESSOR_INTERNAL_ERROR = "BEAUTY_PROCESSOR_INTERNAL_ERROR", e2.CROSS_CHANNEL_WAIT_STATUS_ERROR = "CROSS_CHANNEL_WAIT_STATUS_ERROR", e2.CROSS_CHANNEL_FAILED_JOIN_SRC = "CROSS_CHANNEL_FAILED_JOIN_SEC", e2.CROSS_CHANNEL_FAILED_JOIN_DEST = "CROSS_CHANNEL_FAILED_JOIN_DEST", e2.CROSS_CHANNEL_FAILED_PACKET_SENT_TO_DEST = "CROSS_CHANNEL_FAILED_PACKET_SENT_TO_DEST", e2.CROSS_CHANNEL_SERVER_ERROR_RESPONSE = "CROSS_CHANNEL_SERVER_ERROR_RESPONSE", e2.METADATA_OUT_OF_RANGE = "METADATA_OUT_OF_RANGE", e2.LOCAL_AEC_ERROR = "LOCAL_AEC_ERROR", e2.INVALID_PLUGIN = "INVALID_PLUGIN", e2.DISCONNECT_P2P = "DISCONNECT_P2P", e2.INIT_WEBSOCKET_TIMEOUT = "INIT_WEBSOCKET_TIMEOUT", e2.CONVERTING_IMAGEDATA_TO_BLOB_FAILED = "CONVERTING_IMAGEDATA_TO_BLOB_FAILED", e2.CONVERTING_VIDEO_FRAME_TO_BLOB_FAILED = "CONVERTING_VIDEO_FRAME_TO_BLOB_FAILED", e2.INIT_DATACHANNEL_TIMEOUT = "INIT_DATACHANNEL_TIMEOUT", e2.DATACHANNEL_CONNECTION_TIMEOUT = "DATACHANNEL_CONNECTION_TIMEOUT";
      }(TE || (TE = {}));
      class vE extends Error {
        constructor(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", i2 = arguments.length > 2 ? arguments[2] : void 0;
          super(t2), mp(this, "code", void 0), mp(this, "message", void 0), mp(this, "data", void 0), mp(this, "name", "AgoraRTCException"), this.code = e2, this.message = "AgoraRTCError ".concat(this.code, ": ").concat(t2), this.data = i2;
        }
        toString() {
          return this.data ? "data: ".concat(JSON.stringify(this.data), "\n").concat(this.stack) : "".concat(this.stack);
        }
        print() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "error";
          return "error" === e2 && NE.error(this.toString()), "warning" === e2 && NE.warning(this.toString()), this;
        }
        throw() {
          throw this.print(), this;
        }
      }
      const RE = { timeout: 500, timeoutFactor: 1.5, maxRetryCount: 1 / 0, maxRetryTimeout: 1e4 };
      function IE(e2, t2) {
        const i2 = Math.floor(t2.timeout * Math.pow(t2.timeoutFactor, e2));
        return Math.min(t2.maxRetryTimeout, i2);
      }
      function yE(e2, t2, i2, r2) {
        const n2 = Object.assign({}, RE, r2);
        let o2 = n2.timeout;
        const s2 = async () => {
          await function(e3) {
            return new Cl((t3) => {
              window.setTimeout(t3, e3);
            });
          }(o2), o2 *= n2.timeoutFactor, o2 = Math.min(n2.maxRetryTimeout, o2);
        };
        let a2 = false;
        const c2 = new Cl(async (r3, o3) => {
          t2 = t2 || (() => false), i2 = i2 || (() => true);
          for (let c3 = 0; c3 < n2.maxRetryCount; c3 += 1) {
            if (a2)
              return o3(new vE(TE.OPERATION_ABORTED));
            try {
              const i3 = await e2();
              if (!t2(i3, c3))
                return r3(i3);
              if (c3 + 1 === n2.maxRetryCount)
                return r3(i3);
              await s2();
            } catch (e3) {
              if (!i2(e3, c3))
                return o3(e3);
              if (c3 + 1 === n2.maxRetryCount)
                return o3(e3);
              await s2();
            }
          }
        });
        return c2.cancel = () => a2 = true, c2;
      }
      function CE() {
        const e2 = /* @__PURE__ */ new Date();
        return e2.toTimeString().split(" ")[0] + ":" + e2.getMilliseconds();
      }
      function AE() {
        const e2 = /* @__PURE__ */ new Date(), t2 = /((\d+:){2}\d+)/.exec((/* @__PURE__ */ new Date()).toUTCString());
        return t2 ? (null == t2 ? void 0 : t2[0]) + ":" + e2.getUTCMilliseconds() : e2.toTimeString().split(" ")[0] + ":" + e2.getMilliseconds();
      }
      const OE = { DEBUG: 0, INFO: 1, WARNING: 2, ERROR: 3, NONE: 4 }, bE = Date.now(), wE = (e2) => {
        for (const t2 in OE)
          if (Object.prototype.hasOwnProperty.call(OE, t2) && OE[t2] === e2)
            return t2;
        return "DEFAULT";
      };
      const NE = new class {
        constructor() {
          mp(this, "proxyServerURL", void 0), mp(this, "logLevel", OE.DEBUG), mp(this, "uploadState", "collecting"), mp(this, "uploadLogWaitingList", []), mp(this, "uploadLogUploadingList", []), mp(this, "uploadErrorCount", 0), mp(this, "currentLogID", 0), mp(this, "url", void 0), mp(this, "extLog", (e2, t2) => {
            this.appendLogToWaitingList(e2, ...t2);
          });
        }
        debug() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          const r2 = [OE.DEBUG].concat(t2);
          this.log.apply(this, r2);
        }
        info() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          const r2 = [OE.INFO].concat(t2);
          this.log.apply(this, r2);
        }
        warning() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          const r2 = [OE.WARNING].concat(t2);
          this.log.apply(this, r2);
        }
        error() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          const r2 = [OE.ERROR].concat(t2);
          this.log.apply(this, r2);
        }
        upload() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          const r2 = [OE.DEBUG].concat(t2);
          this.uploadLog.apply(this, r2);
        }
        setLogLevel(e2) {
          e2 = Math.min(Math.max(0, e2), 4), this.logLevel = e2;
        }
        enableLogUpload() {
          WE("UPLOAD_LOG", true);
        }
        disableLogUpload() {
          WE("UPLOAD_LOG", false), this.uploadLogUploadingList = [], this.uploadLogWaitingList = [];
        }
        setProxyServer(e2) {
          this.proxyServerURL = e2;
        }
        prefix(e2) {
          return new mE(this).prefix(e2);
        }
        log() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          if (Date.now() - bE < 100)
            return void setTimeout(() => {
              this.log(...t2);
            }, Date.now() - bE);
          const r2 = Math.max(0, Math.min(4, t2[0]));
          if (t2[0] = CE() + " Agora-SDK [".concat(wE(r2), "]:"), this.appendLogToWaitingList(r2, ...t2), r2 < this.logLevel)
            return;
          const n2 = CE() + " %cAgora-SDK [".concat(wE(r2), "]:");
          let o2 = [];
          if (!HE("USE_NEW_LOG"))
            switch (r2) {
              case OE.DEBUG:
                o2 = [n2, "color: #64B5F6;"].concat(t2.slice(1)), console.log.apply(console, o2);
                break;
              case OE.INFO:
                o2 = [n2, "color: #1E88E5; font-weight: bold;"].concat(t2.slice(1)), console.log.apply(console, o2);
                break;
              case OE.WARNING:
                o2 = [n2, "color: #FB8C00; font-weight: bold;"].concat(t2.slice(1)), console.warn.apply(console, o2);
                break;
              case OE.ERROR:
                o2 = [n2, "color: #B00020; font-weight: bold;"].concat(t2.slice(1)), console.error.apply(console, o2);
            }
        }
        uploadLog() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          if (Date.now() - bE < 100)
            return void setTimeout(() => {
              this.uploadLog(...t2);
            }, Date.now() - bE);
          const r2 = Math.max(0, Math.min(4, t2[0]));
          t2[0] = CE() + " Agora-SDK [".concat(wE(r2), "]:"), this.appendLogToWaitingList(r2, ...t2);
        }
        appendLogToWaitingList(e2) {
          if (!HE("UPLOAD_LOG"))
            return;
          for (var t2 = arguments.length, i2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
            i2[r2 - 1] = arguments[r2];
          Array.isArray(i2[0]) ? i2[0][0] = AE() + " Agora-SDK [".concat(wE(e2), "]:") : i2[0] = AE() + " Agora-SDK [".concat(wE(e2), "]:");
          let n2 = "";
          i2.forEach((e3) => {
            "object" == typeof e3 && (e3 = JSON.stringify(e3)), n2 += "".concat(e3, " ");
          }), this.uploadLogWaitingList.push({ payload_str: n2, log_level: e2, log_item_id: this.currentLogID++ }), "uploading" === this.uploadState && 0 === this.uploadLogUploadingList.length && this.uploadLogInterval();
        }
        startUpload() {
          this.uploadState = "uploading", 0 === this.uploadLogUploadingList.length && this.uploadLogInterval();
        }
        async uploadLogs() {
          const e2 = this.uploadLogUploadingList, t2 = { sdk_version: PE, process_id: HE("PROCESS_ID"), payload: JSON.stringify(e2) };
          return yE(async () => {
            const e3 = await fE.post(this.url || (this.proxyServerURL ? "https://".concat(this.proxyServerURL, "/ls/?h=").concat(HE("LOG_UPLOAD_SERVER"), "&p=443&d=upload/v1") : "https://".concat(HE("LOG_UPLOAD_SERVER"), "/upload/v1")), t2, { responseType: "text" });
            if ("OK" !== e3.data) {
              const t3 = new Error("unexpected upload log response");
              throw t3.response = e3, t3;
            }
          }, () => (this.uploadLogUploadingList = [], false), (e3) => (e3.response ? SE.reportLogUploadError({ status: e3.response.status, data: e3.response.data, headers: e3.response.headers, message: e3.message }) : e3.request ? SE.reportLogUploadError({ status: e3.request.status, message: e3.message }) : SE.reportLogUploadError({ status: -1, message: e3.message }), true), { timeout: HE("UPLOAD_LOG_REQUEST_RETRY_INTERVAL"), maxRetryTimeout: HE("UPLOAD_LOG_REQUEST_MAX_RETRY_INTERVAL") });
        }
        uploadLogInterval() {
          0 === this.uploadLogUploadingList.length && 0 === this.uploadLogWaitingList.length || (0 === this.uploadLogUploadingList.length && (this.uploadLogUploadingList = this.uploadLogWaitingList.splice(0, HE("UPLOAD_LOG_LENGTH_EACH_TIME"))), this.uploadLogs().then(() => {
            this.uploadErrorCount = 0, this.uploadLogWaitingList.length > 0 && window.setTimeout(() => this.uploadLogInterval(), HE("UPLOAD_LOG_INTERVAL"));
          }).catch((e2) => {
            this.uploadErrorCount += 1, this.uploadErrorCount < 2 ? window.setTimeout(() => this.uploadLogInterval(), HE("UPLOAD_LOG_TWICE_RETRY_INTERVAL_V1")) : window.setTimeout(() => this.uploadLogInterval(), HE("UPLOAD_LOG_RETRY_INTERVAL_V1"));
          }));
        }
      }(), DE = "v4.16.1-0-gb268655f-dirty(2/8/2023, 2:53:13 PM)", PE = function(e2) {
        if (e2.match(/[0-9]+\.[0-9]+\.[0-9]+$/))
          return e2;
        const t2 = e2.match(/([0-9]+\.[0-9]+\.[0-9]+)\-alpha\.([0-9]+)/);
        if (t2 && t2[1] && t2[2]) {
          const e3 = t2[1], i3 = t2[2];
          return "".concat(e3, ".").concat(i3);
        }
        const i2 = e2.match(/([0-9]+\.[0-9]+\.[0-9]+)\-special\.([0-9]+)/);
        if (i2 && i2[1] && i2[2]) {
          const e3 = i2[1], t3 = i2[2];
          return "".concat(e3, ".").concat(100 * (Number(t3) + 1));
        }
        return "4.0.0.999";
      }("4.16.1"), LE = function() {
        try {
          return true === JSON.parse("true");
        } catch (e2) {
          return true;
        }
      }(), kE = function() {
        const e2 = "us".concat("erna", "me"), t2 = "pa".concat("sswo", "rd"), i2 = ["t", "s", "t"];
        i2.splice(1, 0, "e");
        const r2 = i2.join(""), n2 = [];
        for (let e3 = 0; e3 < 6; e3++)
          n2.push("1");
        const o2 = n2.join(""), s2 = {};
        return s2[e2] = r2, s2[t2] = o2, Object.assign(s2, { turnServerURL: "", tcpport: 3433, udpport: 3478, forceturn: false });
      }();
      window.DEFAULT_TURN_CONFIG = kE;
      const ME = { "90p": JE(160, 90), "90p_1": JE(160, 90), "120p": JE(160, 120, 15, 30, 65), "120p_1": JE(160, 120, 15, 30, 65), "120p_3": JE(120, 120, 15, 30, 50), "120p_4": JE(212, 120), "180p": JE(320, 180, 15, 30, 140), "180p_1": JE(320, 180, 15, 30, 140), "180p_3": JE(180, 180, 15, 30, 100), "180p_4": JE(240, 180, 15, 30, 120), "240p": JE(320, 240, 15, 40, 200), "240p_1": JE(320, 240, 15, 40, 200), "240p_3": JE(240, 240, 15, 40, 140), "240p_4": JE(424, 240, 15, 40, 220), "360p": JE(640, 360, 15, 80, 400), "360p_1": JE(640, 360, 15, 80, 400), "360p_3": JE(360, 360, 15, 80, 260), "360p_4": JE(640, 360, 30, 80, 600), "360p_6": JE(360, 360, 30, 80, 400), "360p_7": JE(480, 360, 15, 80, 320), "360p_8": JE(480, 360, 30, 80, 490), "360p_9": JE(640, 360, 15, 80, 800), "360p_10": JE(640, 360, 24, 80, 800), "360p_11": JE(640, 360, 24, 80, 1e3), "480p": JE(640, 480, 15, 100, 500), "480p_1": JE(640, 480, 15, 100, 500), "480p_2": JE(640, 480, 30, 100, 1e3), "480p_3": JE(480, 480, 15, 100, 400), "480p_4": JE(640, 480, 30, 100, 750), "480p_6": JE(480, 480, 30, 100, 600), "480p_8": JE(848, 480, 15, 100, 610), "480p_9": JE(848, 480, 30, 100, 930), "480p_10": JE(640, 480, 10, 100, 400), "720p": JE(1280, 720, 15, 120, 1130), "720p_1": JE(1280, 720, 15, 120, 1130), "720p_2": JE(1280, 720, 30, 120, 2e3), "720p_3": JE(1280, 720, 30, 120, 1710), "720p_5": JE(960, 720, 15, 120, 910), "720p_6": JE(960, 720, 30, 120, 1380), "1080p": JE(1920, 1080, 15, 120, 2080), "1080p_1": JE(1920, 1080, 15, 120, 2080), "1080p_2": JE(1920, 1080, 30, 120, 3e3), "1080p_3": JE(1920, 1080, 30, 120, 3150), "1080p_5": JE(1920, 1080, 60, 120, 4780), "1440p": JE(2560, 1440, 30, 120, 4850), "1440p_1": JE(2560, 1440, 30, 120, 4850), "1440p_2": JE(2560, 1440, 60, 120, 7350), "4k": JE(3840, 2160, 30, 120, 8910), "4k_1": JE(3840, 2160, 30, 120, 8910), "4k_3": JE(3840, 2160, 60, 120, 13500) }, UE = { "480p": XE(640, 480, 5), "480p_1": XE(640, 480, 5), "480p_2": XE(640, 480, 30), "480p_3": XE(640, 480, 15), "720p": XE(1280, 720, 5), "720p_1": XE(1280, 720, 5), "720p_2": XE(1280, 720, 30), "720p_3": XE(1280, 720, 15), "1080p": XE(1920, 1080, 5), "1080p_1": XE(1920, 1080, 5), "1080p_2": XE(1920, 1080, 30), "1080p_3": XE(1920, 1080, 15) }, xE = { "1SL1TL": zE(1, 1), "3SL3TL": zE(3, 3), "2SL3TL": zE(2, 3) };
      function VE(e2) {
        return "string" == typeof e2 ? Object.assign({}, ME[e2]) : e2;
      }
      function jE(e2) {
        return "string" == typeof e2 ? Object.assign({}, UE[e2]) : e2;
      }
      function FE(e2) {
        return "string" == typeof e2 ? Object.assign({}, xE[e2]) : e2;
      }
      const BE = { speech_low_quality: qE(16e3, false), speech_standard: qE(32e3, false, 18), music_standard: qE(48e3, false), standard_stereo: qE(48e3, true, 56), high_quality: qE(48e3, false, 128), high_quality_stereo: qE(48e3, true, 192) };
      function GE(e2) {
        return "string" == typeof e2 ? Object.assign({}, BE[e2]) : e2;
      }
      function WE(e2, t2, i2) {
        Object.keys(KE).includes(e2) && (!i2 && Object.keys(YE).includes(e2) || (KE[e2] = t2));
      }
      function HE(e2) {
        return KE[e2];
      }
      const KE = { PROCESS_ID: "", ENCRYPT_AES: true, AREAS: ["CHINA", "GLOBAL"], WEBCS_DOMAIN: ["webrtc2-ap-web-1.agora.io", "webrtc2-2.ap.sd-rtn.com"], WEBCS_DOMAIN_BACKUP_LIST: ["webrtc2-ap-web-3.agora.io", "webrtc2-4.ap.sd-rtn.com"], PROXY_CS: ["ap-proxy-1.agora.io", "ap-proxy-2.agora.io"], CDS_AP: ["cds-ap-web-1.agora.io", "cds-web-2.ap.sd-rtn.com", "cds-ap-web-3.agora.io", "cds-web-4.ap.sd-rtn.com"], ACCOUNT_REGISTER: ["sua-ap-web-1.agora.io", "sua-web-2.ap.sd-rtn.com", "sua-ap-web-3.agora.io", "sua-web-4.ap.sd-rtn.com"], UAP_AP: ["uap-ap-web-1.agora.io", "uap-web-2.ap.sd-rtn.com", "uap-ap-web-3.agora.io", "uap-web-4.ap.sd-rtn.com"], LOG_UPLOAD_SERVER: "logservice.agora.io", EVENT_REPORT_DOMAIN: "statscollector-1.agora.io", EVENT_REPORT_BACKUP_DOMAIN: "web-2.statscollector.sd-rtn.com", ENABLE_EVENT_REPORT: true, GATEWAY_ADDRESS: [], GATEWAY_WSS_ADDRESS: "", LIVE_STREAMING_ADDRESS: "", HTTP_CONNECT_TIMEOUT: 5e3, SIGNAL_REQUEST_TIMEOUT: 1e4, REPORT_STATS: true, UPLOAD_LOG: false, NOT_REPORT_EVENT: [], SUBSCRIBE_TCC: true, PUBLISH_TCC: false, PING_PONG_TIME_OUT: 10, WEBSOCKET_TIMEOUT_MIN: 1e4, EVENT_REPORT_SEND_INTERVAL: 3e3, CONFIG_DISTRIBUTE_INTERVAL: 3e5, ENABLE_CONFIG_DISTRIBUTE: true, CANDIDATE_TIMEOUT: 5e3, SHOW_REPORT_INVOKER_LOG: false, JOIN_EXTEND: "", PUB_EXTEND: "", SUB_EXTEND: "", FORCE_TURN: false, TURN_ENABLE_TCP: true, TURN_ENABLE_UDP: true, MAX_UPLOAD_CACHE: 50, UPLOAD_CACHE_INTERVAL: 2e3, AJAX_REQUEST_CONCURRENT: 3, REPORT_APP_SCENARIO: void 0, GATEWAY_DOMAINS: ["edge.agora.io", "edge.sd-rtn.com"], WORKER_DOMAIN: "edge.agora.io", TURN_DOMAIN: "edge.agora.io", EVENT_REPORT_RETRY: true, CHROME_FORCE_PLAN_B: false, AUDIO_SOURCE_VOLUME_UPDATE_INTERVAL: 400, AUDIO_SOURCE_AVG_VOLUME_DURATION: 3e3, AUDIO_VOLUME_INDICATION_INTERVAL: 2e3, VOLUME_VOICE_WEIGHT: 10, GET_VOLUME_OF_MUTED_AUDIO_TRACK: false, NORMAL_EVENT_QUEUE_CAPACITY: 100, CUSTOM_REPORT: true, CUSTOM_REPORT_LIMIT: 20, PROXY_SERVER_TYPE2: "webnginx-proxy.agora.io", PROXY_SERVER_TYPE3: ["webrtc-cloud-proxy.sd-rtn.com", "webrtc-cloud-proxy.agora.io"], CUSTOM_PUB_ANSWER_MODIFIER: null, CUSTOM_SUB_ANSWER_MODIFIER: null, CUSTOM_PUB_OFFER_MODIFIER: null, CUSTOM_SUB_OFFER_MODIFIER: null, DSCP_TYPE: "high", REMOVE_NEW_CODECS: true, FRAGEMENT_LENGTH: 3, WEBSOCKET_COMPRESS: false, SIMULCAST: false, PRELOAD_MEDIA_COUNT: 0, USE_RTX: false, CHECK_VIDEO_VISIBLE_INTERVAL: 3e4, ENUMERATE_DEVICES_INTERVAL: false, ENUMERATE_DEVICES_INTERVAL_TIME: 1e4, USE_NEW_TOKEN: false, CLOSE_AFB_FOR_LOCAL_AP: true, JOIN_WITH_FALLBACK_SIGNAL_PROXY: true, JOIN_WITH_FALLBACK_MEDIA_PROXY: true, JOIN_WITH_FALLBACK_MEDIA_PROXY_FORCE: false, JOIN_WITH_FALLBACK_PROXY_PENDING_DURATION: 2e3, USE_TURN_SERVER_OF_GATEWAY: false, H264_PROFILE_LEVEL_ID: "", USE_NEW_LOG: false, LOG_VERSION: 3, MEDIA_DEVICE_CONSTRAINTS: null, ENCRYPT_PROXY_USERNAME_AND_PSW: true, SDP_LOGGING: false, CSP_DETECTED_HOSTNAME_LIST: ["agora.io", "sd-rtn.com"], REMOTE_AUDIO_TRACK_USES_WEB_AUDIO: false, LOCAL_AUDIO_TRACK_USES_WEB_AUDIO: true, BITRATE_ADAPTER_TYPE: "STANDARD_BITRATE", AI_DENOISER_PARAMETERS: {}, ADJUST_3A_FROM_PLUGINS: true, RAISE_H264_BASELINE_PRIORITY: true, FILTER_SEND_H264_BASELINE: false, ENABLE_PUBLISHED_USER_LIST: true, MAX_SUBSCRIPTION: 50, X_GOOGLE_START_BITRATE: void 0, NEW_REPORT_SERVER: false, NEW_REPORT_SERVER_DOMAINS: ["data-reporting.agora.io", "data-reporting.agora.io"], VIDEO_INSPECT_WORKER_MESSAGE_LENGTH_LIMIT: 3e5, VIDEO_INSPECT_INTERVAL_MINIMUM: 1e3, VIDEO_INSPECT_QUALITY_RATIO: 0.9, VIDEO_INSPECT_WORKER_MANAGER_HOST: "edge.agora.io", VIDEO_INSPECT_WORKER_MANAGER_PORT: "", VIDEO_INSPECT_WORKER_PORT: "", SHOW_VIDEO_INSPECT_WORKER_MESSAGE: false, STATS_COLLECTOR_PORT: 443, FORCE_TURN_TCP: false, SUBSCRIBE_AUDIO_FILTER_TOPN: void 0, ENABLE_PUBLISH_AUDIO_FILTER: void 0, WEBAUDIO_INIT_OPTIONS: void 0, FILTER_VIDEO_FEC: true, FILTER_AUDIO_FEC: false, CHROME_DUAL_STREAM_USE_ENCODING: true, EXTENSION_USAGE_UPLOAD_INTERVAL: 1e4, ICE_RESTART: true, ENABLE_USER_LICENSE_CHECK: true, SIGNAL_CHANNEL: 0, TRANSMITTER_INITIAL_RTT: 30, TRANSMITTER_INITIAL_RTO: 30, TRANSMITTER_MAX_BATCH_ACK_COUNT: 2, TRANSMITTER_MAX_RTO: 500, DATACHANNEL_COMPRESS: false, FINGERPRINT: null, DC_JOIN_WITH_FAILBACK: 5e3, ENABLE_VIDEO_FRAME_CALLBACK: true, VIDEO_FREEZE_DURATION: 500, SPATIALIZER_PARAMETERS: {}, UPLOAD_LOG_INTERVAL: 3e3, UPLOAD_LOG_REQUEST_RETRY_INTERVAL: 2e3, UPLOAD_LOG_REQUEST_MAX_RETRY_INTERVAL: 2e4, UPLOAD_LOG_TRY_INTERVAL_WHILE_OFF: 5e3, UPLOAD_LOG_RETRY_INTERVAL_V1: 1e4, UPLOAD_LOG_TWICE_RETRY_INTERVAL_V1: 200, UPLOAD_LOG_LENGTH_EACH_TIME: 10, APP_TYPE: 0, DISABLE_WEBAUDIO: false, CHANNEL_MEDIA_RELAY_SERVERS: void 0, ACCOUNT_REGISTER_RETRY_TIMEOUT: 1, ACCOUNT_REGISTER_RETRY_RATIO: 2, ACCOUNT_REGISTER_RETRY_TIMEOUT_MAX: 6e4, ACCOUNT_REGISTER_RETRY_COUNT_MAX: 1e5, AUDIO_CONTEXT: null, WEBCS_BACKUP_CONNECT_TIMEOUT: 6e3, PLAYER_STATE_DEFER: 2e3, SIGNAL_REQUEST_WATCH_INTERVAL: 1e3, FILEPATH_LENMAX: 255, DUALSTREAM_OPERATION_CHECK: true, MEDIA_ELEMENT_EXISTS_DEPTH: 3, SHIM_CANDIDATE: false, LEAVE_MSG_TIMEOUT: 2e3, STATS_FILTER: { transportId: true, googTrackId: true } }, YE = {};
      function qE(e2, t2, i2) {
        return { sampleRate: e2, stereo: t2, bitrate: i2 };
      }
      function JE(e2, t2, i2, r2, n2) {
        return { width: e2, height: t2, frameRate: i2, bitrateMin: r2, bitrateMax: n2 };
      }
      function XE(e2, t2, i2, r2, n2) {
        return { width: { max: e2 }, height: { max: t2 }, frameRate: i2, bitrateMin: r2, bitrateMax: n2 };
      }
      function zE(e2, t2) {
        return { numSpatialLayers: e2, numTemporalLayers: t2 };
      }
      LE || (KE.WEBCS_DOMAIN = ["ap-web-1-oversea.agora.io", "ap-web-1-north-america.agora.io"], KE.WEBCS_DOMAIN_BACKUP_LIST = ["ap-web-2-oversea.agora.io", "ap-web-2-north-america.agora.io"], KE.PROXY_CS = ["proxy-ap-web-oversea.agora.io", "proxy-ap-web-america.agora.io"], KE.CDS_AP = ["cds-ap-web-oversea.agora.io", "cds-ap-web-america.agora.io", "cds-ap-web-america2.agora.io"], KE.ACCOUNT_REGISTER = ["sua-ap-web-oversea.agora.io", "sua-ap-web-america.agora.io", "sua-ap-web-america2.agora.io"], KE.UAP_AP = ["uap-ap-web-oversea.agora.io", "uap-ap-web-america.agora.io", "uap-ap-web-america2.agora.io"], KE.LOG_UPLOAD_SERVER = "logservice-oversea.agora.io", KE.EVENT_REPORT_DOMAIN = "statscollector-1-oversea.agora.io", KE.EVENT_REPORT_BACKUP_DOMAIN = "statscollector-2-oversea.agora.io", KE.PROXY_SERVER_TYPE3 = "webrtc-cloud-proxy.agora.io", KE.AREAS = ["NORTH_AMERICA", "OVERSEA"]);
      const QE = [[0, 1, 2, 3, 4, 5, 5], [0, 2, 2, 3, 4, 5, 5], [0, 3, 3, 3, 4, 5, 5], [0, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 5, 5, 5]], ZE = [], $E = [];
      var ef = Et, tf = Ht, rf = N, nf = function(e2, t2, i2) {
        var r2 = ef(t2);
        r2 in e2 ? tf.f(e2, r2, rf(0, i2)) : e2[r2] = i2;
      }, of = Mr, sf = wi, af = nf, cf = h.Array, df = Math.max, uf = function(e2, t2, i2) {
        for (var r2 = sf(e2), n2 = of(t2, r2), o2 = of(void 0 === i2 ? r2 : i2, r2), s2 = cf(df(o2 - n2, 0)), a2 = 0; n2 < o2; n2++, a2++)
          af(s2, a2, e2[n2]);
        return s2.length = a2, s2;
      }, lf = uf, hf = Math.floor, pf = function(e2, t2) {
        var i2 = e2.length, r2 = hf(i2 / 2);
        return i2 < 8 ? _f(e2, t2) : Ef(e2, pf(lf(e2, 0, r2), t2), pf(lf(e2, r2), t2), t2);
      }, _f = function(e2, t2) {
        for (var i2, r2, n2 = e2.length, o2 = 1; o2 < n2; ) {
          for (r2 = o2, i2 = e2[o2]; r2 && t2(e2[r2 - 1], i2) > 0; )
            e2[r2] = e2[--r2];
          r2 !== o2++ && (e2[r2] = i2);
        }
        return e2;
      }, Ef = function(e2, t2, i2, r2) {
        for (var n2 = t2.length, o2 = i2.length, s2 = 0, a2 = 0; s2 < n2 || a2 < o2; )
          e2[s2 + a2] = s2 < n2 && a2 < o2 ? r2(t2[s2], i2[a2]) <= 0 ? t2[s2++] : i2[a2++] : s2 < n2 ? t2[s2++] : i2[a2++];
        return e2;
      }, ff = pf, mf = ee.match(/firefox\/(\d+)/i), gf = !!mf && +mf[1], Sf = /MSIE|Trident/.test(ee), Tf = ee.match(/AppleWebKit\/(\d+)\./), vf = !!Tf && +Tf[1], Rf = Ri, If = d, yf = Ie, Cf = je, Af = wi, Of = Lo, bf = i, wf = ff, Nf = Vi, Df = gf, Pf = Sf, Lf = ae, kf = vf, Mf = [], Uf = If(Mf.sort), xf = If(Mf.push), Vf = bf(function() {
        Mf.sort(void 0);
      }), jf = bf(function() {
        Mf.sort(null);
      }), Ff = Nf("sort"), Bf = !bf(function() {
        if (Lf)
          return Lf < 70;
        if (!(Df && Df > 3)) {
          if (Pf)
            return true;
          if (kf)
            return kf < 603;
          var e2, t2, i2, r2, n2 = "";
          for (e2 = 65; e2 < 76; e2++) {
            switch (t2 = String.fromCharCode(e2), e2) {
              case 66:
              case 69:
              case 70:
              case 72:
                i2 = 3;
                break;
              case 68:
              case 71:
                i2 = 4;
                break;
              default:
                i2 = 2;
            }
            for (r2 = 0; r2 < 47; r2++)
              Mf.push({ k: t2 + r2, v: i2 });
          }
          for (Mf.sort(function(e3, t3) {
            return t3.v - e3.v;
          }), r2 = 0; r2 < Mf.length; r2++)
            t2 = Mf[r2].k.charAt(0), n2.charAt(n2.length - 1) !== t2 && (n2 += t2);
          return "DGBEFHACIJK" !== n2;
        }
      });
      Rf({ target: "Array", proto: true, forced: Vf || !jf || !Ff || !Bf }, { sort: function(e2) {
        void 0 !== e2 && yf(e2);
        var t2 = Cf(this);
        if (Bf)
          return void 0 === e2 ? Uf(t2) : Uf(t2, e2);
        var i2, r2, n2 = [], o2 = Af(t2);
        for (r2 = 0; r2 < o2; r2++)
          r2 in t2 && xf(n2, t2[r2]);
        for (wf(n2, function(e3) {
          return function(t3, i3) {
            return void 0 === i3 ? -1 : void 0 === t3 ? 1 : void 0 !== e3 ? +e3(t3, i3) || 0 : Of(t3) > Of(i3) ? 1 : -1;
          };
        }(e2)), i2 = n2.length, r2 = 0; r2 < i2; )
          t2[r2] = n2[r2++];
        for (; r2 < o2; )
          delete t2[r2++];
        return t2;
      } });
      var Gf = Hi("Array").sort, Wf = u, Hf = Gf, Kf = Array.prototype, Yf = function(e2) {
        var t2 = e2.sort;
        return e2 === Kf || Wf(Kf, e2) && t2 === Kf.sort ? Hf : t2;
      };
      function qf(e2, t2) {
        if ("boolean" != typeof e2)
          throw new vE(TE.INVALID_PARAMS, "Invalid ".concat(t2, ": The value is of the boolean type."));
      }
      function Jf(e2, t2, i2) {
        if (i2.includes(e2))
          return;
        throw new vE(TE.INVALID_PARAMS, "".concat(t2, " can only be set as ").concat(JSON.stringify(i2)));
      }
      function Xf(e2, t2) {
        let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, r2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1e4, n2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
        if (e2 < i2 || e2 > r2 || n2 && !rm(e2)) {
          throw new vE(TE.INVALID_PARAMS, "invalid ".concat(t2, ": the value range is [").concat(i2, ", ").concat(r2, "]. integer only"));
        }
      }
      function zf(e2, t2) {
        if ("number" != typeof e2) {
          if (!(e2.min || e2.max || e2.ideal || e2.exact)) {
            throw new vE(TE.INVALID_PARAMS, "".concat(t2, " is not a valid ConstrainLong"));
          }
          void 0 !== e2.min && Xf(e2.min, "".concat(t2, ".min"), 0, 1 / 0), void 0 !== e2.max && Xf(e2.max, "".concat(t2, ".max"), 1, 1 / 0), void 0 !== e2.exact && Xf(e2.exact, "".concat(t2, ".exact"), 1, 1 / 0), void 0 !== e2.ideal && Xf(e2.ideal, "".concat(t2, ".ideal"), 1, 1 / 0);
        } else
          Xf(e2, t2, 1, 1 / 0);
      }
      function Qf(e2, t2) {
        let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, r2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 255, n2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
        if (null == e2)
          throw new vE(TE.INVALID_PARAMS, "".concat(t2 || "param", " cannot be empty"));
        if (!im(e2, i2, r2, n2))
          throw new vE(TE.INVALID_PARAMS, "Invalid ".concat(t2 || "string param", ": Length of the string: [").concat(i2, ",").concat(r2, "].").concat(n2 ? " ASCII characters only." : ""));
      }
      function Zf(e2, t2) {
        if (!Array.isArray(e2))
          throw new vE(TE.INVALID_PARAMS, "".concat(t2, " should be an array"));
      }
      function $f(e2) {
        if ("string" != typeof e2 || !/^[a-zA-Z0-9 \!\#\$\%\&\(\)\+\-\:\;\<\=\.\>\?\@\[\]\^\_\{\}\|\~\,]{1,64}$/.test(e2))
          throw NE.error("Invalid Channel Name ".concat(e2)), new vE(TE.INVALID_PARAMS, "The length must be within 64 bytes. The supported characters: a-z,A-Z,0-9,space,!, #, $, %, &, (, ), +, -, :, ;, <, =, ., >, ?, @, [, ], ^, _,  {, }, |, ~, ,");
      }
      function em(e2) {
        if (!(t2 = e2, "number" == typeof t2 && Math.floor(t2) === t2 && 0 <= t2 && t2 <= 4294967295 || im(e2, 1, 255)))
          throw NE.error("Invalid UID ".concat(e2, " ").concat(typeof e2)), new vE(TE.INVALID_PARAMS, "[String uid] Length of the string: [1,255]. ASCII characters only. [Number uid] The value range is [0,10000]");
        var t2;
        "string" == typeof e2 && NE.warning("You input a string as the user ID, to ensure better end-user experience, Agora highly suggests not using a string as the user ID.");
      }
      function tm(e2) {
        return null == e2;
      }
      function im(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 255, r2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
        return "string" == typeof e2 && e2.length <= i2 && e2.length >= t2 && (!r2 || nm(e2));
      }
      function rm(e2) {
        return "number" == typeof e2 && e2 % 1 == 0;
      }
      function nm(e2) {
        if ("string" != typeof e2)
          return false;
        for (let t2 = 0; t2 < e2.length; t2 += 1) {
          const i2 = e2.charCodeAt(t2);
          if (i2 < 0 || i2 > 255)
            return false;
        }
        return true;
      }
      let om, sm, am;
      !function(e2) {
        e2.FREE = "free", e2.UPLOADING = "uploading";
      }(om || (om = {})), function(e2) {
        e2[e2.MISC = 0] = "MISC", e2[e2.INTERNAL_EVENT = 1] = "INTERNAL_EVENT", e2[e2.PUBLIC_EVENT = 2] = "PUBLIC_EVENT", e2[e2.WEB_EVENT = 3] = "WEB_EVENT", e2[e2.INTERNAL_API = 4] = "INTERNAL_API", e2[e2.WEB_API = 5] = "WEB_API", e2[e2.PUBLIC_API = 6] = "PUBLIC_API";
      }(sm || (sm = {})), function(e2) {
        e2.NONE = "none", e2.INIT = "init", e2.CANPLAY = "canplay", e2.PLAYING = "playing", e2.PAUSED = "paused", e2.SUSPEND = "suspend", e2.STALLED = "stalled", e2.WAITING = "waiting", e2.ERROR = "error", e2.DESTROYED = "destroyed", e2.ABORT = "abort", e2.ENDED = "ended", e2.EMPTIED = "emptied", e2.LOADEDDATA = "loadeddata";
      }(am || (am = {}));
      const cm = { uninit: 100, none: 110, init: 120, loadeddata: 130, canplay: 200, playing: 210, paused: 220, suspend: 300, stalled: 310, waiting: 320, error: 330, destroyed: 340, abort: 350, ended: 360, emptied: 370 };
      function dm(e2) {
        return Qf(e2.reportId, "params.reportId", 0, 100, false), Qf(e2.category, "params.category", 0, 100, false), Qf(e2.event, "params.event", 0, 100, false), Qf(e2.label, "params.label", 0, 100, false), Xf(e2.value, "params.value", Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, false), true;
      }
      const um = { sid: "", lts: 0, success: null, cname: null, uid: null, peer: null, cid: null, elapse: null, extend: null, vid: 0 };
      let lm, hm, pm, _m, Em, fm, mm, gm, Sm, Tm, vm, Rm, Im, ym, Cm, Am, Om, bm, wm, Nm, Dm, Pm, Lm, km;
      function Mm(e2) {
        return Xf(e2.timeout, "config.timeout", 0, 1e5), Xf(e2.timeoutFactor, "config.timeoutFactor", 0, 100, false), Xf(e2.maxRetryCount, "config.maxRetryConfig", 0, 1 / 0), Xf(e2.maxRetryTimeout, "config.maxRetryTimeout", 0, 1 / 0), true;
      }
      function Um(e2) {
        return Jf(e2.codec, "config.codec", ["vp8", "vp9", "av1", "h264"]), Jf(e2.mode, "config.mode", ["rtc", "live"]), void 0 !== e2.audioCodec && Jf(e2.audioCodec, "config.audioCodec", ["opus", "pcmu", "pcma", "g722"]), void 0 !== e2.proxyServer && Qf(e2.proxyServer, "config.proxyServer", 1, 1e4), void 0 !== e2.turnServer && Vm(e2.turnServer), void 0 !== e2.httpRetryConfig && Mm(e2.httpRetryConfig), void 0 !== e2.websocketRetryConfig && Mm(e2.websocketRetryConfig), true;
      }
      function xm(e2) {
        if (!Array.isArray(e2) || e2.length < 1)
          return false;
        try {
          e2.forEach((e3) => {
            if (!e3.urls)
              throw Error();
          });
        } catch (e3) {
          return false;
        }
        return true;
      }
      function Vm(e2) {
        return Qf(e2.turnServerURL, "turnServerURL"), Qf(e2.username, "username"), Qf(e2.password, "password"), e2.udpport && Xf(e2.udpport, "udpport", 1, 99999, true), e2.forceturn && qf(e2.forceturn, "forceturn"), e2.security && qf(e2.security, "security"), e2.tcpport && Xf(e2.tcpport, "tcpport", 1, 99999, true), true;
      }
      function jm(e2) {
        return void 0 !== e2.level && Jf(e2.level, "level", [1, 2, 3]), true;
      }
      !function(e2) {
        e2.PUBLISH = "publish", e2.SUBSCRIBE = "subscribe", e2.WS_COMPRESSOR_INIT = "ws_compressor_init", e2.SESSION_INIT = "session_init", e2.JOIN_CHOOSE_SERVER = "join_choose_server", e2.REQ_USER_ACCOUNT = "req_user_account", e2.JOIN_GATEWAY = "join_gateway", e2.REJOIN_GATEWAY = "rejoin_gateway", e2.STREAM_SWITCH = "stream_switch", e2.REQUEST_PROXY_WORKER_MANAGER = "request_proxy_worker_manager", e2.REQUEST_PROXY_APPCENTER = "request_proxy_appcenter", e2.FIRST_VIDEO_RECEIVED = "first_video_received", e2.FIRST_AUDIO_RECEIVED = "first_audio_received", e2.FIRST_VIDEO_DECODE = "first_video_decode", e2.FIRST_AUDIO_DECODE = "first_audio_decode", e2.ON_ADD_AUDIO_STREAM = "on_add_audio_stream", e2.ON_ADD_VIDEO_STREAM = "on_add_video_stream", e2.ON_UPDATE_STREAM = "on_update_stream", e2.ON_REMOVE_STREAM = "on_remove_stream", e2.USER_ANALYTICS = "req_user_analytics";
      }(lm || (lm = {})), function(e2) {
        e2.SESSION = "io.agora.pb.Wrtc.Session", e2.JOIN_CHOOSE_SERVER = "io.agora.pb.Wrtc.JoinChooseServer", e2.REQ_USER_ACCOUNT = "io.agora.pb.Wrtc.ReqUserAccount", e2.JOIN_GATEWAY = "io.agora.pb.Wrtc.JoinGateway", e2.RE_JOIN_GATEWAY = "io.agora.pb.Wrtc.ReJoinGateway", e2.PUBLISH = "io.agora.pb.Wrtc.Publish", e2.SUBSCRIBE = "io.agora.pb.Wrtc.Subscribe", e2.WS_COMPRESSOR_INIT = "io.agora.pb.Wrtc.WsCompressorInit", e2.STREAM_SWITCH = "io.agora.pb.Wrtc.StreamSwitch", e2.AUDIO_SENDING_STOPPED = "io.agora.pb.Wrtc.AudioSendingStopped", e2.VIDEO_SENDING_STOPPED = "io.agora.pb.Wrtc.VideoSendingStopped", e2.REQUEST_PROXY_APPCENTER = "io.agora.pb.Wrtc.RequestProxyAppCenter", e2.REQUEST_PROXY_WORKER_MANAGER = "io.agora.pb.Wrtc.RequestProxyWorkerManager", e2.API_INVOKE = "io.agora.pb.Wrtc.ApiInvoke", e2.FIRST_VIDEO_RECEIVED = "io.agora.pb.Wrtc.FirstVideoReceived", e2.FIRST_AUDIO_RECEIVED = "io.agora.pb.Wrtc.FirstAudioReceived", e2.FIRST_VIDEO_DECODE = "io.agora.pb.Wrtc.FirstVideoDecode", e2.FIRST_AUDIO_DECODE = "io.agora.pb.Wrtc.FirstAudioDecode", e2.ON_ADD_AUDIO_STREAM = "io.agora.pb.Wrtc.OnAddAudioStream", e2.ON_ADD_VIDEO_STREAM = "io.agora.pb.Wrtc.OnAddVideoStream", e2.ON_UPDATE_STREAM = "io.agora.pb.Wrtc.OnUpdateStream", e2.ON_REMOVE_STREAM = "io.agora.pb.Wrtc.OnRemoveStream", e2.JOIN_CHANNEL_TIMEOUT = "io.agora.pb.Wrtc.JoinChannelTimeout", e2.PEER_PUBLISH_STATUS = "io.agora.pb.Wrtc.PeerPublishStatus", e2.WORKER_EVENT = "io.agora.pb.Wrtc.WorkerEvent", e2.AP_WORKER_EVENT = "io.agora.pb.Wrtc.APWorkerEvent", e2.JOIN_WEB_PROXY_AP = "io.agora.pb.Wrtc.JoinWebProxyAP", e2.WEBSOCKET_QUIT = "io.agora.pb.Wrtc.WebSocketQuit", e2.USER_ANALYTICS = "io.agora.pb.Wrtc.UserAnalytics", e2.AUTOPLAY_FAILED = "io.agora.pb.Wrtc.AutoplayFailed";
      }(hm || (hm = {})), function(e2) {
        e2[e2.WORKER_EVENT = 156] = "WORKER_EVENT", e2[e2.AP_WORKER_EVENT = 160] = "AP_WORKER_EVENT";
      }(pm || (pm = {})), function(e2) {
        e2[e2.SESSION = 26] = "SESSION", e2[e2.JOIN_CHOOSE_SERVER = 27] = "JOIN_CHOOSE_SERVER", e2[e2.REQ_USER_ACCOUNT = 196] = "REQ_USER_ACCOUNT", e2[e2.JOIN_GATEWAY = 28] = "JOIN_GATEWAY", e2[e2.PUBLISH = 30] = "PUBLISH", e2[e2.SUBSCRIBE = 29] = "SUBSCRIBE", e2[e2.WS_COMPRESSOR_INIT = 9430] = "WS_COMPRESSOR_INIT", e2[e2.STREAM_SWITCH = 32] = "STREAM_SWITCH", e2[e2.AUDIO_SENDING_STOPPED = 33] = "AUDIO_SENDING_STOPPED", e2[e2.VIDEO_SENDING_STOPPED = 34] = "VIDEO_SENDING_STOPPED", e2[e2.REQUEST_PROXY_APPCENTER = 35] = "REQUEST_PROXY_APPCENTER", e2[e2.REQUEST_PROXY_WORKER_MANAGER = 36] = "REQUEST_PROXY_WORKER_MANAGER", e2[e2.API_INVOKE = 41] = "API_INVOKE", e2[e2.FIRST_VIDEO_RECEIVED = 348] = "FIRST_VIDEO_RECEIVED", e2[e2.FIRST_AUDIO_RECEIVED = 349] = "FIRST_AUDIO_RECEIVED", e2[e2.FIRST_VIDEO_DECODE = 350] = "FIRST_VIDEO_DECODE", e2[e2.FIRST_AUDIO_DECODE = 351] = "FIRST_AUDIO_DECODE", e2[e2.ON_ADD_AUDIO_STREAM = 352] = "ON_ADD_AUDIO_STREAM", e2[e2.ON_ADD_VIDEO_STREAM = 353] = "ON_ADD_VIDEO_STREAM", e2[e2.ON_UPDATE_STREAM = 356] = "ON_UPDATE_STREAM", e2[e2.ON_REMOVE_STREAM = 355] = "ON_REMOVE_STREAM", e2[e2.JOIN_CHANNEL_TIMEOUT = 407] = "JOIN_CHANNEL_TIMEOUT", e2[e2.PEER_PUBLISH_STATUS = 408] = "PEER_PUBLISH_STATUS", e2[e2.WORKER_EVENT = 156] = "WORKER_EVENT", e2[e2.AP_WORKER_EVENT = 160] = "AP_WORKER_EVENT", e2[e2.JOIN_WEB_PROXY_AP = 700] = "JOIN_WEB_PROXY_AP", e2[e2.WEBSOCKET_QUIT = 671] = "WEBSOCKET_QUIT", e2[e2.USER_ANALYTICS = 1e4] = "USER_ANALYTICS", e2[e2.AUTOPLAY_FAILED = 9178] = "AUTOPLAY_FAILED";
      }(_m || (_m = {})), function(e2) {
        e2.CREATE_CLIENT = "createClient", e2.CHECK_SYSTEM_REQUIREMENTS = "checkSystemRequirements", e2.SET_AREA = "setArea", e2.CHECK_VIDEO_TRACK_IS_ACTIVE = "checkVideoTrackIsActive", e2.CHECK_AUDIO_TRACK_IS_ACTIVE = "checkAudioTrackIsActive", e2.CREATE_MIC_AUDIO_TRACK = "createMicrophoneAudioTrack", e2.CREATE_CUSTOM_AUDIO_TRACK = "createCustomAudioTrack", e2.CREATE_BUFFER_AUDIO_TRACK = "createBufferSourceAudioTrack", e2.CREATE_CAM_VIDEO_TRACK = "createCameraVideoTrack", e2.CREATE_CUSTOM_VIDEO_TRACK = "createCustomVideoTrack", e2.CREATE_MIC_AND_CAM_TRACKS = "createMicrophoneAndCameraTracks", e2.CREATE_SCREEN_VIDEO_TRACK = "createScreenVideoTrack", e2.SET_ENCRYPTION_CONFIG = "Client.setEncryptionConfig", e2.START_PROXY_SERVER = "Client.startProxyServer", e2.STOP_PROXY_SERVER = "Client.stopProxyServer", e2.SET_PROXY_SERVER = "Client.setProxyServer", e2.SET_TURN_SERVER = "Client.setTurnServer", e2.SET_CLIENT_ROLE = "Client.setClientRole", e2.SET_LOW_STREAM_PARAMETER = "Client.setLowStreamParameter", e2.ENABLE_DUAL_STREAM = "Client.enableDualStream", e2.DISABLE_DUAL_STREAM = "Client.disableDualStream", e2.JOIN = "Client.join", e2.LEAVE = "Client.leave", e2.PUBLISH = "Client.publish", e2.UNPUBLISH = "Client.unpublish", e2.SUBSCRIBE = "Client.subscribe", e2.MASS_SUBSCRIBE = "Client.massSubscribe", e2.MASS_UNSUBSCRIBE = "Client.massUnsubscribe", e2.UNSUBSCRIBE = "Client.unsubscribe", e2.RENEW_TOKEN = "Client.renewToken", e2.SET_REMOTE_VIDEO_STREAM_TYPE = "Client.setRemoteVideoStreamType", e2.SET_STREAM_FALLBACK_OPTION = "Client.setStreamFallbackOption", e2.ENABLE_AUDIO_VOLUME_INDICATOR = "Client.enableAudioVolumeIndicator", e2.SEND_CUSTOM_REPORT_MESSAGE = "Client.sendCustomReportMessage", e2.INSPECT_VIDEO_CONTENT = "Client.inspectVideoContent", e2.STOP_INSPECT_VIDEO_CONTENT = "Client.stopInspectVideoContent", e2.JOIN_FALLBACK_TO_PROXY = "Client._joinFallbackToProxy", e2.DATACHANNEL_FAILBACK = "Client._datachannelFailback", e2.ON_LIVE_STREAM_WARNING = "Client.onLiveStreamWarning", e2.ON_LIVE_STREAM_ERROR = "Client.onLiveStreamingError", e2.START_LIVE_STREAMING = "Client.startLiveStreaming", e2.SET_LIVE_TRANSCODING = "Client.setLiveTranscoding", e2.STOP_LIVE_STREAMING = "Client.stopLiveStreaming", e2.ADD_INJECT_STREAM_URL = "Client.addInjectStreamUrl", e2.REMOVE_INJECT_STREAM_URL = "Client.removeInjectStreamUrl", e2.START_CHANNEL_MEDIA_RELAY = "Client.startChannelMediaRelay", e2.UPDATE_CHANNEL_MEDIA_RELAY = "Client.updateChannelMediaRelay", e2.STOP_CHANNEL_MEDIA_RELAY = "Client.stopChannelMediaRelay", e2.REQUEST_CONFIG_DISTRIBUTE = "_config-distribute-request", e2.SET_CONFIG_DISTRIBUTE = "_configDistribute", e2.LOCAL_TRACK_SET_MUTED = "LocalTrack.setMute", e2.LOCAL_AUDIO_TRACK_PLAY = "LocalAudioTrack.play", e2.LOCAL_AUDIO_TRACK_PLAY_IN_ELEMENT = "LocalAudioTrack.playInElement", e2.LOCAL_AUDIO_TRACK_STOP = "LocalAudioTrack.stop", e2.LOCAL_AUDIO_TRACK_SET_VOLUME = "LocalAudioTrack.setVolume", e2.MIC_AUDIO_TRACK_SET_DEVICE = "MicrophoneAudioTrack.setDevice", e2.BUFFER_AUDIO_TRACK_START = "BufferSourceAudioTrack.startProcessAudioBuffer", e2.BUFFER_AUDIO_TRACK_STOP = "BufferSourceAudioTrack.stopProcessAudioBuffer", e2.BUFFER_AUDIO_TRACK_PAUSE = "BufferSourceAudioTrack.pauseProcessAudioBuffer", e2.BUFFER_AUDIO_TRACK_RESUME = "BufferSourceAudioTrack.resumeProcessAudioBuffer", e2.BUFFER_AUDIO_TRACK_SEEK = "BufferSourceAudioTrack.seekAudioBuffer", e2.LOCAL_VIDEO_TRACK_PLAY = "LocalVideoTrack.play", e2.LOCAL_VIDEO_TRACK_STOP = "LocalVideoTrack.stop", e2.LOCAL_VIDEO_TRACK_GET_VIDEO_VISIBLE = "LocalVideoTrack.getVideoElementVisibleStatus", e2.LOCAL_VIDEO_TRACK_BEAUTY = "LocalVideoTrack.setBeautyEffect", e2.CAM_VIDEO_TRACK_SET_DEVICE = "CameraVideoTrack.setDevice", e2.CAM_VIDEO_TRACK_SET_ENCODER_CONFIG = "CameraVideoTrack.setEncoderConfiguration", e2.REMOTE_VIDEO_TRACK_PLAY = "RemoteVideoTrack.play", e2.REMOTE_VIDEO_TRACK_STOP = "RemoteVideoTrack.stop", e2.REMOTE_VIDEO_TRACK_GET_VIDEO_VISIBLE = "RemoteVideoTrack.getVideoElementVisibleStatus", e2.REMOTE_AUDIO_TRACK_PLAY = "RemoteAudioTrack.play", e2.REMOTE_AUDIO_TRACK_STOP = "RemoteAudioTrack.stop", e2.REMOTE_AUDIO_SET_VOLUME = "RemoteAudioTrack.setVolume", e2.REMOTE_AUDIO_SET_OUTPUT_DEVICE = "RemoteAudioTrack.setOutputDevice", e2.GET_MEDIA_STREAM_TRACK = "Track.getMediaStreamTrack", e2.STREAM_TYPE_CHANGE = "streamTypeChange", e2.CONNECTION_STATE_CHANGE = "connectionStateChange", e2.LOAD_CONFIG_FROM_LOCALSTORAGE = "loadConfigFromLocalStorage";
      }(Em || (Em = {})), function(e2) {
        e2.TRACER = "tracer";
      }(fm || (fm = {})), function(e2) {
        e2.IDLE = "IDLE", e2.INITING = "INITING", e2.INITEND = "INITEND";
      }(mm || (mm = {})), function(e2) {
        e2.STATE_CHANGE = "state_change", e2.RECORDING_DEVICE_CHANGED = "recordingDeviceChanged", e2.PLAYOUT_DEVICE_CHANGED = "playoutDeviceChanged", e2.CAMERA_DEVICE_CHANGED = "cameraDeviceChanged";
      }(gm || (gm = {})), function(e2) {
        e2[e2.ACCESS_POINT = 101] = "ACCESS_POINT", e2[e2.UNILBS = 201] = "UNILBS", e2[e2.STRING_UID_ALLOCATOR = 901] = "STRING_UID_ALLOCATOR";
      }(Sm || (Sm = {})), function(e2) {
        e2[e2.IIIEGAL_APPID = 1] = "IIIEGAL_APPID", e2[e2.IIIEGAL_UID = 2] = "IIIEGAL_UID", e2[e2.INTERNAL_ERROR = 3] = "INTERNAL_ERROR";
      }(Tm || (Tm = {})), function(e2) {
        e2[e2.INVALID_VENDOR_KEY = 5] = "INVALID_VENDOR_KEY", e2[e2.INVALID_CHANNEL_NAME = 7] = "INVALID_CHANNEL_NAME", e2[e2.INTERNAL_ERROR = 8] = "INTERNAL_ERROR", e2[e2.NO_AUTHORIZED = 9] = "NO_AUTHORIZED", e2[e2.DYNAMIC_KEY_TIMEOUT = 10] = "DYNAMIC_KEY_TIMEOUT", e2[e2.NO_ACTIVE_STATUS = 11] = "NO_ACTIVE_STATUS", e2[e2.DYNAMIC_KEY_EXPIRED = 13] = "DYNAMIC_KEY_EXPIRED", e2[e2.STATIC_USE_DYNAMIC_KEY = 14] = "STATIC_USE_DYNAMIC_KEY", e2[e2.DYNAMIC_USE_STATIC_KEY = 15] = "DYNAMIC_USE_STATIC_KEY", e2[e2.USER_OVERLOAD = 16] = "USER_OVERLOAD", e2[e2.FORBIDDEN_REGION = 18] = "FORBIDDEN_REGION", e2[e2.CANNOT_MEET_AREA_DEMAND = 19] = "CANNOT_MEET_AREA_DEMAND";
      }(vm || (vm = {})), function(e2) {
        e2[e2.NO_FLAG_SET = 100] = "NO_FLAG_SET", e2[e2.FLAG_SET_BUT_EMPTY = 101] = "FLAG_SET_BUT_EMPTY", e2[e2.INVALID_FALG_SET = 102] = "INVALID_FALG_SET", e2[e2.FLAG_SET_BUT_NO_RE = 103] = "FLAG_SET_BUT_NO_RE", e2[e2.INVALID_SERVICE_ID = 104] = "INVALID_SERVICE_ID", e2[e2.NO_SERVICE_AVAILABLE = 200] = "NO_SERVICE_AVAILABLE", e2[e2.NO_SERVICE_AVAILABLE_P2P = 201] = "NO_SERVICE_AVAILABLE_P2P", e2[e2.NO_SERVICE_AVAILABLE_VOICE = 202] = "NO_SERVICE_AVAILABLE_VOICE", e2[e2.NO_SERVICE_AVAILABLE_WEBRTC = 203] = "NO_SERVICE_AVAILABLE_WEBRTC", e2[e2.NO_SERVICE_AVAILABLE_CDS = 204] = "NO_SERVICE_AVAILABLE_CDS", e2[e2.NO_SERVICE_AVAILABLE_CDN = 205] = "NO_SERVICE_AVAILABLE_CDN", e2[e2.NO_SERVICE_AVAILABLE_TDS = 206] = "NO_SERVICE_AVAILABLE_TDS", e2[e2.NO_SERVICE_AVAILABLE_REPORT = 207] = "NO_SERVICE_AVAILABLE_REPORT", e2[e2.NO_SERVICE_AVAILABLE_APP_CENTER = 208] = "NO_SERVICE_AVAILABLE_APP_CENTER", e2[e2.NO_SERVICE_AVAILABLE_ENV0 = 209] = "NO_SERVICE_AVAILABLE_ENV0", e2[e2.NO_SERVICE_AVAILABLE_VOET = 210] = "NO_SERVICE_AVAILABLE_VOET", e2[e2.NO_SERVICE_AVAILABLE_STRING_UID = 211] = "NO_SERVICE_AVAILABLE_STRING_UID", e2[e2.NO_SERVICE_AVAILABLE_WEBRTC_UNILBS = 212] = "NO_SERVICE_AVAILABLE_WEBRTC_UNILBS", e2[e2.NO_SERVICE_AVAILABLE_UNILBS_FLV = 213] = "NO_SERVICE_AVAILABLE_UNILBS_FLV";
      }(Rm || (Rm = {})), function(e2) {
        e2[e2.K_TIMESTAMP_EXPIRED = 2] = "K_TIMESTAMP_EXPIRED", e2[e2.K_CHANNEL_PERMISSION_INVALID = 3] = "K_CHANNEL_PERMISSION_INVALID", e2[e2.K_CERTIFICATE_INVALID = 4] = "K_CERTIFICATE_INVALID", e2[e2.K_CHANNEL_NAME_EMPTY = 5] = "K_CHANNEL_NAME_EMPTY", e2[e2.K_CHANNEL_NOT_FOUND = 6] = "K_CHANNEL_NOT_FOUND", e2[e2.K_TICKET_INVALID = 7] = "K_TICKET_INVALID", e2[e2.K_CHANNEL_CONFLICTED = 8] = "K_CHANNEL_CONFLICTED", e2[e2.K_SERVICE_NOT_READY = 9] = "K_SERVICE_NOT_READY", e2[e2.K_SERVICE_TOO_HEAVY = 10] = "K_SERVICE_TOO_HEAVY", e2[e2.K_UID_BANNED = 14] = "K_UID_BANNED", e2[e2.K_IP_BANNED = 15] = "K_IP_BANNED", e2[e2.K_CHANNEL_BANNED = 16] = "K_CHANNEL_BANNED", e2[e2.WARN_NO_AVAILABLE_CHANNEL = 103] = "WARN_NO_AVAILABLE_CHANNEL", e2[e2.WARN_LOOKUP_CHANNEL_TIMEOUT = 104] = "WARN_LOOKUP_CHANNEL_TIMEOUT", e2[e2.WARN_LOOKUP_CHANNEL_REJECTED = 105] = "WARN_LOOKUP_CHANNEL_REJECTED", e2[e2.WARN_OPEN_CHANNEL_TIMEOUT = 106] = "WARN_OPEN_CHANNEL_TIMEOUT", e2[e2.WARN_OPEN_CHANNEL_REJECTED = 107] = "WARN_OPEN_CHANNEL_REJECTED", e2[e2.WARN_REQUEST_DEFERRED = 108] = "WARN_REQUEST_DEFERRED", e2[e2.ERR_DYNAMIC_KEY_TIMEOUT = 109] = "ERR_DYNAMIC_KEY_TIMEOUT", e2[e2.ERR_NO_AUTHORIZED = 110] = "ERR_NO_AUTHORIZED", e2[e2.ERR_VOM_SERVICE_UNAVAILABLE = 111] = "ERR_VOM_SERVICE_UNAVAILABLE", e2[e2.ERR_NO_CHANNEL_AVAILABLE_CODE = 112] = "ERR_NO_CHANNEL_AVAILABLE_CODE", e2[e2.ERR_MASTER_VOCS_UNAVAILABLE = 114] = "ERR_MASTER_VOCS_UNAVAILABLE", e2[e2.ERR_INTERNAL_ERROR = 115] = "ERR_INTERNAL_ERROR", e2[e2.ERR_NO_ACTIVE_STATUS = 116] = "ERR_NO_ACTIVE_STATUS", e2[e2.ERR_INVALID_UID = 117] = "ERR_INVALID_UID", e2[e2.ERR_DYNAMIC_KEY_EXPIRED = 118] = "ERR_DYNAMIC_KEY_EXPIRED", e2[e2.ERR_STATIC_USE_DYANMIC_KE = 119] = "ERR_STATIC_USE_DYANMIC_KE", e2[e2.ERR_DYNAMIC_USE_STATIC_KE = 120] = "ERR_DYNAMIC_USE_STATIC_KE", e2[e2.ERR_NO_VOCS_AVAILABLE = 2e3] = "ERR_NO_VOCS_AVAILABLE", e2[e2.ERR_NO_VOS_AVAILABLE = 2001] = "ERR_NO_VOS_AVAILABLE", e2[e2.ERR_JOIN_CHANNEL_TIMEOUT = 2002] = "ERR_JOIN_CHANNEL_TIMEOUT", e2[e2.ERR_REPEAT_JOIN_CHANNEL = 2003] = "ERR_REPEAT_JOIN_CHANNEL", e2[e2.ERR_JOIN_BY_MULTI_IP = 2004] = "ERR_JOIN_BY_MULTI_IP", e2[e2.ERR_NOT_JOINED = 2011] = "ERR_NOT_JOINED", e2[e2.ERR_REPEAT_JOIN_REQUEST = 2012] = "ERR_REPEAT_JOIN_REQUEST", e2[e2.ERR_INVALID_VENDOR_KEY = 2013] = "ERR_INVALID_VENDOR_KEY", e2[e2.ERR_INVALID_CHANNEL_NAME = 2014] = "ERR_INVALID_CHANNEL_NAME", e2[e2.ERR_INVALID_STRINGUID = 2015] = "ERR_INVALID_STRINGUID", e2[e2.ERR_TOO_MANY_USERS = 2016] = "ERR_TOO_MANY_USERS", e2[e2.ERR_SET_CLIENT_ROLE_TIMEOUT = 2017] = "ERR_SET_CLIENT_ROLE_TIMEOUT", e2[e2.ERR_SET_CLIENT_ROLE_NO_PERMISSION = 2018] = "ERR_SET_CLIENT_ROLE_NO_PERMISSION", e2[e2.ERR_SET_CLIENT_ROLE_ALREADY_IN_USE = 2019] = "ERR_SET_CLIENT_ROLE_ALREADY_IN_USE", e2[e2.ERR_PUBLISH_REQUEST_INVALID = 2020] = "ERR_PUBLISH_REQUEST_INVALID", e2[e2.ERR_SUBSCRIBE_REQUEST_INVALID = 2021] = "ERR_SUBSCRIBE_REQUEST_INVALID", e2[e2.ERR_NOT_SUPPORTED_MESSAGE = 2022] = "ERR_NOT_SUPPORTED_MESSAGE", e2[e2.ERR_ILLEAGAL_PLUGIN = 2023] = "ERR_ILLEAGAL_PLUGIN", e2[e2.ERR_REJOIN_TOKEN_INVALID = 2024] = "ERR_REJOIN_TOKEN_INVALID", e2[e2.ERR_REJOIN_USER_NOT_JOINED = 2025] = "ERR_REJOIN_USER_NOT_JOINED", e2[e2.ERR_INVALID_OPTIONAL_INFO = 2027] = "ERR_INVALID_OPTIONAL_INFO", e2[e2.ILLEGAL_AES_PASSWORD = 2028] = "ILLEGAL_AES_PASSWORD", e2[e2.ILLEGAL_CLIENT_ROLE_LEVEL = 2029] = "ILLEGAL_CLIENT_ROLE_LEVEL", e2[e2.ERR_TOO_MANY_BROADCASTERS = 2031] = "ERR_TOO_MANY_BROADCASTERS", e2[e2.ERR_TOO_MANY_SUBSCRIBERS = 2032] = "ERR_TOO_MANY_SUBSCRIBERS", e2[e2.ERR_LICENSE_MISSING = 32769] = "ERR_LICENSE_MISSING", e2[e2.ERR_LICENSE_EXPIRED = 32771] = "ERR_LICENSE_EXPIRED", e2[e2.ERR_LICENSE_MINUTES_EXCEEDED = 32773] = "ERR_LICENSE_MINUTES_EXCEEDED", e2[e2.ERR_LICENSE_PERIOD_INVALID = 32774] = "ERR_LICENSE_PERIOD_INVALID", e2[e2.ERR_LICENSE_MULTIPLE_SDK_SERVICE = 32778] = "ERR_LICENSE_MULTIPLE_SDK_SERVICE", e2[e2.ERR_LICENSE_ILLEGAL = 32783] = "ERR_LICENSE_ILLEGAL", e2[e2.ERR_TEST_RECOVER = 9e3] = "ERR_TEST_RECOVER", e2[e2.ERR_TEST_TRYNEXT = 9001] = "ERR_TEST_TRYNEXT", e2[e2.ERR_TEST_RETRY = 9002] = "ERR_TEST_RETRY";
      }(Im || (Im = {})), function(e2) {
        e2[e2.AUDIENCE_LEVEL_LOW_LATENCY = 1] = "AUDIENCE_LEVEL_LOW_LATENCY", e2[e2.AUDIENCE_LEVEL_ULTRA_LOW_LATENCY = 2] = "AUDIENCE_LEVEL_ULTRA_LOW_LATENCY", e2[e2.AUDIENCE_LEVEL_SYNC_LATENCY = 3] = "AUDIENCE_LEVEL_SYNC_LATENCY";
      }(ym || (ym = {})), function(e2) {
        e2.LEAVE = "LEAVE", e2.NETWORK_ERROR = "NETWORK_ERROR", e2.SERVER_ERROR = "SERVER_ERROR", e2.UID_BANNED = "UID_BANNED", e2.IP_BANNED = "IP_BANNED", e2.CHANNEL_BANNED = "CHANNEL_BANNED", e2.FALLBACK = "FALLBACK", e2.LICENSE_MISSING = "LICENSE_MISSING", e2.LICENSE_EXPIRED = "LICENSE_EXPIRED", e2.LICENSE_MINUTES_EXCEEDED = "LICENSE_MINUTES_EXCEEDED", e2.LICENSE_PERIOD_INVALID = "LICENSE_PERIOD_INVALID", e2.LICENSE_MULTIPLE_SDK_SERVICE = "LICENSE_MULTIPLE_SDK_SERVICE", e2.LICENSE_ILLEGAL = "LICENSE_ILLEGAL";
      }(Cm || (Cm = {})), function(e2) {
        e2.CONNECTION_STATE_CHANGE = "connection-state-change", e2.MEDIA_RECONNECT_START = "media-reconnect-start", e2.MEDIA_RECONNECT_END = "media-reconnect-end", e2.IS_USING_CLOUD_PROXY = "is-using-cloud-proxy", e2.USER_JOINED = "user-joined", e2.USER_LEAVED = "user-left", e2.USER_PUBLISHED = "user-published", e2.USER_UNPUBLISHED = "user-unpublished", e2.USER_INFO_UPDATED = "user-info-updated", e2.CLIENT_BANNED = "client-banned", e2.CHANNEL_MEDIA_RELAY_STATE = "channel-media-relay-state", e2.CHANNEL_MEDIA_RELAY_EVENT = "channel-media-relay-event", e2.VOLUME_INDICATOR = "volume-indicator", e2.CRYPT_ERROR = "crypt-error", e2.ON_TOKEN_PRIVILEGE_WILL_EXPIRE = "token-privilege-will-expire", e2.ON_TOKEN_PRIVILEGE_DID_EXPIRE = "token-privilege-did-expire", e2.NETWORK_QUALITY = "network-quality", e2.STREAM_TYPE_CHANGED = "stream-type-changed", e2.STREAM_FALLBACK = "stream-fallback", e2.RECEIVE_METADATA = "receive-metadata", e2.STREAM_MESSAGE = "stream-message", e2.LIVE_STREAMING_ERROR = "live-streaming-error", e2.LIVE_STREAMING_WARNING = "live-streaming-warning", e2.INJECT_STREAM_STATUS = "stream-inject-status", e2.EXCEPTION = "exception", e2.ERROR = "error", e2.P2P_LOST = "p2p_lost", e2.JOIN_FALLBACK_TO_PROXY = "join-fallback-to-proxy", e2.CHANNEL_FALLBACK_TO_WEBSOCKET = "channel-fallback-to-websocket", e2.MEDIA_CONNECTION_TYPE_CHANGE = "media-connection-type-change", e2.PUBLISHED_USER_LIST = "published-user-list", e2.CONTENT_INSPECT_CONNECTION_STATE_CHANGE = "content-inspect-connection-state-change", e2.CONTENT_INSPECT_ERROR = "content-inspect-error", e2.CONTENT_INSPECT_RESULT = "content-inspect-result";
      }(Am || (Am = {})), function(e2) {
        e2.NETWORK_ERROR = "NETWORK_ERROR", e2.SERVER_ERROR = "SERVER_ERROR", e2.MULTI_IP = "MULTI_IP", e2.TIMEOUT = "TIMEOUT", e2.OFFLINE = "OFFLINE", e2.LEAVE = "LEAVE", e2.P2P_FAILED = "P2P_FAILED", e2.FALLBACK = "FALLBACK";
      }(Om || (Om = {})), function(e2) {
        e2.CONNECTING = "connecting", e2.CONNECTED = "connected", e2.RECONNECTING = "reconnecting", e2.CLOSED = "closed";
      }(bm || (bm = {})), function(e2) {
        e2.WS_CONNECTED = "ws_connected", e2.WS_RECONNECTING = "ws_reconnecting", e2.WS_CLOSED = "ws_closed", e2.WS_RECONNECT_WAITTING_FINISH = "ws_reconnect_waitting_finish", e2.WS_RECONNECT_CREATE_CONNECTION = "ws_reconnect_create_connection", e2.ON_BINARY_DATA = "on_binary_data", e2.REQUEST_RECOVER = "request_recover", e2.REQUEST_JOIN_INFO = "request_join_info", e2.REQUEST_REJOIN_INFO = "req_rejoin_info", e2.IS_P2P_DISCONNECTED = "is_p2p_dis", e2.DISCONNECT_P2P = "dis_p2p", e2.ABORT_P2P_EXECUTION = "abort_p2p_execution", e2.NEED_RENEW_SESSION = "need-sid", e2.REPORT_JOIN_GATEWAY = "report_join_gateway", e2.REQUEST_TIMEOUT = "request_timeout", e2.REQUEST_SUCCESS = "request_success", e2.JOIN_RESPONSE = "join_response", e2.DATACHANNEL_PRECONNECT = "datachannel_preconnect", e2.DATACHANNEL_CONNECTING = "datachannel_connecting", e2.DATACHANNEL_FAILBACK = "datachannel_failback";
      }(wm || (wm = {})), function(e2) {
        e2.PING = "ping", e2.PING_BACK = "ping_back", e2.JOIN = "join_v3", e2.REJOIN = "rejoin_v3", e2.LEAVE = "leave", e2.SET_CLIENT_ROLE = "set_client_role", e2.PUBLISH = "publish", e2.UNPUBLISH = "unpublish", e2.SUBSCRIBE = "subscribe", e2.SUBSCRIBE_STREAMS = "subscribe_streams", e2.UNSUBSCRIBE = "unsubscribe", e2.UNSUBSCRIBE_STREAMS = "unsubscribe_streams", e2.SUBSCRIBE_CHANGE = "subscribe_change", e2.TRAFFIC_STATS = "traffic_stats", e2.RENEW_TOKEN = "renew_token", e2.SWITCH_VIDEO_STREAM = "switch_video_stream", e2.DEFAULT_VIDEO_STREAM = "default_video_stream", e2.SET_FALLBACK_OPTION = "set_fallback_option", e2.GATEWAY_INFO = "gateway_info", e2.CONTROL = "control", e2.SEND_METADATA = "send_metadata", e2.DATA_STREAM = "data_stream", e2.PICK_SVC_LAYER = "pick_svc_layer", e2.RESTART_ICE = "restart_ice", e2.CONNECT_PC = "connect_pc", e2.SET_VIDEO_PROFILE = "set_video_profile", e2.SET_PARAMETER = "set_parameter";
      }(Nm || (Nm = {})), function(e2) {
        e2.PUBLISH_STATS = "publish_stats", e2.PUBLISH_RELATED_STATS = "publish_related_stats", e2.SUBSCRIBE_STATS = "subscribe_stats", e2.SUBSCRIBE_RELATED_STATS = "subscribe_related_stats", e2.WS_INFLATE_DATA_LENGTH = "ws_inflate_data_length", e2.DENOISER_STATS = "denoiser_stats", e2.TRANSPORT_STATS = "transport_stats", e2.EXTENSION_USAGE_STATS = "extension_usage_stats";
      }(Dm || (Dm = {})), function(e2) {
        e2.ON_USER_ONLINE = "on_user_online", e2.ON_USER_OFFLINE = "on_user_offline", e2.ON_STREAM_FALLBACK_UPDATE = "on_stream_fallback_update", e2.ON_PUBLISH_STREAM = "on_publish_stream", e2.ON_UPLINK_STATS = "on_uplink_stats", e2.ON_P2P_LOST = "on_p2p_lost", e2.ON_REMOVE_STREAM = "on_remove_stream", e2.ON_ADD_AUDIO_STREAM = "on_add_audio_stream", e2.ON_ADD_VIDEO_STREAM = "on_add_video_stream", e2.ON_TOKEN_PRIVILEGE_WILL_EXPIRE = "on_token_privilege_will_expire", e2.ON_TOKEN_PRIVILEGE_DID_EXPIRE = "on_token_privilege_did_expire", e2.ON_USER_BANNED = "on_user_banned", e2.ON_USER_LICENSE_BANNED = "on_user_license_banned", e2.ON_NOTIFICATION = "on_notification", e2.ON_CRYPT_ERROR = "on_crypt_error", e2.MUTE_AUDIO = "mute_audio", e2.MUTE_VIDEO = "mute_video", e2.UNMUTE_AUDIO = "unmute_audio", e2.UNMUTE_VIDEO = "unmute_video", e2.ON_P2P_OK = "on_p2p_ok", e2.RECEIVE_METADATA = "receive_metadata", e2.ON_DATA_STREAM = "on_data_stream", e2.ENABLE_LOCAL_VIDEO = "enable_local_video", e2.DISABLE_LOCAL_VIDEO = "disable_local_video", e2.ENABLE_LOCAL_AUDIO = "enable_local_audio", e2.DISABLE_LOCAL_AUDIO = "disable_local_audio", e2.ON_PUBLISHED_USER_LIST = "on_published_user_list";
      }(Pm || (Pm = {})), function(e2) {
        e2.CONNECTION_STATE_CHANGE = "CONNECTION_STATE_CHANGE", e2.NEED_ANSWER = "NEED_ANSWER", e2.NEED_RENEGOTIATE = "NEED_RENEGOTIATE", e2.P2P_LOST = "P2P_LOST", e2.GATEWAY_P2P_LOST = "GATEWAY_P2P_LOST", e2.NEED_UNPUB = "NEED_UNPUB", e2.NEED_UNSUB = "NEED_UNSUB", e2.NEED_UPLOAD = "NEED_UPLOAD", e2.NEED_CONTROL = "NEED_CONTROL", e2.START_RECONNECT = "START_RECONNECT", e2.END_RECONNECT = "END_RECONNECT", e2.NEED_SIGNAL_RTT = "NEED_SIGNAL_RTT";
      }(Lm || (Lm = {})), function(e2) {
        e2.AUDIO_SOURCE_STATE_CHANGE = "audio_source_state_change", e2.RECEIVE_TRACK_BUFFER = "receive_track_buffer", e2.ON_AUDIO_BUFFER = "on_audio_buffer", e2.UPDATE_SOURCE = "update_source";
      }(km || (km = {}));
      const Fm = { sendVolumeLevel: 0, sendBitrate: 0, sendBytes: 0, sendPackets: 0, sendPacketsLost: 0, currentPacketLossRate: 0 }, Bm = { sendBytes: 0, sendBitrate: 0, sendPackets: 0, sendPacketsLost: 0, sendResolutionHeight: 0, sendResolutionWidth: 0, captureResolutionHeight: 0, captureResolutionWidth: 0, targetSendBitrate: 0, totalDuration: 0, totalFreezeTime: 0, currentPacketLossRate: 0 }, Gm = { transportDelay: 0, end2EndDelay: 0, receiveBitrate: 0, receiveLevel: 0, receiveBytes: 0, receiveDelay: 0, receivePackets: 0, receivePacketsLost: 0, totalDuration: 0, totalFreezeTime: 0, freezeRate: 0, packetLossRate: 0, currentPacketLossRate: 0, publishDuration: -1 }, Wm = { uplinkNetworkQuality: 0, downlinkNetworkQuality: 0 }, Hm = { transportDelay: 0, end2EndDelay: 0, receiveBitrate: 0, receiveBytes: 0, receiveDelay: 0, receivePackets: 0, receivePacketsLost: 0, receiveResolutionHeight: 0, receiveResolutionWidth: 0, totalDuration: 0, totalFreezeTime: 0, freezeRate: 0, packetLossRate: 0, currentPacketLossRate: 0, publishDuration: -1 };
      let Km, Ym, qm;
      !function(e2) {
        e2.CONNECTED = "websocket:connected", e2.RECONNECTING = "websocket:reconnecting", e2.WILL_RECONNECT = "websocket:will_reconnect", e2.CLOSED = "websocket:closed", e2.FAILED = "websocket:failed", e2.ON_MESSAGE = "websocket:on_message", e2.REQUEST_NEW_URLS = "websocket:request_new_urls", e2.RECONNECT_WAITTING_FINISH = "websocket:reconnect_waitting_finish", e2.RECONNECT_CREATE_CONNECTION = "websocket:reconnect_create_connection", e2.ON_TOKEN_PRIVILEGE_DID_EXPIRE = "websocket:on_token_privilege_did_expire";
      }(Km || (Km = {})), function(e2) {
        e2.TRANSCODE = "mix_streaming", e2.RAW = "raw_streaming", e2.INJECT = "inject_streaming";
      }(Ym || (Ym = {})), function(e2) {
        e2[e2.INJECT_STREAM_STATUS_START_SUCCESS = 0] = "INJECT_STREAM_STATUS_START_SUCCESS", e2[e2.INJECT_STREAM_STATUS_START_ALREADY_EXISTS = 1] = "INJECT_STREAM_STATUS_START_ALREADY_EXISTS", e2[e2.INJECT_STREAM_STATUS_START_UNAUTHORIZED = 2] = "INJECT_STREAM_STATUS_START_UNAUTHORIZED", e2[e2.INJECT_STREAM_STATUS_START_TIMEOUT = 3] = "INJECT_STREAM_STATUS_START_TIMEOUT", e2[e2.INJECT_STREAM_STATUS_START_FAILED = 4] = "INJECT_STREAM_STATUS_START_FAILED", e2[e2.INJECT_STREAM_STATUS_STOP_SUCCESS = 5] = "INJECT_STREAM_STATUS_STOP_SUCCESS", e2[e2.INJECT_STREAM_STATUS_STOP_NOT_FOUND = 6] = "INJECT_STREAM_STATUS_STOP_NOT_FOUND", e2[e2.INJECT_STREAM_STATUS_STOP_UNAUTHORIZED = 7] = "INJECT_STREAM_STATUS_STOP_UNAUTHORIZED", e2[e2.INJECT_STREAM_STATUS_STOP_TIMEOUT = 8] = "INJECT_STREAM_STATUS_STOP_TIMEOUT", e2[e2.INJECT_STREAM_STATUS_STOP_FAILED = 9] = "INJECT_STREAM_STATUS_STOP_FAILED", e2[e2.INJECT_STREAM_STATUS_BROKEN = 10] = "INJECT_STREAM_STATUS_BROKEN";
      }(qm || (qm = {}));
      const Jm = { alpha: 1, height: 640, width: 360, x: 0, y: 0, zOrder: 0, audioChannel: 0 }, Xm = { x: 0, y: 0, width: 160, height: 160, zOrder: 255, alpha: 1 };
      function zm(e2, t2) {
        Qf(e2.url, "".concat(t2, ".url"), 1, 1e3, false), tm(e2.x) || Xf(e2.x, "".concat(t2, ".x"), 0, 1e4), tm(e2.y) || Xf(e2.y, "".concat(t2, ".y"), 0, 1e4), tm(e2.width) || Xf(e2.width, "".concat(t2, ".width"), 0, 1e4), tm(e2.height) || Xf(e2.height, "".concat(t2, ".height"), 0, 1e4), tm(e2.zOrder) || Xf(e2.zOrder, "".concat(t2, ".zOrder"), 0, 255), tm(e2.alpha) || Xf(e2.alpha, "".concat(t2, ".alpha"), 0, 1, false);
      }
      const Qm = { audioBitrate: 48, audioChannels: 1, audioSampleRate: 48e3, backgroundColor: 0, height: 360, lowLatency: false, videoBitrate: 400, videoCodecProfile: 100, videoCodecType: 1, videoFrameRate: 15, videoGop: 30, width: 640, images: [], userConfigs: [], userConfigExtraInfo: "" }, Zm = { audioBitrate: 48, audioChannels: 2, audioVolume: 100, audioSampleRate: 48e3, height: 0, width: 0, videoBitrate: 400, videoFramerate: 15, videoGop: 30 };
      let $m, eg, tg, ig, rg, ng, og, sg, ag, cg, dg, ug, lg, hg, pg, _g, Eg, fg;
      function mg(e2) {
        if (!e2.channelName)
          throw new vE(TE.INVALID_PARAMS, "invalid channelName in info");
        if ("number" != typeof e2.uid)
          throw new vE(TE.INVALID_PARAMS, "invalid uid in info, uid must be a number");
        return e2.token && Qf(e2.token, "info.token", 1, 2047), em(e2.uid), $f(e2.channelName), true;
      }
      function gg(e2) {
        return Jf(e2, "mediaSource", ["screen", "window", "application"]), true;
      }
      !function(e2) {
        e2.WARNING = "@live_uap-warning", e2.ERROR = "@line_uap-error", e2.PUBLISH_STREAM_STATUS = "@live_uap-publish-status", e2.INJECT_STREAM_STATUS = "@live_uap-inject-status", e2.WORKER_STATUS = "@live_uap-worker-status", e2.REQUEST_NEW_ADDRESS = "@live_uap-request-address";
      }($m || ($m = {})), function(e2) {
        e2.REQUEST_WORKER_MANAGER_LIST = "@live_req_worker_manager";
      }(eg || (eg = {})), function(e2) {
        e2[e2.LIVE_STREAM_RESPONSE_SUCCEED = 200] = "LIVE_STREAM_RESPONSE_SUCCEED", e2[e2.LIVE_STREAM_RESPONSE_ALREADY_EXISTS_STREAM = 454] = "LIVE_STREAM_RESPONSE_ALREADY_EXISTS_STREAM", e2[e2.LIVE_STREAM_RESPONSE_TRANSCODING_PARAMETER_ERROR = 450] = "LIVE_STREAM_RESPONSE_TRANSCODING_PARAMETER_ERROR", e2[e2.LIVE_STREAM_RESPONSE_BAD_STREAM = 451] = "LIVE_STREAM_RESPONSE_BAD_STREAM", e2[e2.LIVE_STREAM_RESPONSE_WM_PARAMETER_ERROR = 400] = "LIVE_STREAM_RESPONSE_WM_PARAMETER_ERROR", e2[e2.LIVE_STREAM_RESPONSE_WM_WORKER_NOT_EXIST = 404] = "LIVE_STREAM_RESPONSE_WM_WORKER_NOT_EXIST", e2[e2.LIVE_STREAM_RESPONSE_NOT_AUTHORIZED = 456] = "LIVE_STREAM_RESPONSE_NOT_AUTHORIZED", e2[e2.LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE = 457] = "LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE", e2[e2.LIVE_STREAM_RESPONSE_REQUEST_TOO_OFTEN = 429] = "LIVE_STREAM_RESPONSE_REQUEST_TOO_OFTEN", e2[e2.LIVE_STREAM_RESPONSE_NOT_FOUND_PUBLISH = 452] = "LIVE_STREAM_RESPONSE_NOT_FOUND_PUBLISH", e2[e2.LIVE_STREAM_RESPONSE_NOT_SUPPORTED = 453] = "LIVE_STREAM_RESPONSE_NOT_SUPPORTED", e2[e2.LIVE_STREAM_RESPONSE_MAX_STREAM_NUM = 455] = "LIVE_STREAM_RESPONSE_MAX_STREAM_NUM", e2[e2.LIVE_STREAM_RESPONSE_INTERNAL_SERVER_ERROR = 500] = "LIVE_STREAM_RESPONSE_INTERNAL_SERVER_ERROR", e2[e2.LIVE_STREAM_RESPONSE_WORKER_LOST = 501] = "LIVE_STREAM_RESPONSE_WORKER_LOST", e2[e2.LIVE_STREAM_RESPONSE_RESOURCE_LIMIT = 502] = "LIVE_STREAM_RESPONSE_RESOURCE_LIMIT", e2[e2.LIVE_STREAM_RESPONSE_WORKER_QUIT = 503] = "LIVE_STREAM_RESPONSE_WORKER_QUIT", e2[e2.ERROR_FAIL_SEND_MESSAGE = 504] = "ERROR_FAIL_SEND_MESSAGE", e2[e2.PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE = 30] = "PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE", e2[e2.PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT = 31] = "PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT", e2[e2.PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH = 32] = "PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH", e2[e2.PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN = 33] = "PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN";
      }(tg || (tg = {})), function(e2) {
        e2.CONNECT_FAILED = "connect failed", e2.CONNECT_TIMEOUT = "connect timeout", e2.WS_DISCONNECTED = "websocket disconnected", e2.REQUEST_TIMEOUT = "request timeout", e2.REQUEST_FAILED = "request failed", e2.WAIT_STATUS_TIMEOUT = "wait status timeout", e2.WAIT_STATUS_ERROR = "wait status error", e2.BAD_STATE = "bad state", e2.WS_ABORT = "ws abort", e2.AP_REQUEST_TIMEOUT = "AP request timeout", e2.AP_JSON_PARSE_ERROR = "AP json parse error", e2.AP_REQUEST_ERROR = "AP request error", e2.AP_REQUEST_ABORT = "AP request abort";
      }(ig || (ig = {})), function(e2) {
        e2[e2.SetSdkProfile = 0] = "SetSdkProfile", e2[e2.SetSourceChannel = 1] = "SetSourceChannel", e2[e2.SetSourceUserId = 2] = "SetSourceUserId", e2[e2.SetDestChannel = 3] = "SetDestChannel", e2[e2.StartPacketTransfer = 4] = "StartPacketTransfer", e2[e2.StopPacketTransfer = 5] = "StopPacketTransfer", e2[e2.UpdateDestChannel = 6] = "UpdateDestChannel", e2[e2.Reconnect = 7] = "Reconnect", e2[e2.SetVideoProfile = 8] = "SetVideoProfile";
      }(rg || (rg = {})), function(e2) {
        e2.NETWORK_DISCONNECTED = "NETWORK_DISCONNECTED", e2.NETWORK_CONNECTED = "NETWORK_CONNECTED", e2.PACKET_JOINED_SRC_CHANNEL = "PACKET_JOINED_SRC_CHANNEL", e2.PACKET_JOINED_DEST_CHANNEL = "PACKET_JOINED_DEST_CHANNEL", e2.PACKET_SENT_TO_DEST_CHANNEL = "PACKET_SENT_TO_DEST_CHANNEL", e2.PACKET_RECEIVED_VIDEO_FROM_SRC = "PACKET_RECEIVED_VIDEO_FROM_SRC", e2.PACKET_RECEIVED_AUDIO_FROM_SRC = "PACKET_RECEIVED_AUDIO_FROM_SRC", e2.PACKET_UPDATE_DEST_CHANNEL = "PACKET_UPDATE_DEST_CHANNEL", e2.PACKET_UPDATE_DEST_CHANNEL_REFUSED = "PACKET_UPDATE_DEST_CHANNEL_REFUSED", e2.PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE = "PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE";
      }(ng || (ng = {})), function(e2) {
        e2.RELAY_STATE_IDLE = "RELAY_STATE_IDLE", e2.RELAY_STATE_CONNECTING = "RELAY_STATE_CONNECTING", e2.RELAY_STATE_RUNNING = "RELAY_STATE_RUNNING", e2.RELAY_STATE_FAILURE = "RELAY_STATE_FAILURE";
      }(og || (og = {})), function(e2) {
        e2.RELAY_OK = "RELAY_OK", e2.SERVER_CONNECTION_LOST = "SERVER_CONNECTION_LOST", e2.SRC_TOKEN_EXPIRED = "SRC_TOKEN_EXPIRED", e2.DEST_TOKEN_EXPIRED = "DEST_TOKEN_EXPIRED";
      }(sg || (sg = {})), function(e2) {
        e2.High = "high", e2.Low = "low", e2.Audio = "audio", e2.Screen = "screen", e2.ScreenLow = "screen_low";
      }(ag || (ag = {})), function(e2) {
        e2.DISCONNECT = "disconnect", e2.CONNECTION_STATE_CHANGE = "connection-state-change", e2.NETWORK_QUALITY = "network-quality", e2.STREAM_TYPE_CHANGE = "stream-type-change", e2.IS_P2P_DISCONNECTED = "is-p2p-dis", e2.DISCONNECT_P2P = "dis-p2p", e2.REQUEST_NEW_GATEWAY_LIST = "req-gate-url", e2.NEED_RENEW_SESSION = "need-sid", e2.REQUEST_P2P_CONNECTION_PARAMS = "request-p2p-connection-params", e2.JOIN_RESPONSE = "join-response", e2.REQUEST_DC_CONNECTION_PARAMS = "request-dc-connection-params", e2.RESET_CONNECTION_EVENTS = "reset-connection-events", e2.DATACHANNEL_PRECONNECT = "datachannel_preconnect", e2.DATACHANNEL_FAILBACK = "datachannel_failback";
      }(cg || (cg = {})), function(e2) {
        e2[e2.Nothing = 0] = "Nothing", e2[e2.Audio = 1] = "Audio", e2[e2.LwoVideo = 2] = "LwoVideo", e2[e2.Video = 4] = "Video", e2[e2.Data = 8] = "Data";
      }(dg || (dg = {})), function(e2) {
        e2.NEED_RENEGOTIATE = "@need_renegotiate", e2.NEED_REPLACE_TRACK = "@need_replace_track", e2.NEED_CLOSE = "@need_close", e2.NEED_ENABLE_TRACK = "@need_enable_track", e2.NEED_DISABLE_TRACK = "@need_disable_track", e2.NEED_SESSION_ID = "@need_sid", e2.SET_OPTIMIZATION_MODE = "@set_optimization_mode", e2.GET_STATS = "@get_stats", e2.GET_LOW_VIDEO_TRACK = "@get_low_video_track", e2.NEED_RESET_REMOTE_SDP = "@need_reset_remote_sdp", e2.NEED_UPDATE_VIDEO_ENCODER = "@need_update_video_encoder", e2.NEED_MUTE_TRACK = "@need_mute_track", e2.NEED_UNMUTE_TRACK = "@need_unmute_track";
      }(ug || (ug = {})), function(e2) {
        e2.SCREEN_TRACK = "screen_track", e2.LOW_STREAM = "low_stream";
      }(lg || (lg = {})), function(e2) {
        e2[e2.HIGH_STREAM = 0] = "HIGH_STREAM", e2[e2.LOW_STREAM = 1] = "LOW_STREAM";
      }(hg || (hg = {})), function(e2) {
        e2[e2.DISABLE = 0] = "DISABLE", e2[e2.LOW_STREAM = 1] = "LOW_STREAM", e2[e2.AUDIO_ONLY = 2] = "AUDIO_ONLY";
      }(pg || (pg = {})), function(e2) {
        e2.SOURCE_STATE_CHANGE = "source-state-change", e2.TRACK_ENDED = "track-ended", e2.BEAUTY_EFFECT_OVERLOAD = "beauty-effect-overload", e2.VIDEO_ELEMENT_VISIBLE_STATUS = "video-element-visible-status", e2.CLOSED = "closed";
      }(_g || (_g = {})), function(e2) {
        e2.FIRST_FRAME_DECODED = "first-frame-decoded", e2.VIDEO_ELEMENT_VISIBLE_STATUS = "video-element-visible-status";
      }(Eg || (Eg = {})), function(e2) {
        e2.CHINA = "CHINA", e2.ASIA = "ASIA", e2.NORTH_AMERICA = "NORTH_AMERICA", e2.EUROPE = "EUROPE", e2.JAPAN = "JAPAN", e2.INDIA = "INDIA", e2.KOREA = "KOREA", e2.HKMC = "HKMC", e2.US = "US", e2.OCEANIA = "OCEANIA", e2.SOUTH_AMERICA = "SOUTH_AMERICA", e2.AFRICA = "AFRICA", e2.OVERSEA = "OVERSEA", e2.GLOBAL = "GLOBAL";
      }(fg || (fg = {}));
      const Sg = [fg.AFRICA, fg.ASIA, fg.CHINA, fg.EUROPE, fg.GLOBAL, fg.INDIA, fg.JAPAN, fg.NORTH_AMERICA, fg.OCEANIA, fg.OVERSEA, fg.SOUTH_AMERICA];
      let Tg;
      !function(e2) {
        e2.CHINA = "CN", e2.ASIA = "AS", e2.NORTH_AMERICA = "NA", e2.EUROPE = "EU", e2.JAPAN = "JP", e2.INDIA = "IN", e2.KOREA = "KR", e2.HKMC = "HK", e2.US = "US", e2.OCEANIA = "OC", e2.SOUTH_AMERICA = "SA", e2.AFRICA = "AF", e2.OVERSEA = "OVERSEA", e2.GLOBAL = "GLOBAL";
      }(Tg || (Tg = {}));
      const vg = { CHINA: {}, ASIA: { CODE: Tg.ASIA, WEBCS_DOMAIN: ["ap-web-1-asia.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-asia.agora.io"], PROXY_CS: ["proxy-ap-web-asia.agora.io"], CDS_AP: ["cds-ap-web-asia.agora.io", "cds-ap-web-asia2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-asia.agora.io", "sua-ap-web-asia2.agora.io"], UAP_AP: ["uap-ap-web-asia.agora.io", "uap-ap-web-asia2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-asia.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-asia.agora.io"], LOG_UPLOAD_SERVER: ["logservice-asia.agora.io"], PROXY_SERVER_TYPE3: ["southeast-asia.webrtc-cloud-proxy.sd-rtn.com"] }, NORTH_AMERICA: { CODE: Tg.NORTH_AMERICA, WEBCS_DOMAIN: ["ap-web-1-north-america.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-north-america.agora.io"], PROXY_CS: ["proxy-ap-web-america.agora.io"], CDS_AP: ["cds-ap-web-america.agora.io", "cds-ap-web-america2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-america.agora.io", "sua-ap-web-america2.agora.io"], UAP_AP: ["uap-ap-web-america.agora.io", "uap-ap-web-america2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-north-america.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-north-america.agora.io"], LOG_UPLOAD_SERVER: ["logservice-north-america.agora.io"], PROXY_SERVER_TYPE3: ["east-usa.webrtc-cloud-proxy.sd-rtn.com"] }, EUROPE: { CODE: Tg.EUROPE, WEBCS_DOMAIN: ["ap-web-1-europe.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-europe.agora.io"], PROXY_CS: ["proxy-ap-web-europe.agora.io"], CDS_AP: ["cds-ap-web-europe.agora.io", "cds-ap-web-europe2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-europe.agora.io", "sua-ap-web-europe.agora.io"], UAP_AP: ["uap-ap-web-europe.agora.io", "uap-ap-web-europe2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-europe.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-europe.agora.io"], LOG_UPLOAD_SERVER: ["logservice-europe.agora.io"], PROXY_SERVER_TYPE3: ["europe.webrtc-cloud-proxy.sd-rtn.com"] }, JAPAN: { CODE: Tg.JAPAN, WEBCS_DOMAIN: ["ap-web-1-japan.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-japan.agora.io"], PROXY_CS: ["proxy-ap-web-japan.agora.io"], CDS_AP: ["cds-ap-web-japan.agora.io", "cds-ap-web-japan2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-japan.agora.io", "sua-ap-web-japan2.agora.io"], UAP_AP: ["uap-ap-web-japan.agora.io", "	uap-ap-web-japan2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-japan.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-japan.agora.io"], LOG_UPLOAD_SERVER: ["logservice-japan.agora.io"], PROXY_SERVER_TYPE3: ["japan.webrtc-cloud-proxy.sd-rtn.com"] }, INDIA: { CODE: Tg.INDIA, WEBCS_DOMAIN: ["ap-web-1-india.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-india.agora.io"], PROXY_CS: ["proxy-ap-web-india.agora.io"], CDS_AP: ["cds-ap-web-india.agora.io", "cds-ap-web-india2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-india.agora.io", "sua-ap-web-india2.agora.io"], UAP_AP: ["uap-ap-web-india.agora.io", "uap-ap-web-india2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-india.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-india.agora.io"], LOG_UPLOAD_SERVER: ["logservice-india.agora.io"], PROXY_SERVER_TYPE3: ["india.webrtc-cloud-proxy.sd-rtn.com"] }, KOREA: { CODE: Tg.KOREA, WEBCS_DOMAIN: ["ap-web-1-korea.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-korea.agora.io"], PROXY_CS: ["proxy-ap-web-korea.agora.io"], CDS_AP: ["cds-ap-web-korea.agora.io", "cds-ap-web-korea2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-korea.agora.io", "sua-ap-web-korea2.agora.io"], UAP_AP: ["uap-ap-web-korea.agora.io", "uap-ap-web-korea2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-korea.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-korea.agora.io"], LOG_UPLOAD_SERVER: ["logservice-korea.agora.io"], PROXY_SERVER_TYPE3: ["korea.webrtc-cloud-proxy.sd-rtn.com"] }, HKMC: { CODE: Tg.HKMC, WEBCS_DOMAIN: ["ap-web-1-hkmc.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-hkmc.agora.io"], PROXY_CS: ["proxy-ap-web-hkmc.agora.io"], CDS_AP: ["cds-ap-web-hkmc.agora.io", "cds-ap-web-hkmc2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-hkmc.agora.io", "sua-ap-web-hkmc2.agora.io"], UAP_AP: ["uap-ap-web-hkmc.agora.io", "uap-ap-web-hkmc2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-hkmc.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-hkmc.agora.io"], LOG_UPLOAD_SERVER: ["logservice-hkmc.agora.io"], PROXY_SERVER_TYPE3: ["hkmc.webrtc-cloud-proxy.sd-rtn.com"] }, US: { CODE: Tg.US, WEBCS_DOMAIN: ["ap-web-1-us.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-us.agora.io"], PROXY_CS: ["proxy-ap-web-us.agora.io"], CDS_AP: ["cds-ap-web-us.agora.io", "cds-ap-web-us2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-us.agora.io", "sua-ap-web-us2.agora.io"], UAP_AP: ["uap-ap-web-us.agora.io", "uap-ap-web-us2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-us.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-us.agora.io"], LOG_UPLOAD_SERVER: ["logservice-us.agora.io"], PROXY_SERVER_TYPE3: ["us.webrtc-cloud-proxy.sd-rtn.com"] }, OVERSEA: { CODE: Tg.OVERSEA, WEBCS_DOMAIN: ["ap-web-1-oversea.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-oversea.agora.io"], PROXY_CS: ["proxy-ap-web-oversea.agora.io"], CDS_AP: ["cds-ap-web-oversea.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-oversea.agora.io"], UAP_AP: ["uap-ap-web-oversea.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-oversea.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-oversea.agora.io"], LOG_UPLOAD_SERVER: ["logservice-oversea.agora.io"], PROXY_SERVER_TYPE3: ["webrtc-cloud-proxy.agora.io"] }, GLOBAL: { CODE: Tg.GLOBAL, WEBCS_DOMAIN: ["webrtc2-ap-web-1.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["webrtc2-ap-web-3.agora.io"], PROXY_CS: ["ap-proxy-1.agora.io", "ap-proxy-2.agora.io"], CDS_AP: ["cds-ap-web-1.agora.io", "cds-ap-web-3.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-1.agora.io", "sua-ap-web-3.agora.io"], UAP_AP: ["uap-ap-web-1.agora.io", "uap-ap-web-3.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2.agora.io"], LOG_UPLOAD_SERVER: ["logservice.agora.io"], PROXY_SERVER_TYPE3: ["webrtc-cloud-proxy.sd-rtn.com"] }, OCEANIA: { CODE: Tg.OCEANIA, WEBCS_DOMAIN: ["ap-web-1-oceania.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-oceania.agora.io"], PROXY_CS: ["proxy-ap-web-oceania.agora.io"], CDS_AP: ["cds-ap-web-oceania.agora.io", "cds-ap-web-oceania2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-oceania.agora.io", "sua-ap-web-oceania2.agora.io"], UAP_AP: ["uap-ap-web-oceania.agora.io", "uap-ap-web-oceania2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-oceania.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-oceania.agora.io"], LOG_UPLOAD_SERVER: ["logservice-oceania.agora.io"], PROXY_SERVER_TYPE3: ["oceania.webrtc-cloud-proxy.sd-rtn.com"] }, SOUTH_AMERICA: { CODE: Tg.SOUTH_AMERICA, WEBCS_DOMAIN: ["ap-web-1-south-america.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-south-america.agora.io"], PROXY_CS: ["proxy-ap-web-south-america.agora.io"], CDS_AP: ["cds-ap-web-south-america.agora.io", "cds-ap-web-south-america2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-south-america.agora.io", "sua-ap-web-south-america2.agora.io"], UAP_AP: ["uap-ap-web-south-america.agora.io", "uap-ap-web-south-america2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-south-america.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-south-america.agora.io"], LOG_UPLOAD_SERVER: ["logservice-south-america.agora.io"], PROXY_SERVER_TYPE3: ["south-america.webrtc-cloud-proxy.sd-rtn.com"] }, AFRICA: { CODE: Tg.AFRICA, WEBCS_DOMAIN: ["ap-web-1-africa.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-africa.agora.io"], PROXY_CS: ["proxy-ap-web-africa.agora.io"], CDS_AP: ["cds-ap-web-africa.agora.io", "cds-ap-web-africa2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-africa.agora.io", "sua-ap-web-africa2.agora.io"], UAP_AP: ["uap-ap-web-africa.agora.io", "uap-ap-web-africa2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-africa.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-africa.agora.io"], LOG_UPLOAD_SERVER: ["logservice-south-africa.agora.io"], PROXY_SERVER_TYPE3: ["africa.webrtc-cloud-proxy.sd-rtn.com"] } };
      let Rg, Ig, yg, Cg, Ag, Og, bg, wg, Ng, Dg, Pg, Lg, kg, Mg, Ug;
      LE && (vg.CHINA = { CODE: Tg.CHINA, WEBCS_DOMAIN: ["webrtc2-2.ap.sd-rtn.com"], WEBCS_DOMAIN_BACKUP_LIST: ["webrtc2-4.ap.sd-rtn.com"], PROXY_CS: ["proxy-web.ap.sd-rtn.com"], CDS_AP: ["cds-web-2.ap.sd-rtn.com", "cds-web-4.ap.sd-rtn.com"], ACCOUNT_REGISTER: ["sua-web-2.ap.sd-rtn.com", "sua-web-4.ap.sd-rtn.com"], UAP_AP: ["uap-web-2.ap.sd-rtn.com", "uap-web-4.ap.sd-rtn.com"], EVENT_REPORT_DOMAIN: ["web-3.statscollector.sd-rtn.com"], EVENT_REPORT_BACKUP_DOMAIN: ["web-4.statscollector.sd-rtn.com"], LOG_UPLOAD_SERVER: ["logservice-china.agora.io"], PROXY_SERVER_TYPE3: ["east-cn.webrtc-cloud-proxy.sd-rtn.com"] }), function(e2) {
        e2.UPDATE_BITRATE_LIMIT = "update_bitrate_limit";
      }(Rg || (Rg = {}));
      class xg extends gE {
        constructor(e2, t2) {
          super(), mp(this, "onICEConnectionStateChange", void 0), mp(this, "onConnectionStateChange", void 0), mp(this, "onDTLSTransportStateChange", void 0), mp(this, "onDTLSTransportError", void 0), mp(this, "onICETransportStateChange", void 0), mp(this, "onFirstAudioReceived", void 0), mp(this, "onFirstVideoReceived", void 0), mp(this, "onFirstAudioDecoded", void 0), mp(this, "onFirstVideoDecoded", void 0), mp(this, "onFirstVideoDecodedTimeout", void 0), mp(this, "onSelectedLocalCandidateChanged", void 0), mp(this, "onSelectedRemoteCandidateChanged", void 0);
        }
      }
      !function(e2) {
        e2.SEND = "sendonly", e2.RECV = "recvonly", e2.SENDRECV = "sendrecv", e2.INACTIVE = "inactive";
      }(Ig || (Ig = {})), function(e2) {
        e2.VIDEO = "video", e2.AUDIO = "audio";
      }(yg || (yg = {})), function(e2) {
        e2.LocalVideoTrack = "videoTrack", e2.LocalAudioTrack = "audioTrack", e2.LocalVideoLowTrack = "videoLowTrack";
      }(Cg || (Cg = {})), function(e2) {
        e2.New = "new", e2.Connected = "connected", e2.Reconnecting = "reconnecting", e2.Disconnected = "disconnected";
      }(Ag || (Ag = {})), function(e2) {
        e2.StateChange = "stateChange", e2.IceConnectionStateChange = "iceConnectionStateChange", e2.RequestMuteLocal = "requestMuteLocal", e2.RequestUnmuteLocal = "requestUnmuteLocal", e2.RequestRePublish = "requestRePublish", e2.RequestReSubscribe = "requestReSubscribe", e2.RequestUploadStats = "requestUploadStats", e2.MediaReconnectStart = "MediaReconnectStart", e2.MediaReconnectEnd = "MediaReconnectEnd", e2.NeedSignalRTT = "NeedSignalRTT", e2.RequestRestartICE = "RequestRestartIce", e2.PeerConnectionStateChange = "PeerConnectionStateChange", e2.RequestReconnect = "RequestReconnect", e2.RequestReconnectPC = "RequestReconnectPC", e2.RequestUnpublishForReconnectPC = "RequestUnpublishForReconnectPC", e2.P2PLost = "P2PLost", e2.UpdateVideoEncoder = "UpdateVideoEncoder", e2.ConnectionTypeChange = "ConnectionTypeChange", e2.RequestLowStreamParameter = "RequestLowStreamParameter", e2.QueryClientConnectionState = "QueryClientConnectionState";
      }(Og || (Og = {})), function(e2) {
        e2.ONLINE = "ONLINE", e2.OFFLINE = "OFFLINE";
      }(bg || (bg = {})), function(e2) {
        e2.NETWORK_STATE_CHANGE = "NETWORK_STATE_CHANGE", e2.ONLINE = "ONLINE", e2.OFFLINE = "OFFLINE";
      }(wg || (wg = {})), function(e2) {
        e2.ON_TRACK = "on_track", e2.ON_NODE = "on_node";
      }(Ng || (Ng = {})), function(e2) {
        e2.REQUEST_UPDATE_CONSTRAINTS = "request_update_constraints", e2.REQUEST_CONSTRAINTS = "request_constraints";
      }(Dg || (Dg = {})), function(e2) {
        e2.CONNECTING = "CONNECTING", e2.RECONNECTING = "RECONNECTING", e2.CONNECTED = "CONNECTED", e2.CLOSED = "CLOSED";
      }(Pg || (Pg = {})), function(e2) {
        e2[e2.CONNECT_AP = 0] = "CONNECT_AP", e2[e2.AP_CONNECTED = 1] = "AP_CONNECTED", e2[e2.CONNECT_WORKER_MANAGER = 2] = "CONNECT_WORKER_MANAGER", e2[e2.WORKER_MANAGER_CONNECTED = 3] = "WORKER_MANAGER_CONNECTED", e2[e2.GET_WORKER_MANAGER_RESPONSE = 4] = "GET_WORKER_MANAGER_RESPONSE", e2[e2.CONNECT_WORKER = 5] = "CONNECT_WORKER", e2[e2.WORKER_CONNECTED = 6] = "WORKER_CONNECTED", e2[e2.CLOSED = 7] = "CLOSED";
      }(Lg || (Lg = {})), function(e2) {
        e2.CONNECTION_STATE_CHANGE = "connection-state-change", e2.STATE_CHANGE = "state-change", e2.INSPECT_RESULT = "inspect-result", e2.CLIENT_LOCAL_VIDEO_TRACK = "client-local-video-track", e2.REQUEST_NEW_WORKER_URL = "request-new-worker-url";
      }(kg || (kg = {})), function(e2) {
        e2.NETWORK_ERROR = "NETWORK_ERROR", e2.SERVER_ERROR = "SERVER_ERROR", e2.MULTI_IP = "MULTI_IP", e2.TIMEOUT = "TIMEOUT", e2.OFFLINE = "OFFLINE", e2.LEAVE = "LEAVE", e2.P2P_FAILED = "P2P_FAILED", e2.FALLBACK = "FALLBACK";
      }(Mg || (Mg = {})), function(e2) {
        e2.CONNECTED = "transmitter:connected", e2.RECONNECTING = "transmitter:reconnecting", e2.WILL_RECONNECT = "transmitter:will_reconnect", e2.CLOSED = "transmitter:closed", e2.FAILED = "transmitter:failed", e2.ON_MESSAGE = "transmitter:on_message", e2.REQUEST_NEW_URLS = "transmitter:request_new_urls", e2.RECONNECT_WAITTING_FINISH = "transmitter:reconnect_waitting_finish", e2.RECONNECT_CREATE_CONNECTION = "transmitter:reconnect_create_connection", e2.ON_TOKEN_PRIVILEGE_DID_EXPIRE = "transmitter:on_token_privilege_did_expire", e2.TO_CONNECT_DATACHANNEL = "transmitter:to_connect_datachannel", e2.FAILBACK = "transmitter:failback";
      }(Ug || (Ug = {}));
      const Vg = { getDisplayMedia: false, getStreamFromExtension: false, supportUnifiedPlan: false, supportMinBitrate: false, supportSetRtpSenderParameters: false, supportDualStream: true, webAudioMediaStreamDest: false, supportReplaceTrack: false, supportWebGL: false, webAudioWithAEC: false, supportRequestFrame: false, supportShareAudio: false, supportDualStreamEncoding: false, supportDataChannel: false };
      function jg() {
        return Vg;
      }
      let Fg;
      !function(e2) {
        e2[e2.CHOOSE_SERVER = 11] = "CHOOSE_SERVER", e2[e2.CLOUD_PROXY = 18] = "CLOUD_PROXY", e2[e2.CLOUD_PROXY_5 = 20] = "CLOUD_PROXY_5", e2[e2.CLOUD_PROXY_FALLBACK = 26] = "CLOUD_PROXY_FALLBACK";
      }(Fg || (Fg = {}));
      var Bg = k, Gg = Array.isArray || function(e2) {
        return "Array" == Bg(e2);
      }, Wg = h, Hg = Gg, Kg = lc, Yg = q, qg = nt("species"), Jg = Wg.Array, Xg = function(e2) {
        var t2;
        return Hg(e2) && (t2 = e2.constructor, (Kg(t2) && (t2 === Jg || Hg(t2.prototype)) || Yg(t2) && null === (t2 = t2[qg])) && (t2 = void 0)), void 0 === t2 ? Jg : t2;
      }, zg = function(e2, t2) {
        return new (Xg(e2))(0 === t2 ? 0 : t2);
      }, Qg = Wt, Zg = F, $g = je, eS = wi, tS = zg, iS = d([].push), rS = function(e2) {
        var t2 = 1 == e2, i2 = 2 == e2, r2 = 3 == e2, n2 = 4 == e2, o2 = 6 == e2, s2 = 7 == e2, a2 = 5 == e2 || o2;
        return function(c2, d2, u2, l2) {
          for (var h2, p2, _2 = $g(c2), E2 = Zg(_2), f2 = Qg(d2, u2), m2 = eS(E2), g2 = 0, S2 = l2 || tS, T2 = t2 ? S2(c2, m2) : i2 || s2 ? S2(c2, 0) : void 0; m2 > g2; g2++)
            if ((a2 || g2 in E2) && (p2 = f2(h2 = E2[g2], g2, _2), e2))
              if (t2)
                T2[g2] = p2;
              else if (p2)
                switch (e2) {
                  case 3:
                    return true;
                  case 5:
                    return h2;
                  case 6:
                    return g2;
                  case 2:
                    iS(T2, h2);
                }
              else
                switch (e2) {
                  case 4:
                    return false;
                  case 7:
                    iS(T2, h2);
                }
          return o2 ? -1 : r2 || n2 ? n2 : T2;
        };
      }, nS = { forEach: rS(0), map: rS(1), filter: rS(2), some: rS(3), every: rS(4), find: rS(5), findIndex: rS(6), filterReject: rS(7) }, oS = nS.forEach, sS = Vi("forEach") ? [].forEach : function(e2) {
        return oS(this, e2, arguments.length > 1 ? arguments[1] : void 0);
      };
      Ri({ target: "Array", proto: true, forced: [].forEach != sS }, { forEach: sS });
      var aS = Hi("Array").forEach, cS = $n, dS = Ge, uS = u, lS = aS, hS = Array.prototype, pS = { DOMTokenList: true, NodeList: true }, _S = function(e2) {
        var t2 = e2.forEach;
        return e2 === hS || uS(hS, e2) && t2 === hS.forEach || dS(pS, cS(e2)) ? lS : t2;
      }, ES = je, fS = hn;
      Ri({ target: "Object", stat: true, forced: i(function() {
        fS(1);
      }) }, { keys: function(e2) {
        return fS(ES(e2));
      } });
      var mS = J.Object.keys, gS = Xi, SS = Ri, TS = Gg, vS = d([].reverse), RS = [1, 2];
      SS({ target: "Array", proto: true, forced: String(RS) === String(RS.reverse()) }, { reverse: function() {
        return TS(this) && (this.length = this.length), vS(this);
      } });
      var IS = Hi("Array").reverse, yS = u, CS = IS, AS = Array.prototype, OS = function(e2) {
        var t2 = e2.reverse;
        return e2 === AS || yS(AS, e2) && t2 === AS.reverse ? CS : t2;
      }, bS = i, wS = ae, NS = nt("species"), DS = function(e2) {
        return wS >= 51 || !bS(function() {
          var t2 = [];
          return (t2.constructor = {})[NS] = function() {
            return { foo: 1 };
          }, 1 !== t2[e2](Boolean).foo;
        });
      }, PS = Ri, LS = h, kS = Gg, MS = lc, US = q, xS = Mr, VS = wi, jS = K, FS = nf, BS = nt, GS = Sc, WS = DS("slice"), HS = BS("species"), KS = LS.Array, YS = Math.max;
      PS({ target: "Array", proto: true, forced: !WS }, { slice: function(e2, t2) {
        var i2, r2, n2, o2 = jS(this), s2 = VS(o2), a2 = xS(e2, s2), c2 = xS(void 0 === t2 ? s2 : t2, s2);
        if (kS(o2) && (i2 = o2.constructor, (MS(i2) && (i2 === KS || kS(i2.prototype)) || US(i2) && null === (i2 = i2[HS])) && (i2 = void 0), i2 === KS || void 0 === i2))
          return GS(o2, a2, c2);
        for (r2 = new (void 0 === i2 ? KS : i2)(YS(c2 - a2, 0)), n2 = 0; a2 < c2; a2++, n2++)
          a2 in o2 && FS(r2, n2, o2[a2]);
        return r2.length = n2, r2;
      } });
      var qS = Hi("Array").slice, JS = u, XS = qS, zS = Array.prototype, QS = function(e2) {
        var t2 = e2.slice;
        return e2 === zS || JS(zS, e2) && t2 === zS.slice ? XS : t2;
      };
      function ZS(e2, t2, i2, r2, n2) {
        var o2, s2, a2, c2 = {};
        return _S(o2 = mS(r2)).call(o2, function(e3) {
          c2[e3] = r2[e3];
        }), c2.enumerable = !!c2.enumerable, c2.configurable = !!c2.configurable, ("value" in c2 || c2.initializer) && (c2.writable = true), c2 = gS(s2 = OS(a2 = QS(i2).call(i2)).call(a2)).call(s2, function(i3, r3) {
          return r3(e2, t2, i3) || i3;
        }, c2), n2 && void 0 !== c2.initializer && (c2.value = c2.initializer ? c2.initializer.call(n2) : void 0, c2.initializer = void 0), void 0 === c2.initializer && (fp(e2, t2, c2), c2 = null), c2;
      }
      var $S = Hi("Array").keys, eT = $n, tT = Ge, iT = u, rT = $S, nT = Array.prototype, oT = { DOMTokenList: true, NodeList: true }, sT = function(e2) {
        var t2 = e2.keys;
        return e2 === nT || iT(nT, e2) && t2 === nT.keys || tT(oT, eT(e2)) ? rT : t2;
      };
      function aT(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function cT(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? aT(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : aT(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let dT = 0, uT = 0;
      function lT(e2, t2, i2, r2) {
        return new Cl((n2, o2) => {
          t2.timeout = t2.timeout || HE("HTTP_CONNECT_TIMEOUT"), t2.responseType = t2.responseType || "json", t2.data && !i2 ? (t2.data = JSON.stringify(t2.data), dT += PR(t2.data)) : i2 && (t2.data.size ? dT += t2.data.size : t2.data instanceof FormData ? dT += function(e3) {
            let t3 = 0;
            /DingTalk/i.test(navigator.userAgent) && e3.realFormData && (e3 = e3.realFormData);
            return e3.forEach((e4) => {
              t3 += "string" == typeof e4 ? PR(e4) : e4.size;
            }), t3 + 138;
          }(t2.data) : dT += PR(JSON.stringify(t2.data))), t2.headers = t2.headers || {}, t2.headers["Content-Type"] = t2.headers["Content-Type"] || "application/json", t2.method = "POST", t2.url = e2, fE.request(t2).then((e3) => {
            "string" == typeof e3.data ? uT += PR(e3.data) : e3.data instanceof ArrayBuffer || e3.data instanceof Uint8Array ? uT += e3.data.byteLength : uT += PR(JSON.stringify(e3.data)), r2 && n2({ data: e3.data, headers: e3.headers }), n2(e3.data);
          }).catch((e3) => {
            fE.isCancel(e3) ? o2(new vE(TE.OPERATION_ABORTED, "cancel token canceled")) : "ECONNABORTED" === e3.code ? o2(new vE(TE.NETWORK_TIMEOUT, e3.message)) : e3.response ? o2(new vE(TE.NETWORK_RESPONSE_ERROR, e3.response.status)) : o2(new vE(TE.NETWORK_ERROR, e3.message));
          });
        });
      }
      async function hT(e2, t2) {
        const i2 = new Blob([t2.data], { type: "buffer" });
        return await lT(e2, cT(cT({}, t2), {}, { data: i2, headers: { "Content-Type": "application/octet-stream" } }), true);
      }
      const pT = new class extends gE {
        set networkState(e2) {
          NE.info("[".concat(this._moduleName, "]") + "network state changed, " + this._networkState + " -> " + e2), this.emit(wg.NETWORK_STATE_CHANGE, e2, this._networkState), e2 === bg.ONLINE ? this.emit(wg.ONLINE) : e2 === bg.OFFLINE && (this.onlineWaiter = new Cl((e3) => {
            this.once(wg.ONLINE, () => {
              this.onlineWaiter = void 0, e3(bg.ONLINE);
            });
          }), this.emit(wg.OFFLINE)), this._networkState = e2;
        }
        get networkState() {
          return this._networkState;
        }
        constructor() {
          super(), mp(this, "_moduleName", "network-indicator"), mp(this, "_networkState", bg.ONLINE), mp(this, "onlineWaiter", void 0), window.addEventListener("online", () => {
            this.networkState = bg.ONLINE;
          }), window.addEventListener("offline", () => {
            this.networkState = bg.OFFLINE;
          });
        }
      }();
      let _T = false;
      const ET = new class extends gE {
        constructor() {
          super(...arguments), mp(this, "onAutoplayFailed", void 0), mp(this, "onAudioAutoplayFailed", void 0);
        }
      }();
      function fT() {
        if (Bh(), !_T) {
          const e2 = (t2) => {
            t2.preventDefault(), _T = false, dp() ? document.body.removeEventListener("click", e2, true) : (document.body.removeEventListener("touchstart", e2, true), document.body.removeEventListener("mousedown", e2, true));
          };
          _T = true, dp() ? document.body.addEventListener("click", e2, true) : (document.body.addEventListener("touchstart", e2, true), document.body.addEventListener("mousedown", e2, true)), NE.info("detect media autoplay failed, document: https://docs.agora.io/cn/Voice/autoplay_policy_web_ng?platform=Web"), ET.onAutoplayFailed ? ET.onAutoplayFailed() : ET.onAudioAutoplayFailed ? NE.warning("AgoraRTC.onAudioAutoplayFailed has been deprecated in favor of AgoraRTC.onAutoplayFailed.\n\n  Please refer to the Agora document to migrate the newer API, https://docs.agora.io/en/Voice/autoplay_policy_web_ng?platform=Web .") : NE.warning("We have detected a media autoplay failed event, and found out that you haven't implemented AgoraRTC.onAutoplayFailed callback yet.\n\n  It will cause audio/video element not playing automatically on some browsers without user interaction, possibly hurting user experiences.\n\n  Please refer to the Agora document to properly handle autoplay failed event, https://docs.agora.io/en/Voice/autoplay_policy_web_ng?platform=Web ."), ET.emit("autoplay-failed");
        }
      }
      function mT(e2) {
        return new TextEncoder().encode(e2);
      }
      const gT = function(e2, t2) {
        const i2 = new Uint8Array(e2.byteLength + t2.byteLength);
        return i2.set(new Uint8Array(e2), 0), i2.set(new Uint8Array(t2), e2.byteLength), i2;
      };
      const ST = async (e2) => function(e3, t2) {
        let i2 = "";
        return new Uint8Array(e3).forEach((e4) => {
          i2 += e4.toString(t2).padStart(2, "0");
        }), i2;
      }(await crypto.subtle.digest("SHA-256", mT(e2)), 16);
      function TT(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function vT(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? TT(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : TT(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function RT() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return function(t2, i2, r2) {
          const n2 = r2.value;
          if ("function" == typeof n2) {
            const o2 = e2.className || t2.__className__ || ("AgoraRTCClient" === t2.constructor.name ? "Client" : t2.constructor.name);
            r2.value = function() {
              for (var t3 = arguments.length, r3 = new Array(t3), s2 = 0; s2 < t3; s2++)
                r3[s2] = arguments[s2];
              let a2 = r3;
              if (e2.argsMap)
                try {
                  a2 = e2.argsMap(this, ...r3);
                } catch (e3) {
                  NE.warning(e3), a2 = [];
                }
              try {
                JSON.stringify(a2);
              } catch (e3) {
                NE.warning("arguments for method ".concat(o2, ".").concat(i2, " not serializable for apiInvoke.")), a2 = [];
              }
              const c2 = (e2.report || IT).reportApiInvoke(this._sessionId || null, { name: "".concat(o2, ".").concat(i2), options: a2, tag: fm.TRACER, reportResult: e2.reportResult }, e2.throttleTime);
              try {
                const t4 = n2.apply(this, r3);
                return t4 instanceof Cl ? t4.then((t5) => (c2.onSuccess(e2.reportResult && t5), t5)).catch((e3) => {
                  throw c2.onError(e3), e3;
                }) : (c2.onSuccess(e2.reportResult && t4), t4);
              } catch (e3) {
                throw c2.onError(e3), e3;
              }
            };
          }
          return r2;
        };
      }
      const IT = new class {
        constructor() {
          mp(this, "baseInfoMap", /* @__PURE__ */ new Map()), mp(this, "proxyServer", void 0), mp(this, "clientList", ZE), mp(this, "eventUploadTimer", void 0), mp(this, "setSessionIdTimer", void 0), mp(this, "url", void 0), mp(this, "backupUrl", void 0), mp(this, "_appId", void 0), mp(this, "keyEventUploadPendingItems", []), mp(this, "normalEventUploadPendingItems", []), mp(this, "apiInvokeUploadPendingItems", []), mp(this, "apiInvokeCount", 0), mp(this, "ltsList", []), mp(this, "lastSendNormalEventTime", Date.now()), mp(this, "customReportCounterTimer", void 0), mp(this, "customReportCount", 0), mp(this, "extApiInvoke", async (e2) => {
            for (const t2 of e2) {
              const e3 = vT(vT({}, t2), {}, { sid: null, invokeId: ++this.apiInvokeCount, tag: fm.TRACER });
              this.sendApiInvoke(e3);
            }
          }), this.eventUploadTimer = window.setInterval(this.doSend.bind(this), HE("EVENT_REPORT_SEND_INTERVAL")), this.setSessionIdTimer = window.setInterval(this.appendSessionId.bind(this), HE("EVENT_REPORT_SEND_INTERVAL"));
        }
        adjustSessionStartTime(e2) {
          if (!this.baseInfoMap.has(e2) && !this.baseInfoMap.get(e2))
            return void NE.error("adjust session ".concat(e2, " start time, sid is not exist or info is undefined"));
          const t2 = this.baseInfoMap.get(e2), i2 = Date.now(), r2 = t2.startTime;
          t2.startTime = i2, NE.debug("rewrite session ".concat(e2, " startTime: ").concat(i2, " , ").concat(i2 - r2, "ms")), this.baseInfoMap.set(e2, t2);
        }
        setAppId(e2) {
          this._appId = e2;
        }
        reportApiInvoke(e2, t2, i2) {
          t2.timeout = t2.timeout || 6e4, t2.reportResult = void 0 === t2.reportResult || t2.reportResult;
          const r2 = Date.now();
          this.apiInvokeCount += 1;
          const n2 = this.apiInvokeCount, o2 = () => ({ tag: t2.tag, invokeId: n2, sid: e2, name: t2.name, apiInvokeTime: r2, options: t2.options, states: t2.states || null }), s2 = !!HE("SHOW_REPORT_INVOKER_LOG");
          s2 && NE.info("".concat(t2.name, " start"), t2.options);
          let a2 = false;
          LR(t2.timeout).then(() => {
            a2 || (this.sendApiInvoke(vT(vT({}, o2()), {}, { error: TE.API_INVOKE_TIMEOUT, success: false })), NE.debug("".concat(t2.name, " timeout")));
          });
          const c2 = new vE(TE.UNEXPECTED_ERROR, "".concat(t2.name, ": this api invoke is end"));
          return { onSuccess: (e3) => {
            const r3 = () => {
              if (a2)
                throw c2;
              return a2 = true, this.sendApiInvoke(vT(vT({}, o2()), {}, { success: true }, t2.reportResult && { result: e3 })), s2 && NE.info("".concat(t2.name, " onSuccess")), e3;
            };
            return i2 ? $R(r3, t2.name + "Success", i2, () => a2 = true) : r3();
          }, onError: (e3) => {
            const r3 = () => {
              if (a2)
                throw e3;
              a2 = true, this.sendApiInvoke(vT(vT({}, o2()), {}, { success: false, error: e3 })), s2 && NE.info("".concat(t2.name, " onFailure"), e3.toString());
            };
            return i2 ? $R(r3, t2.name + "Error", i2, () => a2 = true) : r3();
          } };
        }
        sessionInit(e2, t2) {
          if (this.baseInfoMap.has(e2))
            return;
          const i2 = Date.now(), r2 = this.createBaseInfo(e2, i2);
          r2.cname = t2.cname;
          const n2 = Object.assign({}, { willUploadConsoleLog: HE("UPLOAD_LOG"), maxTouchPoints: navigator.maxTouchPoints, areaVersion: LE ? "global" : "oversea", areas: HE("AREAS") && HE("AREAS").join(",") }, t2.extend), o2 = Date.now(), s2 = vT(vT({}, r2), {}, { eventType: lm.SESSION_INIT, appid: t2.appid, browser: navigator.userAgent, build: DE, lts: o2, elapse: o2 - i2, extend: JSON.stringify(n2), mode: t2.mode, process: HE("PROCESS_ID"), appType: HE("APP_TYPE"), success: true, version: PE });
          this.send({ type: hm.SESSION, data: s2 }, true);
        }
        joinChooseServer(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = i2.info, n2 = Date.now(), o2 = vT(vT({}, r2), {}, { eventType: lm.JOIN_CHOOSE_SERVER, lts: n2, eventElapse: n2 - t2.lts, chooseServerAddr: t2.csAddr, errorCode: t2.ec, elapse: n2 - i2.startTime, success: t2.succ, chooseServerAddrList: JSON.stringify(t2.serverList), uid: t2.uid ? parseInt(t2.uid) : null, cid: t2.cid ? parseInt(t2.cid) : null, chooseServerIp: t2.csIp || "", opid: t2.opid, unilbsServerIds: t2.unilbsServerIds, extend: t2.extend || void 0, isHttp3: t2.isHttp3 });
          this.send({ type: hm.JOIN_CHOOSE_SERVER, data: o2 }, true);
        }
        reqUserAccount(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = i2.info, n2 = Date.now(), o2 = vT(vT({}, r2), {}, { eventType: lm.REQ_USER_ACCOUNT, lts: n2, success: t2.success, serverAddress: t2.serverAddr, stringUid: t2.stringUid, uid: t2.uid, errorCode: t2.errorCode, elapse: n2 - i2.startTime, eventElapse: n2 - t2.lts, extend: JSON.stringify(t2.extend) });
          this.send({ type: hm.REQ_USER_ACCOUNT, data: o2 }, true);
        }
        joinGateway(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = i2.info;
          t2.vid && (r2.vid = t2.vid), r2.uid = t2.uid, r2.cid = t2.cid;
          const n2 = Date.now(), { firstSuccess: o2, avoidJoinStartTime: s2, isProxy: a2, addr: c2 } = t2, d2 = n2 - (o2 && s2 ? s2 : i2.startTime), u2 = vT(vT({}, r2), {}, { eventType: lm.JOIN_GATEWAY, lts: n2, gatewayAddr: t2.addr, success: t2.succ, errorCode: t2.ec, elapse: d2, eventElapse: n2 - t2.lts, firstSuccess: o2, signalChannel: t2.signalChannel }), l2 = u2.success ? 1 : 0;
          if (t2.succ && (i2.lastJoinSuccessTime = n2), o2)
            this.send({ type: hm.JOIN_GATEWAY, data: u2 }, true);
          else {
            let e3;
            if (c2)
              if (a2) {
                const t4 = c2.match(/h=(\d{1,3}-){3}\d{1,3}/g), i3 = c2.match(/p=[0-9]{1,6}/g);
                e3 = { isSuccess: l2, gatewayIp: t4 && t4.length ? t4[0].split("=")[1].replace(/-/g, ".") : "", port: i3 && i3.length ? i3[0].split("=")[1] : "", isProxy: a2 ? 1 : 0 };
              } else {
                const t4 = c2.match(/wss:\/\/(\d{1,3}-){3}\d{1,3}/g), i3 = c2.match(/:[0-9]{1,6}/g);
                e3 = { isSuccess: l2, gatewayIp: t4 && t4.length ? t4[0].split("//")[1].replace(/-/g, ".") : "", port: i3 && i3.length ? i3[0].split(":")[1] : "", isProxy: a2 ? 1 : 0 };
              }
            else
              e3 = { isSuccess: l2, gatewayIp: "", port: "", isProxy: a2 ? 1 : 0 };
            delete u2.success, delete u2.eventType, delete u2.firstSuccess, u2.vid = Number(u2.vid);
            const t3 = Object.assign({}, u2, e3, { eventType: lm.REJOIN_GATEWAY });
            this.send({ type: hm.RE_JOIN_GATEWAY, data: t3 }, true);
          }
        }
        joinChannelTimeout(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = Date.now(), n2 = vT(vT({}, i2.info), {}, { lts: r2, timeout: t2, elapse: r2 - i2.startTime });
          this.send({ type: hm.JOIN_CHANNEL_TIMEOUT, data: n2 }, true);
        }
        publish(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = i2.info, n2 = Date.now(), o2 = vT(vT({}, r2), {}, { eventType: lm.PUBLISH, lts: n2, eventElapse: t2.eventElapse, elapse: n2 - i2.startTime, success: t2.succ, errorCode: t2.ec, videoName: t2.videoName, audioName: t2.audioName, screenName: t2.screenName, screenshare: t2.screenshare, audio: t2.audio, video: t2.video, p2pid: t2.p2pid, publishRequestid: t2.publishRequestid });
          this.send({ type: hm.PUBLISH, data: o2 }, true);
        }
        subscribe(e2, t2, i2) {
          const r2 = this.baseInfoMap.get(e2);
          if (!r2)
            return;
          const n2 = r2.info, o2 = Date.now(), s2 = vT(vT({}, n2), {}, { eventType: lm.SUBSCRIBE, lts: o2, eventElapse: t2.eventElapse, elapse: o2 - r2.startTime, success: t2.succ, errorCode: t2.ec, video: t2.video, audio: t2.audio, subscribeRequestid: t2.subscribeRequestid, p2pid: t2.p2pid }, i2 && { extend: JSON.stringify({ isMassSubscribe: true }) });
          "string" == typeof t2.peerid ? s2.peerSuid = t2.peerid : s2.peer = t2.peerid, this.send({ type: hm.SUBSCRIBE, data: s2 }, true);
        }
        wsCompressorInit(e2) {
          var t2;
          const i2 = [...sT(t2 = this.baseInfoMap).call(t2)], r2 = i2.length ? i2[0] : "UnableToGetSid", n2 = this.baseInfoMap.get(r2);
          if (!n2)
            return;
          const o2 = n2.info, s2 = Date.now(), a2 = vT(vT({}, o2), {}, { eventType: lm.WS_COMPRESSOR_INIT, lts: s2, eventElapse: e2.eventElapse, elapse: s2 - n2.startTime, status: e2.status ? 1 : 2 });
          this.send({ type: hm.WS_COMPRESSOR_INIT, data: a2 }, true);
        }
        firstRemoteVideoDecode(e2, t2, i2, r2) {
          const n2 = this.baseInfoMap.get(e2);
          if (!n2)
            return;
          const o2 = n2.info, s2 = Date.now(), a2 = vT(vT(vT({}, o2), r2), {}, { elapse: s2 - n2.startTime, eventType: t2, lts: s2, firstDecodeFrame: Math.max(s2 - n2.startTime, 0), apEnd: Math.max(r2.apEnd - n2.startTime, 0), apStart: Math.max(r2.apStart - n2.startTime, 0), joinGwEnd: Math.max(r2.joinGwEnd - n2.startTime, 0), joinGwStart: Math.max(r2.joinGwStart - n2.startTime, 0), pcEnd: Math.max(r2.pcEnd - n2.startTime, 0), pcStart: Math.max(r2.pcStart - n2.startTime, 0), subscriberEnd: Math.max(r2.subscriberEnd - n2.startTime, 0), subscriberStart: Math.max(r2.subscriberStart - n2.startTime, 0), videoAddNotify: Math.max(r2.videoAddNotify - n2.startTime, 0) });
          this.send({ type: i2, data: a2 }, true);
        }
        firstRemoteFrame(e2, t2, i2, r2) {
          const n2 = this.baseInfoMap.get(e2);
          if (!n2)
            return;
          const o2 = n2.info, s2 = Date.now(), a2 = vT(vT(vT({}, o2), r2), {}, { elapse: s2 - n2.startTime, eventType: t2, lts: s2 });
          this.send({ type: i2, data: a2 }, true);
        }
        onGatewayStream(e2, t2, i2, r2) {
          const n2 = this.baseInfoMap.get(e2);
          if (!n2)
            return;
          const o2 = n2.info, s2 = Date.now(), a2 = vT(vT(vT({}, o2), r2), {}, { eventType: t2, lts: s2 });
          this.send({ type: i2, data: a2 }, true);
        }
        streamSwitch(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = i2.info, n2 = Date.now(), o2 = vT(vT({}, r2), {}, { eventType: lm.STREAM_SWITCH, lts: n2, isDual: t2.isdual, elapse: n2 - i2.startTime, success: t2.succ });
          this.send({ type: hm.STREAM_SWITCH, data: o2 }, true);
        }
        requestProxyAppCenter(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = i2.info, n2 = Date.now(), o2 = vT(vT({}, r2), {}, { eventType: lm.REQUEST_PROXY_APPCENTER, lts: n2, eventElapse: n2 - t2.lts, elapse: n2 - i2.startTime, APAddr: t2.APAddr, workerManagerList: t2.workerManagerList, response: t2.response, errorCode: t2.ec, success: t2.succ });
          this.send({ type: hm.REQUEST_PROXY_APPCENTER, data: o2 }, true);
        }
        requestProxyWorkerManager(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = i2.info, n2 = Date.now(), o2 = vT(vT({}, r2), {}, { eventType: lm.REQUEST_PROXY_WORKER_MANAGER, lts: n2, eventElapse: n2 - t2.lts, elapse: n2 - i2.startTime, workerManagerAddr: t2.workerManagerAddr, response: t2.response, errorCode: t2.ec, success: t2.succ });
          this.send({ type: hm.REQUEST_PROXY_WORKER_MANAGER, data: o2 }, true);
        }
        setProxyServer(e2) {
          this.proxyServer = e2, e2 ? NE.debug("reportProxyServerurl: ".concat(e2)) : NE.debug("disable reportProxyServerurl: ".concat(e2));
        }
        peerPublishStatus(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = i2.info, n2 = Date.now(), o2 = vT(vT({}, r2), {}, { subscribeElapse: t2.subscribeElapse, peer: t2.peer, peerPublishDuration: Math.max(t2.audioPublishDuration, t2.videoPublishDuration), audiotag: t2.audioPublishDuration > 0 ? 1 : -1, videotag: t2.videoPublishDuration > 0 ? 1 : -1, lts: n2, elapse: n2 - i2.startTime, joinChannelSuccessElapse: n2 - (i2.lastJoinSuccessTime || n2), peerPublishDurationVideo: t2.videoPublishDuration, peerPublishDurationAudio: t2.audioPublishDuration });
          this.send({ type: hm.PEER_PUBLISH_STATUS, data: o2 }, true);
        }
        workerEvent(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = i2.info, n2 = Date.now();
          (function(e3, t3, i3) {
            const r3 = e3[t3];
            if (!r3 || "string" != typeof r3)
              return [e3];
            e3[t3] = "";
            const n3 = PR(JSON.stringify(e3));
            let o2 = 0;
            const s2 = [];
            let a2 = 0;
            for (let c2 = 0; c2 < r3.length; c2++)
              a2 += r3.charCodeAt(c2) <= 127 ? 1 : 3, a2 <= i3 - n3 || (s2[s2.length] = DR(DR({}, e3), {}, { [t3]: r3.substring(o2, c2) }), o2 = c2, a2 = r3.charCodeAt(c2) <= 127 ? 1 : 3);
            o2 !== r3.length - 1 && (s2[s2.length] = DR(DR({}, e3), {}, { [t3]: r3.substring(o2) }));
            return s2;
          })(vT(vT(vT({}, r2), t2), {}, { elapse: n2 - i2.startTime, lts: n2, productType: "WebRTC" }), "payload", 1300).forEach((e3) => this.send({ type: hm.WORKER_EVENT, data: e3 }, true));
        }
        apworkerEvent(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = i2.info, n2 = Date.now(), o2 = vT(vT(vT({}, r2), t2), {}, { elapse: n2 - i2.startTime, lts: n2 });
          this.send({ type: hm.AP_WORKER_EVENT, data: o2 }, true);
        }
        joinWebProxyAP(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = i2.info, n2 = Date.now(), o2 = vT(vT(vT({}, r2), t2), {}, { elapse: n2 - i2.startTime, lts: n2, extend: t2.extend || void 0 });
          this.send({ type: hm.JOIN_WEB_PROXY_AP, data: o2 }, true);
        }
        WebSocketQuit(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const r2 = i2.info, n2 = Date.now(), o2 = vT(vT(vT({}, r2), t2), {}, { elapse: n2 - i2.startTime, lts: n2 });
          this.send({ type: hm.WEBSOCKET_QUIT, data: o2 }, true);
        }
        async sendCustomReportMessage(e2, t2) {
          if (this.customReportCount += t2.length, this.customReportCount > HE("CUSTOM_REPORT_LIMIT"))
            throw new vE(TE.CUSTOM_REPORT_FREQUENCY_TOO_HIGH);
          this.customReportCounterTimer || (this.customReportCounterTimer = window.setInterval(() => {
            this.customReportCount = 0;
          }, 5e3));
          const i2 = t2.map((t3) => ({ type: hm.USER_ANALYTICS, data: vT({ sid: e2 }, t3) }));
          try {
            HE("NEW_REPORT_SERVER") ? await this.postDataToStatsCollector2(i2) : await this.postDataToStatsCollector(i2);
          } catch (e3) {
            throw NE.error("send custom report message failed", e3.toString()), new vE(TE.CUSTOM_REPORT_SEND_FAILED, e3.message);
          }
        }
        autoplayFailed(e2, t2, i2, r2) {
          if (!e2)
            return;
          const n2 = this.baseInfoMap.get(e2);
          if (!n2)
            return;
          const o2 = n2.info, s2 = Date.now(), a2 = vT(vT({}, o2), {}, { vid: void 0 === o2.vid ? 0 : Number(o2.vid), lts: s2, elapse: s2 - n2.startTime, cbRegistered: ET.onAutoplayFailed || ET.onAudioAutoplayFailed ? 1 : -1, errorMsg: i2, mediaType: t2, trackId: r2, extend: void 0 });
          this.send({ type: hm.AUTOPLAY_FAILED, data: a2 }, true);
        }
        sendApiInvoke(e2) {
          const t2 = HE("NOT_REPORT_EVENT");
          if (e2.tag && t2.includes && t2.includes(e2.tag))
            return false;
          if (null === e2.sid)
            return this.apiInvokeUploadPendingItems.push(e2), false;
          const i2 = this.baseInfoMap.get(e2.sid);
          if (!i2)
            return this.apiInvokeUploadPendingItems.push(e2), false;
          const { cname: r2, uid: n2, cid: o2 } = i2.info;
          e2.lts = e2.lts || Date.now();
          let s2 = void 0;
          if (e2.error)
            if (e2.error instanceof vE) {
              const { code: t3, message: i3 } = e2.error;
              s2 = t3 || (i3 || e2.error.toString());
            } else
              s2 = e2.error.toString();
          const a2 = { invokeId: e2.invokeId, sid: e2.sid, cname: r2, cid: o2, uid: n2, lts: e2.lts, success: e2.success, elapse: e2.lts - i2.startTime, execElapse: e2.lts - e2.apiInvokeTime, apiName: e2.name, options: e2.options ? JSON.stringify(e2.options) : void 0, execStates: e2.states ? JSON.stringify(e2.states) : void 0, execResult: e2.result ? JSON.stringify(e2.result) : void 0, errorCode: e2.error ? s2 : void 0, errorMsg: e2.error ? JSON.stringify(e2.error) : void 0 };
          return this.send({ type: hm.API_INVOKE, data: a2 }, false), true;
        }
        appendSessionId() {
          this.clientList.forEach((e2) => {
            if (e2._sessionId) {
              const t2 = this.apiInvokeUploadPendingItems.length;
              for (let i2 = 0; i2 < t2; i2++) {
                const t3 = this.apiInvokeUploadPendingItems.shift();
                t3 && (t3.sid = e2._sessionId, this.sendApiInvoke(Object.assign({}, t3)));
              }
            }
          });
        }
        send(e2, t2) {
          if (t2)
            return this.keyEventUploadPendingItems.push(e2), void this.sendItems(this.keyEventUploadPendingItems, true);
          this.normalEventUploadPendingItems.push(e2), this.normalEventUploadPendingItems.length > HE("NORMAL_EVENT_QUEUE_CAPACITY") && this.normalEventUploadPendingItems.splice(0, 1), this.normalEventUploadPendingItems.length >= 10 && this.sendItems(this.normalEventUploadPendingItems, false);
        }
        doSend() {
          this.keyEventUploadPendingItems.length > 0 && this.sendItems(this.keyEventUploadPendingItems, true), this.normalEventUploadPendingItems.length > 0 && Date.now() - this.lastSendNormalEventTime >= 5e3 && this.sendItems(this.normalEventUploadPendingItems, false);
        }
        sendItems(e2, t2) {
          const i2 = [], r2 = [];
          for (; e2.length; ) {
            const t3 = e2.shift();
            i2.length < 20 ? i2.push(t3) : r2.push(t3);
          }
          e2.push(...r2);
          for (const e3 of [...i2]) {
            var n2;
            if (-1 !== this.ltsList.indexOf(e3.data.lts))
              e3.data.lts = this.ltsList[this.ltsList.length - 1] + 1, this.ltsList.push(e3.data.lts);
            else
              this.ltsList.push(e3.data.lts), Yf(n2 = this.ltsList).call(n2, (e4, t3) => e4 - t3);
          }
          t2 || (this.lastSendNormalEventTime = Date.now());
          return HE("ENABLE_EVENT_REPORT") ? (i2.length && (HE("NEW_REPORT_SERVER") ? this.postDataToStatsCollector2(i2) : this.postDataToStatsCollector(i2)).catch(((e3) => (i3) => {
            HE("EVENT_REPORT_RETRY") && (t2 ? this.keyEventUploadPendingItems = this.keyEventUploadPendingItems.concat(e3) : (this.normalEventUploadPendingItems = this.normalEventUploadPendingItems.concat(e3), this.normalEventUploadPendingItems.length > HE("NORMAL_EVENT_QUEUE_CAPACITY") && (this.normalEventUploadPendingItems.splice(0, this.normalEventUploadPendingItems.length - HE("NORMAL_EVENT_QUEUE_CAPACITY")), NE.warning("report: drop normal events"))));
          })(i2)), e2) : e2;
        }
        async postDataToStatsCollector2(e2) {
          pT.networkState === bg.OFFLINE && await Cl.race([pT.onlineWaiter, LR(2 * RE.maxRetryTimeout)]);
          const t2 = (e3) => {
            let t3 = new Uint8Array();
            return e3.forEach((e4) => {
              const i3 = mT(JSON.stringify(e4.data)), r3 = new ArrayBuffer(5), n2 = ((e5) => {
                let t4 = 0;
                return Object.entries(hm).forEach((i4) => {
                  let [r4, n3] = i4;
                  n3 === e5.type && (t4 = _m[r4]);
                }), t4;
              })(e4), o2 = new DataView(r3);
              o2.setUint16(0, i3.byteLength, true), o2.setUint8(2, 255 & n2), o2.setUint8(3, n2 >>> 8 & 255), o2.setUint8(4, n2 >>> 16 & 255), t3 = gT(t3, new Uint8Array(r3)), t3 = gT(t3, i3);
            }), t3;
          }, i2 = "event";
          let r2 = this.proxyServer ? "https://".concat(this.proxyServer, "/rs/?h=").concat(HE("NEW_REPORT_SERVER_DOMAINS")[0], "&p=443&d=").concat(i2) : "https://".concat(HE("NEW_REPORT_SERVER_DOMAINS")[0], "/").concat(i2);
          for (let n2 = 0; n2 < 2; n2 += 1) {
            1 === n2 && (r2 = this.proxyServer ? "https://".concat(this.proxyServer, "/rs/?h=").concat(HE("NEW_REPORT_SERVER_DOMAINS")[1], "&p=443&d=").concat(i2) : "https://".concat(HE("NEW_REPORT_SERVER_DOMAINS")[1], "/").concat(i2));
            try {
              await lT(r2, { timeout: 1e4, data: t2(e2), headers: vT(vT({ token: "32f24ab2ddb74f508aa9286c356cec84", biz: "webrtc", sendts: Math.round(Date.now() / 1e3), debug: "false" }, this._appId && { appid: this._appId }), {}, { "Content-Type": "application/octet-stream" }) }, true);
            } catch (e3) {
              if (1 === n2)
                throw e3;
              continue;
            }
            return;
          }
        }
        async postDataToStatsCollector(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          const i2 = { msgType: "EventMessages", sentTs: Math.round(Date.now() / 1e3), payloads: e2.map((e3) => JSON.stringify(e3)), vid: ((e3) => {
            const t3 = e3 && e3.data.sid && this.baseInfoMap.get(e3.data.sid);
            return t3 && t3.info.vid && +t3.info.vid || 0;
          })(e2[0]) };
          pT.networkState === bg.OFFLINE && await Cl.race([pT.onlineWaiter, LR(2 * RE.maxRetryTimeout)]);
          const r2 = t2 ? "/events/proto-raws" : "/events/messages";
          let n2 = this.url || (this.proxyServer ? "https://".concat(this.proxyServer, "/rs/?h=").concat(HE("EVENT_REPORT_DOMAIN"), "&p=").concat(HE("STATS_COLLECTOR_PORT"), "&d=").concat(r2) : "https://".concat(HE("EVENT_REPORT_DOMAIN"), ":").concat(HE("STATS_COLLECTOR_PORT")).concat(r2));
          for (let e3 = 0; e3 < 2; e3 += 1) {
            1 === e3 && (n2 = this.backupUrl || (this.proxyServer ? "https://".concat(this.proxyServer, "/rs/?h=").concat(HE("EVENT_REPORT_BACKUP_DOMAIN"), "&p=").concat(HE("STATS_COLLECTOR_PORT"), "&d=").concat(r2) : "https://".concat(HE("EVENT_REPORT_BACKUP_DOMAIN"), ":").concat(HE("STATS_COLLECTOR_PORT")).concat(r2)));
            try {
              t2 ? await hT(n2, { timeout: 1e4, data: i2 }) : await lT(n2, { timeout: 1e4, data: i2 });
            } catch (t3) {
              if (1 === e3)
                throw t3;
              continue;
            }
            return;
          }
        }
        createBaseInfo(e2, t2) {
          const i2 = Object.assign({}, um);
          return i2.sid = e2, this.baseInfoMap.set(e2, { info: i2, startTime: t2 }), i2;
        }
        reportResourceTiming(e2, t2) {
          const i2 = performance.getEntriesByName(e2), r2 = i2[i2.length - 1];
          r2 && this.reportApiInvoke(t2, { name: "Client.resourceTiming", options: r2, tag: fm.TRACER }).onSuccess();
        }
      }();
      SE.on("REPORT_LOG_UPLOAD", (e2) => {
        e2.networkState = pT.networkState, IT.reportApiInvoke(null, { name: "logUploadError", options: e2, tag: fm.TRACER });
      });
      class yT extends gE {
        constructor(e2, t2) {
          super(), mp(this, "trackMediaType", void 0), mp(this, "_ID", void 0), mp(this, "_hints", []), mp(this, "_isClosed", false), mp(this, "_originMediaStreamTrack", void 0), mp(this, "_mediaStreamTrack", void 0), mp(this, "_external", {}), this._ID = t2 || MR(8, "track-"), this._originMediaStreamTrack = e2, this._mediaStreamTrack = e2, function(e3) {
            $E.includes(e3) || $E.push(e3);
          }(this);
        }
        toString() {
          return this._ID;
        }
        getTrackId() {
          return this._ID;
        }
        getMediaStreamTrack(e2) {
          if (!e2) {
            const e3 = IT.reportApiInvoke(null, { name: Em.GET_MEDIA_STREAM_TRACK, options: [], tag: fm.TRACER });
            this._mediaStreamTrack && "string" == typeof this._mediaStreamTrack.label ? e3.onSuccess(this._mediaStreamTrack.label) : e3.onSuccess("");
          }
          return this._mediaStreamTrack;
        }
        getMediaStreamTrackSettings() {
          return this.getMediaStreamTrack(true).getSettings();
        }
        close() {
          this._isClosed = true, function(e2) {
            const t2 = $E.indexOf(e2);
            -1 !== t2 && $E.splice(t2, 1);
          }(this), this.emit(_g.CLOSED);
        }
      }
      let CT, AT = 1;
      class OT {
        constructor(e2) {
          mp(this, "lockingPromise", Cl.resolve()), mp(this, "locks", 0), mp(this, "name", ""), mp(this, "lockId", void 0), this.lockId = AT++, e2 && (this.name = e2), NE.debug("[lock-".concat(this.name, "-").concat(this.lockId, "] is created."));
        }
        get isLocked() {
          return this.locks > 0;
        }
        lock(e2) {
          let t2;
          this.locks += 1, NE.debug("[lock-".concat(this.name, "-").concat(this.lockId, "] is locked, current queue ").concat(this.locks, ". ").concat("string" == typeof e2 ? e2 : ""));
          const i2 = new Cl((i3) => {
            t2 = () => {
              this.locks -= 1, NE.debug("[lock-".concat(this.name, "-").concat(this.lockId, "] is not locked, current queue ").concat(this.locks, ". ").concat("string" == typeof e2 ? e2 : "")), i3();
            };
          }), r2 = this.lockingPromise.then(() => t2);
          return this.lockingPromise = this.lockingPromise.then(() => i2), r2;
        }
      }
      function bT(e2, t2) {
        return function(i2, r2, n2) {
          const o2 = n2.value;
          if ("function" != typeof o2)
            throw new Error("Cannot use mutex on object property.");
          return n2.value = async function() {
            const i3 = this[t2];
            if (!i3)
              throw new Error("mutex property key ".concat(t2, " doesn't exist on ").concat(e2));
            const n3 = await i3.lock("From ".concat(e2, ".").concat(r2));
            try {
              for (var s2 = arguments.length, a2 = new Array(s2), c2 = 0; c2 < s2; c2++)
                a2[c2] = arguments[c2];
              return await o2.apply(this, a2);
            } finally {
              n3();
            }
          }, n2;
        };
      }
      class wT extends yT {
        get muted() {
          return this._muted;
        }
        get enabled() {
          return this._enabled;
        }
        constructor(e2, t2) {
          super(e2, t2), mp(this, "_enabled", true), mp(this, "_muted", false), mp(this, "_isClosed", false), mp(this, "_enabledMutex", void 0), mp(this, "processor", void 0), mp(this, "processorContext", void 0), mp(this, "_handleTrackEnded", () => {
            this.onTrackEnded();
          }), this._enabledMutex = new OT("".concat(t2)), e2.addEventListener("ended", this._handleTrackEnded);
        }
        getTrackLabel() {
          return this._originMediaStreamTrack.label;
        }
        close() {
          this._isClosed || (this.stop(), this._originMediaStreamTrack.stop(), this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack.stop(), this._mediaStreamTrack = null), this._originMediaStreamTrack = null, this._enabledMutex = null, NE.debug("[".concat(this.getTrackId(), "] close")), this.emit(ug.NEED_CLOSE), super.close());
        }
        async _updateOriginMediaStreamTrack(e2, t2) {
          e2 !== this._originMediaStreamTrack && (this._originMediaStreamTrack.removeEventListener("ended", this._handleTrackEnded), t2 && this._originMediaStreamTrack.stop(), e2.addEventListener("ended", this._handleTrackEnded), this._originMediaStreamTrack = e2, this._muted && (this._originMediaStreamTrack.enabled = false), this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource(), await BR(this, ug.NEED_REPLACE_TRACK, this), this.processor && this.processor.updateInput({ track: this._originMediaStreamTrack, context: this.processorContext }));
        }
        _getDefaultPlayerConfig() {
          return {};
        }
        onTrackEnded() {
          NE.debug("[".concat(this.getTrackId(), "] track ended")), this.emit(_g.TRACK_ENDED);
        }
        stateCheck(e2, t2) {
          if (NE.debug("check track state, [muted: ".concat(this._muted, ", enabled: ").concat(this._enabled, "] to [").concat(e2, ": ").concat(t2, "]")), qf(t2, e2), this._enabled && this._muted && "enabled" === e2 && false === t2)
            throw new vE(TE.TRACK_STATE_UNREACHABLE, "cannot set enabled while the track is muted").print();
          if (!this._enabled && !this._muted && "muted" === e2 && true === t2)
            throw new vE(TE.TRACK_STATE_UNREACHABLE, "cannot set muted while the track is disabled").print();
        }
        getProcessorStats() {
          return this.processorContext.gatherStats();
        }
        getProcessorUsage() {
          return this.processorContext.gatherUsage();
        }
      }
      function NT(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      !function(e2) {
        e2.IOS_15_INTERRUPTION_START = "ios15-interruption-start", e2.IOS_15_INTERRUPTION_END = "ios15-interruption-end", e2.IOS_INTERRUPTION_START = "ios-interruption-start", e2.IOS_INTERRUPTION_END = "ios-interruption-end", e2.STATE_CHANGE = "state-change";
      }(CT || (CT = {}));
      const DT = window.AudioContext || window.webkitAudioContext;
      let PT = null;
      const LT = new class extends gE {
        constructor() {
          super(...arguments), mp(this, "prevState", void 0), mp(this, "curState", void 0), mp(this, "currentTime", void 0), mp(this, "currentTimeStuckAt", void 0), mp(this, "interruptDetectorTrack", void 0), mp(this, "onLocalAudioTrackMute", () => {
            NE.info("ios15-interruption-start"), this.emit(CT.IOS_15_INTERRUPTION_START);
          }), mp(this, "onLocalAudioTrackUnmute", async () => {
            NE.info("ios15-interruption-end"), "running" !== this.curState || this.duringInterruption ? NE.info("ios15-interruption-end-canceled") : (PT && await PT.suspend(), this.emit(CT.IOS_15_INTERRUPTION_END));
          });
        }
        get duringInterruption() {
          return "running" === this.prevState && "interrupted" === this.curState;
        }
        bindInterruptDetectorTrack(e2) {
          NE.debug("webaudio bindInterruptDetectorTrack ".concat(e2.getTrackId())), this.interruptDetectorTrack || (this.interruptDetectorTrack = e2, this.interruptDetectorTrack._mediaStreamTrack.onmute = this.onLocalAudioTrackMute, this.interruptDetectorTrack._mediaStreamTrack.onunmute = this.onLocalAudioTrackUnmute);
        }
        unbindInterruptDetectorTrack(e2) {
          NE.debug("webaudio unbindInterruptDetectorTrack ".concat(e2.getTrackId())), this.interruptDetectorTrack && this.interruptDetectorTrack === e2 && (this.interruptDetectorTrack._mediaStreamTrack && (this.interruptDetectorTrack._mediaStreamTrack.onmute = null, this.interruptDetectorTrack._mediaStreamTrack.onunmute = null), this.interruptDetectorTrack = void 0);
        }
      }();
      function kT() {
        if (!DT)
          return void NE.error("your browser is not support web audio");
        NE.info("create audio context");
        const e2 = function(e3) {
          for (var t2 = 1; t2 < arguments.length; t2++) {
            var i2 = null != arguments[t2] ? arguments[t2] : {};
            t2 % 2 ? NT(Object(i2), true).forEach(function(t3) {
              mp(e3, t3, i2[t3]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(i2)) : NT(Object(i2)).forEach(function(t3) {
              Object.defineProperty(e3, t3, Object.getOwnPropertyDescriptor(i2, t3));
            });
          }
          return e3;
        }({}, HE("WEBAUDIO_INIT_OPTIONS"));
        NE.debug("audio context init option:", JSON.stringify(e2)), PT = new DT(e2), LT.curState = PT.state, PT.onstatechange = () => {
          LT.prevState = LT.curState, LT.curState = PT ? PT.state : void 0, (Zh() || np()) && "running" === LT.prevState && "interrupted" === LT.curState && (NE.info("ios-interruption-start"), LT.emit(CT.IOS_INTERRUPTION_START)), (Zh() || np()) && "interrupted" === LT.prevState && "running" === LT.curState && (NE.info("ios-interruption-end"), LT.emit(CT.IOS_INTERRUPTION_END)), LT.prevState !== LT.curState && (NE.debug("AudioContext State Change", "".concat(LT.prevState, "=>").concat(LT.curState)), LT.emit(CT.STATE_CHANGE));
        }, setInterval(() => {
          var e3;
          const t2 = null === (e3 = PT) || void 0 === e3 ? void 0 : e3.currentTime;
          if (LT.currentTime !== t2)
            LT.currentTimeStuckAt && (NE.debug("AudioContext current time resume at ".concat(t2)), LT.currentTimeStuckAt = void 0), LT.currentTime = t2;
          else {
            if (t2 !== LT.currentTimeStuckAt) {
              IT.reportApiInvoke(null, { name: "WEB_AUDIO_CURRENT_TIME_STUCK", options: { currentTime: t2 }, tag: fm.TRACER }).onSuccess(), NE.warning("AudioContext current time stuck at ".concat(t2));
            }
            LT.currentTimeStuckAt = t2;
          }
        }, 5e3), async function(e3) {
          const t2 = ["click", "contextmenu", "auxclick", "dblclick", "mousedown", "mouseup", "touchend", "keydown", "keyup"];
          let i2, r2 = false, n2 = false, o2 = false;
          function s2(t3) {
            "running" === e3.state ? a2(false) : Zh() || np() ? "suspended" === e3.state && (a2(true), t3 && e3.resume().then(d2, d2)) : "closed" !== e3.state && (a2(true), t3 && e3.resume().then(d2, d2));
          }
          function a2(e4) {
            if (r2 !== e4) {
              r2 = e4;
              for (let i3 = 0, r3 = t2; i3 < r3.length; i3 += 1) {
                const t3 = r3[i3];
                e4 ? window.addEventListener(t3, u2, { capture: true, passive: true }) : window.removeEventListener(t3, u2, { capture: true, passive: true });
              }
            }
          }
          function c2() {
            s2(true);
          }
          function d2() {
            s2(false);
          }
          function u2() {
            s2(true);
          }
          function l2(e4) {
            if (!o2)
              if (i2.paused)
                if (e4) {
                  h2(false), o2 = true;
                  let e5 = void 0;
                  try {
                    e5 = i2.play(), e5 ? e5.then(p2, p2) : (i2.addEventListener("playing", p2), i2.addEventListener("abort", p2), i2.addEventListener("error", p2));
                  } catch (e6) {
                    p2();
                  }
                } else
                  h2(true);
              else
                h2(false);
          }
          function h2(e4) {
            if (n2 !== e4) {
              n2 = e4;
              for (let i3 = 0, r3 = t2; i3 < r3.length; i3++) {
                const t3 = r3[i3];
                e4 ? window.addEventListener(t3, _2, { capture: true, passive: true }) : window.removeEventListener(t3, _2, { capture: true, passive: true });
              }
            }
          }
          function p2() {
            i2.removeEventListener("playing", p2), i2.removeEventListener("abort", p2), i2.removeEventListener("error", p2), o2 = false, l2(false);
          }
          function _2() {
            l2(true);
          }
          if (Zh()) {
            const t3 = e3.createMediaStreamDestination(), r3 = document.createElement("div");
            r3.innerHTML = "<audio x-webkit-airplay='deny'></audio>", i2 = r3.children.item(0), i2.controls = false, i2.disableRemotePlayback = true, i2.preload = "auto", i2.srcObject = t3.stream, l2(true);
          }
          LT.on(CT.STATE_CHANGE, c2), s2(false);
        }(PT);
      }
      function MT() {
        if (!PT) {
          if (kT(), !PT)
            throw new vE(TE.NOT_SUPPORTED, "can not create audio context");
          return PT;
        }
        return PT;
      }
      function UT(e2) {
        if (function() {
          if (null !== xT)
            return xT;
          const e3 = MT(), t3 = e3.createBufferSource(), i3 = e3.createGain(), r2 = e3.createGain();
          t3.connect(i3), t3.connect(r2), t3.disconnect(i3);
          let n2 = false;
          try {
            t3.disconnect(i3);
          } catch (e4) {
            n2 = true;
          }
          return t3.disconnect(), xT = n2, n2;
        }())
          return;
        const t2 = e2.connect, i2 = e2.disconnect;
        e2.connect = (i3, r2, n2) => (e2._inputNodes || (e2._inputNodes = []), e2._inputNodes.includes(i3) || (i3 instanceof AudioNode ? (e2._inputNodes.push(i3), t2.call(e2, i3, r2, n2)) : t2.call(e2, i3, r2)), e2), e2.disconnect = (r2, n2, o2) => {
          i2.call(e2), r2 ? HR(e2._inputNodes, r2) : e2._inputNodes = [];
          for (const i3 of e2._inputNodes)
            t2.call(e2, i3);
        };
      }
      let xT = null;
      function VT(e2, t2) {
        let i2 = false;
        const r2 = 1 / t2;
        if (HE("DISABLE_WEBAUDIO")) {
          const t3 = window.setInterval(() => {
            i2 ? window.clearInterval(t3) : e2(performance.now() / 1e3);
          }, 1e3 * r2);
        } else {
          const t3 = MT();
          let n2 = t3.createGain();
          n2.gain.value = 0, n2.connect(t3.destination);
          const o2 = () => {
            if (i2)
              return void (n2 = null);
            const s2 = t3.createOscillator();
            s2.onended = o2, s2.connect(n2), s2.start(0), s2.stop(t3.currentTime + r2), e2(t3.currentTime);
          };
          o2();
        }
        return () => {
          i2 = true;
        };
      }
      const jT = NE.prefix("[inject-node]");
      class FT {
        constructor() {
          mp(this, "nodeLists", []), mp(this, "prevNode", void 0), mp(this, "nextNode", void 0);
        }
        get firstNode() {
          return this.nodeLists[0];
        }
        get lastNode() {
          return this.nodeLists[this.nodeLists.length - 1];
        }
        get isActive() {
          return !!this.nodeLists.length;
        }
        get isConnected() {
          return !(!this.prevNode || !this.nextNode);
        }
        connect(e2, t2) {
          jT.debug("connect audio node, current list:" + this.nodeLists.length), this.nodeLists.length ? (this.prevNode && this.prevNode.disconnect(), e2.connect(this.firstNode), this.nextNode && this.lastNode && this.lastNode.disconnect(), this.lastNode.connect(t2), this.nodeLists.forEach((e3, t3) => {
            const i2 = this.nodeLists[t3 + 1];
            i2 && e3.connect(i2);
          })) : e2.connect(t2), this.nextNode = t2, this.prevNode = e2;
        }
        disconnect() {
          var e2;
          jT.debug("disconnect audio node, current list:" + this.nodeLists.length), this.nodeLists.forEach((e3) => {
            e3.disconnect();
          }), null === (e2 = this.prevNode) || void 0 === e2 || e2.disconnect(), this.prevNode = void 0, this.nextNode = void 0;
        }
        addNode(e2) {
          jT.debug("add node in inject node, current list:", this.nodeLists.length), this.prevNode && this.nextNode ? (this.firstNode || (jT.debug("new node is the first node"), this.prevNode.disconnect(), this.prevNode.connect(e2), e2.connect(this.nextNode)), this.nextNode && this.lastNode && (this.lastNode.disconnect(this.nextNode), this.lastNode.connect(e2), e2.connect(this.nextNode)), this.nodeLists.push(e2)) : jT.debug("add node is called before inject node connected");
        }
        removeNode(e2) {
          jT.debug("remove node in inject node, current list:", this.nodeLists.length);
          const t2 = this.nodeLists.indexOf(e2);
          if (-1 === t2)
            return void jT.debug("$[inject-node] cannot find the node to be removed");
          const i2 = this.nodeLists[t2 + 1], r2 = this.nodeLists[t2 - 1];
          0 === t2 && this.prevNode && this.nextNode && (this.prevNode.disconnect(e2), i2 ? this.prevNode.connect(i2) : this.prevNode.connect(this.nextNode)), t2 === this.nodeLists.length - 1 && this.nextNode && r2 && (r2.disconnect(e2), r2.connect(this.nextNode)), 0 !== t2 && t2 !== this.nodeLists.length - 1 && (r2.disconnect(e2), r2.connect(i2)), jT.debug("remove node in inject node success, current list:", this.nodeLists.length);
        }
      }
      class BT {
        constructor() {
          mp(this, "context", void 0), mp(this, "analyserNode", void 0), mp(this, "sourceNode", void 0), this.context = MT(), this.analyserNode = this.context.createAnalyser(), this.analyserNode.fftSize = 2048, this.analyserNode.smoothingTimeConstant = 0.4;
        }
        updateSource(e2) {
          if (e2 !== this.sourceNode) {
            if (this.sourceNode)
              try {
                this.sourceNode.disconnect(this.analyserNode);
              } catch (e3) {
              }
            this.sourceNode = e2, null == e2 || e2.connect(this.analyserNode);
          }
        }
        getVolumeLevel() {
          if (!this.sourceNode)
            return 0;
          if (!this.context || Zh() || np() || "running" !== this.context.state && this.context.resume(), !this.analyserNode)
            return 0;
          const e2 = new Float32Array(this.analyserNode.fftSize);
          if (this.analyserNode.getFloatTimeDomainData)
            this.analyserNode.getFloatTimeDomainData(e2);
          else {
            const t3 = new Uint8Array(this.analyserNode.fftSize);
            this.analyserNode.getByteTimeDomainData(t3);
            for (let i2 = 0; i2 < e2.length; ++i2)
              e2[i2] = t3[i2] / 128 - 1;
          }
          const t2 = zi(e2).call(e2, (e3, t3) => e3 + t3 * t3, 0) / e2.length;
          return Math.max(10 * Math.log10(t2) + 100, 0) / 100;
        }
        getAnalyserNode() {
          return this.analyserNode;
        }
        rebuildAnalyser() {
          try {
            var e2, t2;
            null === (e2 = this.sourceNode) || void 0 === e2 || e2.disconnect(this.analyserNode), this.analyserNode = this.context.createAnalyser(), this.analyserNode.fftSize = 2048, this.analyserNode.smoothingTimeConstant = 0.4, null === (t2 = this.sourceNode) || void 0 === t2 || t2.connect(this.analyserNode);
          } catch (e3) {
            NE.warning("rebuild analyser node failed.");
          }
        }
        destroy() {
          this.updateSource(void 0);
        }
      }
      class GT extends gE {
        get processSourceNode() {
          return this.sourceNode;
        }
        set processedNode(e2) {
          var t2;
          if (!this.isDestroyed && this._processedNode !== e2) {
            try {
              var i2;
              null === (i2 = this.sourceNode) || void 0 === i2 || i2.disconnect(this.outputNode);
            } catch (e3) {
            }
            null === (t2 = this._processedNode) || void 0 === t2 || t2.disconnect(), this._processedNode = e2, this.connect();
          }
        }
        get processedNode() {
          return this._processedNode;
        }
        constructor() {
          super(), mp(this, "outputNode", void 0), mp(this, "outputTrack", void 0), mp(this, "isPlayed", false), mp(this, "sourceNode", void 0), mp(this, "context", void 0), mp(this, "audioBufferNode", void 0), mp(this, "destNode", void 0), mp(this, "injectNode", void 0), mp(this, "audioOutputLevel", 0), mp(this, "volumeLevelAnalyser", void 0), mp(this, "_processedNode", void 0), mp(this, "playNode", void 0), mp(this, "isDestroyed", false), mp(this, "onNoAudioInput", void 0), mp(this, "isNoAudioInput", false), mp(this, "_noAudioInputCount", 0), this.context = MT(), this.playNode = this.context.destination, this.outputNode = this.context.createGain(), UT(this.outputNode), this.injectNode = new FT(), this.volumeLevelAnalyser = new BT();
        }
        startGetAudioBuffer(e2) {
          this.audioBufferNode || (this.audioBufferNode = this.context.createScriptProcessor(e2), this.outputNode.connect(this.audioBufferNode), this.audioBufferNode.connect(this.context.destination), this.audioBufferNode.onaudioprocess = (e3) => {
            this.emit(km.ON_AUDIO_BUFFER, function(e4) {
              for (let t2 = 0; t2 < e4.outputBuffer.numberOfChannels; t2 += 1) {
                const i2 = e4.outputBuffer.getChannelData(t2);
                for (let e5 = 0; e5 < i2.length; e5 += 1)
                  i2[e5] = 0;
              }
              return e4.inputBuffer;
            }(e3));
          });
        }
        stopGetAudioBuffer() {
          this.audioBufferNode && (this.audioBufferNode.onaudioprocess = null, this.outputNode.disconnect(this.audioBufferNode), this.audioBufferNode = void 0);
        }
        createOutputTrack() {
          if (!jg().webAudioMediaStreamDest)
            throw new vE(TE.NOT_SUPPORTED, "your browser is not support audio processor");
          return this.destNode && this.outputTrack || (this.destNode = this.context.createMediaStreamDestination(), this.outputNode.connect(this.destNode), this.outputTrack = this.destNode.stream.getAudioTracks()[0]), this.outputTrack;
        }
        play(e2) {
          "running" !== this.context.state && YR(() => {
            LT.emit("autoplay-failed");
          }), this.isPlayed = true, this.playNode = e2 || this.context.destination, this.outputNode.connect(this.playNode);
        }
        stop() {
          if (this.isPlayed)
            try {
              this.outputNode.disconnect(this.playNode);
            } catch (e2) {
            }
          this.isPlayed = false;
        }
        getAccurateVolumeLevel() {
          return this.volumeLevelAnalyser.getVolumeLevel();
        }
        async checkHasAudioInput() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          if (e2 > 5)
            return this.isNoAudioInput = true, this.onNoAudioInput && this.onNoAudioInput(), false;
          Zh() || np() ? "suspended" === this.context.state && this.context.resume() : "running" !== this.context.state && this.context.resume();
          const t2 = this.volumeLevelAnalyser.getAnalyserNode();
          let i2;
          t2.getFloatTimeDomainData ? (i2 = new Float32Array(t2.fftSize), t2.getFloatTimeDomainData(i2)) : (i2 = new Uint8Array(t2.fftSize), t2.getByteTimeDomainData(i2));
          let r2 = false;
          for (let e3 = 0; e3 < i2.length; e3++)
            0 !== i2[e3] && (r2 = true);
          return r2 ? (this.isNoAudioInput = false, true) : (await LR(200), await this.checkHasAudioInput(e2 ? e2 + 1 : 1) && r2);
        }
        getAudioVolume() {
          return this.outputNode.gain.value;
        }
        setVolume(e2) {
          this.outputNode.gain.setValueAtTime(e2, this.context.currentTime);
        }
        destroy() {
          this.disconnect(), this.stop(), this.isDestroyed = true, this.onNoAudioInput = void 0;
        }
        injectAudioNode(e2) {
          this.injectNode.addNode(e2);
        }
        removeAudioNode(e2) {
          this.injectNode.removeNode(e2);
        }
        disconnect() {
          var e2, t2;
          null === (e2 = this.processedNode) || void 0 === e2 || e2.disconnect(), null === (t2 = this.sourceNode) || void 0 === t2 || t2.disconnect(), this.outputNode && this.outputNode.disconnect();
        }
        connect() {
          var e2;
          this.processedNode ? null === (e2 = this.processedNode) || void 0 === e2 || e2.connect(this.outputNode) : this.sourceNode && this.sourceNode.connect(this.outputNode);
          this.volumeLevelAnalyser.updateSource(this.outputNode);
        }
      }
      class WT extends GT {
        get isFreeze() {
          return false;
        }
        constructor(e2, t2, i2) {
          var r2;
          if (super(), mp(this, "sourceNode", void 0), mp(this, "track", void 0), mp(this, "clonedTrack", void 0), mp(this, "audioElement", void 0), mp(this, "isCurrentTrackCloned", false), mp(this, "isRemoteTrack", false), mp(this, "originVolumeLevelAnalyser", void 0), mp(this, "rebuildWebAudio", async () => {
            if (NE.debug("ready to rebuild web audio, state:", this.context.state), this.isNoAudioInput && await this.checkHasAudioInput(), !this.isNoAudioInput || this.isDestroyed)
              return document.body.removeEventListener("click", this.rebuildWebAudio, true), void NE.debug("rebuild web audio success, current volume status", this.getAccurateVolumeLevel());
            this.context.resume().then(() => NE.info("resume success")), NE.debug("rebuild web audio because of ios 12 bugs"), this.disconnect();
            const e3 = this.track;
            this.track = this.track.clone(), this.isCurrentTrackCloned ? e3.stop() : this.isCurrentTrackCloned = true;
            const t3 = new MediaStream([this.track]);
            this.sourceNode = this.context.createMediaStreamSource(t3), UT(this.sourceNode), this.volumeLevelAnalyser.rebuildAnalyser();
            const i3 = this.outputNode.gain.value;
            this.outputNode = this.context.createGain(), this.outputNode.gain.setValueAtTime(i3, this.context.currentTime), UT(this.outputNode), this.emit(km.UPDATE_SOURCE), this.connect(), this.audioElement.srcObject = t3, this.isPlayed && this.play(this.playNode), this.checkHasAudioInput();
          }), "audio" !== e2.kind)
            throw new vE(TE.UNEXPECTED_ERROR);
          this.track = e2;
          const n2 = new MediaStream([this.track]);
          if (this.isRemoteTrack = !!t2, this.sourceNode = this.context.createMediaStreamSource(n2), UT(this.sourceNode), i2) {
            const e3 = i2.clone();
            e3.enabled = true, this.clonedTrack = e3, NE.debug("create an unmuted track ".concat(e3.id, " from the original track ").concat(i2.id, " to get the volume"));
            const t3 = this.context.createMediaStreamSource(new MediaStream([e3]));
            UT(t3), this.originVolumeLevelAnalyser = new BT(), this.originVolumeLevelAnalyser.updateSource(t3);
          }
          this.connect(), this.audioElement = document.createElement("audio"), this.audioElement.srcObject = n2;
          const o2 = Bh();
          t2 && o2.os === Uh.IOS && Number(null === (r2 = o2.osVersion) || void 0 === r2 ? void 0 : r2.split(".")[0]) < 15 && (LT.on(CT.STATE_CHANGE, () => {
            "suspended" === this.context.state ? document.body.addEventListener("click", this.rebuildWebAudio, true) : "running" === this.context.state && this.rebuildWebAudio();
          }), this.checkHasAudioInput().then((e3) => {
            e3 || document.body.addEventListener("click", this.rebuildWebAudio, true);
          }));
        }
        updateTrack(e2) {
          this.sourceNode.disconnect(), this.track = e2, this.isCurrentTrackCloned = false;
          const t2 = new MediaStream([e2]);
          this.sourceNode = this.context.createMediaStreamSource(t2), UT(this.sourceNode), this.processedNode || this.sourceNode.connect(this.outputNode), this.emit(km.UPDATE_SOURCE), this.audioElement.srcObject = t2;
        }
        destroy() {
          var e2;
          this.audioElement.srcObject = null, this.audioElement.remove(), LT.off("state-change", this.rebuildWebAudio), null === (e2 = this.originVolumeLevelAnalyser) || void 0 === e2 || e2.destroy(), this.clonedTrack = void 0, super.destroy();
        }
        createMediaStreamSourceNode(e2) {
          return this.context.createMediaStreamSource(new MediaStream([e2]));
        }
        updateOriginTrack(e2) {
          const t2 = e2.clone();
          t2.enabled = true, this.clonedTrack && (this.clonedTrack.stop(), this.clonedTrack = t2), NE.debug("create an unmuted track ".concat(t2.id, " from the original track ").concat(e2.id, " to get the volume"));
          const i2 = this.context.createMediaStreamSource(new MediaStream([t2]));
          UT(i2), this.originVolumeLevelAnalyser && this.originVolumeLevelAnalyser.updateSource(i2);
        }
        getOriginVolumeLevel() {
          return this.originVolumeLevelAnalyser ? this.originVolumeLevelAnalyser.getVolumeLevel() : this.getAccurateVolumeLevel();
        }
      }
      async function HT(e2, t2) {
        const i2 = (e3, t3) => e3 ? "number" != typeof e3 ? e3.max || e3.exact || e3.ideal || e3.min || t3 : e3 : t3, r2 = { audio: false, video: { mandatory: { chromeMediaSource: "desktop", chromeMediaSourceId: e2, maxHeight: i2(t2.height, 1080), maxWidth: i2(t2.width, 1920) } } };
        return t2.frameRate && "number" != typeof t2.frameRate ? (r2.video.mandatory.maxFrameRate = t2.frameRate.max, r2.video.mandatory.minFrameRate = t2.frameRate.min) : "number" == typeof t2.frameRate && (r2.video.mandatory.maxFrameRate = t2.frameRate), await navigator.mediaDevices.getUserMedia(r2);
      }
      async function KT(e2) {
        const t2 = await YT(e2.mediaSource), i2 = await function(e3) {
          return new Cl((t3, i3) => {
            const r2 = document.createElement("div");
            r2.innerText = "share screen", r2.setAttribute("style", "text-align: center; height: 25px; line-height: 25px; border-radius: 4px 4px 0 0; background: #D4D2D4; border-bottom:  solid 1px #B9B8B9;");
            const n2 = document.createElement("div");
            n2.setAttribute("style", "width: 100%; height: 500px; padding: 15px 25px ; box-sizing: border-box;");
            const o2 = document.createElement("div");
            o2.innerText = "Agora Web Screensharing wants to share the contents of your screen with webdemo.agorabeckon.com. Choose what you'd like to share.", o2.setAttribute("style", "height: 12%;");
            const s2 = document.createElement("div");
            s2.setAttribute("style", "width: 100%; height: 80%; background: #FFF; border:  solid 1px #CBCBCB; display: flex; flex-wrap: wrap; justify-content: space-around; overflow-y: scroll; padding: 0 15px; box-sizing: border-box;");
            const a2 = document.createElement("div");
            a2.setAttribute("style", "text-align: right; padding: 16px 0;");
            const c2 = document.createElement("button");
            c2.innerHTML = "cancel", c2.setAttribute("style", "width: 85px;"), c2.onclick = () => {
              document.body.removeChild(d2);
              const e4 = new Error("NotAllowedError");
              e4.name = "NotAllowedError", i3(e4);
            }, a2.appendChild(c2), n2.appendChild(o2), n2.appendChild(s2), n2.appendChild(a2);
            const d2 = document.createElement("div");
            d2.setAttribute("style", "position: fixed; z-index: 99999999; top: 50%; left: 50%; width: 620px; height: 525px; background: #ECECEC; border-radius: 4px; -webkit-transform: translate(-50%,-50%); transform: translate(-50%,-50%);"), d2.appendChild(r2), d2.appendChild(n2), document.body.appendChild(d2), e3.map((e4) => {
              if (e4.id) {
                const i4 = document.createElement("div");
                i4.setAttribute("style", "width: 30%; height: 160px; padding: 20px 0; text-align: center;box-sizing: content-box;");
                let r3 = e4.thumbnail;
                const { width: n3 } = r3.getSize();
                n3 > 1920 && (r3 = r3.resize({ width: 1920 })), i4.innerHTML = '<div style="height: 120px; display: table-cell; vertical-align: middle;"><img style="width: 100%; background: #333333; box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.2);" src=' + r3.toDataURL() + ' /></div><span style="	height: 40px; line-height: 40px; display: inline-block; width: 70%; word-break: keep-all; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">' + (e4.name.replace(/[\u00A0-\u9999<>\&]/g, function(e5) {
                  return "&#" + e5.charCodeAt(0) + ";";
                }) + "</span>"), i4.onclick = () => {
                  document.body.removeChild(d2), t3(e4.id);
                }, s2.appendChild(i4);
              }
            });
          });
        }(t2);
        return await HT(i2, e2);
      }
      async function YT(e2) {
        let t2 = ["window", "screen"];
        "application" !== e2 && "window" !== e2 || (t2 = ["window"]), "screen" === e2 && (t2 = ["screen"]);
        const i2 = JT();
        if (!i2)
          throw new vE(TE.ELECTRON_IS_NULL);
        let r2 = null;
        try {
          var n2;
          r2 = (null === (n2 = i2.desktopCapturer) || void 0 === n2 ? void 0 : n2.getSources({ types: t2 })) || i2.ipcRenderer.invoke("DESKTOP_CAPTURER_GET_SOURCES", { types: t2 });
        } catch (e3) {
          r2 = null;
        }
        r2 && r2.then || (r2 = new Cl((e3, r3) => {
          i2.desktopCapturer.getSources({ types: t2 }, (t3, i3) => {
            t3 ? r3(t3) : e3(i3);
          });
        }));
        try {
          return await r2;
        } catch (e3) {
          throw new vE(TE.ELECTRON_DESKTOP_CAPTURER_GET_SOURCES_ERROR, e3.toString());
        }
      }
      let qT = null;
      function JT() {
        if (qT)
          return qT;
        try {
          return qT = window.require("electron"), qT;
        } catch (e2) {
          return null;
        }
      }
      const XT = new OT("safari");
      let zT = false, QT = false;
      async function ZT(e2, t2) {
        let i2 = 0, r2 = null;
        for (; i2 < 2; )
          try {
            r2 = await $T(e2, t2, i2 > 0);
            break;
          } catch (e3) {
            if (e3 instanceof vE)
              throw NE.error("[".concat(t2, "] ").concat(e3.toString())), e3;
            const r3 = ev(e3.name || e3.code || e3, e3.message);
            if (r3.code === TE.MEDIA_OPTION_INVALID) {
              NE.debug("[".concat(t2, "] detect media option invalid, retry")), i2 += 1, await LR(500);
              continue;
            }
            throw NE.error("[".concat(t2, "] ").concat(r3.toString())), r3;
          }
        if (!r2)
          throw new vE(TE.UNEXPECTED_ERROR, "can not find stream after getUserMedia");
        return r2;
      }
      async function $T(e2, t2, i2) {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia)
          throw new vE(TE.NOT_SUPPORTED, "can not find getUserMedia");
        i2 && (e2.video && (delete e2.video.width, delete e2.video.height), e2.screen && (delete e2.screen.width, delete e2.screen.height));
        const r2 = jg(), n2 = new MediaStream();
        if (e2.audioSource && n2.addTrack(e2.audioSource), e2.videoSource && n2.addTrack(e2.videoSource), !e2.audio && !e2.video && !e2.screen)
          return NE.debug("Using Video Source/ Audio Source"), n2;
        if (e2.screen)
          if (JT())
            if (e2.screen.sourceId) {
              tv(n2, await HT(e2.screen.sourceId, e2.screen));
            } else {
              tv(n2, await KT(e2.screen));
            }
          else if (Xh() && e2.screen.extensionId && e2.screen.mandatory) {
            if (!r2.getStreamFromExtension)
              throw new vE(TE.NOT_SUPPORTED, "This browser does not support screen sharing");
            NE.debug("[".concat(t2, '] Screen access on chrome stable, looking for extension"'));
            const i3 = await (o2 = e2.screen.extensionId, s2 = t2, new Cl((e3, t3) => {
              try {
                chrome.runtime.sendMessage(o2, { getStream: true }, (i4) => {
                  if (!i4 || !i4.streamId)
                    return NE.error("[".concat(s2, "] No response from Chrome Plugin. Plugin not installed properly"), i4), void t3(new vE(TE.CHROME_PLUGIN_NO_RESPONSE, "No response from Chrome Plugin. Plugin not installed properly"));
                  e3(i4.streamId);
                });
              } catch (e4) {
                NE.error("[".concat(s2, "] AgoraRTC screensharing plugin is not accessible(").concat(o2, ")"), e4.toString()), t3(new vE(TE.CHROME_PLUGIN_NOT_INSTALL));
              }
            }));
            e2.screen.mandatory.chromeMediaSourceId = i3;
            tv(n2, await navigator.mediaDevices.getUserMedia({ video: { mandatory: e2.screen.mandatory } }));
          } else if (r2.getDisplayMedia) {
            e2.screen.mediaSource && gg(e2.screen.mediaSource);
            const i3 = { width: e2.screen.width, height: e2.screen.height, frameRate: e2.screen.frameRate, displaySurface: "screen" === e2.screen.mediaSource ? "monitor" : e2.screen.mediaSource };
            NE.debug("[".concat(t2, "] getDisplayMedia:"), JSON.stringify({ video: i3, audio: !!e2.screenAudio }));
            tv(n2, await navigator.mediaDevices.getDisplayMedia({ video: i3, audio: !!e2.screenAudio }));
          } else {
            if (!Qh())
              throw NE.error("[".concat(t2, "] This browser does not support screenSharing")), new vE(TE.NOT_SUPPORTED, "This browser does not support screen sharing");
            {
              e2.screen.mediaSource && gg(e2.screen.mediaSource);
              const i3 = { video: { mediaSource: e2.screen.mediaSource, width: e2.screen.width, height: e2.screen.height, frameRate: e2.screen.frameRate } };
              NE.debug("[".concat(t2, "] getUserMedia: ").concat(JSON.stringify(i3)));
              tv(n2, await navigator.mediaDevices.getUserMedia(i3));
            }
          }
        var o2, s2;
        if (!e2.video && !e2.audio)
          return n2;
        let a2 = { video: e2.video, audio: e2.audio }, c2 = HE("MEDIA_DEVICE_CONSTRAINTS");
        if (c2)
          try {
            "string" == typeof c2 && (c2 = JSON.parse(c2)), a2 = function e3(t3, i3) {
              if (!tI(t3) || !tI(i3))
                return i3;
              if (Array.isArray(t3) && !Array.isArray(i3) || !Array.isArray(t3) && Array.isArray(i3))
                return i3;
              if (Array.isArray(i3) && Array.isArray(t3)) {
                const r3 = [...t3];
                for (let n3 = 0; n3 < i3.length; n3++)
                  r3[n3] = e3(t3[n3], i3[n3]);
                return r3;
              }
              {
                const r3 = DR({}, t3);
                for (const n3 in i3)
                  Object.prototype.hasOwnProperty.call(i3, n3) && (Object.prototype.hasOwnProperty.call(t3, n3) ? r3[n3] = e3(t3[n3], i3[n3]) : r3[n3] = i3[n3]);
                return r3;
              }
            }(a2, c2);
          } catch (e3) {
          }
        NE.debug("[".concat(t2, "] GetUserMedia"), JSON.stringify(a2)), Bh();
        let d2, u2 = null;
        (zh() || Zh() || Yh()) && (u2 = await XT.lock());
        try {
          d2 = await navigator.mediaDevices.getUserMedia(a2);
        } catch (e3) {
          throw u2 && u2(), e3;
        }
        return a2.audio && (zT = true), a2.video && (QT = true), tv(n2, d2), u2 && u2(), n2;
      }
      function ev(e2, t2) {
        switch (e2) {
          case "Starting video failed":
          case "OverconstrainedError":
          case "TrackStartError":
            return new vE(TE.MEDIA_OPTION_INVALID, "".concat(e2, ": ").concat(t2));
          case "NotFoundError":
          case "DevicesNotFoundError":
            return new vE(TE.DEVICE_NOT_FOUND, "".concat(e2, ": ").concat(t2));
          case "NotSupportedError":
            return new vE(TE.NOT_SUPPORTED, "".concat(e2, ": ").concat(t2));
          case "NotReadableError":
            return new vE(TE.NOT_READABLE, "".concat(e2, ": ").concat(t2));
          case "InvalidStateError":
          case "NotAllowedError":
          case "PERMISSION_DENIED":
          case "PermissionDeniedError":
            return new vE(TE.PERMISSION_DENIED, "".concat(e2, ": ").concat(t2));
          case "ConstraintNotSatisfiedError":
            return new vE(TE.CONSTRAINT_NOT_SATISFIED, "".concat(e2, ": ").concat(t2));
          default:
            return NE.error("getUserMedia unexpected error", e2), new vE(TE.UNEXPECTED_ERROR, "".concat(e2, ": ").concat(t2));
        }
      }
      function tv(e2, t2) {
        const i2 = e2.getVideoTracks()[0], r2 = e2.getAudioTracks()[0], n2 = t2.getVideoTracks()[0], o2 = t2.getAudioTracks()[0];
        o2 && (r2 && e2.removeTrack(r2), e2.addTrack(o2)), n2 && (i2 && e2.removeTrack(i2), e2.addTrack(n2));
      }
      const iv = new class extends gE {
        get state() {
          return this._state;
        }
        set state(e2) {
          e2 !== this._state && (this.emit(gm.STATE_CHANGE, e2), this._state = e2);
        }
        constructor() {
          super(), mp(this, "_state", mm.IDLE), mp(this, "isAccessMicrophonePermission", false), mp(this, "isAccessCameraPermission", false), mp(this, "lastAccessMicrophonePermission", false), mp(this, "lastAccessCameraPermission", false), mp(this, "checkdeviceMatched", false), mp(this, "deviceInfoMap", /* @__PURE__ */ new Map()), this.init().then(() => {
            navigator.mediaDevices.addEventListener && navigator.mediaDevices.addEventListener("devicechange", this.updateDevicesInfo.bind(this)), window.setInterval(() => {
              (HE("ENUMERATE_DEVICES_INTERVAL") || cp() && ap()) && this.updateDevicesInfo();
            }, HE("ENUMERATE_DEVICES_INTERVAL_TIME"));
          }).catch((e2) => NE.error(e2.toString()));
        }
        async enumerateDevices(e2, t2) {
          let i2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
            return new vE(TE.NOT_SUPPORTED, "enumerateDevices() not supported.").throw();
          }
          const r2 = await navigator.mediaDevices.enumerateDevices(), n2 = this.checkMediaDeviceInfoIsOk(r2);
          let o2 = !this.isAccessMicrophonePermission && e2, s2 = !this.isAccessCameraPermission && t2;
          n2.audio && (o2 = false), n2.video && (s2 = false);
          let a2 = null, c2 = null, d2 = null;
          if (!i2 && (o2 || s2)) {
            if (XT.isLocked) {
              NE.debug("[device manager] wait GUM lock");
              (await XT.lock())(), NE.debug("[device manager] GUM unlock");
            }
            if (zT && (o2 = false, this.isAccessMicrophonePermission = true), QT && (s2 = false, this.isAccessCameraPermission = true), NE.debug("[device manager] check media device permissions", e2, t2, o2, s2), o2 && s2) {
              try {
                d2 = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
              } catch (e3) {
                const t3 = ev(e3.name || e3.code || e3, e3.message);
                if (t3.code === TE.PERMISSION_DENIED)
                  throw t3;
                NE.warning("getUserMedia failed in getDevices", t3);
              }
              this.isAccessCameraPermission = true, this.isAccessMicrophonePermission = true;
            } else if (o2) {
              try {
                a2 = await navigator.mediaDevices.getUserMedia({ audio: e2 });
              } catch (e3) {
                const t3 = ev(e3.name || e3.code || e3, e3.message);
                if (t3.code === TE.PERMISSION_DENIED)
                  throw t3;
                NE.warning("getUserMedia failed in getDevices", t3);
              }
              this.isAccessMicrophonePermission = true;
            } else if (s2) {
              try {
                c2 = await navigator.mediaDevices.getUserMedia({ video: t2 });
              } catch (e3) {
                const t3 = ev(e3.name || e3.code || e3, e3.message);
                if (t3.code === TE.PERMISSION_DENIED)
                  throw t3;
                NE.warning("getUserMedia failed in getDevices", t3);
              }
              this.isAccessCameraPermission = true;
            }
            NE.debug("[device manager] mic permission", e2, "cam permission", t2);
          }
          try {
            const e3 = await navigator.mediaDevices.enumerateDevices();
            return a2 && a2.getTracks().forEach((e4) => e4.stop()), c2 && c2.getTracks().forEach((e4) => e4.stop()), d2 && d2.getTracks().forEach((e4) => e4.stop()), a2 = null, c2 = null, d2 = null, e3;
          } catch (e3) {
            a2 && a2.getTracks().forEach((e4) => e4.stop()), c2 && c2.getTracks().forEach((e4) => e4.stop()), d2 && d2.getTracks().forEach((e4) => e4.stop()), a2 = null, c2 = null, d2 = null;
            return new vE(TE.ENUMERATE_DEVICES_FAILED, e3.toString()).throw();
          }
        }
        async getRecordingDevices() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          return (await this.enumerateDevices(true, false, e2)).filter((e3) => "audioinput" === e3.kind);
        }
        async getCamerasDevices() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          return (await this.enumerateDevices(false, true, e2)).filter((e3) => "videoinput" === e3.kind);
        }
        async getSpeakers() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          return (await this.enumerateDevices(true, false, e2)).filter((e3) => "audiooutput" === e3.kind);
        }
        searchDeviceIdByName(e2) {
          let t2 = null;
          return this.deviceInfoMap.forEach((i2) => {
            i2.device.label === e2 && (t2 = i2.device.deviceId);
          }), t2;
        }
        async getDeviceById(e2) {
          const t2 = (await this.enumerateDevices(true, true, true)).find((t3) => t3.deviceId === e2);
          if (!t2)
            throw new vE(TE.DEVICE_NOT_FOUND, "deviceId: ".concat(e2));
          return t2;
        }
        async init() {
          this.state = mm.INITING;
          try {
            await this.updateDevicesInfo(), this.state = mm.INITEND;
          } catch (e2) {
            if (NE.warning("Device Detection functionality cannot start properly.", e2.toString()), this.state = mm.IDLE, !function() {
              if ("boolean" == typeof isSecureContext)
                return isSecureContext;
              return "https:" === location.protocol || "file:" === location.protocol || "localhost" === location.hostname || "127.0.0.1" === location.hostname || "::1" === location.hostname;
            }()) {
              new vE(TE.WEB_SECURITY_RESTRICT, "Your context is limited by web security, please try using https protocol or localhost.").throw();
            }
            throw e2;
          }
        }
        async updateDevicesInfo() {
          const e2 = await this.enumerateDevices(true, true, true), t2 = Date.now(), i2 = [];
          if (e2[0] && e2[0].label && false === this.checkdeviceMatched) {
            this.checkdeviceMatched = true;
            const t3 = e2.find((e3) => "audioinput" === e3.kind && "default" === e3.deviceId), i3 = e2.find((e3) => "audiooutput" === e3.kind && "default" === e3.deviceId);
            t3 && i3 ? i3.groupId === t3.groupId ? NE.debug("[device-check] default input ".concat(t3.label, " and output ").concat(i3.label, " is the same group")) : NE.warning("[device-check] default input ".concat(t3.label, " and output ").concat(i3.label, " is not the same group")) : NE.debug("[device-check] default input or output not found");
          }
          const r2 = this.checkMediaDeviceInfoIsOk(e2);
          if (e2.forEach((e3) => {
            if (!e3.deviceId)
              return;
            const r3 = this.deviceInfoMap.get("".concat(e3.kind, "_").concat(e3.deviceId));
            if ("ACTIVE" !== (r3 ? r3.state : "INACTIVE")) {
              const r4 = { initAt: t2, updateAt: t2, device: e3, state: "ACTIVE" };
              this.deviceInfoMap.set("".concat(e3.kind, "_").concat(e3.deviceId), r4), i2.push(r4);
            }
            r3 && (r3.updateAt = t2);
          }), this.deviceInfoMap.forEach((e3, r3) => {
            "ACTIVE" === e3.state && e3.updateAt !== t2 && (e3.state = "INACTIVE", i2.push(e3));
          }), this.state !== mm.INITEND)
            return r2.audio && (this.lastAccessMicrophonePermission = true, this.isAccessMicrophonePermission = true), void (r2.video && (this.lastAccessCameraPermission = true, this.isAccessCameraPermission = true));
          i2.forEach((e3) => {
            switch (e3.device.kind) {
              case "audioinput":
                this.lastAccessMicrophonePermission && this.isAccessMicrophonePermission && this.emit(gm.RECORDING_DEVICE_CHANGED, e3);
                break;
              case "videoinput":
                this.lastAccessCameraPermission && this.isAccessCameraPermission && this.emit(gm.CAMERA_DEVICE_CHANGED, e3);
                break;
              case "audiooutput":
                this.lastAccessMicrophonePermission && this.isAccessMicrophonePermission && this.emit(gm.PLAYOUT_DEVICE_CHANGED, e3);
            }
          }), r2.audio && (this.lastAccessMicrophonePermission = true, this.isAccessMicrophonePermission = true), r2.video && (this.lastAccessCameraPermission = true, this.isAccessCameraPermission = true);
        }
        checkMediaDeviceInfoIsOk(e2) {
          const t2 = e2.filter((e3) => "audioinput" === e3.kind), i2 = e2.filter((e3) => "videoinput" === e3.kind), r2 = { audio: false, video: false };
          for (const e3 of t2)
            if (e3.label && e3.deviceId) {
              r2.audio = true;
              break;
            }
          for (const e3 of i2)
            if (e3.label && e3.deviceId) {
              r2.video = true;
              break;
            }
          return r2;
        }
      }();
      const rv = ["play", "playing", "loadeddata", "canplay", "pause", "stalled", "suspend", "waiting", "abort", "emptied", "ended", "error"], nv = new class {
        constructor() {
          mp(this, "onAutoplayFailed", void 0), mp(this, "elementMap", /* @__PURE__ */ new Map()), mp(this, "elementStateMap", /* @__PURE__ */ new Map()), mp(this, "elementsNeedToResume", []), mp(this, "sinkIdMap", /* @__PURE__ */ new Map()), mp(this, "autoResumeAfterInterruption", () => {
            Array.from(this.elementMap.entries()).forEach((e2) => {
              let [t2, i2] = e2;
              const r2 = this.elementStateMap.get(t2), n2 = i2.srcObject.getAudioTracks()[0];
              ep() ? n2 && "live" === n2.readyState && "running" === LT.curState && (NE.debug("auto resume after interruption for iOS 15"), i2.pause(), i2.play()) : r2 && "paused" === r2 && n2 && "live" === n2.readyState && "running" === LT.curState && (NE.debug("auto resume after interruption for iOS"), i2.play());
            });
          }), mp(this, "autoResumeAfterInterruptionOnIOS15", () => {
            Array.from(this.elementMap.entries()).forEach((e2) => {
              let [t2, i2] = e2;
              const r2 = i2.srcObject.getAudioTracks()[0];
              r2 && "live" === r2.readyState && (NE.debug("auto resume after interruption inside autoResumeAfterInterruptionOnIOS15"), i2.pause(), i2.play());
            });
          }), this.autoResumeAudioElement(), LT.on(CT.IOS_INTERRUPTION_END, this.autoResumeAfterInterruption), LT.on(CT.IOS_15_INTERRUPTION_END, this.autoResumeAfterInterruptionOnIOS15), LT.on(CT.STATE_CHANGE, () => {
            Zh() && "suspended" === LT.prevState && "running" === LT.curState && this.autoResumeAfterInterruption();
          });
        }
        async setSinkID(e2, t2) {
          const i2 = this.elementMap.get(e2);
          if (this.sinkIdMap.set(e2, t2), i2)
            try {
              await i2.setSinkId(t2);
            } catch (e3) {
              throw new vE(TE.PERMISSION_DENIED, "can not set sink id: " + e3.toString());
            }
        }
        play(e2, t2, i2, r2) {
          if (this.elementMap.has(t2))
            return;
          const n2 = document.createElement("audio");
          n2.autoplay = true, n2.srcObject = new MediaStream([e2]), this.bindAudioElementEvents(t2, n2), this.elementMap.set(t2, n2), this.elementStateMap.set(t2, am.INIT), this.setVolume(t2, i2);
          const o2 = this.sinkIdMap.get(t2);
          if (o2)
            try {
              n2.setSinkId(o2).catch((e3) => {
                NE.warning("[".concat(t2, "] set sink id failed"), e3.toString());
              });
            } catch (e3) {
              NE.warning("[".concat(t2, "] set sink id failed"), e3.toString());
            }
          const s2 = n2.play();
          s2 && s2.then && s2.catch((e3) => {
            r2 && IT.autoplayFailed(r2, "audio", e3.message, t2), NE.warning("audio element play warning", e3.toString()), this.elementMap.has(t2) && "NotAllowedError" === e3.name && (NE.warning("detected audio element autoplay failed"), this.elementsNeedToResume.push(n2), YR(() => {
              this.onAutoplayFailed && this.onAutoplayFailed(), fT();
            }));
          });
        }
        updateTrack(e2, t2) {
          const i2 = this.elementMap.get(e2);
          i2 && (i2.srcObject = new MediaStream([t2]));
        }
        isPlaying(e2) {
          return this.elementMap.has(e2);
        }
        setVolume(e2, t2) {
          const i2 = this.elementMap.get(e2);
          i2 && (t2 = Math.max(0, Math.min(100, t2)), i2.volume = t2 / 100);
        }
        stop(e2) {
          const t2 = this.elementMap.get(e2);
          if (this.sinkIdMap.delete(e2), !t2)
            return;
          const i2 = this.elementsNeedToResume.indexOf(t2);
          this.elementsNeedToResume.splice(i2, 1), t2.srcObject = null, t2.remove(), this.elementMap.delete(e2), this.elementStateMap.delete(e2);
        }
        bindAudioElementEvents(e2, t2) {
          rv.forEach((i2) => {
            t2.addEventListener(i2, (i3) => {
              const r2 = this.elementStateMap.get(e2), n2 = "pause" === i3.type ? "paused" : i3.type;
              if (NE.debug("[".concat(e2, "] audio-element-status change ").concat(r2, " => ").concat(n2)), "error" === i3.type) {
                const i4 = null == t2 ? void 0 : t2.error;
                i4 && NE.error("[".concat(e2, "] media error, code: ").concat(i4.code, ", message: ").concat(i4.message));
              }
              this.elementStateMap.set(e2, n2);
            });
          });
        }
        getPlayerState(e2) {
          return this.elementStateMap.get(e2) || "uninit";
        }
        autoResumeAudioElement() {
          const e2 = () => {
            this.elementsNeedToResume.forEach((e3) => {
              e3.play().then((e4) => {
                NE.debug("Auto resume audio element success");
              }).catch((e4) => {
                NE.warning("Auto resume audio element failed!", e4);
              });
            }), this.elementsNeedToResume = [];
          };
          new Cl((e3) => {
            document.body ? e3() : window.addEventListener("load", () => e3());
          }).then(() => {
            dp() ? document.body.addEventListener("click", e2, true) : (document.body.addEventListener("touchstart", e2, true), document.body.addEventListener("mousedown", e2, true));
          });
        }
      }();
      function ov() {
        return function(e2, t2, i2) {
          const r2 = i2.value;
          return "function" == typeof r2 && (i2.value = function() {
            this._isClosed && new vE(TE.INVALID_OPERATION, "[".concat(this.getTrackId(), "] cannot operate a closed track")).print("warning");
            for (var e3 = arguments.length, t3 = new Array(e3), i3 = 0; i3 < e3; i3++)
              t3[i3] = arguments[i3];
            const n2 = r2.apply(this, t3);
            return n2 instanceof Cl ? new Cl((e4, t4) => {
              n2.then(e4).catch(t4);
            }) : n2;
          }), i2;
        };
      }
      var sv, av, cv, dv, uv, lv, hv, pv, _v, Ev, fv, mv, gv, Sv, Tv, vv, Rv, Iv, yv, Cv, Av, Ov, bv, wv, Nv, Dv, Pv, Lv, kv, Mv, Uv, xv, Vv, jv, Fv, Bv, Gv, Wv = Hi("Array").values, Hv = $n, Kv = Ge, Yv = u, qv = Wv, Jv = Array.prototype, Xv = { DOMTokenList: true, NodeList: true }, zv = function(e2) {
        var t2 = e2.values;
        return e2 === Jv || Yv(Jv, e2) && t2 === Jv.values || Kv(Xv, Hv(e2)) ? qv : t2;
      };
      function Qv(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function Zv(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Qv(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Qv(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class $v extends gE {
        constructor(e2) {
          super(), mp(this, "name", "VideoProcessorDestination"), mp(this, "ID", "0"), mp(this, "_source", void 0), mp(this, "videoContext", void 0), mp(this, "inputTrack", void 0), this.videoContext = e2;
        }
        get kind() {
          return "video";
        }
        get enabled() {
          return true;
        }
        pipe() {
          throw new vE(TE.NOT_SUPPORTED, "VideoProcessor cannot pipe to any other Processor");
        }
        unpipe() {
          throw new vE(TE.NOT_SUPPORTED, "VideoProcessor cannot unpipe to any other Processor");
        }
        enable() {
        }
        disable() {
        }
        updateInput(e2) {
          if (e2.context !== this.videoContext)
            throw new Error("ProcessorContext passed to VideoTrack.processorDestination doesn't match it's belonging VideoTrack's context.\nProbably you are making pipeline like this:\nvideoTrack1.pipe(processor).pipe(videoTrack2.processorDestination).");
          e2.track && e2.track !== this.inputTrack && (this.videoContext.chained = true, this.inputTrack = e2.track, this.emit(Ng.ON_TRACK, e2.track));
        }
        reset() {
          this.inputTrack = void 0, this.videoContext.chained = false, this.emit(Ng.ON_TRACK, void 0);
        }
      }
      class eR extends gE {
        set chained(e2) {
          this._chained = e2;
        }
        get chained() {
          return this._chained;
        }
        constructor(e2, t2) {
          super(), mp(this, "constraintsMap", /* @__PURE__ */ new Map()), mp(this, "statsRegistry", []), mp(this, "usageRegistry", []), mp(this, "trackId", void 0), mp(this, "direction", void 0), mp(this, "_chained", false), this.trackId = e2, this.direction = t2;
        }
        async getConstraints() {
          return await FR(this, Dg.REQUEST_CONSTRAINTS);
        }
        async requestApplyConstraints(e2, t2) {
          var i2;
          return NE.info("processor ".concat(t2.name, " requestApplyConstraints for ").concat(this.trackId)), e2 && this.constraintsMap.set(t2, e2), BR(this, Dg.REQUEST_UPDATE_CONSTRAINTS, Array.from(zv(i2 = this.constraintsMap).call(i2)));
        }
        async requestRevertConstraints(e2) {
          var t2;
          if (this.constraintsMap.has(e2))
            return NE.info("processor ".concat(e2.name, " requestRevertConstraints for ").concat(this.trackId)), this.constraintsMap.delete(e2), BR(this, Dg.REQUEST_UPDATE_CONSTRAINTS, Array.from(zv(t2 = this.constraintsMap).call(t2)));
        }
        registerStats(e2, t2, i2) {
          this.statsRegistry.find((i3) => i3.processorID === e2.ID && i3.processorName === e2.name && i3.type === t2) || this.statsRegistry.push({ processorName: e2.name, processorID: e2.ID, type: t2, cb: i2 });
        }
        unregisterStats(e2, t2) {
          const i2 = this.statsRegistry.findIndex((i3) => i3.processorID === e2.ID && i3.processorName === e2.name && i3.type === t2);
          -1 !== i2 && this.statsRegistry.splice(i2, 1);
        }
        gatherStats() {
          const e2 = [];
          for (const { processorID: t2, processorName: i2, type: r2, cb: n2 } of this.statsRegistry)
            try {
              const o2 = n2();
              e2.push({ processorID: t2, processorName: i2, type: r2, stats: o2 });
            } catch (e3) {
              NE.error(new vE(TE.UNEXPECTED_ERROR, e3.message));
            }
          return e2;
        }
        registerUsage(e2, t2) {
          this.usageRegistry.find((t3) => t3.processorID === e2.ID && t3.processorName === e2.name) || this.usageRegistry.push({ processorID: e2.ID, processorName: e2.name, cb: t2 });
        }
        unregisterUsage(e2) {
          const t2 = this.usageRegistry.findIndex((t3) => t3.processorID === e2.ID && t3.processorName === e2.name);
          -1 !== t2 && this.usageRegistry.splice(t2, 1);
        }
        async gatherUsage() {
          const e2 = [];
          if (!this.chained)
            return [];
          for (const { cb: t2 } of this.usageRegistry)
            try {
              let i2 = t2();
              i2 instanceof Cl && (i2 = await i2), e2.push(Zv(Zv({}, i2), {}, { direction: this.direction }));
            } catch (e3) {
              NE.error("gather extension usage error", e3);
            }
          return e2;
        }
        getDirection() {
          return this.direction;
        }
      }
      class tR extends gE {
        constructor(e2) {
          super(), mp(this, "name", "AudioProcessorDestination"), mp(this, "ID", "0"), mp(this, "inputTrack", void 0), mp(this, "inputNode", void 0), mp(this, "audioProcessorContext", void 0), mp(this, "_source", void 0), this.audioProcessorContext = e2;
        }
        get kind() {
          return "audio";
        }
        get enabled() {
          return true;
        }
        pipe() {
          throw new vE(TE.NOT_SUPPORTED, "AudioProcessorDestination cannot pipe to any other Processor");
        }
        unpipe() {
          throw new vE(TE.NOT_SUPPORTED, "AudioProcessor cannot unpipe to any other Processor");
        }
        enable() {
        }
        disable() {
        }
        reset() {
          this.inputTrack = void 0, this.inputNode = void 0, this.audioProcessorContext.chained = false, this.emit(Ng.ON_TRACK, void 0), this.emit(Ng.ON_NODE, void 0);
        }
        updateInput(e2) {
          if (e2.context !== this.audioProcessorContext)
            throw new Error("ProcessorContext passed to AudioTrack.processorDestination doesn't match it's belonging AudioTrack's context.\n        Probably you are making pipeline like this: audioTrack1.pipe(processor).pipe(audioTrack2.processorDestination).");
          e2.track && this.inputTrack !== e2.track && (this.audioProcessorContext.chained = true, this.inputTrack = e2.track, this.emit(Ng.ON_TRACK, this.inputTrack)), e2.node && this.inputNode !== e2.node && (this.audioProcessorContext.chained = true, this.inputNode = e2.node, this.emit(Ng.ON_NODE, this.inputNode));
        }
      }
      class iR extends gE {
        set chained(e2) {
          this._chained = e2;
        }
        get chained() {
          return this._chained;
        }
        constructor(e2, t2, i2) {
          super(), mp(this, "constraintsMap", /* @__PURE__ */ new Map()), mp(this, "statsRegistry", []), mp(this, "audioContext", void 0), mp(this, "trackId", void 0), mp(this, "direction", void 0), mp(this, "usageRegistry", []), mp(this, "_chained", false), this.audioContext = e2, this.trackId = t2, this.direction = i2;
        }
        async getConstraints() {
          return FR(this, Dg.REQUEST_CONSTRAINTS);
        }
        getAudioContext() {
          return this.audioContext;
        }
        async requestApplyConstraints(e2, t2) {
          var i2;
          return NE.info("processor ".concat(t2.name, " requestApplyConstraints for ").concat(this.trackId)), e2 && this.constraintsMap.set(t2, e2), BR(this, Dg.REQUEST_UPDATE_CONSTRAINTS, Array.from(zv(i2 = this.constraintsMap).call(i2)));
        }
        async requestRevertConstraints(e2) {
          var t2;
          if (this.constraintsMap.has(e2))
            return this.constraintsMap.delete(e2), BR(this, Dg.REQUEST_UPDATE_CONSTRAINTS, Array.from(zv(t2 = this.constraintsMap).call(t2)));
        }
        registerStats(e2, t2, i2) {
          this.statsRegistry.find((i3) => i3.processorID === e2.ID && i3.processorName === e2.name && i3.type === t2) || this.statsRegistry.push({ processorName: e2.name, processorID: e2.ID, type: t2, cb: i2 });
        }
        unregisterStats(e2, t2) {
          const i2 = this.statsRegistry.findIndex((i3) => i3.processorID === e2.ID && i3.processorName === e2.name && i3.type === t2);
          -1 !== i2 && this.statsRegistry.splice(i2, 1);
        }
        gatherStats() {
          const e2 = [];
          for (const { processorID: t2, processorName: i2, type: r2, cb: n2 } of this.statsRegistry)
            try {
              const o2 = n2();
              e2.push({ processorID: t2, processorName: i2, type: r2, stats: o2 });
            } catch (e3) {
              NE.error(new vE(TE.UNEXPECTED_ERROR, e3.message));
            }
          return e2;
        }
        registerUsage(e2, t2) {
          this.usageRegistry.find((t3) => t3.processorID === e2.ID && t3.processorName === e2.name) || this.usageRegistry.push({ processorID: e2.ID, processorName: e2.name, cb: t2 });
        }
        unregisterUsage(e2) {
          const t2 = this.usageRegistry.findIndex((t3) => t3.processorID === e2.ID && t3.processorName === e2.name);
          -1 !== t2 && this.usageRegistry.splice(t2, 1);
        }
        async gatherUsage() {
          const e2 = [];
          if (!this.chained)
            return [];
          for (const { cb: t2 } of this.usageRegistry)
            try {
              let i2 = t2();
              i2 instanceof Cl && (i2 = await i2), e2.push(Zv(Zv({}, i2), {}, { direction: this.direction }));
            } catch (e3) {
              NE.error("gather extension usage error", e3);
            }
          return e2;
        }
        getDirection() {
          return this.direction;
        }
      }
      class rR extends gE {
        get isPlayed() {
          return true;
        }
        get isFreeze() {
          return false;
        }
        constructor() {
          super(), mp(this, "context", void 0), mp(this, "processSourceNode", void 0), mp(this, "outputTrack", void 0), mp(this, "processedNode", void 0), mp(this, "clonedTrack", void 0), mp(this, "outputNode", void 0), this.outputNode = new nR();
        }
        setVolume() {
        }
        createOutputTrack() {
          throw new vE(TE.NOT_SUPPORTED, "can not create output MediaStreamTrack when WebAudio disabled");
        }
        getOriginVolumeLevel() {
          return 0;
        }
        getAccurateVolumeLevel() {
          return 0;
        }
        stopGetAudioBuffer() {
        }
        startGetAudioBuffer() {
        }
        play() {
        }
        stop() {
        }
        destroy() {
        }
        updateTrack() {
        }
        updateOriginTrack() {
        }
        createMediaStreamSourceNode() {
        }
      }
      class nR {
        disconnect() {
        }
        connect() {
        }
      }
      function oR(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function sR(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? oR(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : oR(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let aR = (sv = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2], throttleTime: 300 }), av = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), cv = ov(), dv = bT("LocalAudioTrack", "_enabledMutex"), uv = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), lv = ov(), hv = bT("LocalAudioTrack", "_enabledMutex"), pv = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), _v = ov(), Ev = ov(), fv = ov(), mv = RT({ argsMap: (e2) => [e2.getTrackId()] }), gv = ov(), Sv = RT({ argsMap: (e2) => [e2.getTrackId()] }), Tv = ov(), vv = RT({ argsMap: (e2) => [e2.getTrackId()] }), Rv = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2.name] }), Iv = RT({ argsMap: (e2) => [e2.getTrackId()] }), ZS((yv = class extends wT {
        get isPlaying() {
          return this._useAudioElement ? nv.isPlaying(this.getTrackId()) : this._source.isPlayed;
        }
        get __className__() {
          return "LocalAudioTrack";
        }
        constructor(e2, t2, i2, r2) {
          super(e2, i2), mp(this, "trackMediaType", "audio"), mp(this, "_encoderConfig", void 0), mp(this, "_source", void 0), mp(this, "_enabled", true), mp(this, "_volume", 100), mp(this, "_useAudioElement", false), mp(this, "_bypassWebAudio", false), mp(this, "processor", void 0), mp(this, "processorContext", void 0), mp(this, "processorDestination", void 0), mp(this, "_getOriginVolumeLevel", void 0), this._encoderConfig = t2, this._getOriginVolumeLevel = !!r2, HE("DISABLE_WEBAUDIO") ? (this._source = new rR(), this._useAudioElement = true, this._bypassWebAudio = true) : (this._source = new WT(e2, false, this._getOriginVolumeLevel ? e2 : void 0), HE("LOCAL_AUDIO_TRACK_USES_WEB_AUDIO") || (this._useAudioElement = true)), this.processorContext = new iR(this._source.context, this.getTrackId(), "local"), this.processorDestination = new tR(this.processorContext), this.bindProcessorDestinationEvents(), this._source.on(km.UPDATE_SOURCE, () => {
            this.processor && this.processor.updateInput({ node: this._source.processSourceNode, context: this.processorContext });
          });
        }
        setVolume(e2) {
          Xf(e2, "volume", 0, 1e3), this._volume = e2, this._source.setVolume(e2 / 100), this._useAudioElement && nv.setVolume(this.getTrackId(), e2);
          try {
            if (this._bypassWebAudio)
              return void NE.debug("[".concat(this.getTrackId(), "] setVolume returned because no pass through WebAudio."));
            const e3 = this._source.createOutputTrack();
            this._mediaStreamTrack !== e3 && (this._mediaStreamTrack = e3, BR(this, ug.NEED_REPLACE_TRACK, this).then(() => {
              NE.debug("[".concat(this.getTrackId(), "] replace web audio track success"));
            }).catch((e4) => {
              NE.warning("[".concat(this.getTrackId(), "] replace web audio track failed"), e4);
            }));
          } catch (e3) {
          }
        }
        getVolumeLevel() {
          return this._muted && this.enabled && this._getOriginVolumeLevel ? this._source.getOriginVolumeLevel() : this._source.getAccurateVolumeLevel();
        }
        async setPlaybackDevice(e2) {
          if (!this._useAudioElement)
            throw new vE(TE.NOT_SUPPORTED, "your browser does not support setting the audio output device");
          await nv.setSinkID(this.getTrackId(), e2);
        }
        async setEnabled(e2, t2, i2) {
          return this._setEnabled(e2, t2, i2);
        }
        async _setEnabled(e2, t2, i2) {
          if (!i2) {
            if (e2 === this._enabled)
              return;
            this.stateCheck("enabled", e2);
          }
          if (NE.info("[".concat(this.getTrackId(), "] start setEnabled"), e2), e2) {
            this._originMediaStreamTrack.enabled = true;
            try {
              i2 || (this._enabled = true), await BR(this, ug.NEED_ENABLE_TRACK, this), NE.info("[".concat(this.getTrackId(), "] setEnabled to ").concat(e2, " success"));
            } catch (e3) {
              throw i2 || (this._enabled = false), NE.error("[".concat(this.getTrackId(), "] setEnabled to true error"), e3.toString()), e3;
            }
          } else {
            this._originMediaStreamTrack.enabled = false, i2 || (this._enabled = false);
            try {
              await BR(this, ug.NEED_DISABLE_TRACK, this);
            } catch (e3) {
              throw i2 || (this._enabled = true), NE.error("[".concat(this.getTrackId(), "] setEnabled to false error"), e3.toString()), e3;
            }
          }
        }
        async setMuted(e2) {
          e2 !== this._muted && (this.stateCheck("muted", e2), this._muted = e2, this._originMediaStreamTrack.enabled = !e2, NE.debug("[".concat(this.getTrackId(), "] start set muted: ").concat(e2)), e2 ? await BR(this, ug.NEED_MUTE_TRACK, this) : await BR(this, ug.NEED_UNMUTE_TRACK, this));
        }
        getStats() {
          XR(() => {
            NE.warning("[deprecated] LocalAudioTrack.getStats will be removed in the future, use AgoraRTCClient.getLocalAudioStats instead");
          }, "localAudioTrackGetStatsWarning");
          const e2 = GR(this, ug.GET_STATS);
          return e2 || sR({}, Fm);
        }
        setAudioFrameCallback(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 4096;
          if (!e2)
            return this._source.removeAllListeners(km.ON_AUDIO_BUFFER), void this._source.stopGetAudioBuffer();
          this._source.startGetAudioBuffer(t2), this._source.removeAllListeners(km.ON_AUDIO_BUFFER), this._source.on(km.ON_AUDIO_BUFFER, (t3) => e2(t3));
        }
        play() {
          NE.debug("[".concat(this.getTrackId(), "] start audio playback")), this._useAudioElement ? (NE.debug("[".concat(this.getTrackId(), "] start audio playback in element")), nv.play(this._mediaStreamTrack, this.getTrackId(), this._volume)) : this._source.play();
        }
        stop() {
          NE.debug("[".concat(this.getTrackId(), "] stop audio playback")), this._useAudioElement ? nv.stop(this.getTrackId()) : this._source.stop();
        }
        close() {
          super.close(), this.unbindProcessorDestinationEvents(), this.unbindProcessorContextEvents(), this.unpipe(), this.processorDestination._source && this.processorDestination._source.unpipe(), this._source.destroy();
        }
        _updatePlayerSource() {
          let e2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
          NE.debug("[".concat(this.getTrackId(), "] update player source track")), e2 && this._source.updateTrack(this._mediaStreamTrack), this._useAudioElement && nv.updateTrack(this.getTrackId(), this._mediaStreamTrack);
        }
        async _updateOriginMediaStreamTrack(e2, t2) {
          this._originMediaStreamTrack !== e2 && (this._originMediaStreamTrack.removeEventListener("ended", this._handleTrackEnded), e2.addEventListener("ended", this._handleTrackEnded), t2 && this._originMediaStreamTrack.stop(), this._originMediaStreamTrack = e2, this._muted && (this._originMediaStreamTrack.enabled = false), this.processor && this.processor.updateInput({ track: e2, context: this.processorContext }), this._mediaStreamTrack !== this._source.outputTrack ? (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource(), await BR(this, ug.NEED_REPLACE_TRACK, this)) : this._source.updateTrack(this._originMediaStreamTrack), this._getOriginVolumeLevel && this._source.updateOriginTrack(e2));
        }
        renewMediaStreamTrack(e2) {
          return Cl.resolve(void 0);
        }
        pipe(e2) {
          if (this._bypassWebAudio)
            throw new vE(TE.INVALID_OPERATION, "Can not process AudioTrack when bypassWebAudio set to true.");
          if (this.processor === e2)
            return e2;
          if (e2._source)
            throw new vE(TE.INVALID_OPERATION, "Processor ".concat(e2.name, " already piped, please call unpipe beforehand."));
          return this.unpipe(), this.processor = e2, this.processor._source = this, e2.updateInput({ track: this._originMediaStreamTrack, node: this._source.processSourceNode, context: this.processorContext }), e2;
        }
        unpipe() {
          var e2;
          if (!this.processor)
            return;
          const t2 = this.processor;
          null === (e2 = this._source.processSourceNode) || void 0 === e2 || e2.disconnect(), this.processor._source = false, this.processor = void 0, t2.reset();
        }
        bindProcessorDestinationEvents() {
          this.processorDestination.on(Ng.ON_TRACK, async (e2) => {
            e2 ? e2 !== this._mediaStreamTrack && (this._mediaStreamTrack = e2, this._updatePlayerSource(false), this._source.processedNode = this._source.createMediaStreamSourceNode(e2), await BR(this, ug.NEED_REPLACE_TRACK, this)) : this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource(), await BR(this, ug.NEED_REPLACE_TRACK, this));
          }), this.processorDestination.on(Ng.ON_NODE, (e2) => {
            this._source.processedNode = e2;
          });
        }
        unbindProcessorDestinationEvents() {
          this.processorDestination.removeAllListeners(Ng.ON_TRACK), this.processorDestination.removeAllListeners(Ng.ON_NODE);
        }
        unbindProcessorContextEvents() {
          this.processorContext.removeAllListeners(Dg.REQUEST_UPDATE_CONSTRAINTS), this.processorContext.removeAllListeners(Dg.REQUEST_CONSTRAINTS);
        }
      }).prototype, "setVolume", [sv], Object.getOwnPropertyDescriptor(yv.prototype, "setVolume"), yv.prototype), ZS(yv.prototype, "setPlaybackDevice", [av, cv], Object.getOwnPropertyDescriptor(yv.prototype, "setPlaybackDevice"), yv.prototype), ZS(yv.prototype, "setEnabled", [dv, uv, lv], Object.getOwnPropertyDescriptor(yv.prototype, "setEnabled"), yv.prototype), ZS(yv.prototype, "setMuted", [hv, pv, _v], Object.getOwnPropertyDescriptor(yv.prototype, "setMuted"), yv.prototype), ZS(yv.prototype, "getStats", [Ev], Object.getOwnPropertyDescriptor(yv.prototype, "getStats"), yv.prototype), ZS(yv.prototype, "setAudioFrameCallback", [fv], Object.getOwnPropertyDescriptor(yv.prototype, "setAudioFrameCallback"), yv.prototype), ZS(yv.prototype, "play", [mv, gv], Object.getOwnPropertyDescriptor(yv.prototype, "play"), yv.prototype), ZS(yv.prototype, "stop", [Sv, Tv], Object.getOwnPropertyDescriptor(yv.prototype, "stop"), yv.prototype), ZS(yv.prototype, "close", [vv], Object.getOwnPropertyDescriptor(yv.prototype, "close"), yv.prototype), ZS(yv.prototype, "pipe", [Rv], Object.getOwnPropertyDescriptor(yv.prototype, "pipe"), yv.prototype), ZS(yv.prototype, "unpipe", [Iv], Object.getOwnPropertyDescriptor(yv.prototype, "unpipe"), yv.prototype), yv), cR = (Cv = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Av = ov(), Ov = bT("MicrophoneAudioTrack", "_enabledMutex"), bv = RT({ argsMap: (e2, t2, i2) => [e2.getTrackId(), t2, i2] }), wv = ov(), Nv = RT({ argsMap: (e2) => [e2.getTrackId()] }), ZS((Dv = class extends aR {
        get __className__() {
          return "MicrophoneAudioTrack";
        }
        constructor(e2, t2, i2, r2) {
          super(e2, t2.encoderConfig ? GE(t2.encoderConfig) : {}, r2, HE("GET_VOLUME_OF_MUTED_AUDIO_TRACK")), mp(this, "_config", void 0), mp(this, "_deviceName", "default"), mp(this, "_constraints", void 0), mp(this, "_originalConstraints", void 0), mp(this, "_enabled", true), this._config = t2, this._constraints = i2, this._originalConstraints = i2, this._deviceName = e2.label, "boolean" == typeof t2.bypassWebAudio && (this._bypassWebAudio = t2.bypassWebAudio), ep() && LT.bindInterruptDetectorTrack(this), this.bindProcessorContextEvents();
        }
        async setDevice(e2) {
          if (NE.info("[".concat(this.getTrackId(), "] start set device to ").concat(e2)), this._enabled)
            try {
              const t2 = await iv.getDeviceById(e2), i2 = {};
              i2.audio = sR({}, this._constraints), i2.audio.deviceId = { exact: e2 }, this._originMediaStreamTrack.stop();
              let r2 = null;
              try {
                r2 = await ZT(i2, this.getTrackId());
              } catch (e3) {
                throw NE.error("[".concat(this.getTrackId(), "] setDevice failed"), e3.toString()), r2 = await ZT({ video: this._constraints }, this.getTrackId()), await this._updateOriginMediaStreamTrack(r2.getAudioTracks()[0], false), e3;
              }
              await this._updateOriginMediaStreamTrack(r2.getAudioTracks()[0], false), this._deviceName = t2.label, this._config.microphoneId = e2, this._constraints.deviceId = { exact: e2 };
            } catch (e3) {
              throw NE.error("[".concat(this.getTrackId(), "] setDevice error"), e3.toString()), e3;
            }
          else
            try {
              const t2 = await iv.getDeviceById(e2);
              this._deviceName = t2.label, this._config.microphoneId = e2, this._constraints.deviceId = { exact: e2 };
            } catch (e3) {
              throw NE.error("[".concat(this.getTrackId(), "] setDevice error"), e3.toString()), e3;
            }
          NE.info("[".concat(this.getTrackId(), "] set device to ").concat(e2, " success"));
        }
        async setEnabled(e2, t2, i2) {
          if (t2)
            return NE.debug("[".concat(this.getTrackId(), "] setEnabled false (do not close microphone)")), await super._setEnabled(e2);
          if (!i2) {
            if (e2 === this._enabled)
              return;
            this.stateCheck("enabled", e2);
          }
          if (NE.info("[".concat(this.getTrackId(), "] start setEnabled"), e2), !e2) {
            var r2;
            this._originMediaStreamTrack.onended = null, this._originMediaStreamTrack.stop(), null === (r2 = this._source.clonedTrack) || void 0 === r2 || r2.stop(), i2 || (this._enabled = false);
            try {
              await BR(this, ug.NEED_DISABLE_TRACK, this);
            } catch (e3) {
              throw NE.error("[".concat(this.getTrackId(), "] setEnabled false failed"), e3.toString()), e3;
            }
            return;
          }
          const n2 = sR({}, this._constraints), o2 = iv.searchDeviceIdByName(this._deviceName);
          o2 && !n2.deviceId && (n2.deviceId = o2);
          try {
            i2 || (this._enabled = true);
            const e3 = await ZT({ audio: this._constraints }, this.getTrackId());
            await this._updateOriginMediaStreamTrack(e3.getAudioTracks()[0], false), await BR(this, ug.NEED_ENABLE_TRACK, this);
          } catch (e3) {
            throw i2 || (this._enabled = false), NE.error("[".concat(this.getTrackId(), "] setEnabled true failed"), e3.toString()), e3;
          }
          NE.info("[".concat(this.getTrackId(), "] setEnabled success"));
        }
        close() {
          super.close(), ep() && LT.unbindInterruptDetectorTrack(this);
        }
        onTrackEnded() {
          if ((Zh() || np()) && this._enabled && !this._isClosed && LT.duringInterruption) {
            const e2 = async () => {
              LT.off(CT.IOS_INTERRUPTION_END, e2), this._enabled && !this._isClosed && (NE.debug("[".concat(this.getTrackId(), "] try capture microphone media device for interrupted iOS device.")), await this.setEnabled(false), await this.setEnabled(true));
            };
            LT.on(CT.IOS_INTERRUPTION_END, e2);
          } else
            NE.debug("[".concat(this.getTrackId(), "] track ended")), this.emit(_g.TRACK_ENDED);
        }
        async renewMediaStreamTrack(e2) {
          const t2 = e2 || this._constraints, i2 = iv.searchDeviceIdByName(this._deviceName);
          if (i2 && !t2.deviceId && (t2.deviceId = i2), this._constraints = t2, this._enabled) {
            this._originMediaStreamTrack.stop();
            const e3 = await ZT({ audio: this._constraints }, this.getTrackId());
            await this._updateOriginMediaStreamTrack(e3.getAudioTracks()[0], true);
          }
        }
        bindProcessorContextEvents() {
          this.processorContext.on(Dg.REQUEST_UPDATE_CONSTRAINTS, async (e2, t2, i2) => {
            try {
              const i3 = Object.assign({}, this._originalConstraints, ...e2);
              await this.renewMediaStreamTrack(i3), t2();
            } catch (e3) {
              i2(e3);
            }
          }), this.processorContext.on(Dg.REQUEST_CONSTRAINTS, async (e2) => {
            e2(this._originMediaStreamTrack.getSettings());
          });
        }
      }).prototype, "setDevice", [Cv, Av], Object.getOwnPropertyDescriptor(Dv.prototype, "setDevice"), Dv.prototype), ZS(Dv.prototype, "setEnabled", [Ov, bv, wv], Object.getOwnPropertyDescriptor(Dv.prototype, "setEnabled"), Dv.prototype), ZS(Dv.prototype, "close", [Nv], Object.getOwnPropertyDescriptor(Dv.prototype, "close"), Dv.prototype), Dv), dR = (Pv = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2, e2.duration] }), Lv = ov(), kv = RT({ argsMap: (e2) => [e2.getTrackId()] }), Mv = ov(), Uv = RT({ argsMap: (e2) => [e2.getTrackId()] }), xv = ov(), Vv = RT({ argsMap: (e2) => [e2.getTrackId()] }), jv = ov(), Fv = RT({ argsMap: (e2) => [e2.getTrackId()] }), Bv = ov(), ZS((Gv = class extends aR {
        get __className__() {
          return "BufferSourceAudioTrack";
        }
        constructor(e2, t2, i2, r2) {
          super(t2.createOutputTrack(), i2, r2), mp(this, "source", void 0), mp(this, "_bufferSource", void 0), this.source = e2, this._bufferSource = t2, this._bufferSource.on(km.AUDIO_SOURCE_STATE_CHANGE, (e3) => {
            this.emit(_g.SOURCE_STATE_CHANGE, e3);
          });
          try {
            this._mediaStreamTrack = this._source.createOutputTrack();
          } catch (e3) {
          }
        }
        get currentState() {
          return this._bufferSource.currentState;
        }
        get duration() {
          return this._bufferSource.duration;
        }
        getCurrentTime() {
          return this._bufferSource.currentTime;
        }
        startProcessAudioBuffer(e2) {
          e2 && this._bufferSource.updateOptions(e2), this._bufferSource.startProcessAudioBuffer();
        }
        pauseProcessAudioBuffer() {
          this._bufferSource.pauseProcessAudioBuffer();
        }
        seekAudioBuffer(e2) {
          this._bufferSource.seekAudioBuffer(e2);
        }
        resumeProcessAudioBuffer() {
          this._bufferSource.resumeProcessAudioBuffer();
        }
        stopProcessAudioBuffer() {
          this._bufferSource.stopProcessAudioBuffer();
        }
      }).prototype, "startProcessAudioBuffer", [Pv, Lv], Object.getOwnPropertyDescriptor(Gv.prototype, "startProcessAudioBuffer"), Gv.prototype), ZS(Gv.prototype, "pauseProcessAudioBuffer", [kv, Mv], Object.getOwnPropertyDescriptor(Gv.prototype, "pauseProcessAudioBuffer"), Gv.prototype), ZS(Gv.prototype, "seekAudioBuffer", [Uv, xv], Object.getOwnPropertyDescriptor(Gv.prototype, "seekAudioBuffer"), Gv.prototype), ZS(Gv.prototype, "resumeProcessAudioBuffer", [Vv, jv], Object.getOwnPropertyDescriptor(Gv.prototype, "resumeProcessAudioBuffer"), Gv.prototype), ZS(Gv.prototype, "stopProcessAudioBuffer", [Fv, Bv], Object.getOwnPropertyDescriptor(Gv.prototype, "stopProcessAudioBuffer"), Gv.prototype), Gv);
      class uR extends aR {
        get __className__() {
          return "MixingAudioTrack";
        }
        get isActive() {
          for (const e2 of this.trackList)
            if (e2._enabled && !e2._isClosed && !e2.muted)
              return true;
          return false;
        }
        constructor() {
          const e2 = MT().createMediaStreamDestination();
          super(e2.stream.getAudioTracks()[0], void 0, MR(8, "track-mix-")), mp(this, "trackList", void 0), mp(this, "destNode", void 0);
          try {
            this._mediaStreamTrack = this._source.createOutputTrack();
          } catch (e3) {
          }
          this.destNode = e2, this.trackList = [];
        }
        hasAudioTrack(e2) {
          return -1 !== this.trackList.indexOf(e2);
        }
        addAudioTrack(e2) {
          -1 === this.trackList.indexOf(e2) ? (NE.debug("add ".concat(e2.getTrackId(), " to mixing track")), e2._source.outputNode.connect(this.destNode), this.trackList.push(e2), this.updateEncoderConfig()) : NE.debug("track ".concat(e2.getTrackId(), " is already added"));
        }
        removeAudioTrack(e2) {
          if (-1 !== this.trackList.indexOf(e2)) {
            NE.debug("remove ".concat(e2.getTrackId(), " from mixing track"));
            try {
              e2._source.outputNode.disconnect(this.destNode);
            } catch (e3) {
            }
            HR(this.trackList, e2), this.updateEncoderConfig();
          }
        }
        updateEncoderConfig() {
          const e2 = {};
          this.trackList.forEach((t2) => {
            t2._encoderConfig && ((t2._encoderConfig.bitrate || 0) > (e2.bitrate || 0) && (e2.bitrate = t2._encoderConfig.bitrate), (t2._encoderConfig.sampleRate || 0) > (e2.sampleRate || 0) && (e2.sampleRate = t2._encoderConfig.sampleRate), (t2._encoderConfig.sampleSize || 0) > (e2.sampleSize || 0) && (e2.sampleSize = t2._encoderConfig.sampleSize), t2._encoderConfig.stereo && (e2.stereo = true));
          }), this._encoderConfig = e2;
        }
      }
      class lR extends gE {
        constructor() {
          super(...arguments), mp(this, "resultStorage", /* @__PURE__ */ new Map());
        }
        setLocalAudioStats(e2, t2, i2) {
          this.record("AUDIO_INPUT_LEVEL_TOO_LOW", e2, this.checkAudioInputLevel(i2, t2)), this.record("SEND_AUDIO_BITRATE_TOO_LOW", e2, this.checkSendAudioBitrate(i2, t2));
        }
        setLocalVideoStats(e2, t2, i2) {
          this.record("SEND_VIDEO_BITRATE_TOO_LOW", e2, this.checkSendVideoBitrate(i2, t2)), this.record("FRAMERATE_INPUT_TOO_LOW", e2, this.checkFramerateInput(i2, t2)), this.record("FRAMERATE_SENT_TOO_LOW", e2, this.checkFramerateSent(i2));
        }
        setRemoteAudioStats(e2, t2) {
          const i2 = e2.getUserId();
          this.record("AUDIO_OUTPUT_LEVEL_TOO_LOW", i2, this.checkAudioOutputLevel(t2));
        }
        setRemoteVideoStats(e2, t2) {
          const i2 = e2.getUserId();
          this.record("RECV_VIDEO_DECODE_FAILED", i2, this.checkVideoDecode(t2));
        }
        record(e2, t2, i2) {
          this.resultStorage.has(e2) || this.resultStorage.set(e2, { result: [], isPrevNormal: true });
          const r2 = this.resultStorage.get(e2);
          if (r2 && (r2.result.push(i2), r2.result.length >= 5)) {
            const i3 = r2.result.includes(true);
            r2.isPrevNormal && !i3 && this.emit("exception", hR[e2], e2, t2), !r2.isPrevNormal && i3 && this.emit("exception", hR[e2] + 2e3, e2 + "_RECOVER", t2), r2.isPrevNormal = i3, r2.result = [];
          }
        }
        checkAudioOutputLevel(e2) {
          return !(e2.receiveBitrate > 0 && 0 === e2.receiveLevel);
        }
        checkAudioInputLevel(e2, t2) {
          return t2 instanceof uR && !t2.isActive || (!!t2.muted || 0 !== e2.sendVolumeLevel);
        }
        checkFramerateInput(e2, t2) {
          let i2 = null;
          t2._encoderConfig && t2._encoderConfig.frameRate && (i2 = RR(t2._encoderConfig.frameRate));
          const r2 = e2.captureFrameRate;
          return !i2 || !r2 || !(i2 > 10 && r2 < 5 || i2 < 10 && i2 >= 5 && r2 <= 1);
        }
        checkFramerateSent(e2) {
          return !(e2.captureFrameRate && e2.sendFrameRate && e2.captureFrameRate > 5 && e2.sendFrameRate <= 1);
        }
        checkSendVideoBitrate(e2, t2) {
          return !!t2.muted || 0 !== e2.sendBitrate;
        }
        checkSendAudioBitrate(e2, t2) {
          return t2 instanceof uR && !t2.isActive || (!!t2.muted || 0 !== e2.sendBitrate);
        }
        checkVideoDecode(e2) {
          return 0 === e2.receiveBitrate || 0 !== e2.decodeFrameRate;
        }
      }
      const hR = { FRAMERATE_INPUT_TOO_LOW: 1001, FRAMERATE_SENT_TOO_LOW: 1002, SEND_VIDEO_BITRATE_TOO_LOW: 1003, RECV_VIDEO_DECODE_FAILED: 1005, AUDIO_INPUT_LEVEL_TOO_LOW: 2001, AUDIO_OUTPUT_LEVEL_TOO_LOW: 2002, SEND_AUDIO_BITRATE_TOO_LOW: 2003 };
      const pR = new class {
        markSubscribeStart(e2, t2) {
          performance.mark("agora-web-sdk/".concat(e2, "/subscribe-").concat(t2));
        }
        markPublishStart(e2, t2) {
          performance.mark("agora-web-sdk/".concat(e2, "/publish-").concat(t2));
        }
        measureFromSubscribeStart(e2, t2) {
          const i2 = performance.getEntriesByName("agora-web-sdk/".concat(e2, "/subscribe-").concat(t2));
          if (i2.length > 0) {
            const e3 = i2[i2.length - 1];
            return Math.round(performance.now() - e3.startTime);
          }
          return 0;
        }
        measureFromPublishStart(e2, t2) {
          const i2 = performance.getEntriesByName("agora-web-sdk/".concat(e2, "/publish-").concat(t2));
          if (i2.length > 0) {
            const e3 = i2[i2.length - 1];
            return Math.round(performance.now() - e3.startTime);
          }
          return 0;
        }
      }();
      function _R(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function ER(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? _R(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : _R(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class fR {
        constructor(e2) {
          mp(this, "store", void 0), mp(this, "onStatsException", void 0), mp(this, "onUploadPublishDuration", void 0), mp(this, "localStats", /* @__PURE__ */ new Map()), mp(this, "remoteStats", /* @__PURE__ */ new Map()), mp(this, "updateStatsInterval", void 0), mp(this, "trafficStats", void 0), mp(this, "trafficStatsPeerList", []), mp(this, "uplinkStats", void 0), mp(this, "exceptionMonitor", void 0), mp(this, "p2pChannel", void 0), mp(this, "updateStats", () => {
            this.p2pChannel && (this.updateRemoteStats(this.p2pChannel), this.updateLocalStats(this.p2pChannel));
          }), this.store = e2, this.updateStatsInterval = window.setInterval(this.updateStats, 1e3), this.exceptionMonitor = new lR(), this.exceptionMonitor.on("exception", (e3, t2, i2) => {
            this.onStatsException && this.onStatsException(e3, t2, i2);
          });
        }
        reset() {
          this.localStats = /* @__PURE__ */ new Map(), this.remoteStats = /* @__PURE__ */ new Map(), this.trafficStats = void 0, this.trafficStatsPeerList = [], this.uplinkStats = void 0;
        }
        getLocalAudioTrackStats() {
          return this.localStats.get(Cg.LocalAudioTrack) || ER({}, Fm);
        }
        getLocalVideoTrackStats() {
          return this.localStats.get(Cg.LocalVideoTrack) || ER({}, Bm);
        }
        getRemoteAudioTrackStats(e2) {
          const t2 = (e3, t3) => {
            if (!this.trafficStats)
              return t3;
            const i3 = this.trafficStats.peer_delay.find((t4) => t4.peer_uid === e3);
            return i3 && (t3.publishDuration = i3.B_ppad + (Date.now() - this.trafficStats.timestamp)), t3;
          }, i2 = {};
          if (e2) {
            var r2;
            const n2 = null === (r2 = this.remoteStats.get(e2)) || void 0 === r2 ? void 0 : r2.audioStats;
            n2 && (i2[e2] = t2(e2, n2));
          } else
            Array.from(this.remoteStats.entries()).forEach((e3) => {
              let [r3, { audioStats: n2 }] = e3;
              n2 && (i2[r3] = t2(r3, n2));
            });
          return i2;
        }
        getRemoteNetworkQualityStats(e2) {
          const t2 = {};
          if (e2) {
            var i2;
            const r2 = null === (i2 = this.remoteStats.get(e2)) || void 0 === i2 ? void 0 : i2.networkStats;
            r2 && (t2[e2] = r2);
          } else
            Array.from(this.remoteStats.entries()).forEach((e3) => {
              let [i3, { networkStats: r2 }] = e3;
              r2 && (t2[i3] = r2);
            });
          return t2;
        }
        getRemoteVideoTrackStats(e2) {
          const t2 = (e3, t3) => {
            if (!this.trafficStats)
              return t3;
            const i3 = this.trafficStats.peer_delay.find((t4) => t4.peer_uid === e3);
            return i3 && (t3.publishDuration = i3.B_ppvd + (Date.now() - this.trafficStats.timestamp)), t3;
          }, i2 = {};
          if (e2) {
            var r2;
            const n2 = null === (r2 = this.remoteStats.get(e2)) || void 0 === r2 ? void 0 : r2.videoStats;
            n2 && (i2[e2] = t2(e2, n2));
          } else
            Array.from(this.remoteStats.entries()).forEach((e3) => {
              let [r3, { videoStats: n2 }] = e3;
              n2 && (i2[r3] = t2(r3, n2));
            });
          return i2;
        }
        getRTCStats() {
          let e2 = 0, t2 = 0, i2 = 0, r2 = 0;
          const n2 = this.localStats.get(Cg.LocalAudioTrack);
          n2 && (e2 += n2.sendBytes, t2 += n2.sendBitrate);
          const o2 = this.localStats.get(Cg.LocalVideoTrack);
          o2 && (e2 += o2.sendBytes, t2 += o2.sendBitrate);
          const s2 = this.localStats.get(Cg.LocalVideoLowTrack);
          s2 && (e2 += s2.sendBytes, t2 += s2.sendBitrate), this.remoteStats.forEach((e3) => {
            let { audioStats: t3, videoStats: n3 } = e3;
            t3 && (i2 += t3.receiveBytes, r2 += t3.receiveBitrate), n3 && (i2 += n3.receiveBytes, r2 += n3.receiveBitrate);
          });
          let a2 = 1;
          return this.trafficStats && (a2 += this.trafficStats.peer_delay.length), { Duration: 0, UserCount: a2, SendBitrate: t2, SendBytes: e2, RecvBytes: i2, RecvBitrate: r2, OutgoingAvailableBandwidth: this.uplinkStats ? this.uplinkStats.B_uab / 1e3 : 0, RTT: this.trafficStats ? 2 * this.trafficStats.B_acd : 0 };
        }
        addLocalStats(e2) {
          this.localStats.set(e2, void 0);
        }
        removeLocalStats(e2) {
          e2 ? this.localStats.delete(e2) : this.localStats.clear();
        }
        addRemoteStats(e2) {
          this.remoteStats.set(e2, {});
        }
        removeRemoteStats(e2) {
          e2 ? this.remoteStats.delete(e2) : this.remoteStats.clear();
        }
        addP2PChannel(e2) {
          this.p2pChannel = e2;
        }
        updateTrafficStats(e2) {
          e2.peer_delay = e2.peer_delay.filter((e3) => void 0 !== e3.B_ppad || void 0 !== e3.B_ppvd);
          e2.peer_delay.filter((e3) => -1 === this.trafficStatsPeerList.indexOf(e3.peer_uid)).forEach((e3) => {
            var t2;
            const i2 = null === (t2 = this.p2pChannel) || void 0 === t2 ? void 0 : t2.getRemoteMedia(e3.peer_uid), r2 = null != i2 && i2.videoSSRC ? pR.measureFromSubscribeStart(this.store.clientId, i2.videoSSRC) : 0, n2 = null != i2 && i2.audioSSRC ? pR.measureFromSubscribeStart(this.store.clientId, i2.audioSSRC) : 0;
            void 0 !== e3.B_ppad && void 0 !== e3.B_ppvd && (this.onUploadPublishDuration && this.onUploadPublishDuration(e3.peer_uid, e3.B_ppad, e3.B_ppvd, r2 > n2 ? r2 : n2), this.trafficStatsPeerList.push(e3.peer_uid));
          }), this.trafficStats = e2;
        }
        updateUplinkStats(e2) {
          this.uplinkStats && this.uplinkStats.B_fir !== e2.B_fir && NE.debug("[".concat(this.store.clientId, "]: Period fir changes to ").concat(e2.B_fir)), this.uplinkStats = e2;
        }
        static isRemoteVideoFreeze(e2, t2, i2) {
          if (!e2)
            return false;
          const r2 = !!i2 && t2.framesDecodeFreezeTime > i2.framesDecodeFreezeTime, n2 = !i2 || t2.framesDecodeCount > i2.framesDecodeCount;
          return r2 || !n2;
        }
        static isRemoteAudioFreeze(e2) {
          return !!e2 && e2._isFreeze();
        }
        isLocalVideoFreeze(e2) {
          return !(!e2.inputFrame || !e2.sentFrame) && (e2.inputFrame.frameRate > 5 && e2.sentFrame.frameRate < 3);
        }
        updateLocalStats(e2) {
          Array.from(this.localStats.entries()).forEach((t2) => {
            let [i2, r2] = t2;
            switch (i2) {
              case Cg.LocalVideoTrack:
              case Cg.LocalVideoLowTrack: {
                const t3 = r2, n2 = ER({}, Bm), o2 = e2.getStats(), s2 = e2.getLocalMedia(i2);
                if (o2) {
                  const i3 = o2.videoSend.find((e3) => e3.ssrc === (null == s2 ? void 0 : s2.ssrcs[0].ssrcId));
                  if (i3) {
                    const r3 = e2.getLocalVideoSize(), o3 = e2.getEncoderConfig(Cg.LocalVideoTrack);
                    "H264" !== i3.codec && "VP8" !== i3.codec && "VP9" !== i3.codec && "AV1X" !== i3.codec && "AV1" !== i3.codec || (n2.codecType = i3.codec), n2.sendBytes = i3.bytes, n2.sendBitrate = t3 ? 8 * Math.max(0, n2.sendBytes - t3.sendBytes) : 0, i3.inputFrame ? (n2.captureFrameRate = i3.inputFrame.frameRate, n2.captureResolutionHeight = i3.inputFrame.height, n2.captureResolutionWidth = i3.inputFrame.width) : r3 && (n2.captureResolutionWidth = r3.width, n2.captureResolutionHeight = r3.height), i3.sentFrame ? (n2.sendFrameRate = i3.sentFrame.frameRate, n2.sendResolutionHeight = i3.sentFrame.height, n2.sendResolutionWidth = i3.sentFrame.width) : r3 && (n2.sendResolutionWidth = r3.width, n2.sendResolutionHeight = r3.height), i3.avgEncodeMs && (n2.encodeDelay = i3.avgEncodeMs), o3 && o3.bitrateMax && (n2.targetSendBitrate = 1e3 * o3.bitrateMax), n2.sendPackets = i3.packets, n2.sendPacketsLost = i3.packetsLost, n2.totalDuration = t3 ? t3.totalDuration + 1 : 1, n2.totalFreezeTime = t3 ? t3.totalFreezeTime : 0, this.isLocalVideoFreeze(i3) && (n2.totalFreezeTime += 1);
                  }
                  this.trafficStats && (n2.sendPacketsLost = this.trafficStats.B_pvlr4 / 100);
                }
                this.localStats.set(i2, n2), n2 && s2 && this.exceptionMonitor.setLocalVideoStats(this.store.uid, s2.track, n2);
                break;
              }
              case Cg.LocalAudioTrack: {
                const t3 = r2, n2 = ER({}, Fm), o2 = e2.getStats(), s2 = e2.getLocalMedia(i2);
                if (o2) {
                  const i3 = o2.audioSend.find((e3) => e3.ssrc === (null == s2 ? void 0 : s2.ssrcs[0].ssrcId));
                  if (i3) {
                    if ("opus" !== i3.codec && "aac" !== i3.codec && "PCMU" !== i3.codec && "PCMA" !== i3.codec && "G722" !== i3.codec || (n2.codecType = i3.codec), i3.inputLevel)
                      n2.sendVolumeLevel = Math.round(32767 * i3.inputLevel);
                    else {
                      const t4 = e2.getLocalAudioVolume();
                      t4 && (n2.sendVolumeLevel = Math.round(32767 * t4));
                    }
                    n2.sendBytes = i3.bytes, n2.sendPackets = i3.packets, n2.sendPacketsLost = i3.packetsLost, n2.sendBitrate = t3 ? 8 * Math.max(0, n2.sendBytes - t3.sendBytes) : 0;
                  }
                }
                this.trafficStats && (n2.sendPacketsLost = this.trafficStats.B_pvlr4 / 100), this.localStats.set(Cg.LocalAudioTrack, n2), n2 && s2 && this.exceptionMonitor.setLocalAudioStats(this.store.uid, s2.track, n2);
                break;
              }
            }
          });
        }
        updateRemoteStats(e2) {
          Array.from(this.remoteStats.entries()).forEach((t2) => {
            let [i2, { videoStats: r2, audioStats: n2, videoPcStats: o2 }] = t2;
            const s2 = n2, a2 = r2, c2 = o2, d2 = ER({}, Gm), u2 = ER({}, Hm), l2 = ER({}, Wm), { audioTrack: h2, videoTrack: p2, audioSSRC: _2, videoSSRC: E2 } = e2.getRemoteMedia(i2), f2 = e2.getStats(), m2 = null == f2 ? void 0 : f2.audioRecv.find((e3) => e3.ssrc === _2), g2 = null == f2 ? void 0 : f2.videoRecv.find((e3) => e3.ssrc === E2), S2 = this.trafficStats && this.trafficStats.peer_delay.find((e3) => e3.peer_uid === i2);
            if (m2 && ("opus" !== m2.codec && "aac" !== m2.codec && "PCMU" !== m2.codec && "PCMA" !== m2.codec && "G722" !== m2.codec || (d2.codecType = m2.codec), m2.outputLevel ? d2.receiveLevel = Math.round(32767 * m2.outputLevel) : h2 && (d2.receiveLevel = Math.round(32767 * h2.getVolumeLevel())), d2.receiveBytes = m2.bytes, d2.receivePackets = m2.packets, d2.receivePacketsLost = m2.packetsLost, d2.packetLossRate = d2.receivePacketsLost / (d2.receivePackets + d2.receivePacketsLost), d2.receiveBitrate = s2 ? 8 * Math.max(0, d2.receiveBytes - s2.receiveBytes) : 0, d2.totalDuration = s2 ? s2.totalDuration + 1 : 1, d2.totalFreezeTime = s2 ? s2.totalFreezeTime : 0, d2.freezeRate = d2.totalFreezeTime / d2.totalDuration, d2.receiveDelay = m2.jitterBufferMs, d2.totalDuration > 10 && fR.isRemoteAudioFreeze(h2) && (d2.totalFreezeTime += 1)), g2) {
              "H264" !== g2.codec && "VP8" !== g2.codec && "VP9" !== g2.codec && "AV1X" !== g2.codec && "AV1" !== g2.codec || (u2.codecType = g2.codec), u2.receiveBytes = g2.bytes, u2.receiveBitrate = a2 ? 8 * Math.max(0, u2.receiveBytes - a2.receiveBytes) : 0, u2.decodeFrameRate = g2.decodeFrameRate < 0 ? 0 : g2.decodeFrameRate, u2.renderFrameRate = g2.decodeFrameRate < 0 ? 0 : g2.decodeFrameRate, g2.outputFrame && (u2.renderFrameRate = g2.outputFrame.frameRate), g2.receivedFrame ? (u2.receiveFrameRate = g2.receivedFrame.frameRate, u2.receiveResolutionHeight = g2.receivedFrame.height, u2.receiveResolutionWidth = g2.receivedFrame.width) : p2 && (u2.receiveResolutionHeight = p2._videoHeight || 0, u2.receiveResolutionWidth = p2._videoWidth || 0), void 0 !== g2.framesRateFirefox && (u2.receiveFrameRate = Math.round(g2.framesRateFirefox)), u2.receivePackets = g2.packets, u2.receivePacketsLost = g2.packetsLost, u2.packetLossRate = u2.receivePacketsLost / (u2.receivePackets + u2.receivePacketsLost), u2.totalDuration = a2 ? a2.totalDuration + 1 : 1, u2.totalFreezeTime = a2 ? a2.totalFreezeTime : 0, u2.receiveDelay = g2.jitterBufferMs || 0;
              const t3 = !!E2 && e2.getRemoteVideoIsReady(E2);
              p2 && t3 && fR.isRemoteVideoFreeze(p2, g2, c2) && (u2.totalFreezeTime += 1), u2.freezeRate = u2.totalFreezeTime / u2.totalDuration;
            }
            S2 && (d2.end2EndDelay = S2.B_ad, u2.end2EndDelay = S2.B_vd, d2.transportDelay = S2.B_ed, u2.transportDelay = S2.B_ed, d2.currentPacketLossRate = S2.B_ealr4 / 100, u2.currentPacketLossRate = S2.B_evlr4 / 100, l2.uplinkNetworkQuality = S2.B_punq ? S2.B_punq : 0, l2.downlinkNetworkQuality = S2.B_pdnq ? S2.B_pdnq : 0), this.remoteStats.set(i2, { audioStats: d2, videoStats: u2, videoPcStats: g2, networkStats: l2 }), h2 && this.exceptionMonitor.setRemoteAudioStats(h2, d2), p2 && this.exceptionMonitor.setRemoteVideoStats(p2, u2);
          });
        }
      }
      const mR = new class extends gE {
        get visibility() {
          return document.visibilityState;
        }
        get lastHiddenTime() {
          return this._lastHiddenTime;
        }
        get lastVisibleTime() {
          return this._lastVisibleTime;
        }
        constructor() {
          super(), mp(this, "_lastHiddenTime", 0), mp(this, "_lastVisibleTime", 0), document.addEventListener("visibilitychange", () => {
            "hidden" === document.visibilityState ? this._lastHiddenTime = performance.now() : this._lastVisibleTime = performance.now(), NE.debug("document visibility went ".concat(document.visibilityState)), this.emit("VISIBILITY_CHANGE", document.visibilityState);
          });
        }
      }();
      function gR(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function SR(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? gR(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : gR(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function TR(e2) {
        return e2.match(/^[\.\:\d]+$/) ? "".concat(e2.replace(/[^\d]/g, "-"), ".").concat(HE("TURN_DOMAIN")) : (NE.info("Cannot recognized as IP address ".concat(e2, ". Used As Host instead")), e2);
      }
      function vR(e2, t2) {
        var i2, r2;
        const n2 = HE("GATEWAY_DOMAINS");
        let o2 = n2[1] && -1 !== t2.indexOf(n2[1]) ? 1 : 0;
        e2.addresses = e2.addresses || [];
        const s2 = e2.addresses.map((e3) => e3.domain_prefix ? { address: "".concat(e3.domain_prefix, ".").concat(n2[o2++ % n2.length], ":").concat(e3.port) } : e3.ip.match(/^[\.\:\d]+$/) ? { ip: e3.ip, port: e3.port, address: "".concat(e3.ip.replace(/[^\d]/g, "-"), ".").concat(n2[o2++ % n2.length], ":").concat(e3.port) } : (NE.info("Cannot recognized as IP address ".concat(e3.ip, ". Used As Host instead")), { ip: e3.ip, port: e3.port, address: "".concat(e3.ip, ":").concat(e3.port) }));
        if (null !== (i2 = e2.detail) && void 0 !== i2 && i2[18] && "string" == typeof (null === (r2 = e2.detail) || void 0 === r2 ? void 0 : r2[18])) {
          const t3 = e2.detail[18], i3 = null == t3 ? void 0 : t3.split(";");
          for (let e3 = 0; e3 < i3.length; e3++) {
            var a2;
            const t4 = Ih(a2 = i3[e3]).call(a2);
            s2[e3] && t4 && (s2[e3].ip6 = t4);
          }
        }
        return { gatewayAddrs: s2, uid: e2.uid, cid: e2.cid, cert: e2.cert, vid: e2.detail && e2.detail[8], uni_lbs_ip: e2.detail && e2.detail[1], res: e2, csIp: e2.detail && e2.detail[502] };
      }
      function RR(e2) {
        return "number" == typeof e2 ? e2 : e2.exact || e2.ideal || e2.max || e2.min || 0;
      }
      function IR(e2) {
        const t2 = e2._encoderConfig;
        if (!t2)
          return {};
        const i2 = { resolution: t2.width && t2.height ? "".concat(RR(t2.width), "x").concat(RR(t2.height)) : void 0, maxVideoBW: t2.bitrateMax, minVideoBW: t2.bitrateMin };
        return "number" == typeof t2.frameRate ? (i2.maxFrameRate = t2.frameRate, i2.minFrameRate = t2.frameRate) : t2.frameRate && (i2.maxFrameRate = t2.frameRate.max || t2.frameRate.ideal || t2.frameRate.exact || t2.frameRate.min, i2.minFrameRate = t2.frameRate.min || t2.frameRate.ideal || t2.frameRate.exact || t2.frameRate.max), i2;
      }
      function yR(e2, t2, i2) {
        var r2;
        const n2 = t2.videoSend.find((t3) => t3.ssrc === e2);
        if (!n2)
          return null;
        const o2 = null == i2 || null === (r2 = i2.videoSend.find((t3) => t3.ssrc === e2)) || void 0 === r2 ? void 0 : r2.inputFrame, s2 = { id: MR(10, ""), timestamp: new Date(t2.timestamp).toISOString(), mediaType: "video", type: "ssrc", ssrc: n2.ssrc.toString() };
        return n2.inputFrame && (o2 && n2.inputFrame.height === o2.height || (s2.A_fhi = n2.inputFrame.height ? n2.inputFrame.height.toString() : "0"), o2 && n2.inputFrame.width === o2.width || (s2.A_fwi = n2.inputFrame.width ? n2.inputFrame.width.toString() : "0"), o2 && n2.inputFrame.frameRate === o2.frameRate || (s2.A_fri = n2.inputFrame.frameRate ? n2.inputFrame.frameRate.toString() : "0")), s2;
      }
      function CR(e2) {
        return e2 >= 0 && e2 < 0.17 ? 1 : e2 >= 0.17 && e2 < 0.36 ? 2 : e2 >= 0.36 && e2 < 0.59 ? 3 : e2 >= 0.59 && e2 <= 1 ? 4 : e2 > 1 ? 5 : 0;
      }
      function AR(e2, t2) {
        let i2, r2, n2 = void 0;
        switch (t2) {
          case Fg.CHOOSE_SERVER:
            i2 = 4096, r2 = "choose server";
            break;
          case Fg.CLOUD_PROXY:
            i2 = 1048576, r2 = "proxy";
            break;
          case Fg.CLOUD_PROXY_5:
            i2 = 4194304, r2 = "proxy5";
            break;
          case Fg.CLOUD_PROXY_FALLBACK:
            i2 = 4194310, r2 = "proxy fallback";
            break;
          default:
            throw new vE(TE.UNEXPECTED_ERROR, "multi unlibs response transformer get unknown service id", { csIp: e2.detail && e2.detail[502], retry: false });
        }
        if (e2.response_body.forEach((t3) => {
          t3.buffer && t3.buffer.flag === i2 && (n2 = { code: t3.buffer.code, addresses: (t3.buffer.edges_services || []).map((e3) => SR(SR({}, e3), {}, { ticket: t3.buffer.cert })), server_ts: e2.enter_ts, uid: t3.buffer.uid, cid: t3.buffer.cid, cname: t3.buffer.cname, detail: SR(SR({}, t3.buffer.detail), e2.detail), flag: t3.buffer.flag, opid: e2.opid, cert: t3.buffer.cert });
        }), !n2)
          throw new vE(TE.MULTI_UNILBS_RESPONSE_ERROR, "cannot parse response ".concat(r2, " from multi unilbs response"), { csIp: e2.detail && e2.detail[502] });
        return n2;
      }
      async function OR(e2, t2) {
        return await Cl.all(e2.addresses.map(async (e3) => ({ address: TR(e3.ip), tcpport: e3.port, udpport: e3.port, username: t2 && HE("ENCRYPT_PROXY_USERNAME_AND_PSW") && window.isSecureContext ? t2.toString() : kE.username, password: t2 && HE("ENCRYPT_PROXY_USERNAME_AND_PSW") && window.isSecureContext ? await ST(t2.toString()) : kE.password })));
      }
      function bR(e2, t2) {
        const i2 = t2._videoWidth || t2.getMediaStreamTrack(true).getSettings().width;
        return i2 || NE.warning("cannot get original video track's width, default scale down 4 times for low stream"), i2 ? i2 / RR(e2.width) : 4;
      }
      function wR(e2) {
        let { candidateType: t2, relayProtocol: i2, type: r2, address: n2, port: o2, protocol: s2 } = e2;
        return "local-candidate" === r2 ? { candidateType: t2, relayProtocol: i2, protocol: s2 } : { candidateType: t2, relayProtocol: i2, address: n2, port: o2, protocol: s2 };
      }
      function NR(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function DR(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? NR(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : NR(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function PR(e2) {
        return window.TextEncoder ? new TextEncoder().encode(e2).length : e2.length;
      }
      function LR(e2) {
        return new Cl((t2) => {
          window.setTimeout(t2, e2);
        });
      }
      function kR(e2) {
        const t2 = new vE(TE.TIMEOUT, "timeout");
        return new Cl((i2, r2) => {
          window.setTimeout(() => r2(t2), e2);
        });
      }
      function MR() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 7, t2 = arguments.length > 1 ? arguments[1] : void 0;
        const i2 = Math.random().toString(16).substr(2, e2).toLowerCase();
        return i2.length === e2 ? "".concat(t2).concat(i2) : "".concat(t2).concat(i2) + MR(e2 - i2.length, "");
      }
      function UR() {
        return MR(32, "").toUpperCase();
      }
      const xR = () => {
      };
      function VR(e2) {
        return new Cl((t2, i2) => {
          let r2 = false;
          const n2 = document.createElement("video");
          n2.setAttribute("autoplay", ""), n2.setAttribute("muted", ""), n2.muted = true, n2.autoplay = true, n2.setAttribute("playsinline", ""), n2.setAttribute("style", "position: fixed; top: 0; left: 0; width: 1px; height: 1px"), document.body.appendChild(n2);
          const o2 = Zh() ? "canplay" : "playing";
          n2.addEventListener(o2, () => {
            const e3 = n2.videoWidth, i3 = n2.videoHeight;
            !e3 && Qh() || (r2 = true, n2.srcObject = null, n2.remove(), t2([e3, i3]));
          }), n2.srcObject = new MediaStream([e2]), n2.play().catch(xR), setTimeout(() => {
            r2 || (n2.srcObject = null, n2.remove(), t2([n2.videoWidth, n2.videoHeight]));
          }, 4e3);
        });
      }
      function jR(e2) {
        return Cl.all(e2.map((e3) => e3.then((e4) => {
          throw e4;
        }, (e4) => e4))).then((e3) => {
          throw e3;
        }, (e3) => e3);
      }
      function FR(e2, t2) {
        for (var i2 = arguments.length, r2 = new Array(i2 > 2 ? i2 - 2 : 0), n2 = 2; n2 < i2; n2++)
          r2[n2 - 2] = arguments[n2];
        return 0 === e2.getListeners(t2).length ? Cl.reject(new vE(TE.UNEXPECTED_ERROR, "can not emit promise")) : new Cl((i3, n3) => {
          e2.emit(t2, ...r2, i3, n3);
        });
      }
      function BR(e2, t2) {
        if (0 === e2.getListeners(t2).length)
          return Cl.resolve();
        for (var i2 = arguments.length, r2 = new Array(i2 > 2 ? i2 - 2 : 0), n2 = 2; n2 < i2; n2++)
          r2[n2 - 2] = arguments[n2];
        return FR(e2, t2, ...r2);
      }
      function GR(e2, t2) {
        if (0 === e2.getListeners(t2).length)
          return null;
        for (var i2 = arguments.length, r2 = new Array(i2 > 2 ? i2 - 2 : 0), n2 = 2; n2 < i2; n2++)
          r2[n2 - 2] = arguments[n2];
        return WR(e2, t2, ...r2);
      }
      function WR(e2, t2) {
        let i2 = null, r2 = null;
        for (var n2 = arguments.length, o2 = new Array(n2 > 2 ? n2 - 2 : 0), s2 = 2; s2 < n2; s2++)
          o2[s2 - 2] = arguments[s2];
        if (e2.emit(t2, ...o2, (e3) => {
          i2 = e3;
        }, (e3) => {
          r2 = e3;
        }), null !== r2)
          throw r2;
        if (null === i2)
          throw new vE(TE.UNEXPECTED_ERROR, "handler is not sync");
        return i2;
      }
      function HR(e2, t2) {
        const i2 = e2.indexOf(t2);
        -1 !== i2 && e2.splice(i2, 1);
      }
      function KR(e2) {
        const t2 = [];
        return e2.forEach((e3) => {
          -1 === t2.indexOf(e3) && t2.push(e3);
        }), t2;
      }
      function YR(e2) {
        Cl.resolve().then(e2);
      }
      function qR(e2) {
        return JSON.parse(JSON.stringify(e2));
      }
      const JR = {};
      function XR(e2, t2) {
        JR[t2] || (JR[t2] = true, e2());
      }
      function zR(e2) {
        const t2 = window.atob(e2), i2 = new Uint8Array(new ArrayBuffer(t2.length));
        for (let e3 = 0; e3 < t2.length; e3 += 1)
          i2[e3] = t2.charCodeAt(e3);
        return i2;
      }
      function QR(e2) {
        let t2 = "";
        for (let i2 = 0; i2 < e2.length; i2 += 1)
          t2 += String.fromCharCode(e2[i2]);
        return window.btoa(t2);
      }
      const ZR = new class {
        constructor() {
          mp(this, "fnMap", /* @__PURE__ */ new Map());
        }
        throttleByKey(e2, t2, i2, r2) {
          for (var n2 = arguments.length, o2 = new Array(n2 > 4 ? n2 - 4 : 0), s2 = 4; s2 < n2; s2++)
            o2[s2 - 4] = arguments[s2];
          if (this.fnMap.has(t2)) {
            const n3 = this.fnMap.get(t2);
            if (n3.threshold !== i2) {
              n3.fn(...n3.args), clearTimeout(n3.timer);
              const s3 = window.setTimeout(() => {
                const e3 = this.fnMap.get(t2);
                e3 && e3.fn(...e3.args), this.fnMap.delete(t2);
              }, i2);
              this.fnMap.set(t2, { fn: e2, threshold: i2, timer: s3, args: o2, skipFn: r2 });
            } else
              n3.skipFn && n3.skipFn(...n3.args), this.fnMap.set(t2, DR(DR({}, n3), {}, { fn: e2, args: o2, skipFn: r2 }));
          } else {
            const n3 = window.setTimeout(() => {
              const e3 = this.fnMap.get(t2);
              e3 && e3.fn(...e3.args), this.fnMap.delete(t2);
            }, i2);
            this.fnMap.set(t2, { fn: e2, threshold: i2, timer: n3, args: o2, skipFn: r2 });
          }
        }
      }(), $R = ZR.throttleByKey.bind(ZR), eI = async (e2) => {
        let { fragementLength: t2, referenceList: i2, asyncMapHandler: r2, allFailedhandler: n2, promisesCollector: o2 } = e2, s2 = 0;
        const a2 = t2;
        let c2, d2 = 0;
        const u2 = async () => {
          const e3 = (() => {
            const e4 = s2 * a2, t3 = e4 + a2;
            return i2.slice(e4, t3).map(r2);
          })();
          o2 && o2.push(...e3);
          try {
            c2 = await jR(e3);
          } catch (e4) {
            if (d2 += a2, s2++, !(d2 >= i2.length))
              return void await u2();
            n2(e4);
          }
          e3.forEach((e4) => e4.cancel());
        };
        return await u2(), c2;
      };
      function tI(e2) {
        return "object" == typeof e2 && null !== e2 && !(e2 instanceof RegExp);
      }
      var iI = i, rI = nt("iterator"), nI = !iI(function() {
        var e2 = new URL("b?a=1&b=2&c=3", "http://a"), t2 = e2.searchParams, i2 = "";
        return e2.pathname = "c%20d", t2.forEach(function(e3, r2) {
          t2.delete("b"), i2 += r2 + e3;
        }), !e2.toJSON || !t2.sort || "http://a/c%20d?a=1&c=3" !== e2.href || "3" !== t2.get("c") || "a=1" !== String(new URLSearchParams("?a=1")) || !t2[rI] || "a" !== new URL("https://a@b").username || "b" !== new URLSearchParams(new URLSearchParams("a=b")).get("a") || "xn--e1aybc" !== new URL("http://ÑÐµÑÑ").host || "#%D0%B1" !== new URL("http://a#Ð±").hash || "a1c3" !== i2 || "x" !== new URL("http://x", void 0).host;
      }), oI = T, sI = d, aI = I, cI = i, dI = hn, uI = Qr, lI = y, hI = je, pI = F, _I = Object.assign, EI = Object.defineProperty, fI = sI([].concat), mI = !_I || cI(function() {
        if (oI && 1 !== _I({ b: 1 }, _I(EI({}, "a", { enumerable: true, get: function() {
          EI(this, "b", { value: 3, enumerable: false });
        } }), { b: 2 })).b)
          return true;
        var e2 = {}, t2 = {}, i2 = Symbol(), r2 = "abcdefghijklmnopqrst";
        return e2[i2] = 7, r2.split("").forEach(function(e3) {
          t2[e3] = e3;
        }), 7 != _I({}, e2)[i2] || dI(_I({}, t2)).join("") != r2;
      }) ? function(e2, t2) {
        for (var i2 = hI(e2), r2 = arguments.length, n2 = 1, o2 = uI.f, s2 = lI.f; r2 > n2; )
          for (var a2, c2 = pI(arguments[n2++]), d2 = o2 ? fI(dI(c2), o2(c2)) : dI(c2), u2 = d2.length, l2 = 0; u2 > l2; )
            a2 = d2[l2++], oI && !aI(s2, c2, a2) || (i2[a2] = c2[a2]);
        return i2;
      } : _I, gI = zt, SI = fo, TI = Wt, vI = I, RI = je, II = function(e2, t2, i2, r2) {
        try {
          return r2 ? t2(gI(i2)[0], i2[1]) : t2(i2);
        } catch (t3) {
          SI(e2, "throw", t3);
        }
      }, yI = Wn, CI = lc, AI = wi, OI = nf, bI = ho, wI = no, NI = h.Array, DI = d, PI = 2147483647, LI = /[^\0-\u007E]/, kI = /[.\u3002\uFF0E\uFF61]/g, MI = "Overflow: input needs wider integers to process", UI = h.RangeError, xI = DI(kI.exec), VI = Math.floor, jI = String.fromCharCode, FI = DI("".charCodeAt), BI = DI([].join), GI = DI([].push), WI = DI("".replace), HI = DI("".split), KI = DI("".toLowerCase), YI = function(e2) {
        return e2 + 22 + 75 * (e2 < 26);
      }, qI = function(e2, t2, i2) {
        var r2 = 0;
        for (e2 = i2 ? VI(e2 / 700) : e2 >> 1, e2 += VI(e2 / t2); e2 > 455; )
          e2 = VI(e2 / 35), r2 += 36;
        return VI(r2 + 36 * e2 / (e2 + 38));
      }, JI = function(e2) {
        var t2, i2, r2 = [], n2 = (e2 = function(e3) {
          for (var t3 = [], i3 = 0, r3 = e3.length; i3 < r3; ) {
            var n3 = FI(e3, i3++);
            if (n3 >= 55296 && n3 <= 56319 && i3 < r3) {
              var o3 = FI(e3, i3++);
              56320 == (64512 & o3) ? GI(t3, ((1023 & n3) << 10) + (1023 & o3) + 65536) : (GI(t3, n3), i3--);
            } else
              GI(t3, n3);
          }
          return t3;
        }(e2)).length, o2 = 128, s2 = 0, a2 = 72;
        for (t2 = 0; t2 < e2.length; t2++)
          (i2 = e2[t2]) < 128 && GI(r2, jI(i2));
        var c2 = r2.length, d2 = c2;
        for (c2 && GI(r2, "-"); d2 < n2; ) {
          var u2 = PI;
          for (t2 = 0; t2 < e2.length; t2++)
            (i2 = e2[t2]) >= o2 && i2 < u2 && (u2 = i2);
          var l2 = d2 + 1;
          if (u2 - o2 > VI((PI - s2) / l2))
            throw UI(MI);
          for (s2 += (u2 - o2) * l2, o2 = u2, t2 = 0; t2 < e2.length; t2++) {
            if ((i2 = e2[t2]) < o2 && ++s2 > PI)
              throw UI(MI);
            if (i2 == o2) {
              for (var h2 = s2, p2 = 36; ; ) {
                var _2 = p2 <= a2 ? 1 : p2 >= a2 + 26 ? 26 : p2 - a2;
                if (h2 < _2)
                  break;
                var E2 = h2 - _2, f2 = 36 - _2;
                GI(r2, jI(YI(_2 + E2 % f2))), h2 = VI(E2 / f2), p2 += 36;
              }
              GI(r2, jI(YI(h2))), a2 = qI(s2, l2, d2 == c2), s2 = 0, d2++;
            }
          }
          s2++, o2++;
        }
        return BI(r2, "");
      }, XI = h.TypeError, zI = Ri, QI = h, ZI = $, $I = I, ey = d, ty = nI, iy = Fs, ry = Ua, ny = na, oy = la, sy = Ps, ay = Wa, cy = g, dy = Ge, uy = Wt, ly = $n, hy = zt, py = q, _y = Lo, Ey = Pn, fy = N, my = ho, gy = no, Sy = function(e2, t2) {
        if (e2 < t2)
          throw XI("Not enough arguments");
        return e2;
      }, Ty = ff, vy = nt("iterator"), Ry = "URLSearchParams", Iy = "URLSearchParamsIterator", yy = sy.set, Cy = sy.getterFor(Ry), Ay = sy.getterFor(Iy), Oy = ZI("fetch"), by = ZI("Request"), wy = ZI("Headers"), Ny = by && by.prototype, Dy = wy && wy.prototype, Py = QI.RegExp, Ly = QI.TypeError, ky = QI.decodeURIComponent, My = QI.encodeURIComponent, Uy = ey("".charAt), xy = ey([].join), Vy = ey([].push), jy = ey("".replace), Fy = ey([].shift), By = ey([].splice), Gy = ey("".split), Wy = ey("".slice), Hy = /\+/g, Ky = Array(4), Yy = function(e2) {
        return Ky[e2 - 1] || (Ky[e2 - 1] = Py("((?:%[\\da-f]{2}){" + e2 + "})", "gi"));
      }, qy = function(e2) {
        try {
          return ky(e2);
        } catch (t2) {
          return e2;
        }
      }, Jy = function(e2) {
        var t2 = jy(e2, Hy, " "), i2 = 4;
        try {
          return ky(t2);
        } catch (e3) {
          for (; i2; )
            t2 = jy(t2, Yy(i2--), qy);
          return t2;
        }
      }, Xy = /[!'()~]|%20/g, zy = { "!": "%21", "'": "%27", "(": "%28", ")": "%29", "~": "%7E", "%20": "+" }, Qy = function(e2) {
        return zy[e2];
      }, Zy = function(e2) {
        return jy(My(e2), Xy, Qy);
      }, $y = oy(function(e2, t2) {
        yy(this, { type: Iy, iterator: my(Cy(e2).entries), kind: t2 });
      }, "Iterator", function() {
        var e2 = Ay(this), t2 = e2.kind, i2 = e2.iterator.next(), r2 = i2.value;
        return i2.done || (i2.value = "keys" === t2 ? r2.key : "values" === t2 ? r2.value : [r2.key, r2.value]), i2;
      }, true), eC = function(e2) {
        this.entries = [], this.url = null, void 0 !== e2 && (py(e2) ? this.parseObject(e2) : this.parseQuery("string" == typeof e2 ? "?" === Uy(e2, 0) ? Wy(e2, 1) : e2 : _y(e2)));
      };
      eC.prototype = { type: Ry, bindURL: function(e2) {
        this.url = e2, this.update();
      }, parseObject: function(e2) {
        var t2, i2, r2, n2, o2, s2, a2, c2 = gy(e2);
        if (c2)
          for (i2 = (t2 = my(e2, c2)).next; !(r2 = $I(i2, t2)).done; ) {
            if (o2 = (n2 = my(hy(r2.value))).next, (s2 = $I(o2, n2)).done || (a2 = $I(o2, n2)).done || !$I(o2, n2).done)
              throw Ly("Expected sequence with length 2");
            Vy(this.entries, { key: _y(s2.value), value: _y(a2.value) });
          }
        else
          for (var d2 in e2)
            dy(e2, d2) && Vy(this.entries, { key: d2, value: _y(e2[d2]) });
      }, parseQuery: function(e2) {
        if (e2)
          for (var t2, i2, r2 = Gy(e2, "&"), n2 = 0; n2 < r2.length; )
            (t2 = r2[n2++]).length && (i2 = Gy(t2, "="), Vy(this.entries, { key: Jy(Fy(i2)), value: Jy(xy(i2, "=")) }));
      }, serialize: function() {
        for (var e2, t2 = this.entries, i2 = [], r2 = 0; r2 < t2.length; )
          e2 = t2[r2++], Vy(i2, Zy(e2.key) + "=" + Zy(e2.value));
        return xy(i2, "&");
      }, update: function() {
        this.entries.length = 0, this.parseQuery(this.url.query);
      }, updateURL: function() {
        this.url && this.url.update();
      } };
      var tC = function() {
        ay(this, iC);
        var e2 = arguments.length > 0 ? arguments[0] : void 0;
        yy(this, new eC(e2));
      }, iC = tC.prototype;
      if (ry(iC, { append: function(e2, t2) {
        Sy(arguments.length, 2);
        var i2 = Cy(this);
        Vy(i2.entries, { key: _y(e2), value: _y(t2) }), i2.updateURL();
      }, delete: function(e2) {
        Sy(arguments.length, 1);
        for (var t2 = Cy(this), i2 = t2.entries, r2 = _y(e2), n2 = 0; n2 < i2.length; )
          i2[n2].key === r2 ? By(i2, n2, 1) : n2++;
        t2.updateURL();
      }, get: function(e2) {
        Sy(arguments.length, 1);
        for (var t2 = Cy(this).entries, i2 = _y(e2), r2 = 0; r2 < t2.length; r2++)
          if (t2[r2].key === i2)
            return t2[r2].value;
        return null;
      }, getAll: function(e2) {
        Sy(arguments.length, 1);
        for (var t2 = Cy(this).entries, i2 = _y(e2), r2 = [], n2 = 0; n2 < t2.length; n2++)
          t2[n2].key === i2 && Vy(r2, t2[n2].value);
        return r2;
      }, has: function(e2) {
        Sy(arguments.length, 1);
        for (var t2 = Cy(this).entries, i2 = _y(e2), r2 = 0; r2 < t2.length; )
          if (t2[r2++].key === i2)
            return true;
        return false;
      }, set: function(e2, t2) {
        Sy(arguments.length, 1);
        for (var i2, r2 = Cy(this), n2 = r2.entries, o2 = false, s2 = _y(e2), a2 = _y(t2), c2 = 0; c2 < n2.length; c2++)
          (i2 = n2[c2]).key === s2 && (o2 ? By(n2, c2--, 1) : (o2 = true, i2.value = a2));
        o2 || Vy(n2, { key: s2, value: a2 }), r2.updateURL();
      }, sort: function() {
        var e2 = Cy(this);
        Ty(e2.entries, function(e3, t2) {
          return e3.key > t2.key ? 1 : -1;
        }), e2.updateURL();
      }, forEach: function(e2) {
        for (var t2, i2 = Cy(this).entries, r2 = uy(e2, arguments.length > 1 ? arguments[1] : void 0), n2 = 0; n2 < i2.length; )
          r2((t2 = i2[n2++]).value, t2.key, this);
      }, keys: function() {
        return new $y(this, "keys");
      }, values: function() {
        return new $y(this, "values");
      }, entries: function() {
        return new $y(this, "entries");
      } }, { enumerable: true }), iy(iC, vy, iC.entries, { name: "entries" }), iy(iC, "toString", function() {
        return Cy(this).serialize();
      }, { enumerable: true }), ny(tC, Ry), zI({ global: true, forced: !ty }, { URLSearchParams: tC }), !ty && cy(wy)) {
        var rC = ey(Dy.has), nC = ey(Dy.set), oC = function(e2) {
          if (py(e2)) {
            var t2, i2 = e2.body;
            if (ly(i2) === Ry)
              return t2 = e2.headers ? new wy(e2.headers) : new wy(), rC(t2, "content-type") || nC(t2, "content-type", "application/x-www-form-urlencoded;charset=UTF-8"), Ey(e2, { body: fy(0, _y(i2)), headers: fy(0, t2) });
          }
          return e2;
        };
        if (cy(Oy) && zI({ global: true, enumerable: true, forced: true }, { fetch: function(e2) {
          return Oy(e2, arguments.length > 1 ? oC(arguments[1]) : {});
        } }), cy(by)) {
          var sC = function(e2) {
            return ay(this, Ny), new by(e2, arguments.length > 1 ? oC(arguments[1]) : {});
          };
          Ny.constructor = sC, sC.prototype = Ny, zI({ global: true, forced: true }, { Request: sC });
        }
      }
      var aC, cC = { URLSearchParams: tC, getState: Cy }, dC = Ri, uC = T, lC = nI, hC = h, pC = Wt, _C = d, EC = dn.f, fC = Fs, mC = Wa, gC = Ge, SC = mI, TC = function(e2) {
        var t2 = RI(e2), i2 = CI(this), r2 = arguments.length, n2 = r2 > 1 ? arguments[1] : void 0, o2 = void 0 !== n2;
        o2 && (n2 = TI(n2, r2 > 2 ? arguments[2] : void 0));
        var s2, a2, c2, d2, u2, l2, h2 = wI(t2), p2 = 0;
        if (!h2 || this == NI && yI(h2))
          for (s2 = AI(t2), a2 = i2 ? new this(s2) : NI(s2); s2 > p2; p2++)
            l2 = o2 ? n2(t2[p2], p2) : t2[p2], OI(a2, p2, l2);
        else
          for (u2 = (d2 = bI(t2, h2)).next, a2 = i2 ? new this() : []; !(c2 = vI(u2, d2)).done; p2++)
            l2 = o2 ? II(d2, n2, [c2.value, p2], true) : c2.value, OI(a2, p2, l2);
        return a2.length = p2, a2;
      }, vC = uf, RC = sl.codeAt, IC = function(e2) {
        var t2, i2, r2 = [], n2 = HI(WI(KI(e2), kI, "."), ".");
        for (t2 = 0; t2 < n2.length; t2++)
          i2 = n2[t2], GI(r2, xI(LI, i2) ? "xn--" + JI(i2) : i2);
        return BI(r2, ".");
      }, yC = Lo, CC = na, AC = cC, OC = Ps, bC = OC.set, wC = OC.getterFor("URL"), NC = AC.URLSearchParams, DC = AC.getState, PC = hC.URL, LC = hC.TypeError, kC = hC.parseInt, MC = Math.floor, UC = Math.pow, xC = _C("".charAt), VC = _C(/./.exec), jC = _C([].join), FC = _C(1 .toString), BC = _C([].pop), GC = _C([].push), WC = _C("".replace), HC = _C([].shift), KC = _C("".split), YC = _C("".slice), qC = _C("".toLowerCase), JC = _C([].unshift), XC = "Invalid scheme", zC = "Invalid host", QC = "Invalid port", ZC = /[a-z]/i, $C = /[\d+-.a-z]/i, eA = /\d/, tA = /^0x/i, iA = /^[0-7]+$/, rA = /^\d+$/, nA = /^[\da-f]+$/i, oA = /[\0\t\n\r #%/:<>?@[\\\]^|]/, sA = /[\0\t\n\r #/:<>?@[\\\]^|]/, aA = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g, cA = /[\t\n\r]/g, dA = function(e2) {
        var t2, i2, r2, n2;
        if ("number" == typeof e2) {
          for (t2 = [], i2 = 0; i2 < 4; i2++)
            JC(t2, e2 % 256), e2 = MC(e2 / 256);
          return jC(t2, ".");
        }
        if ("object" == typeof e2) {
          for (t2 = "", r2 = function(e3) {
            for (var t3 = null, i3 = 1, r3 = null, n3 = 0, o2 = 0; o2 < 8; o2++)
              0 !== e3[o2] ? (n3 > i3 && (t3 = r3, i3 = n3), r3 = null, n3 = 0) : (null === r3 && (r3 = o2), ++n3);
            return n3 > i3 && (t3 = r3, i3 = n3), t3;
          }(e2), i2 = 0; i2 < 8; i2++)
            n2 && 0 === e2[i2] || (n2 && (n2 = false), r2 === i2 ? (t2 += i2 ? ":" : "::", n2 = true) : (t2 += FC(e2[i2], 16), i2 < 7 && (t2 += ":")));
          return "[" + t2 + "]";
        }
        return e2;
      }, uA = {}, lA = SC({}, uA, { " ": 1, '"': 1, "<": 1, ">": 1, "`": 1 }), hA = SC({}, lA, { "#": 1, "?": 1, "{": 1, "}": 1 }), pA = SC({}, hA, { "/": 1, ":": 1, ";": 1, "=": 1, "@": 1, "[": 1, "\\": 1, "]": 1, "^": 1, "|": 1 }), _A = function(e2, t2) {
        var i2 = RC(e2, 0);
        return i2 > 32 && i2 < 127 && !gC(t2, e2) ? e2 : encodeURIComponent(e2);
      }, EA = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 }, fA = function(e2, t2) {
        var i2;
        return 2 == e2.length && VC(ZC, xC(e2, 0)) && (":" == (i2 = xC(e2, 1)) || !t2 && "|" == i2);
      }, mA = function(e2) {
        var t2;
        return e2.length > 1 && fA(YC(e2, 0, 2)) && (2 == e2.length || "/" === (t2 = xC(e2, 2)) || "\\" === t2 || "?" === t2 || "#" === t2);
      }, gA = function(e2) {
        return "." === e2 || "%2e" === qC(e2);
      }, SA = {}, TA = {}, vA = {}, RA = {}, IA = {}, yA = {}, CA = {}, AA = {}, OA = {}, bA = {}, wA = {}, NA = {}, DA = {}, PA = {}, LA = {}, kA = {}, MA = {}, UA = {}, xA = {}, VA = {}, jA = {}, FA = function(e2, t2, i2) {
        var r2, n2, o2, s2 = yC(e2);
        if (t2) {
          if (n2 = this.parse(s2))
            throw LC(n2);
          this.searchParams = null;
        } else {
          if (void 0 !== i2 && (r2 = new FA(i2, true)), n2 = this.parse(s2, null, r2))
            throw LC(n2);
          (o2 = DC(new NC())).bindURL(this), this.searchParams = o2;
        }
      };
      FA.prototype = { type: "URL", parse: function(e2, t2, i2) {
        var r2, n2, o2, s2, a2, c2 = this, d2 = t2 || SA, u2 = 0, l2 = "", h2 = false, p2 = false, _2 = false;
        for (e2 = yC(e2), t2 || (c2.scheme = "", c2.username = "", c2.password = "", c2.host = null, c2.port = null, c2.path = [], c2.query = null, c2.fragment = null, c2.cannotBeABaseURL = false, e2 = WC(e2, aA, "")), e2 = WC(e2, cA, ""), r2 = TC(e2); u2 <= r2.length; ) {
          switch (n2 = r2[u2], d2) {
            case SA:
              if (!n2 || !VC(ZC, n2)) {
                if (t2)
                  return XC;
                d2 = vA;
                continue;
              }
              l2 += qC(n2), d2 = TA;
              break;
            case TA:
              if (n2 && (VC($C, n2) || "+" == n2 || "-" == n2 || "." == n2))
                l2 += qC(n2);
              else {
                if (":" != n2) {
                  if (t2)
                    return XC;
                  l2 = "", d2 = vA, u2 = 0;
                  continue;
                }
                if (t2 && (c2.isSpecial() != gC(EA, l2) || "file" == l2 && (c2.includesCredentials() || null !== c2.port) || "file" == c2.scheme && !c2.host))
                  return;
                if (c2.scheme = l2, t2)
                  return void (c2.isSpecial() && EA[c2.scheme] == c2.port && (c2.port = null));
                l2 = "", "file" == c2.scheme ? d2 = PA : c2.isSpecial() && i2 && i2.scheme == c2.scheme ? d2 = RA : c2.isSpecial() ? d2 = AA : "/" == r2[u2 + 1] ? (d2 = IA, u2++) : (c2.cannotBeABaseURL = true, GC(c2.path, ""), d2 = xA);
              }
              break;
            case vA:
              if (!i2 || i2.cannotBeABaseURL && "#" != n2)
                return XC;
              if (i2.cannotBeABaseURL && "#" == n2) {
                c2.scheme = i2.scheme, c2.path = vC(i2.path), c2.query = i2.query, c2.fragment = "", c2.cannotBeABaseURL = true, d2 = jA;
                break;
              }
              d2 = "file" == i2.scheme ? PA : yA;
              continue;
            case RA:
              if ("/" != n2 || "/" != r2[u2 + 1]) {
                d2 = yA;
                continue;
              }
              d2 = OA, u2++;
              break;
            case IA:
              if ("/" == n2) {
                d2 = bA;
                break;
              }
              d2 = UA;
              continue;
            case yA:
              if (c2.scheme = i2.scheme, n2 == aC)
                c2.username = i2.username, c2.password = i2.password, c2.host = i2.host, c2.port = i2.port, c2.path = vC(i2.path), c2.query = i2.query;
              else if ("/" == n2 || "\\" == n2 && c2.isSpecial())
                d2 = CA;
              else if ("?" == n2)
                c2.username = i2.username, c2.password = i2.password, c2.host = i2.host, c2.port = i2.port, c2.path = vC(i2.path), c2.query = "", d2 = VA;
              else {
                if ("#" != n2) {
                  c2.username = i2.username, c2.password = i2.password, c2.host = i2.host, c2.port = i2.port, c2.path = vC(i2.path), c2.path.length--, d2 = UA;
                  continue;
                }
                c2.username = i2.username, c2.password = i2.password, c2.host = i2.host, c2.port = i2.port, c2.path = vC(i2.path), c2.query = i2.query, c2.fragment = "", d2 = jA;
              }
              break;
            case CA:
              if (!c2.isSpecial() || "/" != n2 && "\\" != n2) {
                if ("/" != n2) {
                  c2.username = i2.username, c2.password = i2.password, c2.host = i2.host, c2.port = i2.port, d2 = UA;
                  continue;
                }
                d2 = bA;
              } else
                d2 = OA;
              break;
            case AA:
              if (d2 = OA, "/" != n2 || "/" != xC(l2, u2 + 1))
                continue;
              u2++;
              break;
            case OA:
              if ("/" != n2 && "\\" != n2) {
                d2 = bA;
                continue;
              }
              break;
            case bA:
              if ("@" == n2) {
                h2 && (l2 = "%40" + l2), h2 = true, o2 = TC(l2);
                for (var E2 = 0; E2 < o2.length; E2++) {
                  var f2 = o2[E2];
                  if (":" != f2 || _2) {
                    var m2 = _A(f2, pA);
                    _2 ? c2.password += m2 : c2.username += m2;
                  } else
                    _2 = true;
                }
                l2 = "";
              } else if (n2 == aC || "/" == n2 || "?" == n2 || "#" == n2 || "\\" == n2 && c2.isSpecial()) {
                if (h2 && "" == l2)
                  return "Invalid authority";
                u2 -= TC(l2).length + 1, l2 = "", d2 = wA;
              } else
                l2 += n2;
              break;
            case wA:
            case NA:
              if (t2 && "file" == c2.scheme) {
                d2 = kA;
                continue;
              }
              if (":" != n2 || p2) {
                if (n2 == aC || "/" == n2 || "?" == n2 || "#" == n2 || "\\" == n2 && c2.isSpecial()) {
                  if (c2.isSpecial() && "" == l2)
                    return zC;
                  if (t2 && "" == l2 && (c2.includesCredentials() || null !== c2.port))
                    return;
                  if (s2 = c2.parseHost(l2))
                    return s2;
                  if (l2 = "", d2 = MA, t2)
                    return;
                  continue;
                }
                "[" == n2 ? p2 = true : "]" == n2 && (p2 = false), l2 += n2;
              } else {
                if ("" == l2)
                  return zC;
                if (s2 = c2.parseHost(l2))
                  return s2;
                if (l2 = "", d2 = DA, t2 == NA)
                  return;
              }
              break;
            case DA:
              if (!VC(eA, n2)) {
                if (n2 == aC || "/" == n2 || "?" == n2 || "#" == n2 || "\\" == n2 && c2.isSpecial() || t2) {
                  if ("" != l2) {
                    var g2 = kC(l2, 10);
                    if (g2 > 65535)
                      return QC;
                    c2.port = c2.isSpecial() && g2 === EA[c2.scheme] ? null : g2, l2 = "";
                  }
                  if (t2)
                    return;
                  d2 = MA;
                  continue;
                }
                return QC;
              }
              l2 += n2;
              break;
            case PA:
              if (c2.scheme = "file", "/" == n2 || "\\" == n2)
                d2 = LA;
              else {
                if (!i2 || "file" != i2.scheme) {
                  d2 = UA;
                  continue;
                }
                if (n2 == aC)
                  c2.host = i2.host, c2.path = vC(i2.path), c2.query = i2.query;
                else if ("?" == n2)
                  c2.host = i2.host, c2.path = vC(i2.path), c2.query = "", d2 = VA;
                else {
                  if ("#" != n2) {
                    mA(jC(vC(r2, u2), "")) || (c2.host = i2.host, c2.path = vC(i2.path), c2.shortenPath()), d2 = UA;
                    continue;
                  }
                  c2.host = i2.host, c2.path = vC(i2.path), c2.query = i2.query, c2.fragment = "", d2 = jA;
                }
              }
              break;
            case LA:
              if ("/" == n2 || "\\" == n2) {
                d2 = kA;
                break;
              }
              i2 && "file" == i2.scheme && !mA(jC(vC(r2, u2), "")) && (fA(i2.path[0], true) ? GC(c2.path, i2.path[0]) : c2.host = i2.host), d2 = UA;
              continue;
            case kA:
              if (n2 == aC || "/" == n2 || "\\" == n2 || "?" == n2 || "#" == n2) {
                if (!t2 && fA(l2))
                  d2 = UA;
                else if ("" == l2) {
                  if (c2.host = "", t2)
                    return;
                  d2 = MA;
                } else {
                  if (s2 = c2.parseHost(l2))
                    return s2;
                  if ("localhost" == c2.host && (c2.host = ""), t2)
                    return;
                  l2 = "", d2 = MA;
                }
                continue;
              }
              l2 += n2;
              break;
            case MA:
              if (c2.isSpecial()) {
                if (d2 = UA, "/" != n2 && "\\" != n2)
                  continue;
              } else if (t2 || "?" != n2)
                if (t2 || "#" != n2) {
                  if (n2 != aC && (d2 = UA, "/" != n2))
                    continue;
                } else
                  c2.fragment = "", d2 = jA;
              else
                c2.query = "", d2 = VA;
              break;
            case UA:
              if (n2 == aC || "/" == n2 || "\\" == n2 && c2.isSpecial() || !t2 && ("?" == n2 || "#" == n2)) {
                if (".." === (a2 = qC(a2 = l2)) || "%2e." === a2 || ".%2e" === a2 || "%2e%2e" === a2 ? (c2.shortenPath(), "/" == n2 || "\\" == n2 && c2.isSpecial() || GC(c2.path, "")) : gA(l2) ? "/" == n2 || "\\" == n2 && c2.isSpecial() || GC(c2.path, "") : ("file" == c2.scheme && !c2.path.length && fA(l2) && (c2.host && (c2.host = ""), l2 = xC(l2, 0) + ":"), GC(c2.path, l2)), l2 = "", "file" == c2.scheme && (n2 == aC || "?" == n2 || "#" == n2))
                  for (; c2.path.length > 1 && "" === c2.path[0]; )
                    HC(c2.path);
                "?" == n2 ? (c2.query = "", d2 = VA) : "#" == n2 && (c2.fragment = "", d2 = jA);
              } else
                l2 += _A(n2, hA);
              break;
            case xA:
              "?" == n2 ? (c2.query = "", d2 = VA) : "#" == n2 ? (c2.fragment = "", d2 = jA) : n2 != aC && (c2.path[0] += _A(n2, uA));
              break;
            case VA:
              t2 || "#" != n2 ? n2 != aC && ("'" == n2 && c2.isSpecial() ? c2.query += "%27" : c2.query += "#" == n2 ? "%23" : _A(n2, uA)) : (c2.fragment = "", d2 = jA);
              break;
            case jA:
              n2 != aC && (c2.fragment += _A(n2, lA));
          }
          u2++;
        }
      }, parseHost: function(e2) {
        var t2, i2, r2;
        if ("[" == xC(e2, 0)) {
          if ("]" != xC(e2, e2.length - 1))
            return zC;
          if (!(t2 = function(e3) {
            var t3, i3, r3, n2, o2, s2, a2, c2 = [0, 0, 0, 0, 0, 0, 0, 0], d2 = 0, u2 = null, l2 = 0, h2 = function() {
              return xC(e3, l2);
            };
            if (":" == h2()) {
              if (":" != xC(e3, 1))
                return;
              l2 += 2, u2 = ++d2;
            }
            for (; h2(); ) {
              if (8 == d2)
                return;
              if (":" != h2()) {
                for (t3 = i3 = 0; i3 < 4 && VC(nA, h2()); )
                  t3 = 16 * t3 + kC(h2(), 16), l2++, i3++;
                if ("." == h2()) {
                  if (0 == i3)
                    return;
                  if (l2 -= i3, d2 > 6)
                    return;
                  for (r3 = 0; h2(); ) {
                    if (n2 = null, r3 > 0) {
                      if (!("." == h2() && r3 < 4))
                        return;
                      l2++;
                    }
                    if (!VC(eA, h2()))
                      return;
                    for (; VC(eA, h2()); ) {
                      if (o2 = kC(h2(), 10), null === n2)
                        n2 = o2;
                      else {
                        if (0 == n2)
                          return;
                        n2 = 10 * n2 + o2;
                      }
                      if (n2 > 255)
                        return;
                      l2++;
                    }
                    c2[d2] = 256 * c2[d2] + n2, 2 != ++r3 && 4 != r3 || d2++;
                  }
                  if (4 != r3)
                    return;
                  break;
                }
                if (":" == h2()) {
                  if (l2++, !h2())
                    return;
                } else if (h2())
                  return;
                c2[d2++] = t3;
              } else {
                if (null !== u2)
                  return;
                l2++, u2 = ++d2;
              }
            }
            if (null !== u2)
              for (s2 = d2 - u2, d2 = 7; 0 != d2 && s2 > 0; )
                a2 = c2[d2], c2[d2--] = c2[u2 + s2 - 1], c2[u2 + --s2] = a2;
            else if (8 != d2)
              return;
            return c2;
          }(YC(e2, 1, -1))))
            return zC;
          this.host = t2;
        } else if (this.isSpecial()) {
          if (e2 = IC(e2), VC(oA, e2))
            return zC;
          if (null === (t2 = function(e3) {
            var t3, i3, r3, n2, o2, s2, a2, c2 = KC(e3, ".");
            if (c2.length && "" == c2[c2.length - 1] && c2.length--, (t3 = c2.length) > 4)
              return e3;
            for (i3 = [], r3 = 0; r3 < t3; r3++) {
              if ("" == (n2 = c2[r3]))
                return e3;
              if (o2 = 10, n2.length > 1 && "0" == xC(n2, 0) && (o2 = VC(tA, n2) ? 16 : 8, n2 = YC(n2, 8 == o2 ? 1 : 2)), "" === n2)
                s2 = 0;
              else {
                if (!VC(10 == o2 ? rA : 8 == o2 ? iA : nA, n2))
                  return e3;
                s2 = kC(n2, o2);
              }
              GC(i3, s2);
            }
            for (r3 = 0; r3 < t3; r3++)
              if (s2 = i3[r3], r3 == t3 - 1) {
                if (s2 >= UC(256, 5 - t3))
                  return null;
              } else if (s2 > 255)
                return null;
            for (a2 = BC(i3), r3 = 0; r3 < i3.length; r3++)
              a2 += i3[r3] * UC(256, 3 - r3);
            return a2;
          }(e2)))
            return zC;
          this.host = t2;
        } else {
          if (VC(sA, e2))
            return zC;
          for (t2 = "", i2 = TC(e2), r2 = 0; r2 < i2.length; r2++)
            t2 += _A(i2[r2], uA);
          this.host = t2;
        }
      }, cannotHaveUsernamePasswordPort: function() {
        return !this.host || this.cannotBeABaseURL || "file" == this.scheme;
      }, includesCredentials: function() {
        return "" != this.username || "" != this.password;
      }, isSpecial: function() {
        return gC(EA, this.scheme);
      }, shortenPath: function() {
        var e2 = this.path, t2 = e2.length;
        !t2 || "file" == this.scheme && 1 == t2 && fA(e2[0], true) || e2.length--;
      }, serialize: function() {
        var e2 = this, t2 = e2.scheme, i2 = e2.username, r2 = e2.password, n2 = e2.host, o2 = e2.port, s2 = e2.path, a2 = e2.query, c2 = e2.fragment, d2 = t2 + ":";
        return null !== n2 ? (d2 += "//", e2.includesCredentials() && (d2 += i2 + (r2 ? ":" + r2 : "") + "@"), d2 += dA(n2), null !== o2 && (d2 += ":" + o2)) : "file" == t2 && (d2 += "//"), d2 += e2.cannotBeABaseURL ? s2[0] : s2.length ? "/" + jC(s2, "/") : "", null !== a2 && (d2 += "?" + a2), null !== c2 && (d2 += "#" + c2), d2;
      }, setHref: function(e2) {
        var t2 = this.parse(e2);
        if (t2)
          throw LC(t2);
        this.searchParams.update();
      }, getOrigin: function() {
        var e2 = this.scheme, t2 = this.port;
        if ("blob" == e2)
          try {
            return new BA(e2.path[0]).origin;
          } catch (e3) {
            return "null";
          }
        return "file" != e2 && this.isSpecial() ? e2 + "://" + dA(this.host) + (null !== t2 ? ":" + t2 : "") : "null";
      }, getProtocol: function() {
        return this.scheme + ":";
      }, setProtocol: function(e2) {
        this.parse(yC(e2) + ":", SA);
      }, getUsername: function() {
        return this.username;
      }, setUsername: function(e2) {
        var t2 = TC(yC(e2));
        if (!this.cannotHaveUsernamePasswordPort()) {
          this.username = "";
          for (var i2 = 0; i2 < t2.length; i2++)
            this.username += _A(t2[i2], pA);
        }
      }, getPassword: function() {
        return this.password;
      }, setPassword: function(e2) {
        var t2 = TC(yC(e2));
        if (!this.cannotHaveUsernamePasswordPort()) {
          this.password = "";
          for (var i2 = 0; i2 < t2.length; i2++)
            this.password += _A(t2[i2], pA);
        }
      }, getHost: function() {
        var e2 = this.host, t2 = this.port;
        return null === e2 ? "" : null === t2 ? dA(e2) : dA(e2) + ":" + t2;
      }, setHost: function(e2) {
        this.cannotBeABaseURL || this.parse(e2, wA);
      }, getHostname: function() {
        var e2 = this.host;
        return null === e2 ? "" : dA(e2);
      }, setHostname: function(e2) {
        this.cannotBeABaseURL || this.parse(e2, NA);
      }, getPort: function() {
        var e2 = this.port;
        return null === e2 ? "" : yC(e2);
      }, setPort: function(e2) {
        this.cannotHaveUsernamePasswordPort() || ("" == (e2 = yC(e2)) ? this.port = null : this.parse(e2, DA));
      }, getPathname: function() {
        var e2 = this.path;
        return this.cannotBeABaseURL ? e2[0] : e2.length ? "/" + jC(e2, "/") : "";
      }, setPathname: function(e2) {
        this.cannotBeABaseURL || (this.path = [], this.parse(e2, MA));
      }, getSearch: function() {
        var e2 = this.query;
        return e2 ? "?" + e2 : "";
      }, setSearch: function(e2) {
        "" == (e2 = yC(e2)) ? this.query = null : ("?" == xC(e2, 0) && (e2 = YC(e2, 1)), this.query = "", this.parse(e2, VA)), this.searchParams.update();
      }, getSearchParams: function() {
        return this.searchParams.facade;
      }, getHash: function() {
        var e2 = this.fragment;
        return e2 ? "#" + e2 : "";
      }, setHash: function(e2) {
        "" != (e2 = yC(e2)) ? ("#" == xC(e2, 0) && (e2 = YC(e2, 1)), this.fragment = "", this.parse(e2, jA)) : this.fragment = null;
      }, update: function() {
        this.query = this.searchParams.serialize() || null;
      } };
      var BA = function(e2) {
        var t2 = mC(this, GA), i2 = arguments.length > 1 ? arguments[1] : void 0, r2 = bC(t2, new FA(e2, false, i2));
        uC || (t2.href = r2.serialize(), t2.origin = r2.getOrigin(), t2.protocol = r2.getProtocol(), t2.username = r2.getUsername(), t2.password = r2.getPassword(), t2.host = r2.getHost(), t2.hostname = r2.getHostname(), t2.port = r2.getPort(), t2.pathname = r2.getPathname(), t2.search = r2.getSearch(), t2.searchParams = r2.getSearchParams(), t2.hash = r2.getHash());
      }, GA = BA.prototype, WA = function(e2, t2) {
        return { get: function() {
          return wC(this)[e2]();
        }, set: t2 && function(e3) {
          return wC(this)[t2](e3);
        }, configurable: true, enumerable: true };
      };
      if (uC && EC(GA, { href: WA("serialize", "setHref"), origin: WA("getOrigin"), protocol: WA("getProtocol", "setProtocol"), username: WA("getUsername", "setUsername"), password: WA("getPassword", "setPassword"), host: WA("getHost", "setHost"), hostname: WA("getHostname", "setHostname"), port: WA("getPort", "setPort"), pathname: WA("getPathname", "setPathname"), search: WA("getSearch", "setSearch"), searchParams: WA("getSearchParams"), hash: WA("getHash", "setHash") }), fC(GA, "toJSON", function() {
        return wC(this).serialize();
      }, { enumerable: true }), fC(GA, "toString", function() {
        return wC(this).serialize();
      }, { enumerable: true }), PC) {
        var HA = PC.createObjectURL, KA = PC.revokeObjectURL;
        HA && fC(BA, "createObjectURL", pC(HA, PC)), KA && fC(BA, "revokeObjectURL", pC(KA, PC));
      }
      CC(BA, "URL"), dC({ global: true, forced: !lC, sham: !uC }, { URL: BA });
      var YA = J.URL;
      const qA = { [Sm.ACCESS_POINT]: { [Rm.NO_FLAG_SET]: { desc: "flag is zero", retry: false }, [Rm.FLAG_SET_BUT_EMPTY]: { desc: "flag is empty", retry: false }, [Rm.INVALID_FALG_SET]: { desc: "invalid flag", retry: false }, [Rm.FLAG_SET_BUT_NO_RE]: { desc: "flag set unilbs but no request", retry: false }, [Rm.INVALID_SERVICE_ID]: { desc: "invalid service id", retry: false }, [Rm.NO_SERVICE_AVAILABLE]: { desc: "no service available", retry: true }, [Rm.NO_SERVICE_AVAILABLE_P2P]: { desc: "no unilbs p2p service available", retry: true }, [Rm.NO_SERVICE_AVAILABLE_VOET]: { desc: "no unilbs voice service available", retry: true }, [Rm.NO_SERVICE_AVAILABLE_WEBRTC]: { desc: "no unilbs webrtc service available", retry: true }, [Rm.NO_SERVICE_AVAILABLE_CDS]: { desc: "no cds service available", retry: true }, [Rm.NO_SERVICE_AVAILABLE_CDN]: { desc: "no cdn dispatcher service available", retry: true }, [Rm.NO_SERVICE_AVAILABLE_TDS]: { desc: "no tds service available", retry: true }, [Rm.NO_SERVICE_AVAILABLE_REPORT]: { desc: "no unilbs report service available", retry: true }, [Rm.NO_SERVICE_AVAILABLE_APP_CENTER]: { desc: "no app center service available", retry: true }, [Rm.NO_SERVICE_AVAILABLE_ENV0]: { desc: "no unilbs sig env0 service available", retry: true }, [Rm.NO_SERVICE_AVAILABLE_VOET]: { desc: "no unilbs voet service available", retry: true }, [Rm.NO_SERVICE_AVAILABLE_STRING_UID]: { desc: "no string uid service available", retry: true }, [Rm.NO_SERVICE_AVAILABLE_WEBRTC_UNILBS]: { desc: "no webrtc unilbs service available", retry: true } }, [Sm.UNILBS]: { [vm.INVALID_VENDOR_KEY]: { desc: "invalid vendor key, can not find appid", retry: false }, [vm.INVALID_CHANNEL_NAME]: { desc: "invalid channel name", retry: false }, [vm.INTERNAL_ERROR]: { desc: "unilbs internal error", retry: false }, [vm.NO_AUTHORIZED]: { desc: "invalid token, authorized failed", retry: false }, [vm.DYNAMIC_KEY_TIMEOUT]: { desc: "dynamic key or token timeout", retry: false }, [vm.NO_ACTIVE_STATUS]: { desc: "no active status", retry: false }, [vm.DYNAMIC_KEY_EXPIRED]: { desc: "dynamic key expired", retry: false }, [vm.STATIC_USE_DYNAMIC_KEY]: { desc: "static use dynamic key", retry: false }, [vm.DYNAMIC_USE_STATIC_KEY]: { desc: "dynamic use static key", retry: false }, [vm.USER_OVERLOAD]: { desc: "amount of users over load", retry: false }, [vm.FORBIDDEN_REGION]: { desc: "the request is forbidden in this area", retry: false }, [vm.CANNOT_MEET_AREA_DEMAND]: { desc: "unable to allocate services in this area", retry: false } }, [Sm.STRING_UID_ALLOCATOR]: { [Tm.IIIEGAL_APPID]: { desc: "invalid appid", retry: false }, [Tm.IIIEGAL_UID]: { desc: "invalid string uid", retry: false }, [Tm.INTERNAL_ERROR]: { desc: "string uid allocator internal error", retry: true } } };
      function JA(e2) {
        const t2 = qA[Math.floor(e2 / 1e4)];
        if (!t2)
          return { desc: "unkonw error", retry: false };
        const i2 = t2[e2 % 1e4];
        if (!i2) {
          if (Math.floor(e2 / 1e4) === Sm.ACCESS_POINT) {
            const t3 = e2 % 1e4;
            if ("1" === t3.toString()[0])
              return { desc: e2.toString(), retry: false };
            if ("2" === t3.toString()[0])
              return { desc: e2.toString(), retry: true };
          }
          return { desc: "unkonw error", retry: false };
        }
        return i2;
      }
      const XA = { [Im.K_TIMESTAMP_EXPIRED]: { desc: "K_TIMESTAMP_EXPIRED", action: "failed" }, [Im.K_CHANNEL_PERMISSION_INVALID]: { desc: "K_CHANNEL_PERMISSION_INVALID", action: "failed" }, [Im.K_CERTIFICATE_INVALID]: { desc: "K_CERTIFICATE_INVALID", action: "failed" }, [Im.K_CHANNEL_NAME_EMPTY]: { desc: "K_CHANNEL_NAME_EMPTY", action: "failed" }, [Im.K_CHANNEL_NOT_FOUND]: { desc: "K_CHANNEL_NOT_FOUND", action: "failed" }, [Im.K_TICKET_INVALID]: { desc: "K_TICKET_INVALID", action: "failed" }, [Im.K_CHANNEL_CONFLICTED]: { desc: "K_CHANNEL_CONFLICTED", action: "failed" }, [Im.K_SERVICE_NOT_READY]: { desc: "K_SERVICE_NOT_READY", action: "tryNext" }, [Im.K_SERVICE_TOO_HEAVY]: { desc: "K_SERVICE_TOO_HEAVY", action: "tryNext" }, [Im.K_UID_BANNED]: { desc: "K_UID_BANNED", action: "failed" }, [Im.K_IP_BANNED]: { desc: "K_IP_BANNED", action: "failed" }, [Im.ERR_INVALID_VENDOR_KEY]: { desc: "ERR_INVALID_VENDOR_KEY", action: "failed" }, [Im.ERR_INVALID_CHANNEL_NAME]: { desc: "ERR_INVALID_CHANNEL_NAME", action: "failed" }, [Im.WARN_NO_AVAILABLE_CHANNEL]: { desc: "WARN_NO_AVAILABLE_CHANNEL", action: "failed" }, [Im.WARN_LOOKUP_CHANNEL_TIMEOUT]: { desc: "WARN_LOOKUP_CHANNEL_TIMEOUT", action: "tryNext" }, [Im.WARN_LOOKUP_CHANNEL_REJECTED]: { desc: "WARN_LOOKUP_CHANNEL_REJECTED", action: "failed" }, [Im.WARN_OPEN_CHANNEL_TIMEOUT]: { desc: "WARN_OPEN_CHANNEL_TIMEOUT", action: "tryNext" }, [Im.WARN_OPEN_CHANNEL_REJECTED]: { desc: "WARN_OPEN_CHANNEL_REJECTED", action: "failed" }, [Im.WARN_REQUEST_DEFERRED]: { desc: "WARN_REQUEST_DEFERRED", action: "failed" }, [Im.ERR_DYNAMIC_KEY_TIMEOUT]: { desc: "ERR_DYNAMIC_KEY_TIMEOUT", action: "failed" }, [Im.ERR_NO_AUTHORIZED]: { desc: "ERR_NO_AUTHORIZED", action: "failed" }, [Im.ERR_VOM_SERVICE_UNAVAILABLE]: { desc: "ERR_VOM_SERVICE_UNAVAILABLE", action: "tryNext" }, [Im.ERR_NO_CHANNEL_AVAILABLE_CODE]: { desc: "ERR_NO_CHANNEL_AVAILABLE_CODE", action: "failed" }, [Im.ERR_MASTER_VOCS_UNAVAILABLE]: { desc: "ERR_MASTER_VOCS_UNAVAILABLE", action: "tryNext" }, [Im.ERR_INTERNAL_ERROR]: { desc: "ERR_INTERNAL_ERROR", action: "tryNext" }, [Im.ERR_NO_ACTIVE_STATUS]: { desc: "ERR_NO_ACTIVE_STATUS", action: "failed" }, [Im.ERR_INVALID_UID]: { desc: "ERR_INVALID_UID", action: "failed" }, [Im.ERR_DYNAMIC_KEY_EXPIRED]: { desc: "ERR_DYNAMIC_KEY_EXPIRED", action: "failed" }, [Im.ERR_STATIC_USE_DYANMIC_KE]: { desc: "ERR_STATIC_USE_DYANMIC_KE", action: "failed" }, [Im.ERR_DYNAMIC_USE_STATIC_KE]: { desc: "ERR_DYNAMIC_USE_STATIC_KE", action: "failed" }, [Im.ERR_NO_VOCS_AVAILABLE]: { desc: "ERR_NO_VOCS_AVAILABLE", action: "tryNext" }, [Im.ERR_NO_VOS_AVAILABLE]: { desc: "ERR_NO_VOS_AVAILABLE", action: "tryNext" }, [Im.ERR_JOIN_CHANNEL_TIMEOUT]: { desc: "ERR_JOIN_CHANNEL_TIMEOUT", action: "tryNext" }, [Im.ERR_JOIN_BY_MULTI_IP]: { desc: "ERR_JOIN_BY_MULTI_IP", action: "recover" }, [Im.ERR_NOT_JOINED]: { desc: "ERR_NOT_JOINED", action: "failed" }, [Im.ERR_REPEAT_JOIN_REQUEST]: { desc: "ERR_REPEAT_JOIN_REQUEST", action: "quit" }, [Im.ERR_REPEAT_JOIN_CHANNEL]: { desc: "ERR_REPEAT_JOIN_CHANNEL", action: "quit" }, [Im.ERR_INVALID_VENDOR_KEY]: { desc: "ERR_INVALID_VENDOR_KEY", action: "failed" }, [Im.ERR_INVALID_CHANNEL_NAME]: { desc: "ERR_INVALID_CHANNEL_NAME", action: "failed" }, [Im.ERR_INVALID_STRINGUID]: { desc: "ERR_INVALID_STRINGUID", action: "failed" }, [Im.ERR_TOO_MANY_USERS]: { desc: "ERR_TOO_MANY_USERS", action: "tryNext" }, [Im.ERR_SET_CLIENT_ROLE_TIMEOUT]: { desc: "ERR_SET_CLIENT_ROLE_TIMEOUT", action: "failed" }, [Im.ERR_SET_CLIENT_ROLE_NO_PERMISSION]: { desc: "ERR_SET_CLIENT_ROLE_TIMEOUT", action: "failed" }, [Im.ERR_SET_CLIENT_ROLE_ALREADY_IN_USE]: { desc: "ERR_SET_CLIENT_ROLE_ALREADY_IN_USE", action: "success" }, [Im.ERR_PUBLISH_REQUEST_INVALID]: { desc: "ERR_PUBLISH_REQUEST_INVALID", action: "failed" }, [Im.ERR_SUBSCRIBE_REQUEST_INVALID]: { desc: "ERR_SUBSCRIBE_REQUEST_INVALID", action: "failed" }, [Im.ERR_NOT_SUPPORTED_MESSAGE]: { desc: "ERR_NOT_SUPPORTED_MESSAGE", action: "failed" }, [Im.ERR_ILLEAGAL_PLUGIN]: { desc: "ERR_ILLEAGAL_PLUGIN", action: "failed" }, [Im.ILLEGAL_CLIENT_ROLE_LEVEL]: { desc: "ILLEGAL_CLIENT_ROLE_LEVEL", action: "failed" }, [Im.ERR_REJOIN_TOKEN_INVALID]: { desc: "ERR_REJOIN_TOKEN_INVALID", action: "failed" }, [Im.ERR_REJOIN_USER_NOT_JOINED]: { desc: "ERR_REJOIN_NOT_JOINED", action: "failed" }, [Im.ERR_INVALID_OPTIONAL_INFO]: { desc: "ERR_INVALID_OPTIONAL_INFO", action: "quit" }, [Im.ERR_TEST_RECOVER]: { desc: "ERR_TEST_RECOVER", action: "recover" }, [Im.ERR_TEST_TRYNEXT]: { desc: "ERR_TEST_TRYNEXT", action: "recover" }, [Im.ERR_TEST_RETRY]: { desc: "ERR_TEST_RETRY", action: "recover" }, [Im.ILLEGAL_AES_PASSWORD]: { desc: "ERR_TEST_RETRY", action: "failed" }, [Im.ERR_TOO_MANY_BROADCASTERS]: { desc: "ERR_TOO_MANY_BROADCASTERS", action: "failed" }, [Im.ERR_TOO_MANY_SUBSCRIBERS]: { desc: "ERR_TOO_MANY_SUBSCRIBERS", action: "failed" }, [Im.ERR_LICENSE_ILLEGAL]: { desc: "ERR_LICENSE_ILLEGAL", action: "quit" }, [Im.ERR_LICENSE_MISSING]: { desc: "ERR_LICENSE_MISSING", action: "quit" }, [Im.ERR_LICENSE_EXPIRED]: { desc: "ERR_LICENSE_EXPIRED", action: "quit" }, [Im.ERR_LICENSE_MINUTES_EXCEEDED]: { desc: "ERR_LICENSE_MINUTES_EXCEEDED", action: "quit" }, [Im.ERR_LICENSE_PERIOD_INVALID]: { desc: "ERR_LICENSE_PERIOD_INVALID", action: "quit" }, [Im.ERR_LICENSE_MULTIPLE_SDK_SERVICE]: { desc: "ERR_LICENSE_MULTIPLE_SDK_SERVICE", action: "quit" } };
      function zA(e2) {
        const t2 = XA[e2];
        return t2 || { desc: "UNKNOW_ERROR_".concat(e2), action: "failed" };
      }
      class QA extends gE {
        get queue() {
          return [...this.highPriorityQueue, ...this.lowPriorityQueue];
        }
        constructor(e2) {
          super(), mp(this, "lowPriorityQueue", []), mp(this, "highPriorityQueue", []), mp(this, "AgoraWebSocketManager", void 0), this.AgoraWebSocketManager = e2;
        }
        reset() {
          this.lowPriorityQueue = [], this.highPriorityQueue = [];
        }
        pushMessage(e2) {
          arguments.length > 1 && void 0 !== arguments[1] && arguments[1] ? this.highPriorityQueue.push(e2) : this.lowPriorityQueue.push(e2), this.sendMessage();
        }
        sendMessage() {
          const e2 = this.queue.length;
          let t2 = 0;
          t2 = e2 < 5 ? 15 * e2 : 60 + 3 * (e2 - 4), setTimeout(() => {
            this._sendMessage();
          }, t2);
        }
        _sendMessage() {
          if (!this.queue.length)
            return;
          const e2 = this.AgoraWebSocketManager.getConnection();
          if (!e2 || 1 !== e2.readyState)
            return;
          const t2 = this.queue.shift();
          return this.lowPriorityQueue.includes(t2) ? this.lowPriorityQueue.shift() : this.highPriorityQueue.shift(), e2.send(t2.compressed), t2;
        }
      }
      function ZA(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      class $A extends gE {
        get url() {
          return this.websocket ? this.websocket.url : null;
        }
        get reconnectMode() {
          return this._reconnectMode;
        }
        set reconnectMode(e2) {
          ["tryNext", "recover"].includes(e2) && this.resetReconnectCount(e2), this._reconnectMode = e2;
        }
        get state() {
          return this._state;
        }
        set state(e2) {
          e2 !== this._state && (this._state = e2, "reconnecting" === this._state ? this.emit(Km.RECONNECTING, this.reconnectReason) : "connected" === this._state ? this.emit(Km.CONNECTED) : "closed" === this._state ? this.emit(Km.CLOSED) : "failed" === this._state && this.emit(Km.FAILED));
        }
        resetReconnectCount(e2) {
          NE.debug("websocket reset reconnect count, reason: " + e2), this.reconnectCount = 0;
        }
        constructor(e2, t2) {
          let i2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], r2 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], n2 = arguments.length > 4 ? arguments[4] : void 0;
          super(), mp(this, "connectionID", 0), mp(this, "currentURLIndex", 0), mp(this, "urls", void 0), mp(this, "_reconnectMode", "tryNext"), mp(this, "reconnectReason", void 0), mp(this, "_initMutex", new OT("websocket")), mp(this, "name", void 0), mp(this, "_state", "closed"), mp(this, "reconnectInterrupter", void 0), mp(this, "websocket", void 0), mp(this, "retryConfig", void 0), mp(this, "reconnectCount", 0), mp(this, "forceCloseTimeout", 5e3), mp(this, "onlineReconnectListener", void 0), mp(this, "messageSender", void 0), mp(this, "useCompress", void 0), mp(this, "tryDoubleDomain", false), mp(this, "wsInflateLength", 0), mp(this, "wsDeflateLength", 0), mp(this, "closeEstablishingWs", () => {
          }), mp(this, "store", void 0), mp(this, "joinChannelServiceRecordIndex", void 0), this.store = n2, this.name = e2, this.retryConfig = function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var i3 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? ZA(Object(i3), true).forEach(function(t4) {
                mp(e3, t4, i3[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(i3)) : ZA(Object(i3)).forEach(function(t4) {
                Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(i3, t4));
              });
            }
            return e3;
          }({}, t2), this.useCompress = i2, this.tryDoubleDomain = r2;
          const { timeout: o2, timeoutFactor: s2 } = t2, a2 = Math.max(300, Math.floor(3 * o2 / 5)), c2 = Math.max(1.2, Math.floor(8 * s2) / 10);
          bg.ONLINE && (this.retryConfig.timeout = a2, this.retryConfig.timeoutFactor = c2), pT.on(wg.NETWORK_STATE_CHANGE, (e3, t3) => {
            e3 !== t3 && (this.resetReconnectCount("network state change: ".concat(t3, " -> ").concat(e3)), e3 === bg.ONLINE ? (this.retryConfig.timeout = a2, this.retryConfig.timeoutFactor = c2) : (this.retryConfig.timeout = o2, this.retryConfig.timeoutFactor = s2));
          });
        }
        getConnection() {
          return this.websocket || void 0;
        }
        init(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5e3;
          this.forceCloseTimeout = t2;
          const i2 = (t3, i3) => {
            this.urls = e2;
            const r2 = this.urls[this.currentURLIndex];
            this.state = "connecting", this.messageSender = new QA(this), this.createWebSocketConnection(r2).then(t3).catch(i3), this.once(Km.CLOSED, () => i3(new vE(TE.WS_DISCONNECT))), this.once(Km.CONNECTED, () => t3());
          };
          return this._initMutex.lock().then((e3) => new Cl((e4, t3) => {
            i2(e4, t3);
          }).then(() => {
            e3();
          }).catch(() => {
            e3();
          }));
        }
        close(e2, t2) {
          if (this.currentURLIndex = 0, this.resetReconnectCount("close"), this.reconnectInterrupter && this.reconnectInterrupter(), this.websocket) {
            this.websocket.onclose = null, this.websocket.onopen = null, this.websocket.onmessage = null;
            const e3 = this.websocket;
            t2 ? setTimeout(() => e3.close(), 500) : e3.close(), this.websocket = void 0;
          }
          this.state = e2 ? "failed" : "closed", this.closeEstablishingWs && this.closeEstablishingWs();
        }
        reconnect(e2, t2) {
          if (!this.websocket)
            return void NE.warning("[".concat(this.name, "] can not reconnect, no websocket"));
          var i2;
          (void 0 !== e2 && (this.reconnectMode = e2), NE.debug("[".concat(this.name, "] reconnect is triggered initiative")), "number" == typeof this.joinChannelServiceRecordIndex) && (null === (i2 = this.store) || void 0 === i2 || i2.recordJoinChannelService({ status: "error", errors: [new Error(t2)] }, this.joinChannelServiceRecordIndex));
          const r2 = this.websocket.onclose;
          this.websocket.onclose = null, this.websocket.close(), r2 && r2.bind(this.websocket)({ code: 9999, reason: t2 });
        }
        sendMessageWithJSON(e2) {
          const t2 = JSON.stringify(e2);
          return { compressed: t2, compressedLength: t2.length, origin: e2 };
        }
        sendMessageWithUint8Array(e2) {
          return { compressed: e2, compressedLength: e2.byteLength, origin: e2 };
        }
        sendMessage(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          if (!this.websocket || this.websocket.readyState !== WebSocket.OPEN)
            throw new vE(TE.WS_ABORT, "websocket is not ready");
          try {
            let r2 = null;
            r2 = i2 ? this.sendMessageWithUint8Array(e2) : this.sendMessageWithJSON(e2), t2 ? this.websocket.send(r2.compressed) : this.messageSender.pushMessage(r2);
          } catch (e3) {
            throw new vE(TE.WS_ERR, "send websocket message error" + e3.toString());
          }
        }
        setWsInflateData(e2) {
          this.wsDeflateLength = this.wsDeflateLength + e2.originLength, this.wsInflateLength = this.wsInflateLength + e2.compressedLength;
        }
        getWsInflateData() {
          const e2 = this.wsInflateLength, t2 = this.wsDeflateLength;
          return this.clearWsInflateData(), { wsInflateLength: e2, wsDeflateLength: t2 };
        }
        clearWsInflateData() {
          this.wsInflateLength = 0, this.wsDeflateLength = 0;
        }
        async createWebSocketConnection(e2, t2) {
          return this.connectionID += 1, this.connectionID, this.joinChannelServiceRecordIndex = void 0, new Cl((i2, r2) => {
            var n2;
            const o2 = (e3) => {
              var t3;
              null === (t3 = this.store) || void 0 === t3 || t3.signalChannelOpen(), NE.debug("[".concat(this.name, "] websocket opened:"), e3), this.reconnectMode = "retry", this.state = "connected", this.resetReconnectCount("opened"), i2();
            }, s2 = async (e3) => {
              if (NE.debug("[".concat(this.name, "] websocket close ").concat(this.websocket && this.websocket.url, ", code: ").concat(e3.code, ", reason: ").concat(e3.reason, ", current mode: ").concat(this.reconnectMode)), this.reconnectCount < this.retryConfig.maxRetryCount) {
                "connected" === this.state && (this.reconnectReason = e3.reason, this.state = "reconnecting");
                const t3 = GR(this, Km.WILL_RECONNECT, this.reconnectMode) || this.reconnectMode, n3 = await this.reconnectWithAction(t3);
                if ("closed" === this.state)
                  return void NE.debug("[".concat(this.connectionID, "] ws is closed, no need to reconnect"));
                if (!n3)
                  return r2(new vE(TE.WS_DISCONNECT, "websocket reconnect failed: ".concat(e3.code))), void this.close(true);
                i2();
              } else
                r2(new vE(TE.WS_DISCONNECT, "websocket close: ".concat(e3.code))), this.close();
            }, a2 = (e3) => {
              this.emit(Km.ON_MESSAGE, e3);
            };
            this.websocket && (this.websocket.onclose = null, this.websocket.close()), HE("GATEWAY_WSS_ADDRESS") && this.name.startsWith("gateway") && (e2 = HE("GATEWAY_WSS_ADDRESS")), NE.debug("[".concat(this.name, "] start connect, url: ").concat(e2));
            const c2 = null === (n2 = this.store) || void 0 === n2 ? void 0 : n2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "gateway" });
            this.chooseBestWebsocketConnection(e2, !!t2, c2).then((e3) => {
              var t3;
              this.websocket = e3, o2 && o2(e3.url), e3.onclose = s2, e3.onmessage = a2, null === (t3 = this.store) || void 0 === t3 || t3.recordJoinChannelService({ endTs: Date.now(), status: "success" }, c2), this.joinChannelServiceRecordIndex = c2;
            }).catch((e3) => {
              var t3;
              if (null === (t3 = this.store) || void 0 === t3 || t3.recordJoinChannelService({ endTs: Date.now(), status: e3 instanceof vE && e3.code === TE.WS_ABORT ? "aborted" : "error", errors: [e3] }, c2), "closed" !== this.state) {
                if (e3 instanceof vE && e3.code === TE.WS_ERR) {
                  const t4 = new vE(TE.WS_ERR, "init websocket failed! Error: ".concat(e3.toString()));
                  return NE.error("[".concat(this.name, "]").concat(t4)), void r2(t4);
                }
                s2 && s2(e3);
              } else
                r2(new vE(TE.WS_DISCONNECT, "websocket is closed: ".concat(e3.toString())));
            });
          });
        }
        async reconnectWithAction(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (this.reconnectCount >= this.retryConfig.maxRetryCount)
            return false;
          if (!this.urls)
            return false;
          if ("closed" === this.state)
            return false;
          this.onlineReconnectListener || pT.networkState !== bg.OFFLINE || (this.onlineReconnectListener = pT.onlineWaiter && pT.onlineWaiter.then(() => {
            this.onlineReconnectListener = void 0;
          }));
          let i2 = true;
          if (this.reconnectInterrupter = () => {
            i2 = false;
          }, t2) {
            const t3 = IE(this.reconnectCount, this.retryConfig);
            NE.debug("[".concat(this.name, "] wait ").concat(t3, "ms to reconnect websocket, mode: ").concat(e2)), await Cl.race([LR(t3), this.onlineReconnectListener || new Cl(() => {
            })]);
          }
          if ("closed" === this.state || !i2)
            return false;
          this.reconnectCount += 1;
          const r2 = async (e3, t3) => {
            this.emit(Km.RECONNECT_CREATE_CONNECTION, t3), await this.createWebSocketConnection(e3);
          };
          try {
            if ("retry" === e2) {
              const t3 = this.urls[this.currentURLIndex];
              this.emit(Km.RECONNECT_WAITTING_FINISH, e2), await r2(t3, e2);
            } else if ("tryNext" === e2) {
              if (this.currentURLIndex += 1, this.currentURLIndex >= this.urls.length)
                return await this.reconnectWithAction("recover", false);
              NE.debug("[".concat(this.name, "] websocket url length: ").concat(this.urls.length, " current index: ").concat(this.currentURLIndex));
              const t3 = this.urls[this.currentURLIndex];
              this.emit(Km.RECONNECT_WAITTING_FINISH, e2), await r2(t3, e2);
            } else if ("recover" === e2) {
              NE.debug("[".concat(this.name, "] request new urls")), this.resetReconnectCount("recover mode"), this.emit(Km.RECONNECT_WAITTING_FINISH, e2), this.urls = await FR(this, Km.REQUEST_NEW_URLS), this.currentURLIndex = 0;
              const t3 = this.urls[this.currentURLIndex];
              await r2(t3, e2);
            }
            return true;
          } catch (i3) {
            var n2;
            return NE.error("[".concat(this.name, "] reconnect failed"), i3.toString()), null != i3 && null !== (n2 = i3.data) && void 0 !== n2 && n2.desc && Array.isArray(i3.data.desc) && i3.data.desc.length && i3.data.desc.includes("dynamic key expired") ? (this.emit(Km.ON_TOKEN_PRIVILEGE_DID_EXPIRE), false) : await this.reconnectWithAction(e2, t2);
          }
        }
        async chooseBestWebsocketConnection(e2, t2, i2) {
          return new Cl((r2, n2) => {
            let o2 = false;
            const s2 = [];
            this.closeEstablishingWs = () => {
              NE.debug("[choose-best-ws] close establishing websockets"), s2.forEach((e3) => {
                e3.onclose = null, e3.onopen = null, e3.onmessage = null, e3.close();
              }), n2(new vE(TE.WS_ABORT, "choose best websocket aborted"));
            };
            const a2 = HE("GATEWAY_DOMAINS");
            let c2;
            const d2 = e2.indexOf("?h="), u2 = a2.find((t3) => -1 !== d2 ? e2.includes(t3, d2) : e2.includes(t3));
            NE.debug("[choose-best-ws] currentDomain: ", u2, ", domains: ", a2);
            let l2 = !this.tryDoubleDomain || t2 || !u2;
            if (!l2 && u2) {
              var h2;
              const t3 = Date.now();
              try {
                a2.forEach((t4) => {
                  const i3 = -1 === d2 ? e2.replace(u2, t4) : e2.substr(0, d2) + e2.substr(d2).replace(u2, t4), r3 = new WebSocket(i3);
                  r3.binaryType = "arraybuffer", s2.push(r3), NE.debug("[choose-best-ws] ws is connecting:", r3.url);
                });
              } catch (e3) {
                for (NE.debug("[choose-best-ws] ws create failed, fallback to single url"), s2.forEach((e4) => e4.close()); s2.length; )
                  s2.pop();
                l2 = true;
              }
              null === (h2 = this.store) || void 0 === h2 || h2.recordJoinChannelService({ urls: s2.map((e3) => e3.url), service: "gateway" }, i2), s2.forEach((e3) => {
                e3.onopen = () => {
                  if (o2)
                    return;
                  const i3 = Date.now() - t3;
                  NE.debug("[choose-best-ws] ws open cost ".concat(i3, "ms")), s2.filter((t4) => t4 !== e3).forEach((e4) => {
                    NE.debug("[choose-best-ws]close backup websocket: ".concat(e4.url)), e4.close();
                  }), o2 = true, r2(e3);
                }, e3.onclose = (e4) => {
                  if (c2 = e4, o2)
                    return;
                  s2.find((e5) => !(e5.readyState === WebSocket.CLOSED || e5.readyState === WebSocket.CLOSING)) || (NE.debug("[choose-best-ws] all websocket is closed"), o2 = true, n2(c2));
                }, e3.onmessage = (t4) => {
                  NE.debug("[choose-best-ws]".concat(e3.url, " onmessage: ").concat(t4.data));
                };
              }), LR(this.forceCloseTimeout).then(() => {
                s2.forEach((e3) => {
                  e3.readyState !== WebSocket.OPEN && e3.close();
                });
              });
            }
            if (l2) {
              var p2;
              let t3;
              NE.debug("[choose-best-ws] use single url: ", e2), null === (p2 = this.store) || void 0 === p2 || p2.recordJoinChannelService({ urls: [e2], service: "gateway" }, i2);
              try {
                t3 = new WebSocket(e2), s2.push(t3), t3.binaryType = "arraybuffer";
              } catch (e3) {
                const t4 = new vE(TE.WS_ERR, "init websocket failed! Error: ".concat(e3.toString()));
                return NE.error("[".concat(this.name, "]").concat(t4)), void n2(t4);
              }
              t3.onopen = () => {
                r2(t3);
              }, t3.onclose = (e3) => {
                n2(e3);
              }, t3.onmessage = (e3) => {
                NE.debug("[choose-best-ws]".concat(t3.url, " onmessage: ").concat(e3.data));
              }, LR(this.forceCloseTimeout).then(() => {
                t3 && t3.readyState !== WebSocket.OPEN && t3.close();
              });
            }
          }).then((e3) => (this.closeEstablishingWs = void 0, e3)).catch((e3) => {
            throw this.closeEstablishingWs = void 0, e3;
          });
        }
      }
      class eO {
        constructor(e2) {
          mp(this, "input", []), mp(this, "size", void 0), this.size = e2;
        }
        add(e2) {
          this.input.push(e2), this.input.length > this.size && this.input.splice(0, 1);
        }
        mean() {
          var e2;
          return 0 === this.input.length ? 0 : zi(e2 = this.input).call(e2, (e3, t2) => e3 + t2) / this.input.length;
        }
      }
      class tO extends gE {
        get connectionState() {
          return this._connectionState;
        }
        set connectionState(e2) {
          e2 !== this._connectionState && (this._connectionState = e2, e2 === bm.CONNECTED ? this.emit(wm.WS_CONNECTED) : e2 === bm.RECONNECTING ? this.emit(wm.WS_RECONNECTING, this._websocketReconnectReason) : e2 === bm.CLOSED && this.emit(wm.WS_CLOSED, this._disconnectedReason));
        }
        get currentURLIndex() {
          return this.websocket.currentURLIndex;
        }
        get url() {
          return this.websocket ? this.websocket.url : null;
        }
        get rtt() {
          return this.rttRolling.mean();
        }
        constructor(e2, t2) {
          super(), mp(this, "_disconnectedReason", void 0), mp(this, "_websocketReconnectReason", void 0), mp(this, "_connectionState", bm.CLOSED), mp(this, "reconnectToken", void 0), mp(this, "websocket", void 0), mp(this, "openConnectionTime", void 0), mp(this, "clientId", void 0), mp(this, "lastMsgTime", Date.now()), mp(this, "uploadCache", []), mp(this, "uploadCacheInterval", void 0), mp(this, "rttRolling", new eO(5)), mp(this, "pingpongTimer", void 0), mp(this, "wsInflateDataTimer", void 0), mp(this, "pingpongTimeoutCount", 0), mp(this, "joinResponse", void 0), mp(this, "multiIpOption", void 0), mp(this, "initError", void 0), mp(this, "spec", void 0), mp(this, "store", void 0), mp(this, "onWebsocketMessage", (e3) => {
            if (e3.data instanceof ArrayBuffer)
              return void this.emit(wm.ON_BINARY_DATA, e3.data);
            const t3 = JSON.parse(e3.data);
            if (this.lastMsgTime = Date.now(), Object.prototype.hasOwnProperty.call(t3, "_id")) {
              const e4 = "res-@".concat(t3._id);
              this.emit(e4, t3._result, t3._message);
            } else if (Object.prototype.hasOwnProperty.call(t3, "_type")) {
              if (this.emit(t3._type, t3._message), t3._type === Pm.ON_NOTIFICATION && this.handleNotification(t3._message), t3._type === Pm.ON_USER_BANNED)
                switch (t3._message.error_code) {
                  case 14:
                    this.close(Cm.UID_BANNED);
                    break;
                  case 15:
                    this.close(Cm.IP_BANNED);
                    break;
                  case 16:
                    this.close(Cm.CHANNEL_BANNED);
                }
              if (t3._type === Pm.ON_USER_LICENSE_BANNED)
                switch (t3._message.error_code) {
                  case Im.ERR_LICENSE_MISSING:
                    this.close(Cm.LICENSE_MISSING);
                    break;
                  case Im.ERR_LICENSE_EXPIRED:
                    this.close(Cm.LICENSE_EXPIRED);
                    break;
                  case Im.ERR_LICENSE_MINUTES_EXCEEDED:
                    this.close(Cm.LICENSE_MINUTES_EXCEEDED);
                    break;
                  case Im.ERR_LICENSE_PERIOD_INVALID:
                    this.close(Cm.LICENSE_PERIOD_INVALID);
                    break;
                  case Im.ERR_LICENSE_MULTIPLE_SDK_SERVICE:
                    this.close(Cm.LICENSE_MULTIPLE_SDK_SERVICE);
                    break;
                  case Im.ERR_LICENSE_ILLEGAL:
                    this.close(Cm.LICENSE_ILLEGAL);
                    break;
                  default:
                    this.close();
                }
            }
          }), this.clientId = e2.clientId, this.spec = e2, this.store = t2, this.websocket = new $A("gateway-".concat(this.clientId), this.spec.retryConfig, true, true, t2), this.handleWebsocketEvents(), window.addEventListener("offline", () => {
            this.connectionState === bm.CONNECTED && this.reconnect("retry", Om.OFFLINE);
          });
        }
        async request(e2, t2, i2, r2) {
          const n2 = MR(6, ""), o2 = { _id: n2, _type: e2, _message: t2 }, s2 = this.websocket.connectionID, a2 = () => new Cl((t3, i3) => {
            if (this.connectionState === bm.CONNECTED)
              return t3();
            const r3 = () => {
              this.off(wm.WS_CLOSED, n3), t3();
            }, n3 = () => {
              this.off(wm.WS_CONNECTED, r3), i3(new vE(TE.WS_ABORT));
            };
            this.once(wm.WS_CONNECTED, r3), this.once(wm.WS_CLOSED, n3), e2 !== Nm.PUBLISH && e2 !== Nm.SUBSCRIBE && e2 !== Nm.UNSUBSCRIBE && e2 !== Nm.UNPUBLISH && e2 !== Nm.CONTROL && e2 !== Nm.RESTART_ICE || this.once(wm.DISCONNECT_P2P, () => {
              i3(new vE(TE.DISCONNECT_P2P));
            }), e2 !== Nm.PUBLISH && e2 !== Nm.RESTART_ICE || this.once(wm.ABORT_P2P_EXECUTION, () => {
              i3(new vE(TE.DISCONNECT_P2P));
            });
          });
          if (this.connectionState !== bm.CONNECTING && this.connectionState !== bm.RECONNECTING || e2 === Nm.JOIN || e2 === Nm.REJOIN || await a2(), this.websocket.sendMessage(o2, true), r2)
            return;
          const c2 = new Cl((i3, r3) => {
            let o3 = false;
            const a3 = (r4, n3) => {
              o3 = true, i3({ isSuccess: "success" === r4, message: n3 || {} }), this.off(wm.WS_CLOSED, c3), this.off(wm.WS_RECONNECTING, c3), this.emit(wm.REQUEST_SUCCESS, e2, t2);
            };
            this.once("res-@".concat(n2), a3);
            const c3 = () => {
              r3(new vE(TE.WS_ABORT, "type: ".concat(e2))), this.off(wm.WS_CLOSED, c3), this.off(wm.WS_RECONNECTING, c3), this.off("res-@".concat(n2), a3);
            };
            this.once(wm.WS_CLOSED, c3), this.once(wm.WS_RECONNECTING, c3), LR(HE("SIGNAL_REQUEST_TIMEOUT")).then(() => {
              this.websocket.connectionID !== s2 || o3 || (NE.warning("ws request timeout, type: ".concat(e2)), this.emit(wm.REQUEST_TIMEOUT, e2, t2));
            });
          });
          let d2 = null;
          try {
            d2 = await c2;
          } catch (r3) {
            if (this.connectionState === bm.CLOSED || e2 === Nm.LEAVE)
              throw new vE(TE.WS_ABORT);
            return !this.spec.forceWaitGatewayResponse || i2 ? r3.throw() : e2 === Nm.JOIN || e2 === Nm.REJOIN ? null : (await a2(), await this.request(e2, t2));
          }
          if (d2.isSuccess)
            return d2.message;
          const u2 = Number(d2.message.error_code || d2.message.code), l2 = zA(u2), h2 = new vE(TE.UNEXPECTED_RESPONSE, "".concat(l2.desc, ": ").concat(d2.message.error_str), { code: u2, data: d2.message });
          return "success" === l2.action ? d2.message : (NE.warning("[".concat(this.websocket.connectionID, "] unexpected response from type ").concat(e2, ", error_code: ").concat(u2, ", message: ").concat(l2.desc, ", action: ").concat(l2.action)), u2 === Im.ERR_TOO_MANY_BROADCASTERS ? e2 === Nm.JOIN || e2 === Nm.REJOIN ? (this.initError = h2, this.close(), h2.throw()) : h2.throw() : "failed" === l2.action ? h2.throw() : "quit" === l2.action ? (this.initError = h2, this.close(), h2.throw()) : (u2 === Im.ERR_JOIN_BY_MULTI_IP ? (this.multiIpOption = d2.message.option, NE.warning("[".concat(this.clientId, "] detect multi ip, recover")), this.reconnect("recover", Om.MULTI_IP)) : this.reconnect(l2.action, Om.SERVER_ERROR), e2 === Nm.JOIN || e2 === Nm.REJOIN ? null : await this.request(e2, t2)));
        }
        waitMessage(e2, t2) {
          return new Cl((i2) => {
            const r2 = (n2) => {
              (!t2 || t2(n2)) && (this.off(e2, r2), i2(n2));
            };
            this.on(e2, r2);
          });
        }
        upload(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          try {
            this.websocket.sendMessage(i2);
          } catch (e3) {
            const t3 = HE("MAX_UPLOAD_CACHE") || 50;
            this.uploadCache.push(i2), this.uploadCache.length > t3 && this.uploadCache.splice(0, 1), this.uploadCache.length > 0 && !this.uploadCacheInterval && (this.uploadCacheInterval = window.setInterval(() => {
              if (this.connectionState !== bm.CONNECTED)
                return;
              const e4 = this.uploadCache.splice(0, 1)[0];
              0 === this.uploadCache.length && (window.clearInterval(this.uploadCacheInterval), this.uploadCacheInterval = void 0), this.upload(e4._type, e4._message);
            }, HE("UPLOAD_CACHE_INTERVAL") || 2e3));
          }
        }
        send(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          this.websocket.sendMessage(i2);
        }
        init(e2, t2) {
          return this.initError = void 0, this.multiIpOption = void 0, this.joinResponse = void 0, this.reconnectToken = void 0, this.openConnectionTime = void 0, new Cl((i2, r2) => {
            this.once(wm.WS_CONNECTED, () => i2(this.joinResponse)), this.once(wm.WS_CLOSED, () => r2(this.initError || new vE(TE.WS_ABORT))), this.connectionState = bm.CONNECTING, this.websocket.init(e2).catch(r2), this.wsInflateDataTimer && window.clearInterval(this.wsInflateDataTimer), this.wsInflateDataTimer = window.setInterval(() => {
              this.handleWsInflateData();
            }, 2e4), setTimeout(() => {
              t2 && void 0 === this.openConnectionTime && (NE.debug("[".concat(this.clientId, "] init websocket timeout while join with fallback to proxy")), r2(new vE(TE.INIT_WEBSOCKET_TIMEOUT)));
            }, HE("JOIN_WITH_FALLBACK_PROXY_PENDING_DURATION"));
          });
        }
        close(e2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.wsInflateDataTimer && (this.handleWsInflateData(), window.clearInterval(this.wsInflateDataTimer), this.wsInflateDataTimer = void 0), this.reconnectToken = void 0, this.joinResponse = void 0, this._disconnectedReason = e2 || Cm.LEAVE, this.connectionState = bm.CLOSED, NE.debug("[".concat(this.clientId, "] ") + "will close websocket in signal"), this.websocket.close(), e2 === Cm.FALLBACK && (this.websocket.removeAllListeners(), this.websocket = new $A("gateway-".concat(this.clientId), this.spec.retryConfig, true, true, this.store), this.handleWebsocketEvents());
        }
        async join() {
          if (!this.joinResponse) {
            this.emit(wm.ABORT_P2P_EXECUTION);
            const e2 = await FR(this, wm.REQUEST_JOIN_INFO), t2 = await this.request(Nm.JOIN, e2);
            if (!t2)
              return this.emit(wm.REPORT_JOIN_GATEWAY, TE.TIMEOUT, this.url || ""), false;
            this.joinResponse = t2, this.emit(wm.JOIN_RESPONSE, this.joinResponse), this.reconnectToken = this.joinResponse.rejoin_token;
          }
          return this.connectionState = bm.CONNECTED, this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(this.handlePingPong.bind(this), 3e3), true;
        }
        async rejoin() {
          if (!this.reconnectToken)
            throw new vE(TE.UNEXPECTED_ERROR, "can not rejoin, no rejoin token");
          const e2 = WR(this, wm.REQUEST_REJOIN_INFO);
          e2.token = this.reconnectToken;
          const t2 = await this.request(Nm.REJOIN, e2);
          return !!t2 && (this.connectionState = bm.CONNECTED, this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(this.handlePingPong.bind(this), 3e3), t2.peers && t2.peers.forEach((e3) => {
            this.emit(Pm.ON_USER_ONLINE, { uid: e3.uid }), e3.audio && this.emit(Pm.ON_ADD_AUDIO_STREAM, { uid: e3.uid, uint_id: e3.uint_id, audio: true, ssrcId: e3.audio_ssrc }), e3.video && this.emit(Pm.ON_ADD_VIDEO_STREAM, { uid: e3.uid, uint_id: e3.uint_id, video: true, ssrcId: e3.video_ssrc }), e3.audio_mute ? this.emit(Pm.MUTE_AUDIO, { uid: e3.uid }) : this.emit(Pm.UNMUTE_AUDIO, { uid: e3.uid }), e3.video_mute ? this.emit(Pm.MUTE_VIDEO, { uid: e3.uid }) : this.emit(Pm.UNMUTE_VIDEO, { uid: e3.uid }), e3.audio_enable_local ? this.emit(Pm.ENABLE_LOCAL_AUDIO, { uid: e3.uid }) : this.emit(Pm.DISABLE_LOCAL_AUDIO, { uid: e3.uid }), e3.video_enable_local ? this.emit(Pm.ENABLE_LOCAL_VIDEO, { uid: e3.uid }) : this.emit(Pm.DISABLE_LOCAL_VIDEO, { uid: e3.uid }), e3.audio || e3.video || this.emit(Pm.ON_REMOVE_STREAM, { uid: e3.uid, uint_id: e3.uint_id });
          }), true);
        }
        reconnect(e2, t2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.websocket.reconnect(e2, t2);
        }
        handleNotification(e2) {
          NE.debug("[".concat(this.clientId, "] receive notification: "), e2);
          const t2 = zA(e2.code);
          if ("success" !== t2.action) {
            if ("failed" !== t2.action)
              return "quit" === t2.action ? ("ERR_REPEAT_JOIN_CHANNEL" === t2.desc && this.close(Cm.UID_BANNED), void this.close()) : void this.reconnect(t2.action, Om.SERVER_ERROR);
            NE.error("[".concat(this.clientId, "] ignore error: "), t2.desc);
          }
        }
        handlePingPong() {
          if (!this.websocket || "connected" !== this.websocket.state)
            return;
          this.pingpongTimeoutCount > 0 && this.rttRolling.add(3e3), this.pingpongTimeoutCount += 1;
          const e2 = HE("PING_PONG_TIME_OUT"), t2 = Date.now();
          this.pingpongTimeoutCount >= e2 && (NE.warning("PINGPONG Timeout. Last Socket Message: ".concat(t2 - this.lastMsgTime, "ms")), t2 - this.lastMsgTime > HE("WEBSOCKET_TIMEOUT_MIN")) ? this.reconnect("retry", Om.TIMEOUT) : this.request(Nm.PING, void 0, true).then(() => {
            this.pingpongTimeoutCount = 0;
            const e3 = Date.now() - t2;
            this.rttRolling.add(e3), HE("REPORT_STATS") && this.send(Nm.PING_BACK, { pingpongElapse: e3 });
          }).catch((e3) => {
          });
        }
        handleWsInflateData() {
          const { wsInflateLength: e2, wsDeflateLength: t2 } = this.websocket.getWsInflateData();
          0 !== e2 && 0 !== t2 && this.upload(Dm.WS_INFLATE_DATA_LENGTH, { ws_deflate_length: t2, ws_inflate_length: e2 });
        }
        handleWebsocketEvents() {
          this.websocket.on(Km.RECONNECT_WAITTING_FINISH, (e2) => {
            this.emit(wm.WS_RECONNECT_WAITTING_FINISH, e2);
          }), this.websocket.on(Km.RECONNECT_CREATE_CONNECTION, (e2) => {
            this.emit(wm.WS_RECONNECT_CREATE_CONNECTION, e2);
          }), this.websocket.on(Km.ON_MESSAGE, this.onWebsocketMessage), this.websocket.on(Km.CLOSED, () => {
            this.connectionState = bm.CLOSED;
          }), this.websocket.on(Km.FAILED, () => {
            this._disconnectedReason = Cm.NETWORK_ERROR, this.connectionState = bm.CLOSED;
          }), this.websocket.on(Km.RECONNECTING, (e2) => {
            this._websocketReconnectReason = e2, this.joinResponse = void 0, this.connectionState === bm.CONNECTED ? this.connectionState = bm.RECONNECTING : this.connectionState = bm.CONNECTING;
          }), this.websocket.on(Km.WILL_RECONNECT, (e2, t2) => {
            if (WR(this, wm.IS_P2P_DISCONNECTED) && "retry" === e2)
              return NE.debug("".concat(this.clientId, " reconnect mode is retry, but p2p lost, change to tryNext")), this.reconnectToken = void 0, this.emit(wm.NEED_RENEW_SESSION), this.emit(wm.DISCONNECT_P2P), t2("tryNext");
            "retry" !== e2 && (NE.debug("".concat(this.clientId, " websockt will_connect event, renewSession reconnectMode is ").concat(e2)), this.reconnectToken = void 0, this.emit(wm.NEED_RENEW_SESSION), this.emit(wm.DISCONNECT_P2P)), t2(e2);
          }), this.websocket.on(Km.CONNECTED, () => {
            this.openConnectionTime = Date.now(), this.reconnectToken ? this.rejoin().catch((e2) => {
              NE.warning("[".concat(this.clientId, "] rejoin failed ").concat(e2)), this.reconnect("tryNext", Om.SERVER_ERROR);
            }) : this.join().catch((e2) => {
              if (this.emit(wm.REPORT_JOIN_GATEWAY, e2.message || e2.code, this.url || ""), e2 instanceof vE && e2.code === TE.UNEXPECTED_RESPONSE && e2.data.code === Im.ERR_NO_AUTHORIZED)
                return NE.warning("[".concat(this.clientId, "] reconnect no authorized, recover")), void this.reconnect("recover", Om.SERVER_ERROR);
              NE.error("[".concat(this.clientId, "] join gateway request failed"), e2.toString()), this.spec.forceWaitGatewayResponse ? this.reconnect("tryNext", Om.SERVER_ERROR) : (this.initError = e2, this.close());
            });
          }), this.websocket.on(Km.REQUEST_NEW_URLS, (e2, t2) => {
            FR(this, wm.REQUEST_RECOVER, this.multiIpOption).then(e2).catch(t2);
          }), this.websocket.on(Km.ON_TOKEN_PRIVILEGE_DID_EXPIRE, () => {
            this.emit(Pm.ON_TOKEN_PRIVILEGE_DID_EXPIRE);
          });
        }
      }
      function iO(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      class rO extends gE {
        get url() {
          return this._url ? this._url : null;
        }
        get reconnectMode() {
          return this._reconnectMode;
        }
        set reconnectMode(e2) {
          ["tryNext", "recover"].includes(e2) && this.resetReconnectCount(e2), this._reconnectMode = e2;
        }
        get state() {
          return this._state;
        }
        set state(e2) {
          e2 !== this._state && (this._state = e2, "reconnecting" === this._state ? this.emit(Ug.RECONNECTING, this.reconnectReason) : "connected" === this._state ? this.emit(Ug.CONNECTED) : "closed" === this._state ? this.emit(Ug.CLOSED) : "failed" === this._state && this.emit(Ug.FAILED));
        }
        constructor(e2, t2, i2, r2) {
          super(), mp(this, "connectionID", 0), mp(this, "currentURLIndex", 0), mp(this, "reconnectReason", void 0), mp(this, "_reconnectMode", "tryNext"), mp(this, "_initMutex", void 0), mp(this, "_name", void 0), mp(this, "_state", "closed"), mp(this, "_reconnectInterrupter", void 0), mp(this, "_url", void 0), mp(this, "_retryConfig", void 0), mp(this, "_reconnectCount", 0), mp(this, "_forceCloseTimeout", 5e3), mp(this, "_onlineReconnectListener", void 0), mp(this, "_messageSender", void 0), mp(this, "_closeEstablishingTransmitter", () => {
          }), mp(this, "_store", void 0), mp(this, "_joinChannelServiceRecordIndex", void 0), mp(this, "_transmitter", void 0), mp(this, "_useCompress", void 0), mp(this, "_inflateLength", 0), mp(this, "_deflateLength", 0), this._store = r2, this._name = e2, this._retryConfig = function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var i3 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? iO(Object(i3), true).forEach(function(t4) {
                mp(e3, t4, i3[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(i3)) : iO(Object(i3)).forEach(function(t4) {
                Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(i3, t4));
              });
            }
            return e3;
          }({}, t2), this._useCompress = i2;
        }
        resetReconnectCount(e2) {
          NE.debug("".concat(this._name, " reset reconnect count, reason: ").concat(e2)), this._reconnectCount = 0;
        }
        close(e2, t2) {
          var i2;
          if (this.currentURLIndex = 0, this.resetReconnectCount("close"), null === (i2 = this._messageSender) || void 0 === i2 || i2.reset(), this._reconnectInterrupter && this._reconnectInterrupter(), this._transmitter) {
            this._transmitter.onclose = null, this._transmitter.onopen = null, this._transmitter.onmessage = null;
            const e3 = this._transmitter;
            t2 ? setTimeout(() => e3.close(), 500) : e3.close(), this._transmitter = void 0;
          }
          this.state = e2 ? "failed" : "closed", this._closeEstablishingTransmitter && this._closeEstablishingTransmitter();
        }
        reconnect(e2, t2) {
          if (!this._transmitter)
            return void NE.warning("[".concat(this._name, "] can not reconnect, no websocket"));
          var i2;
          (void 0 !== e2 && (this.reconnectMode = e2), NE.debug("[".concat(this._name, "] reconnect is triggered initiative")), "number" == typeof this._joinChannelServiceRecordIndex) && (null === (i2 = this._store) || void 0 === i2 || i2.recordJoinChannelService({ status: "error", errors: [new Error(t2)] }, this._joinChannelServiceRecordIndex));
          const r2 = this._transmitter.onclose;
          this._transmitter.onclose = null, this._transmitter.close(), r2 && r2.bind(this._transmitter)({ code: 9999, reason: t2 });
        }
        getInflateData() {
          const e2 = this._inflateLength, t2 = this._deflateLength;
          return this.clearInflateData(), { inflateLength: e2, deflateLength: t2 };
        }
        setInflateData(e2) {
          this._deflateLength = this._deflateLength + e2.originLength, this._inflateLength = this._inflateLength + e2.compressedLength;
        }
        clearInflateData() {
          this._inflateLength = 0, this._deflateLength = 0;
        }
      }
      function nO(e2, t2, i2) {
        if ("getBigUint64" in DataView.prototype)
          return e2.getBigUint64(t2, i2);
        const r2 = e2.getUint32(t2, i2), n2 = e2.getUint32(t2 + 4, i2), o2 = Number(!!i2), s2 = Number(!i2);
        return BigInt(r2 * s2 + n2 * o2) << BigInt(32) | BigInt(r2 * o2 + n2 * s2);
      }
      function oO(e2, t2, i2, r2) {
        if ("setBigUint64" in DataView.prototype)
          return e2.setBigUint64(t2, i2, r2);
        const n2 = Number(i2 >> BigInt(32)), o2 = Number(i2 & BigInt(4294967295));
        r2 ? (e2.setUint32(t2 + 4, n2, r2), e2.setUint32(t2, o2, r2)) : (e2.setUint32(t2, n2, r2), e2.setUint32(t2 + 4, o2, r2));
      }
      let sO;
      !function(e2) {
        e2[e2.Default = 0] = "Default", e2[e2.Ack = 1] = "Ack";
      }(sO || (sO = {}));
      class aO {
        constructor(e2, t2, i2) {
          mp(this, "version", 1), mp(this, "initialRTO", void 0), mp(this, "maxBatchAckCount", void 0), mp(this, "maxRTO", void 0), mp(this, "initialRTT", void 0), mp(this, "ID", void 0), mp(this, "rtt", void 0), mp(this, "packetNumber", 1), mp(this, "rtoRatioMap", /* @__PURE__ */ new Map()), mp(this, "timeoutMap", /* @__PURE__ */ new Map()), mp(this, "unorderedPacketQueue", []), mp(this, "batchAckPacketQueue", []), mp(this, "lastOrderedPacketNumber", 0), mp(this, "batchAckTimer", void 0), mp(this, "sendImpl", void 0), mp(this, "receiveImpl", void 0), this.sendImpl = e2, this.receiveImpl = t2, this.ID = MR(7, "transmitter-"), this.initialRTO = void 0 !== (null == i2 ? void 0 : i2.initialRTO) ? i2.initialRTO : HE("TRANSMITTER_INITIAL_RTO"), this.initialRTT = void 0 !== (null == i2 ? void 0 : i2.initialRTT) ? i2.initialRTT : HE("TRANSMITTER_INITIAL_RTT"), this.rtt = void 0 !== (null == i2 ? void 0 : i2.initialRTT) ? i2.initialRTT : HE("TRANSMITTER_INITIAL_RTT"), this.maxBatchAckCount = void 0 !== (null == i2 ? void 0 : i2.maxBatchAckCount) ? i2.maxBatchAckCount : HE("TRANSMITTER_MAX_BATCH_ACK_COUNT"), this.maxRTO = void 0 !== (null == i2 ? void 0 : i2.maxRTO) ? i2.maxRTO : HE("TRANSMITTER_MAX_RTO");
        }
        packetize(e2, t2) {
          return { type: sO.Default, version: this.version, packetNumber: t2, payload: e2 };
        }
        serialize(e2) {
          switch (e2.type) {
            case sO.Default: {
              let t2;
              if ("string" == typeof e2.payload) {
                t2 = new TextEncoder().encode(e2.payload);
              } else
                t2 = e2.payload;
              const i2 = new ArrayBuffer(t2.length + 15), r2 = new DataView(i2);
              r2.setUint16(0, e2.version), r2.setUint8(2, e2.type), r2.setUint32(3, e2.packetNumber), oO(r2, 7, BigInt(e2.sendTs));
              return new Uint8Array(r2.buffer).set(t2, 15), i2;
            }
            case sO.Ack: {
              const t2 = new ArrayBuffer(16), i2 = new DataView(t2);
              return i2.setUint16(0, e2.version), i2.setUint8(2, e2.type), i2.setUint32(3, e2.maxAckPacketNumber), i2.setUint8(7, e2.shift), oO(i2, 8, BigInt(e2.ackSendTs)), t2;
            }
          }
        }
        deserialize(e2) {
          const t2 = new DataView(e2), i2 = t2.getUint16(0), r2 = t2.getUint8(2);
          switch (r2) {
            case sO.Default: {
              const n2 = t2.getUint32(3), o2 = nO(t2, 7), s2 = e2.slice(15), a2 = new TextDecoder().decode(s2);
              return { version: i2, type: r2, packetNumber: n2, sendTs: Number(o2), payload: a2 };
            }
            case sO.Ack: {
              const e3 = t2.getUint32(3), n2 = t2.getUint8(7), o2 = nO(t2, 8);
              return { version: i2, type: r2, maxAckPacketNumber: e3, shift: n2, ackSendTs: Number(o2) };
            }
            default:
              throw NE.error("[".concat(this.ID, "] Unrecognized packet type ").concat(r2)), new Error("Unrecognized packet type ".concat(r2));
          }
        }
        sendMessage(e2) {
          const t2 = this.packetize(e2, this.packetNumber);
          this.packetNumber = 4294967295 === this.packetNumber ? 1 : this.packetNumber + 1;
          const i2 = this.calculateRTO(t2), r2 = window.setTimeout(() => {
            this.resendMessage(t2);
          }, i2);
          this.timeoutMap.set(t2.packetNumber, r2), this.sendPacket(t2);
        }
        onData(e2) {
          const t2 = this.deserialize(e2);
          t2.type === sO.Default ? this.ack(t2) : t2.type === sO.Ack && (this.updateRTT(t2, Math.round(performance.now())), this.clearRTO(t2));
        }
        close() {
          this.rtt = this.initialRTT, this.packetNumber = 1, Array.from(this.timeoutMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            window.clearTimeout(i2);
          }), this.timeoutMap = /* @__PURE__ */ new Map(), this.rtoRatioMap = /* @__PURE__ */ new Map(), this.unorderedPacketQueue = [], this.batchAckPacketQueue = [], this.lastOrderedPacketNumber = 0, void 0 !== this.batchAckTimer && window.clearTimeout(this.batchAckTimer);
        }
        resendMessage(e2) {
          const t2 = this.calculateRTO(e2), i2 = window.setTimeout(() => {
            this.resendMessage(e2);
          }, t2);
          this.timeoutMap.set(e2.packetNumber, i2), this.sendPacket(e2);
        }
        calculateRTO(e2) {
          const t2 = this.rtoRatioMap.get(e2.packetNumber);
          if (void 0 === t2)
            return this.rtoRatioMap.set(e2.packetNumber, 1), this.initialRTO;
          {
            const i2 = 9 * this.rtt / 8 * t2;
            return this.rtoRatioMap.set(e2.packetNumber, t2 + 1), i2 > this.maxRTO ? this.maxRTO : i2;
          }
        }
        updateRTT(e2, t2) {
          const i2 = e2.ackSendTs;
          this.rtt = this.rtt * (7 / 8) + (t2 - i2 - this.rtt) / 8;
        }
        ack(e2) {
          if (e2.packetNumber === this.lastOrderedPacketNumber + 1)
            for (this.batchAckPacketQueue.length >= this.maxBatchAckCount && this.batchAck(), this.batchAckTimer ? this.batchAckPacketQueue.push(e2) : (this.batchAckPacketQueue.push(e2), this.batchAckTimer = window.setTimeout(() => {
              this.batchAck();
            }, this.rtt / 8)), this.lastOrderedPacketNumber += 1, this.receiveImpl(e2.payload); ; ) {
              const e3 = this.unorderedPacketQueue[0];
              if (!e3) {
                this.unorderedPacketQueue.shift();
                break;
              }
              this.batchAckTimer && this.batchAck(), this.receiveImpl(e3.payload), this.unorderedPacketQueue.shift(), this.lastOrderedPacketNumber += 1;
            }
          else if (e2.packetNumber <= this.lastOrderedPacketNumber) {
            const t2 = { ackSendTs: e2.sendTs, maxAckPacketNumber: e2.packetNumber, shift: 0, type: sO.Ack, version: this.version };
            this.sendPacket(t2);
          } else if (e2.packetNumber > this.lastOrderedPacketNumber) {
            this.unorderedPacketQueue[e2.packetNumber - this.lastOrderedPacketNumber - 2] = e2;
            const t2 = { ackSendTs: e2.sendTs, maxAckPacketNumber: e2.packetNumber, shift: 0, type: sO.Ack, version: this.version };
            this.sendPacket(t2);
          }
        }
        batchAck() {
          window.clearTimeout(this.batchAckTimer), this.batchAckTimer = void 0;
          const e2 = { ackSendTs: this.batchAckPacketQueue[this.batchAckPacketQueue.length - 1].sendTs, maxAckPacketNumber: this.batchAckPacketQueue[this.batchAckPacketQueue.length - 1].packetNumber, shift: this.batchAckPacketQueue.length - 1, type: sO.Ack, version: this.version };
          this.sendPacket(e2), this.batchAckPacketQueue = [];
        }
        sendPacket(e2) {
          e2.type === sO.Default && (e2.sendTs = Math.round(performance.now()));
          const t2 = this.serialize(e2);
          this.sendImpl(t2);
        }
        clearRTO(e2) {
          for (let t2 = e2.maxAckPacketNumber - e2.shift; t2 <= e2.maxAckPacketNumber; t2++) {
            const e3 = this.timeoutMap.get(t2);
            void 0 !== e3 && window.clearTimeout(e3), this.timeoutMap.delete(t2), this.rtoRatioMap.delete(t2);
          }
        }
      }
      class cO extends gE {
        get queue() {
          return [...this.highPriorityQueue, ...this.lowPriorityQueue];
        }
        constructor(e2) {
          super(), mp(this, "lowPriorityQueue", []), mp(this, "highPriorityQueue", []), mp(this, "AgoraTransmissionManager", void 0), this.AgoraTransmissionManager = e2;
        }
        reset() {
          this.lowPriorityQueue = [], this.highPriorityQueue = [];
        }
        pushMessage(e2) {
          arguments.length > 1 && void 0 !== arguments[1] && arguments[1] ? this.highPriorityQueue.push(e2) : this.lowPriorityQueue.push(e2), this.sendMessage();
        }
        sendMessage() {
          const e2 = this.queue.length;
          let t2 = 0;
          t2 = e2 < 5 ? 15 * e2 : 60 + 3 * (e2 - 4), setTimeout(() => {
            this._sendMessage();
          }, t2);
        }
        _sendMessage() {
          if (!this.queue.length)
            return;
          const e2 = this.AgoraTransmissionManager.getConnection();
          if (!e2)
            return;
          const t2 = this.queue.shift();
          return this.lowPriorityQueue.includes(t2) ? this.lowPriorityQueue.shift() : this.highPriorityQueue.shift(), e2.sendMessage(t2.compressed), t2;
        }
      }
      class dO extends rO {
        constructor(e2, t2) {
          super(e2, t2, arguments.length > 2 && void 0 !== arguments[2] && arguments[2], arguments.length > 3 ? arguments[3] : void 0), mp(this, "_initMutex", void 0), mp(this, "_reconnectInterrupter", void 0), mp(this, "_url", void 0), mp(this, "_transmitter", void 0), mp(this, "_addresses", void 0), mp(this, "_reliableTransmission", void 0), this._initMutex = new OT("datachannel");
          const { timeout: i2, timeoutFactor: r2 } = t2, n2 = Math.max(300, Math.floor(3 * i2 / 5)), o2 = Math.max(1.2, Math.floor(8 * r2) / 10);
          bg.ONLINE && (this._retryConfig.timeout = n2, this._retryConfig.timeoutFactor = o2), pT.on(wg.NETWORK_STATE_CHANGE, (e3, t3) => {
            e3 !== t3 && (this.resetReconnectCount("network state change: ".concat(t3, " -> ").concat(e3)), e3 === bg.ONLINE ? (this._retryConfig.timeout = n2, this._retryConfig.timeoutFactor = o2) : (this._retryConfig.timeout = i2, this._retryConfig.timeoutFactor = r2));
          });
        }
        getConnection() {
          if (this._reliableTransmission)
            return this._reliableTransmission;
        }
        async init(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5e3;
          this._forceCloseTimeout = t2;
          const i2 = (t3, i3) => {
            this._addresses = e2, this.currentURLIndex = this._addresses.findIndex((e3) => e3.fingerprint || HE("FINGERPRINT"));
            const r2 = this._addresses[this.currentURLIndex];
            this.state = "connecting", this._messageSender = new cO(this), this.createTransmitterConnection(r2).then(t3).catch(i3), this.once(Ug.CLOSED, () => i3(new vE(TE.WS_DISCONNECT))), this.once(Ug.CONNECTED, () => t3());
          };
          return this._initMutex.lock().then((e3) => new Cl((e4, t3) => {
            i2(e4, t3);
          }).then(() => {
            e3();
          }).catch(() => {
            e3();
          }));
        }
        sendMessage(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          if (!this._transmitter || !this._reliableTransmission)
            throw new vE(TE.WS_ABORT, "datachannel is not ready");
          try {
            let r2 = null;
            r2 = i2 ? this.sendMessageWithUint8Array(e2) : this.sendMessageWithJSON(e2), t2 ? this._reliableTransmission.sendMessage(r2.compressed) : this._messageSender.pushMessage(r2);
          } catch (e3) {
            throw new vE(TE.WS_ERR, "send datachannel signal message error" + e3.toString());
          }
        }
        unbindDcCloseEventListener() {
          this._transmitter && (this._transmitter.onclose = null);
        }
        sendMessageWithJSON(e2) {
          const t2 = JSON.stringify(e2);
          return { compressed: t2, compressedLength: t2.length, origin: e2 };
        }
        sendMessageWithUint8Array(e2) {
          return { compressed: e2, compressedLength: e2.byteLength, origin: e2 };
        }
        createTransmitterConnection(e2) {
          return this.connectionID += 1, this._joinChannelServiceRecordIndex = void 0, this._url = "dc://".concat(e2.ip, ":").concat(e2.port), new Cl((t2, i2) => {
            var r2;
            const n2 = () => {
              NE.debug("[".concat(this._name, "] datachannel opened:"), this._url), this.reconnectMode = "retry", this.state = "connected", this.resetReconnectCount("opened"), t2();
            }, o2 = async (e3) => {
              var r3;
              if (null === (r3 = this._closeEstablishingTransmitter) || void 0 === r3 || r3.call(this), NE.debug("[".concat(this._name, "] datachannel close ").concat(this._url, ", code: ").concat(e3.code, ", reason: ").concat(e3.reason, ", current mode: ").concat(this.reconnectMode)), this._reconnectCount < this._retryConfig.maxRetryCount) {
                "connected" === this.state && (this.reconnectReason = e3.reason, this.state = "reconnecting");
                const r4 = GR(this, Ug.WILL_RECONNECT, this.reconnectMode) || this.reconnectMode, n3 = await this.reconnectWithAction(r4);
                if ("closed" === this.state)
                  return void NE.debug("[".concat(this.connectionID, "] dc is closed, no need to reconnect"));
                if (!n3)
                  return i2(new vE(TE.WS_DISCONNECT, "datachannel reconnect failed: ".concat(e3.code))), void this.close(true);
                t2();
              } else
                i2(new vE(TE.WS_DISCONNECT, "datachannel close: ".concat(e3.code))), this.close();
            }, s2 = (e3) => {
              var t3;
              null === (t3 = this._reliableTransmission) || void 0 === t3 || t3.onData(e3.data);
            };
            this._transmitter && (this._transmitter.onclose = null, this._transmitter.close()), this._reliableTransmission && (this._reliableTransmission.close(), this._reliableTransmission = void 0), NE.debug("[".concat(this._name, "] start connect, address: ").concat(JSON.stringify(e2)));
            const a2 = null === (r2 = this._store) || void 0 === r2 ? void 0 : r2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "gateway" }), c2 = Date.now();
            FR(this, Ug.TO_CONNECT_DATACHANNEL, e2).then((e3) => {
              var t3, i3;
              if (!e3)
                throw new Error("transmissonInfo not exist yet");
              const { transmitter: r3, close: d2 } = e3;
              this._transmitter = r3, null === (t3 = this._store) || void 0 === t3 || t3.signalChannelOpen();
              const u2 = Date.now() - c2;
              NE.debug("[choose dc] dc open cost ".concat(u2, "ms"));
              this._reliableTransmission = new aO((e4) => {
                var t4;
                this._transmitter && "open" === this._transmitter.readyState && (null === (t4 = this._transmitter) || void 0 === t4 || t4.send(e4));
              }, (e4) => {
                "string" == typeof e4 && this.emit(Ug.ON_MESSAGE, e4);
              }), this._closeEstablishingTransmitter = () => {
                var e4;
                null === (e4 = this._reliableTransmission) || void 0 === e4 || e4.close(), this._reliableTransmission = void 0, d2();
              }, n2 && n2(), r3.onclose = o2, r3.onmessage = s2, null === (i3 = this._store) || void 0 === i3 || i3.recordJoinChannelService({ endTs: Date.now(), status: "success" }, a2), this._joinChannelServiceRecordIndex = a2;
            }).catch((e3) => {
              var t3;
              if (null === (t3 = this._store) || void 0 === t3 || t3.recordJoinChannelService({ endTs: Date.now(), status: e3 instanceof vE && e3.code === TE.WS_ABORT ? "aborted" : "error", errors: [e3] }, a2), "closed" !== this.state) {
                if (e3 instanceof vE && e3.code === TE.WS_ERR) {
                  const t4 = new vE(TE.WS_ERR, "init datachannel failed! Error: ".concat(e3.toString()));
                  return NE.error("[".concat(this._name, "]").concat(t4)), void i2(t4);
                }
                o2 && o2(e3);
              } else
                i2(new vE(TE.WS_DISCONNECT, "datachannel is closed: ".concat(e3.toString())));
            });
          });
        }
        async reconnectWithAction(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (this._reconnectCount >= this._retryConfig.maxRetryCount)
            return false;
          if (!this._addresses)
            return false;
          if ("closed" === this.state)
            return false;
          this._onlineReconnectListener || pT.networkState !== bg.OFFLINE || (this._onlineReconnectListener = pT.onlineWaiter && pT.onlineWaiter.then(() => {
            this._onlineReconnectListener = void 0;
          }));
          let i2 = true;
          if (this._reconnectInterrupter = () => {
            i2 = false;
          }, t2) {
            const t3 = IE(this._reconnectCount, this._retryConfig);
            NE.debug("[".concat(this._name, "] wait ").concat(t3, "ms to reconnect datachannel, mode: ").concat(e2)), await Cl.race([LR(t3), this._onlineReconnectListener || new Cl(() => {
            })]);
          }
          if ("closed" === this.state || !i2)
            return false;
          this._reconnectCount += 1;
          const r2 = async (e3, t3) => {
            this.emit(Ug.RECONNECT_CREATE_CONNECTION, t3), await this.createTransmitterConnection(e3);
          };
          try {
            if ("retry" === e2) {
              const t3 = this._addresses[this.currentURLIndex];
              this.emit(Ug.RECONNECT_WAITTING_FINISH, e2), await r2(t3, e2);
            } else if ("tryNext" === e2) {
              this.currentURLIndex += 1;
              for (let e3 = this.currentURLIndex; e3 < this._addresses.length; e3++) {
                if (this._addresses[e3].fingerprint || HE("FINGERPRINT")) {
                  this.currentURLIndex = e3;
                  break;
                }
                this.currentURLIndex += 1;
              }
              if (this.currentURLIndex >= this._addresses.length)
                return NE.debug("[".concat(this._name, "] the available addresses are exhausted, change to recover")), await this.reconnectWithAction("recover", false);
              NE.debug("[".concat(this._name, "] datachannel url length: ").concat(this._addresses.length, " current index: ").concat(this.currentURLIndex));
              const t3 = this._addresses[this.currentURLIndex];
              this.emit(Ug.RECONNECT_WAITTING_FINISH, e2), await r2(t3, e2);
            } else
              "recover" === e2 && (NE.debug("[".concat(this._name, "] start to failback to websocket")), this.resetReconnectCount("recover mode"), this.emit(Ug.RECONNECT_WAITTING_FINISH, e2), this.emit(Ug.FAILBACK));
            return true;
          } catch (i3) {
            var n2;
            return NE.error("[".concat(this._name, "] reconnect failed"), i3.toString()), null != i3 && null !== (n2 = i3.data) && void 0 !== n2 && n2.desc && Array.isArray(i3.data.desc) && i3.data.desc.length && i3.data.desc.includes("dynamic key expired") ? (this.emit(Ug.ON_TOKEN_PRIVILEGE_DID_EXPIRE), false) : await this.reconnectWithAction(e2, t2);
          }
        }
      }
      class uO extends gE {
        get connectionState() {
          return this._connectionState;
        }
        set connectionState(e2) {
          e2 !== this._connectionState && (this._connectionState = e2, e2 === bm.CONNECTED ? this.emit(wm.WS_CONNECTED) : e2 === bm.RECONNECTING ? this.emit(wm.WS_RECONNECTING, this._websocketReconnectReason) : e2 === bm.CLOSED && this.emit(wm.WS_CLOSED, this._disconnectedReason));
        }
        get currentURLIndex() {
          return this.websocket.currentURLIndex;
        }
        get url() {
          return this.websocket ? this.websocket.url : null;
        }
        get rtt() {
          return this.rttRolling.mean();
        }
        constructor(e2, t2) {
          super(), mp(this, "_disconnectedReason", void 0), mp(this, "_websocketReconnectReason", void 0), mp(this, "_connectionState", bm.CLOSED), mp(this, "reconnectToken", void 0), mp(this, "websocket", void 0), mp(this, "openConnectionTime", void 0), mp(this, "clientId", void 0), mp(this, "lastMsgTime", Date.now()), mp(this, "uploadCache", []), mp(this, "uploadCacheInterval", void 0), mp(this, "rttRolling", new eO(5)), mp(this, "pingpongTimer", void 0), mp(this, "inflateDataTimer", void 0), mp(this, "pingpongTimeoutCount", 0), mp(this, "joinResponse", void 0), mp(this, "multiIpOption", void 0), mp(this, "initError", void 0), mp(this, "spec", void 0), mp(this, "store", void 0), mp(this, "onWebsocketMessage", (e3) => {
            if (e3 instanceof ArrayBuffer)
              return void this.emit(wm.ON_BINARY_DATA, e3);
            const t3 = JSON.parse(e3);
            if (this.lastMsgTime = Date.now(), Object.prototype.hasOwnProperty.call(t3, "_id")) {
              const e4 = "res-@".concat(t3._id);
              this.emit(e4, t3._result, t3._message);
            } else if (Object.prototype.hasOwnProperty.call(t3, "_type") && (this.emit(t3._type, t3._message), t3._type === Pm.ON_NOTIFICATION && this.handleNotification(t3._message), t3._type === Pm.ON_USER_BANNED))
              switch (t3._message.error_code) {
                case 14:
                  this.close(Cm.UID_BANNED);
                  break;
                case 15:
                  this.close(Cm.IP_BANNED);
                  break;
                case 16:
                  this.close(Cm.CHANNEL_BANNED);
              }
          }), this.clientId = e2.clientId, this.spec = e2, this.store = t2, this.websocket = new dO("gateway-".concat(this.clientId), this.spec.retryConfig, true, t2), this.handleWebsocketEvents(), window.addEventListener("offline", () => {
            this.connectionState === bm.CONNECTED && this.reconnect("retry", Mg.OFFLINE);
          });
        }
        async request(e2, t2, i2, r2) {
          const n2 = MR(6, ""), o2 = { _id: n2, _type: e2, _message: t2 }, s2 = this.websocket.connectionID, a2 = () => new Cl((t3, i3) => {
            if (this.connectionState === bm.CONNECTED)
              return t3();
            const r3 = () => {
              this.off(wm.WS_CLOSED, n3), t3();
            }, n3 = () => {
              this.off(wm.WS_CONNECTED, r3), i3(new vE(TE.WS_ABORT));
            };
            this.once(wm.WS_CONNECTED, r3), this.once(wm.WS_CLOSED, n3), e2 !== Nm.PUBLISH && e2 !== Nm.SUBSCRIBE && e2 !== Nm.UNSUBSCRIBE && e2 !== Nm.UNPUBLISH && e2 !== Nm.CONTROL && e2 !== Nm.RESTART_ICE || this.once(wm.DISCONNECT_P2P, () => {
              i3(new vE(TE.DISCONNECT_P2P));
            }), e2 !== Nm.PUBLISH && e2 !== Nm.RESTART_ICE || this.once(wm.ABORT_P2P_EXECUTION, () => {
              i3(new vE(TE.DISCONNECT_P2P));
            });
          });
          if (this.connectionState !== bm.CONNECTING && this.connectionState !== bm.RECONNECTING || e2 === Nm.JOIN || e2 === Nm.REJOIN || await a2(), e2 === Nm.LEAVE && (this.websocket.unbindDcCloseEventListener(), r2 = true), this.websocket.sendMessage(o2, true, false), r2)
            return;
          const c2 = new Cl((i3, r3) => {
            let o3 = false;
            const a3 = (r4, n3) => {
              o3 = true, i3({ isSuccess: "success" === r4, message: n3 || {} }), this.off(wm.WS_CLOSED, c3), this.off(wm.WS_RECONNECTING, c3), this.emit(wm.REQUEST_SUCCESS, e2, t2);
            };
            this.once("res-@".concat(n2), a3);
            const c3 = () => {
              r3(new vE(TE.WS_ABORT, "type: ".concat(e2))), this.off(wm.WS_CLOSED, c3), this.off(wm.WS_RECONNECTING, c3), this.off("res-@".concat(n2), a3);
            };
            this.once(wm.WS_CLOSED, c3), this.once(wm.WS_RECONNECTING, c3), LR(HE("SIGNAL_REQUEST_TIMEOUT")).then(() => {
              this.websocket.connectionID !== s2 || o3 || (NE.warning("dc request timeout, type: ".concat(e2)), this.emit(wm.REQUEST_TIMEOUT, e2, t2));
            });
          });
          let d2 = null;
          try {
            d2 = await c2;
          } catch (r3) {
            if (this.connectionState === bm.CLOSED || e2 === Nm.LEAVE)
              throw new vE(TE.WS_ABORT);
            return !this.spec.forceWaitGatewayResponse || i2 ? r3.throw() : e2 === Nm.JOIN || e2 === Nm.REJOIN ? null : (await a2(), await this.request(e2, t2));
          }
          if (d2.isSuccess)
            return d2.message;
          const u2 = Number(d2.message.error_code || d2.message.code), l2 = zA(u2), h2 = new vE(TE.UNEXPECTED_RESPONSE, "".concat(l2.desc, ": ").concat(d2.message.error_str), { code: u2, data: d2.message });
          return "success" === l2.action ? d2.message : (NE.warning("[".concat(this.websocket.connectionID, "] unexpected response from type ").concat(e2, ", error_code: ").concat(u2, ", message: ").concat(l2.desc, ", action: ").concat(l2.action)), u2 === Im.ERR_TOO_MANY_BROADCASTERS ? e2 === Nm.JOIN || e2 === Nm.REJOIN ? (this.initError = h2, this.close(), h2.throw()) : h2.throw() : "failed" === l2.action ? h2.throw() : "quit" === l2.action ? (this.initError = h2, this.close(), h2.throw()) : (u2 === Im.ERR_JOIN_BY_MULTI_IP ? (this.multiIpOption = d2.message.option, NE.warning("[".concat(this.clientId, "] detect multi ip, recover")), this.reconnect("recover", Mg.MULTI_IP)) : this.reconnect(l2.action, Mg.SERVER_ERROR), e2 === Nm.JOIN || e2 === Nm.REJOIN ? null : await this.request(e2, t2)));
        }
        waitMessage(e2, t2) {
          return new Cl((i2) => {
            const r2 = (n2) => {
              (!t2 || t2(n2)) && (this.off(e2, r2), i2(n2));
            };
            this.on(e2, r2);
          });
        }
        upload(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          try {
            this.websocket.sendMessage(i2);
          } catch (e3) {
            const t3 = HE("MAX_UPLOAD_CACHE") || 50;
            this.uploadCache.push(i2), this.uploadCache.length > t3 && this.uploadCache.splice(0, 1), this.uploadCache.length > 0 && !this.uploadCacheInterval && (this.uploadCacheInterval = window.setInterval(() => {
              if (this.connectionState !== bm.CONNECTED)
                return;
              const e4 = this.uploadCache.splice(0, 1)[0];
              0 === this.uploadCache.length && (window.clearInterval(this.uploadCacheInterval), this.uploadCacheInterval = void 0), this.upload(e4._type, e4._message);
            }, HE("UPLOAD_CACHE_INTERVAL") || 2e3));
          }
        }
        send(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          this.websocket.sendMessage(i2);
        }
        init(e2, t2) {
          return this.initError = void 0, this.multiIpOption = void 0, this.joinResponse = void 0, this.reconnectToken = void 0, this.openConnectionTime = void 0, new Cl((i2, r2) => {
            this.once(wm.WS_CONNECTED, () => i2(this.joinResponse)), this.once(wm.WS_CLOSED, () => r2(this.initError || new vE(TE.WS_ABORT))), this.connectionState = bm.CONNECTING, this.websocket.init(e2).catch(r2), this.websocket.once(Ug.FAILBACK, () => {
              void 0 === this.openConnectionTime && r2(new vE(TE.INIT_DATACHANNEL_TIMEOUT));
            }), this.inflateDataTimer && window.clearInterval(this.inflateDataTimer), this.inflateDataTimer = window.setInterval(() => {
              this.handleInflateData();
            }, 2e4), setTimeout(() => {
              t2 && void 0 === this.openConnectionTime && (NE.debug("[".concat(this.clientId, "] init datachannel timeout while join with failback to websocket")), r2(new vE(TE.INIT_DATACHANNEL_TIMEOUT)));
            }, HE("DC_JOIN_WITH_FAILBACK"));
          });
        }
        close(e2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.inflateDataTimer && (this.handleInflateData(), window.clearInterval(this.inflateDataTimer), this.inflateDataTimer = void 0), this.reconnectToken = void 0, this.joinResponse = void 0, this._disconnectedReason = e2 || Cm.LEAVE, this.connectionState = bm.CLOSED, NE.debug("[".concat(this.clientId, "] ") + "will close datachannel in signal"), this.websocket.close(), e2 === Cm.FALLBACK && (this.websocket.removeAllListeners(), this.websocket = new dO("gateway-".concat(this.clientId), this.spec.retryConfig, true, this.store), this.handleWebsocketEvents());
        }
        async join() {
          if (!this.joinResponse) {
            this.emit(wm.ABORT_P2P_EXECUTION);
            const e2 = await FR(this, wm.DATACHANNEL_CONNECTING), t2 = await this.request(Nm.JOIN, e2);
            if (!t2)
              return this.emit(wm.REPORT_JOIN_GATEWAY, TE.TIMEOUT, this.url || ""), false;
            this.joinResponse = t2, this.emit(wm.JOIN_RESPONSE, this.joinResponse), this.reconnectToken = this.joinResponse.rejoin_token;
          }
          return this.connectionState = bm.CONNECTED, this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(this.handlePingPong.bind(this), 3e3), true;
        }
        async rejoin() {
          if (!this.reconnectToken)
            throw new vE(TE.UNEXPECTED_ERROR, "can not rejoin, no rejoin token");
          const e2 = WR(this, wm.REQUEST_REJOIN_INFO);
          e2.token = this.reconnectToken;
          const t2 = await this.request(Nm.REJOIN, e2);
          return !!t2 && (this.connectionState = bm.CONNECTED, this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(this.handlePingPong.bind(this), 3e3), t2.peers && t2.peers.forEach((e3) => {
            this.emit(Pm.ON_USER_ONLINE, { uid: e3.uid }), e3.audio && this.emit(Pm.ON_ADD_AUDIO_STREAM, { uid: e3.uid, uint_id: e3.uint_id, audio: true, ssrcId: e3.audio_ssrc }), e3.video && this.emit(Pm.ON_ADD_VIDEO_STREAM, { uid: e3.uid, uint_id: e3.uint_id, video: true, ssrcId: e3.video_ssrc }), e3.audio_mute ? this.emit(Pm.MUTE_AUDIO, { uid: e3.uid }) : this.emit(Pm.UNMUTE_AUDIO, { uid: e3.uid }), e3.video_mute ? this.emit(Pm.MUTE_VIDEO, { uid: e3.uid }) : this.emit(Pm.UNMUTE_VIDEO, { uid: e3.uid }), e3.audio_enable_local ? this.emit(Pm.ENABLE_LOCAL_AUDIO, { uid: e3.uid }) : this.emit(Pm.DISABLE_LOCAL_AUDIO, { uid: e3.uid }), e3.video_enable_local ? this.emit(Pm.ENABLE_LOCAL_VIDEO, { uid: e3.uid }) : this.emit(Pm.DISABLE_LOCAL_VIDEO, { uid: e3.uid }), e3.audio || e3.video || this.emit(Pm.ON_REMOVE_STREAM, { uid: e3.uid, uint_id: e3.uint_id });
          }), true);
        }
        reconnect(e2, t2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.websocket.reconnect(e2, t2);
        }
        handleNotification(e2) {
          NE.debug("[".concat(this.clientId, "] receive notification: "), e2);
          const t2 = zA(e2.code);
          if ("success" !== t2.action) {
            if ("failed" !== t2.action)
              return "quit" === t2.action ? ("ERR_REPEAT_JOIN_CHANNEL" === t2.desc && this.close(Cm.UID_BANNED), void this.close()) : void this.reconnect(t2.action, Mg.SERVER_ERROR);
            NE.error("[".concat(this.clientId, "] ignore error: "), t2.desc);
          }
        }
        handlePingPong() {
          if (!this.websocket || "connected" !== this.websocket.state)
            return;
          this.pingpongTimeoutCount > 0 && this.rttRolling.add(3e3), this.pingpongTimeoutCount += 1;
          const e2 = HE("PING_PONG_TIME_OUT"), t2 = Date.now();
          this.pingpongTimeoutCount >= e2 && (NE.warning("PINGPONG Timeout. Last Socket Message: ".concat(t2 - this.lastMsgTime, "ms")), t2 - this.lastMsgTime > HE("WEBSOCKET_TIMEOUT_MIN")) ? this.reconnect("retry", Mg.TIMEOUT) : this.request(Nm.PING, void 0, true).then(() => {
            this.pingpongTimeoutCount = 0;
            const e3 = Date.now() - t2;
            this.rttRolling.add(e3), HE("REPORT_STATS") && this.send(Nm.PING_BACK, { pingpongElapse: e3 });
          }).catch((e3) => {
          });
        }
        handleInflateData() {
          const { inflateLength: e2, deflateLength: t2 } = this.websocket.getInflateData();
          0 !== e2 && 0 !== t2 && this.upload(Dm.WS_INFLATE_DATA_LENGTH, { ws_deflate_length: t2, ws_inflate_length: e2 });
        }
        handleWebsocketEvents() {
          this.websocket.on(Ug.RECONNECT_WAITTING_FINISH, (e2) => {
            this.emit(wm.WS_RECONNECT_WAITTING_FINISH, e2);
          }), this.websocket.on(Ug.RECONNECT_CREATE_CONNECTION, (e2) => {
            this.emit(wm.WS_RECONNECT_CREATE_CONNECTION, e2);
          }), this.websocket.on(Ug.ON_MESSAGE, this.onWebsocketMessage), this.websocket.on(Ug.CLOSED, () => {
            this.connectionState = bm.CLOSED;
          }), this.websocket.on(Ug.FAILED, () => {
            this._disconnectedReason = Cm.NETWORK_ERROR, this.connectionState = bm.CLOSED;
          }), this.websocket.on(Ug.RECONNECTING, (e2) => {
            this._websocketReconnectReason = e2, this.joinResponse = void 0, this.connectionState === bm.CONNECTED ? this.connectionState = bm.RECONNECTING : this.connectionState = bm.CONNECTING;
          }), this.websocket.on(Ug.WILL_RECONNECT, (e2, t2) => {
            if (WR(this, wm.IS_P2P_DISCONNECTED) && "retry" === e2)
              return NE.debug("".concat(this.clientId, " reconnect mode is retry, but p2p lost, change to tryNext")), this.reconnectToken = void 0, this.emit(wm.NEED_RENEW_SESSION), this.emit(wm.DISCONNECT_P2P), t2("tryNext");
            "retry" !== e2 && (NE.debug("".concat(this.clientId, " websockt will_connect event, renewSession reconnectMode is ").concat(e2)), this.reconnectToken = void 0, this.emit(wm.NEED_RENEW_SESSION), this.emit(wm.DISCONNECT_P2P)), t2(e2);
          }), this.websocket.on(Ug.CONNECTED, () => {
            this.openConnectionTime = Date.now(), this.reconnectToken ? this.rejoin().catch((e2) => {
              NE.warning("[".concat(this.clientId, "] rejoin failed ").concat(e2)), this.reconnect("tryNext", Mg.SERVER_ERROR);
            }) : this.join().catch((e2) => {
              if (this.emit(wm.REPORT_JOIN_GATEWAY, e2.message || e2.code, this.url || ""), e2 instanceof vE && e2.code === TE.UNEXPECTED_RESPONSE && e2.data.code === Im.ERR_NO_AUTHORIZED)
                return NE.warning("[".concat(this.clientId, "] reconnect no authorized, recover")), void this.reconnect("recover", Mg.SERVER_ERROR);
              NE.error("[".concat(this.clientId, "] join gateway request failed"), e2.toString()), this.spec.forceWaitGatewayResponse ? this.reconnect("tryNext", Mg.SERVER_ERROR) : (this.initError = e2, this.close());
            });
          }), this.websocket.on(Ug.REQUEST_NEW_URLS, (e2, t2) => {
            FR(this, wm.REQUEST_RECOVER, this.multiIpOption).then(e2).catch(t2);
          }), this.websocket.on(Ug.ON_TOKEN_PRIVILEGE_DID_EXPIRE, () => {
            this.emit(Pm.ON_TOKEN_PRIVILEGE_DID_EXPIRE);
          }), this.websocket.on(Ug.TO_CONNECT_DATACHANNEL, async (e2, t2, i2) => FR(this, wm.DATACHANNEL_PRECONNECT, e2).then(t2).catch(i2)), this.websocket.on(Ug.FAILBACK, () => {
            void 0 !== this.openConnectionTime && this.emit(wm.DATACHANNEL_FAILBACK);
          });
        }
      }
      function lO(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function hO(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? lO(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : lO(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      const pO = /* @__PURE__ */ new Map();
      class _O extends gE {
        get state() {
          return this._state;
        }
        set state(e2) {
          if (e2 === this._state)
            return;
          const t2 = this._state;
          this._state = e2, "DISCONNECTED" === e2 && this._disconnectedReason ? this.emit(cg.CONNECTION_STATE_CHANGE, e2, t2, this._disconnectedReason) : this.emit(cg.CONNECTION_STATE_CHANGE, e2, t2);
        }
        get joinGatewayStartTime() {
          return this._joinGatewayStartTime;
        }
        set joinGatewayStartTime(e2) {
          NE.debug("[".concat(this.store.clientId, "] set joinGatewayStartTime at ").concat(e2)), this._joinGatewayStartTime = e2;
        }
        constructor(e2, t2) {
          super(), mp(this, "store", void 0), mp(this, "joinInfo", void 0), mp(this, "key", void 0), mp(this, "signal", void 0), mp(this, "role", void 0), mp(this, "inChannelInfo", { joinAt: null, duration: 0 }), mp(this, "spec", void 0), mp(this, "_state", "DISCONNECTED"), mp(this, "_statsCollector", void 0), mp(this, "_disconnectedReason", void 0), mp(this, "isSignalRecover", false), mp(this, "hasChangeBGPAddress", false), mp(this, "trafficStatsInterval", void 0), mp(this, "networkQualityInterval", void 0), mp(this, "_joinGatewayStartTime", 0), mp(this, "_signalTimeout", false), mp(this, "_clientRoleOptions", void 0), mp(this, "_isProactiveJoin", false), this.store = e2, this.spec = t2;
          const i2 = jg().supportDataChannel && HE("SIGNAL_CHANNEL");
          this.signal = i2 ? new uO(hO(hO({}, t2), {}, { retryConfig: t2.websocketRetryConfig }), e2) : new tO(hO(hO({}, t2), {}, { retryConfig: t2.websocketRetryConfig }), e2), this._statsCollector = t2.statsCollector, this.role = t2.role || "audience", this._clientRoleOptions = t2.clientRoleOptions, this.handleSignalEvents();
        }
        async join(e2, t2, i2) {
          if (this.signal instanceof uO) {
            let t3 = false;
            "disabled" !== e2.cloudProxyServer ? (NE.debug("[".concat(this.store.clientId, "] Dc is not supported, because cloudProxyServer are not supported (").concat(e2.cloudProxyServer, ")")), t3 = true) : "".concat(e2.apResponse.cid, "_").concat(e2.apResponse.cert).length > 255 || "".concat(e2.apResponse.cid, "_").concat(e2.apResponse.cert).length < 22 ? (NE.debug("[".concat(this.store.clientId, "] Dc is not supported, because ticket length is incorrect, it has to be between 22 and 255")), t3 = true) : e2.apResponse.addresses.some((e3) => e3.fingerprint) || HE("FINGERPRINT") || (NE.debug("[".concat(this.store.clientId, "] Dc is not supported, because fingerprint does not exist")), t3 = true), t3 && this.resetSignal();
          }
          this.store.joinGatewayStart(), "disabled" !== e2.cloudProxyServer && (this.hasChangeBGPAddress = true);
          const r2 = Date.now();
          let n2 = pO.get(e2.cname);
          if (n2 || (n2 = /* @__PURE__ */ new Map(), pO.set(e2.cname, n2)), this._isProactiveJoin = true, n2.has(e2.uid)) {
            const t3 = new vE(TE.UID_CONFLICT);
            throw IT.joinGateway(e2.sid, { lts: r2, succ: false, ec: t3.message, addr: null, uid: e2.uid, cid: e2.cid, firstSuccess: this._isProactiveJoin, avoidJoinStartTime: this.store.avoidJoinStart, isProxy: !!e2.proxyServer, signalChannel: this.signal instanceof uO ? "1" : "0" }), this._isProactiveJoin = false, t3;
          }
          n2.set(e2.uid, true), this.joinInfo = e2, this.key = t2;
          let o2 = 0;
          this.joinGatewayStartTime = r2;
          const s2 = e2.proxyServer;
          try {
            let t3;
            if (NE.debug("[".concat(this.store.clientId, "] use ").concat(this.signal instanceof uO ? "datachannel" : "websocket", " join uid ").concat(o2)), this.signal instanceof uO)
              t3 = await this.signal.init(e2.apResponse.addresses, i2);
            else {
              const r3 = e2.proxyServer, n3 = r3 ? e2.gatewayAddrs.map((e3) => {
                const t4 = e3.address.split(":");
                return "wss://".concat(r3, "/ws/?h=").concat(t4[0], "&p=").concat(t4[1]);
              }) : e2.gatewayAddrs.map((e3) => "wss://".concat(e3.address));
              t3 = await this.signal.init(n3, i2);
            }
            o2 = t3.uid, NE.debug("[".concat(this.store.clientId, "] ").concat(this.signal instanceof uO ? "datachannel" : "websocket", " join uid ").concat(o2, " cost ").concat(Date.now() - this.joinGatewayStartTime));
          } catch (t3) {
            if (t3 && t3.code === TE.INIT_WEBSOCKET_TIMEOUT)
              throw NE.warning("[".concat(this.store.clientId, "] User join failed"), t3.toString()), t3;
            if (t3 && t3.code === TE.INIT_DATACHANNEL_TIMEOUT)
              throw NE.warning("[".concat(this.store.clientId, "] User join datachannel failed"), t3.toString()), this.resetSignal(), t3;
            throw NE.error("[".concat(this.store.clientId, "] User join failed"), t3.toString()), IT.joinGateway(e2.sid, { lts: r2, succ: false, ec: t3.message, addr: this.signal.url, uid: e2.uid, cid: e2.cid, firstSuccess: this._isProactiveJoin, avoidJoinStartTime: this.store.avoidJoinStart, isProxy: !!s2, signalChannel: this.signal instanceof uO ? "1" : "0" }), this._isProactiveJoin = false, n2.delete(e2.uid), this.signal.close(), t3;
          }
          return this.state = "CONNECTED", this.inChannelInfo.joinAt = Date.now(), NE.debug("[".concat(this.store.clientId, "] Connected to gateway server")), this.trafficStatsInterval = window.setInterval(() => {
            this.updateTrafficStats().catch((e3) => {
              NE.warning("[".concat(this.store.clientId, "] get traffic stats error"), e3.toString());
            });
          }, 3e3), this.networkQualityInterval = window.setInterval(() => {
            navigator && void 0 !== navigator.onLine && !navigator.onLine ? this.emit(cg.NETWORK_QUALITY, { downlinkNetworkQuality: 6, uplinkNetworkQuality: 6 }) : this._signalTimeout ? this.emit(cg.NETWORK_QUALITY, { downlinkNetworkQuality: 5, uplinkNetworkQuality: 5 }) : "CONNECTED" === this.state && this._statsCollector.trafficStats ? this.emit(cg.NETWORK_QUALITY, { uplinkNetworkQuality: CR(this._statsCollector.trafficStats.B_unq), downlinkNetworkQuality: CR(this._statsCollector.trafficStats.B_dnq) }) : this.emit(cg.NETWORK_QUALITY, { uplinkNetworkQuality: 0, downlinkNetworkQuality: 0 });
          }, 2e3), this.store.joinGatewayEnd(), o2;
        }
        async leave() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t2 = arguments.length > 1 ? arguments[1] : void 0;
          if ("DISCONNECTED" !== this.state) {
            t2 !== Cm.FALLBACK && (this.state = "DISCONNECTING");
            try {
              e2 || this.signal.connectionState !== bm.CONNECTED || await function(e3, t3) {
                return t3 === 1 / 0 ? e3 : Cl.race([e3, kR(t3)]);
              }(this.signal.request(Nm.LEAVE, void 0, true), 3e3);
            } catch (e3) {
              NE.warning("[".concat(this.store.clientId, "] leave request failed, ignore"), e3);
            }
            this.signal.close(t2), t2 !== Cm.FALLBACK && (this.state = "DISCONNECTED"), this.reset();
          }
        }
        async publish(e2, t2, i2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
            throw new vE(TE.INVALID_OPERATION, "can not publish when connection state is ".concat(this.state));
          const r2 = { state: "offer", p2p_id: this.store.p2pId, ortc: t2, mode: this.spec.mode, extend: HE("PUB_EXTEND"), tcc: !!HE("PUBLISH_TCC") };
          try {
            return (await this.signal.request(Nm.PUBLISH, r2, true))._message;
          } catch (r3) {
            if (i2 && r3.data && r3.data.code === Im.ERR_PUBLISH_REQUEST_INVALID)
              return NE.warning("[".concat(this.store.clientId, "] receive publish error code, retry"), r3.toString()), await this.tryUnpubBeforeRepub(e2, t2), this.publish(e2, t2, false);
            throw r3;
          }
        }
        async unpublish(e2, t2) {
          try {
            if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
              throw new vE(TE.INVALID_OPERATION, "can not publish when connection state is ".concat(this.state));
            await this.signal.request(Nm.UNPUBLISH, { stream_id: t2, ortc: e2 }, true);
          } catch (e3) {
            NE.warning("unpublish warning: ", e3);
          }
        }
        async subscribe(e2, t2, i2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
            throw new vE(TE.INVALID_OPERATION, "can not subscribe when connection state is ".concat(this.state));
          const r2 = { stream_id: e2, stream_type: t2.stream_type, mode: this.spec.mode, codec: this.spec.codec, p2p_id: this.store.p2pId, tcc: !!HE("SUBSCRIBE_TCC"), extend: HE("SUB_EXTEND"), ssrcId: t2.ssrcId };
          try {
            return (await this.signal.request(Nm.SUBSCRIBE, r2, true))._message;
          } catch (r3) {
            if (i2 && r3.data && r3.data.code === Im.ERR_SUBSCRIBE_REQUEST_INVALID)
              return NE.warning("[".concat(this.store.clientId, "] receiver subscribe error code, retry"), r3.toString()), await this.tryUnsubBeforeResub(e2, t2), await this.subscribe(e2, t2, false);
            throw r3;
          }
        }
        async subscribeAll(e2, t2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
            throw new vE(TE.INVALID_OPERATION, "can not massSubscribe when connection state is ".concat(this.state));
          const i2 = { p2p_id: this.store.p2pId, users: e2, dtx: false };
          try {
            return await this.signal.request(Nm.SUBSCRIBE_STREAMS, i2, true);
          } catch (i3) {
            if (t2 && i3.data && i3.data.code === Im.ERR_SUBSCRIBE_REQUEST_INVALID)
              return NE.warning("[".concat(this.store.clientId, "] receiver massSubscribe error code, retry"), i3.toString()), await this.tryMassUnsubBeforeResub(e2), await this.subscribeAll(e2, false);
            throw i3;
          }
        }
        async setVideoProfile(e2) {
          const t2 = function(e3) {
            if (!(e3.bitrateMax && e3.bitrateMin && e3.frameRate && e3.height && e3.width))
              return;
            let t3 = e3.frameRate, i2 = e3.width, r2 = e3.height, n2 = true;
            return "number" != typeof t3 && (t3 = t3.exact || t3.ideal || t3.max || t3.min || 0, t3 || (n2 = false)), "number" != typeof i2 && (i2 = i2.exact || i2.ideal || i2.max || i2.min || 0, i2 || (n2 = false)), "number" != typeof r2 && (r2 = r2.exact || r2.ideal || r2.max || r2.min || 0, t3 || (n2 = false)), n2 ? { stream_type: 0, width: i2, height: r2, fps: t3, start_bps: 1e3 * e3.bitrateMax, min_bps: 1e3 * e3.bitrateMin, target_bps: 1e3 * e3.bitrateMax } : void 0;
          }(e2);
          if (t2)
            return this.signal.request(Nm.SET_VIDEO_PROFILE, t2);
          NE.debug("[".concat(this.store.clientId, "] encoder config is not complete, do not report to gateway"));
        }
        async unsubscribe(e2, t2) {
          try {
            await this.signal.request(Nm.UNSUBSCRIBE, { p2p_id: this.store.p2pId, ortc: e2, stream_id: t2 }, true);
          } catch (e3) {
            NE.warning("unsubscribe warning: ", e3);
          }
        }
        async massUnsubscribe(e2) {
          try {
            await this.signal.request(Nm.UNSUBSCRIBE_STREAMS, e2, true);
          } catch (e3) {
            NE.warning("unsubscribeAll warning: ", e3);
          }
        }
        async reconnectPC(e2) {
          const { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: r2 } = e2;
          return { gatewayEstablishParams: await this.signal.request(Nm.CONNECT_PC, { p2p_id: this.store.p2pId, stream_id: this.store.uid, ortc: { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: r2 } }, true), gatewayAddress: this.getCurrentGatewayAddress() };
        }
        getGatewayInfo() {
          return this.signal.request(Nm.GATEWAY_INFO);
        }
        renewToken(e2) {
          return this.signal.request(Nm.RENEW_TOKEN, e2);
        }
        async setClientRole(e2, t2) {
          if (t2 && (this._clientRoleOptions = Object.assign({}, t2)), "CONNECTED" !== this.state)
            return void (this.role = e2);
          let i2 = void 0;
          i2 = "audience" === e2 ? this._clientRoleOptions && this._clientRoleOptions.level ? this._clientRoleOptions.level : 2 : 0, await this.signal.request(Nm.SET_CLIENT_ROLE, { role: e2, level: i2, client_ts: Date.now() }), this.role = e2;
        }
        async setRemoteVideoStreamType(e2, t2) {
          await this.signal.request(Nm.SWITCH_VIDEO_STREAM, { stream_id: e2, stream_type: t2 });
        }
        async setDefaultRemoteVideoStreamType(e2) {
          await this.signal.request(Nm.DEFAULT_VIDEO_STREAM, { stream_type: e2 });
        }
        async setStreamFallbackOption(e2, t2) {
          await this.signal.request(Nm.SET_FALLBACK_OPTION, { stream_id: e2, fallback_type: t2 });
        }
        async pickSVCLayer(e2, t2) {
          await this.signal.request(Nm.PICK_SVC_LAYER, { stream_id: e2, spatial_layer: t2.spatialLayer, temporal_layer: t2.temporalLayer });
        }
        getInChannelInfo() {
          return this.inChannelInfo.joinAt && (this.inChannelInfo.duration = Date.now() - this.inChannelInfo.joinAt), hO({}, this.inChannelInfo);
        }
        async getGatewayVersion() {
          return (await this.signal.request(Nm.GATEWAY_INFO)).version;
        }
        reset() {
          if (this.inChannelInfo.joinAt && (this.inChannelInfo.duration = Date.now() - this.inChannelInfo.joinAt, this.inChannelInfo.joinAt = null), this.trafficStatsInterval && (window.clearInterval(this.trafficStatsInterval), this.trafficStatsInterval = void 0), this.joinInfo) {
            const e2 = pO.get(this.joinInfo.cname);
            e2 && e2.delete(this.joinInfo.uid);
          }
          this.joinInfo = void 0, this.key = void 0, this.networkQualityInterval && (window.clearInterval(this.networkQualityInterval), this.networkQualityInterval = void 0);
        }
        updateTurnConfigFromSignal() {
          if (!this.joinInfo)
            return;
          const e2 = function(e3) {
            let t2;
            return t2 = e3.startsWith("dc") ? e3.match(/(dc\:\/\/)?([^:]+):(\d+)/) : e3.match(/(wss\:\/\/)?([^:]+):(\d+)/), t2 ? { username: kE.username, password: kE.password, turnServerURL: t2[2], tcpport: parseInt(t2[3]) + 30, udpport: parseInt(t2[3]) + 30, forceturn: false } : null;
          }(("disabled" === this.joinInfo.cloudProxyServer ? this.signal.url : this.joinInfo.gatewayAddrs[this.signal.currentURLIndex].address) || "");
          this.joinInfo.turnServer.serversFromGateway = [], e2 && "off" !== this.joinInfo.turnServer.mode && "disabled" === this.joinInfo.cloudProxyServer && this.joinInfo.turnServer.serversFromGateway.push(hO(hO({}, kE), {}, { turnServerURL: e2.turnServerURL, tcpport: e2.tcpport, udpport: e2.udpport, username: this.joinInfo.uid.toString(), password: this.joinInfo.token }));
        }
        async updateTrafficStats() {
          if ("CONNECTED" !== this.state)
            return;
          const e2 = await this.signal.request(Nm.TRAFFIC_STATS, void 0, true);
          e2.timestamp = Date.now(), e2.peer_delay.forEach((e3) => {
            const t2 = this._statsCollector.trafficStats && this._statsCollector.trafficStats.peer_delay.find((t3) => t3.peer_uid === e3.peer_uid);
            t2 && t2.B_st !== e3.B_st && YR(() => {
              this.emit(cg.STREAM_TYPE_CHANGE, e3.peer_uid, e3.B_st);
            });
          }), this._statsCollector.updateTrafficStats(e2);
        }
        getJoinMessage(e2) {
          if (!this.joinInfo || !this.key)
            throw new vE(TE.UNEXPECTED_ERROR, "can not generate join message, no join info");
          const t2 = Object.assign({}, this.joinInfo.apResponse);
          let i2 = HE("REPORT_APP_SCENARIO");
          if ("string" != typeof i2)
            try {
              i2 = JSON.stringify(i2);
            } catch (e3) {
              i2 = void 0;
            }
          i2 && i2.length > 128 && (i2 = void 0);
          const r2 = hO({ license: this.joinInfo.license, p2p_id: this.store.p2pId, session_id: this.joinInfo.sid, app_id: this.joinInfo.appId, channel_key: this.key, channel_name: this.joinInfo.cname, sdk_version: PE, browser: navigator.userAgent, process_id: HE("PROCESS_ID"), mode: this.spec.mode, codec: this.spec.codec, role: this.role, has_changed_gateway: this.hasChangeBGPAddress, ap_response: t2, extend: HE("JOIN_EXTEND"), details: { 6: this.joinInfo.stringUid, cservice_map: "proxy3" === this.joinInfo.cloudProxyServer ? "1" : "proxy5" === this.joinInfo.cloudProxyServer ? "2" : void 0 }, features: { rejoin: true }, optionalInfo: this.joinInfo.optionalInfo, appScenario: i2, attributes: { userAttributes: { enablePublishedUserList: HE("ENABLE_PUBLISHED_USER_LIST"), maxSubscription: HE("MAX_SUBSCRIPTION"), subscribeAudioFilterTopN: "number" == typeof HE("SUBSCRIBE_AUDIO_FILTER_TOPN") ? HE("SUBSCRIBE_AUDIO_FILTER_TOPN") : void 0, enablePublishAudioFilter: "boolean" == typeof HE("ENABLE_PUBLISH_AUDIO_FILTER") ? HE("ENABLE_PUBLISH_AUDIO_FILTER") : void 0, enableUserLicenseCheck: "boolean" == typeof HE("ENABLE_USER_LICENSE_CHECK") ? HE("ENABLE_USER_LICENSE_CHECK") : void 0 } }, join_ts: this.joinGatewayStartTime }, e2);
          return this.joinInfo.stringUid && (r2.string_uid = this.joinInfo.stringUid), this.joinInfo.aesmode && this.joinInfo.aespassword && (r2.aes_mode = this.joinInfo.aesmode, HE("ENCRYPT_AES") ? (r2.aes_secret = this.joinInfo.aespassword, r2.aes_encrypt = true) : r2.aes_secret = this.joinInfo.aespassword, this.joinInfo.aessalt && (r2.aes_salt = this.joinInfo.aessalt)), t2.addresses[this.signal.websocket.currentURLIndex] && (r2.ap_response.ticket = t2.addresses[this.signal.websocket.currentURLIndex].ticket, delete t2.addresses), void 0 !== this.joinInfo.defaultVideoStream && (r2.default_video_stream = this.joinInfo.defaultVideoStream), r2;
        }
        getRejoinMessage() {
          if (!this.joinInfo)
            throw new vE(TE.UNEXPECTED_ERROR, "can not generate rejoin message, no join info");
          return { session_id: this.joinInfo.sid, channel_name: this.joinInfo.cname, cid: this.joinInfo.cid, uid: this.joinInfo.uid, vid: Number(this.joinInfo.vid) };
        }
        handleSignalEvents() {
          this.signal.on(wm.WS_RECONNECT_WAITTING_FINISH, (e2) => {
            ["tryNext", "recover"].includes(e2) && this.joinInfo && IT.adjustSessionStartTime(this.joinInfo.sid);
          }), this.signal.on(wm.WS_RECONNECT_CREATE_CONNECTION, (e2) => {
            this.joinGatewayStartTime = Date.now();
          }), this.signal.on(wm.WS_RECONNECTING, (e2) => {
            this.joinInfo && IT.WebSocketQuit(this.joinInfo.sid, { lts: Date.now(), succ: -1, cname: this.joinInfo.cname, uid: this.joinInfo.uid, cid: this.joinInfo.cid, errorCode: e2 || Om.NETWORK_ERROR }), this.joinInfo && (this.state = "RECONNECTING", IT.sessionInit(this.joinInfo.sid, { lts: (/* @__PURE__ */ new Date()).getTime(), extend: this.isSignalRecover ? { recover: true } : { rejoin: true }, cname: this.joinInfo.cname, appid: this.joinInfo.appId, mode: this.spec.mode }), this.isSignalRecover = false, this.joinGatewayStartTime = Date.now());
          }), this.signal.on(wm.WS_CLOSED, (e2) => {
            let t2;
            switch (e2) {
              case Cm.LEAVE:
                t2 = Om.LEAVE;
                break;
              case Cm.UID_BANNED:
              case Cm.IP_BANNED:
              case Cm.CHANNEL_BANNED:
              case Cm.SERVER_ERROR:
                t2 = Om.SERVER_ERROR;
                break;
              case Cm.FALLBACK:
                t2 = Om.FALLBACK;
                break;
              case Cm.LICENSE_MISSING:
              case Cm.LICENSE_EXPIRED:
              case Cm.LICENSE_MINUTES_EXCEEDED:
              case Cm.LICENSE_PERIOD_INVALID:
              case Cm.LICENSE_MULTIPLE_SDK_SERVICE:
              case Cm.LICENSE_ILLEGAL:
                t2 = e2;
                break;
              default:
                t2 = Om.NETWORK_ERROR;
            }
            NE.debug("[signal] websocket closed, reason: ".concat(t2 || "undefined -> " + Om.NETWORK_ERROR)), this.joinInfo && IT.WebSocketQuit(this.joinInfo.sid, { lts: Date.now(), succ: e2 === Cm.LEAVE ? 1 : -1, cname: this.joinInfo.cname, uid: this.joinInfo.uid, cid: this.joinInfo.cid, errorCode: t2 }), this._disconnectedReason = e2, e2 !== Cm.FALLBACK && (this.state = "DISCONNECTED"), this.reset();
          }), this.signal.on(wm.WS_CONNECTED, () => {
            if (this.updateTurnConfigFromSignal(), this.state = "CONNECTED", this.joinInfo && ("audience" === this.role && this._clientRoleOptions && this._clientRoleOptions.level && (NE.debug("[".concat(this.store.clientId, "] patch to send set client role, role: ").concat(this.role, ", mode: ").concat(this.spec.mode, ", level: ").concat(this._clientRoleOptions && this._clientRoleOptions.level)), this.setClientRole(this.role, this._clientRoleOptions)), IT.joinGateway(this.joinInfo.sid, { lts: this.joinGatewayStartTime, succ: true, ec: null, vid: this.joinInfo.vid, addr: this.signal.url, uid: this.joinInfo.uid, cid: this.joinInfo.cid, firstSuccess: this._isProactiveJoin, avoidJoinStartTime: this.store.avoidJoinStart, isProxy: !!this.joinInfo.proxyServer, signalChannel: this.signal instanceof uO ? "1" : "0" }), this._isProactiveJoin = false, this.joinInfo.useLocalAccessPoint && 1 === this.joinInfo.setLocalAPVersion)) {
              const e2 = this.signal.url && this.signal.url.match(/wss\:\/\/([^:]+):(\d+)/);
              if (!e2)
                return void NE.error("[".concat(this.store.clientId, "] set local access point after joined failed: ").concat(e2));
              WE("EVENT_REPORT_DOMAIN", e2[1]), WE("EVENT_REPORT_BACKUP_DOMAIN", e2[1]), WE("LOG_UPLOAD_SERVER", "".concat(e2[1], ":6444"));
            }
          }), this.signal.on(Pm.ON_UPLINK_STATS, (e2) => {
            this._statsCollector.updateUplinkStats(e2);
          }), this.signal.on(wm.REQUEST_RECOVER, (e2, t2, i2) => {
            if (!this.joinInfo)
              return i2(new vE(TE.UNEXPECTED_ERROR, "gateway: can not recover, no join info"));
            e2 && (this.joinInfo.multiIP = e2, this.hasChangeBGPAddress = true), this.isSignalRecover = true, FR(this, cg.REQUEST_NEW_GATEWAY_LIST).then(t2).catch(i2);
          }), this.signal.on(wm.REQUEST_JOIN_INFO, async (e2) => {
            var t2;
            this.updateTurnConfigFromSignal();
            const { iceParameters: i2, dtlsParameters: r2, rtpCapabilities: n2 } = await FR(this, cg.REQUEST_P2P_CONNECTION_PARAMS, { turnServer: null === (t2 = this.joinInfo) || void 0 === t2 ? void 0 : t2.turnServer });
            e2(this.getJoinMessage({ ortc: { iceParameters: i2, dtlsParameters: r2, rtpCapabilities: n2, version: "2" } }));
          }), this.signal.on(wm.REQUEST_REJOIN_INFO, (e2) => {
            e2(this.getRejoinMessage());
          }), this.signal.on(wm.REPORT_JOIN_GATEWAY, (e2, t2) => {
            this.joinInfo && (IT.joinGateway(this.joinInfo.sid, { lts: this.joinGatewayStartTime, succ: false, ec: e2, addr: t2, uid: this.joinInfo.uid, cid: this.joinInfo.cid, firstSuccess: this._isProactiveJoin, avoidJoinStartTime: this.store.avoidJoinStart, isProxy: !!this.joinInfo.proxyServer, signalChannel: this.signal instanceof uO ? "1" : "0" }), this._isProactiveJoin = false);
          }), this.signal.on(wm.IS_P2P_DISCONNECTED, (e2) => {
            e2(WR(this, cg.IS_P2P_DISCONNECTED));
          }), this.signal.on(wm.DISCONNECT_P2P, () => {
            this.emit(cg.DISCONNECT_P2P);
          }), this.signal.on(wm.NEED_RENEW_SESSION, () => {
            this.emit(cg.NEED_RENEW_SESSION);
          }), this.signal.on(wm.REQUEST_SUCCESS, () => {
            this._signalTimeout = false;
          }), this.signal.on(wm.REQUEST_TIMEOUT, () => {
            this._signalTimeout = true;
          }), this.signal.on(wm.JOIN_RESPONSE, (e2) => {
            const t2 = this.getCurrentGatewayAddress();
            this.emit(cg.JOIN_RESPONSE, e2, t2);
          }), this.signal.on(wm.DATACHANNEL_PRECONNECT, async (e2, t2, i2) => {
            this.updateTurnConfigFromSignal();
            const r2 = this.getCurrentGatewayAddress();
            return FR(this, cg.DATACHANNEL_PRECONNECT, e2, r2).then(t2).catch(i2);
          }), this.signal.on(wm.DATACHANNEL_CONNECTING, async (e2) => {
            const { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: r2 } = await FR(this, cg.REQUEST_DC_CONNECTION_PARAMS);
            e2(this.getJoinMessage({ ortc: { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: r2, version: "2" } }));
          }), this.signal.on(wm.DATACHANNEL_FAILBACK, () => {
            NE.warning("[".concat(this.store.clientId, "] User join datachannel failed")), this.reset(), this.resetSignal(), this.emit(cg.DATACHANNEL_FAILBACK);
          });
        }
        async tryUnsubBeforeResub(e2, t2) {
          try {
            await this.signal.request(Nm.UNSUBSCRIBE, { p2p_id: this.store.p2pId, stream_id: e2, ortc: [t2] }, true);
          } catch (e3) {
            throw NE.warning("unsubscribe warning", e3), e3;
          }
        }
        async tryUnpubBeforeRepub(e2, t2) {
          try {
            await this.signal.request(Nm.UNPUBLISH, { stream_id: e2, ortc: t2 }, true);
          } catch (e3) {
            throw NE.warning("unpublish warning: ", e3), e3;
          }
        }
        async tryMassUnsubBeforeResub(e2) {
          const t2 = { users: e2.map((e3) => ({ stream_id: e3.stream_id, stream_type: e3.stream_type })) };
          try {
            await this.signal.request(Nm.UNSUBSCRIBE_STREAMS, t2, true);
          } catch (e3) {
            throw NE.warning("massUnsubscribe warning", e3), e3;
          }
        }
        async muteLocal(e2, t2) {
          const i2 = { action: e2.find((e3) => e3.stream_type === ag.Audio) ? "mute_local_audio" : "mute_local_video", p2p_id: this.store.p2pId, ortc: e2, stream_id: t2 };
          try {
            await this.signal.request(Nm.CONTROL, i2, true, true);
          } catch (e3) {
            throw NE.warning("gateway unmuteLocal warning: ", e3), e3;
          }
        }
        async unmuteLocal(e2, t2) {
          const i2 = { action: e2.find((e3) => e3.stream_type === ag.Audio) ? "unmute_local_audio" : "unmute_local_video", p2p_id: this.store.p2pId, ortc: e2, stream_id: t2 };
          try {
            await this.signal.request(Nm.CONTROL, i2, true, true);
          } catch (e3) {
            throw NE.warning("gateway muteLocal warning: ", e3), e3;
          }
        }
        uploadStats(e2, t2) {
          this.signal.upload(e2, t2);
        }
        getSignalRTT() {
          return this.signal.rtt;
        }
        async restartICE(e2) {
          const t2 = { p2p_id: this.store.p2pId, stream_id: this.store.uid, ortc: e2 };
          try {
            return await this.signal.request(Nm.RESTART_ICE, t2, true);
          } catch (e3) {
            throw NE.warning("P2PChannel.restartICE warning: ", e3), e3;
          }
        }
        reconnect() {
          "CONNECTED" === this.state && this.signal.reconnect(void 0, Om.P2P_FAILED);
        }
        getCurrentGatewayAddress() {
          var e2;
          if (!HE("GATEWAY_WSS_ADDRESS"))
            return null !== (e2 = this.joinInfo) && void 0 !== e2 && e2.gatewayAddrs ? this.joinInfo.gatewayAddrs[this.signal.currentURLIndex] : void 0;
        }
        async setPublishAudioFilterEnabled(e2) {
          await this.signal.request(Nm.SET_PARAMETER, { enablePublishAudioFilter: e2 });
        }
        resetSignal() {
          this.signal && (this.signal.removeAllListeners(), this.signal.close(Cm.FALLBACK)), this.signal = new tO(hO(hO({}, this.spec), {}, { retryConfig: this.spec.websocketRetryConfig }), this.store), this.handleSignalEvents(), this.emit(cg.RESET_CONNECTION_EVENTS);
        }
      }
      function EO(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function fO(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? EO(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : EO(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      !function() {
        var e2;
        function i2(e3) {
          var t2 = 0;
          return function() {
            return t2 < e3.length ? { done: false, value: e3[t2++] } : { done: true };
          };
        }
        var r2 = "function" == typeof Object.defineProperties ? Object.defineProperty : function(e3, t2, i3) {
          return e3 == Array.prototype || e3 == Object.prototype || (e3[t2] = i3.value), e3;
        };
        var n2, o2 = function(e3) {
          e3 = ["object" == typeof globalThis && globalThis, e3, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof t && t];
          for (var i3 = 0; i3 < e3.length; ++i3) {
            var r3 = e3[i3];
            if (r3 && r3.Math == Math)
              return r3;
          }
          throw Error("Cannot find global object");
        }(this);
        function s2(e3, t2) {
          if (t2)
            e: {
              var i3 = o2;
              e3 = e3.split(".");
              for (var n3 = 0; n3 < e3.length - 1; n3++) {
                var s3 = e3[n3];
                if (!(s3 in i3))
                  break e;
                i3 = i3[s3];
              }
              (t2 = t2(n3 = i3[e3 = e3[e3.length - 1]])) != n3 && null != t2 && r2(i3, e3, { configurable: true, writable: true, value: t2 });
            }
        }
        function a2(e3) {
          return (e3 = { next: e3 })[Symbol.iterator] = function() {
            return this;
          }, e3;
        }
        function c2(e3) {
          var t2 = "undefined" != typeof Symbol && Symbol.iterator && e3[Symbol.iterator];
          return t2 ? t2.call(e3) : { next: i2(e3) };
        }
        if (s2("Symbol", function(e3) {
          function t2(e4, t3) {
            this.A = e4, r2(this, "description", { configurable: true, writable: true, value: t3 });
          }
          if (e3)
            return e3;
          t2.prototype.toString = function() {
            return this.A;
          };
          var i3 = "jscomp_symbol_" + (1e9 * Math.random() >>> 0) + "_", n3 = 0;
          return function e4(r3) {
            if (this instanceof e4)
              throw new TypeError("Symbol is not a constructor");
            return new t2(i3 + (r3 || "") + "_" + n3++, r3);
          };
        }), s2("Symbol.iterator", function(e3) {
          if (e3)
            return e3;
          e3 = Symbol("Symbol.iterator");
          for (var t2 = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), n3 = 0; n3 < t2.length; n3++) {
            var s3 = o2[t2[n3]];
            "function" == typeof s3 && "function" != typeof s3.prototype[e3] && r2(s3.prototype, e3, { configurable: true, writable: true, value: function() {
              return a2(i2(this));
            } });
          }
          return e3;
        }), "function" == typeof Object.setPrototypeOf)
          n2 = Object.setPrototypeOf;
        else {
          var d2;
          e: {
            var u2 = {};
            try {
              u2.__proto__ = { a: true }, d2 = u2.a;
              break e;
            } catch (e3) {
            }
            d2 = false;
          }
          n2 = d2 ? function(e3, t2) {
            if (e3.__proto__ = t2, e3.__proto__ !== t2)
              throw new TypeError(e3 + " is not extensible");
            return e3;
          } : null;
        }
        var l2 = n2;
        function h2() {
          this.m = false, this.j = null, this.v = void 0, this.h = 1, this.u = this.C = 0, this.l = null;
        }
        function p2(e3) {
          if (e3.m)
            throw new TypeError("Generator is already running");
          e3.m = true;
        }
        function _2(e3, t2) {
          return e3.h = 3, { value: t2 };
        }
        function E2(e3) {
          this.g = new h2(), this.G = e3;
        }
        function f2(e3, t2, i3, r3) {
          try {
            var n3 = t2.call(e3.g.j, i3);
            if (!(n3 instanceof Object))
              throw new TypeError("Iterator result " + n3 + " is not an object");
            if (!n3.done)
              return e3.g.m = false, n3;
            var o3 = n3.value;
          } catch (t3) {
            return e3.g.j = null, e3.g.s(t3), m2(e3);
          }
          return e3.g.j = null, r3.call(e3.g, o3), m2(e3);
        }
        function m2(e3) {
          for (; e3.g.h; )
            try {
              var t2 = e3.G(e3.g);
              if (t2)
                return e3.g.m = false, { value: t2.value, done: false };
            } catch (t3) {
              e3.g.v = void 0, e3.g.s(t3);
            }
          if (e3.g.m = false, e3.g.l) {
            if (t2 = e3.g.l, e3.g.l = null, t2.F)
              throw t2.D;
            return { value: t2.return, done: true };
          }
          return { value: void 0, done: true };
        }
        function g2(e3) {
          this.next = function(t2) {
            return e3.o(t2);
          }, this.throw = function(t2) {
            return e3.s(t2);
          }, this.return = function(t2) {
            return function(e4, t3) {
              p2(e4.g);
              var i3 = e4.g.j;
              return i3 ? f2(e4, "return" in i3 ? i3.return : function(e5) {
                return { value: e5, done: true };
              }, t3, e4.g.return) : (e4.g.return(t3), m2(e4));
            }(e3, t2);
          }, this[Symbol.iterator] = function() {
            return this;
          };
        }
        function S2(e3, t2) {
          return t2 = new g2(new E2(t2)), l2 && e3.prototype && l2(t2, e3.prototype), t2;
        }
        if (h2.prototype.o = function(e3) {
          this.v = e3;
        }, h2.prototype.s = function(e3) {
          this.l = { D: e3, F: true }, this.h = this.C || this.u;
        }, h2.prototype.return = function(e3) {
          this.l = { return: e3 }, this.h = this.u;
        }, E2.prototype.o = function(e3) {
          return p2(this.g), this.g.j ? f2(this, this.g.j.next, e3, this.g.o) : (this.g.o(e3), m2(this));
        }, E2.prototype.s = function(e3) {
          return p2(this.g), this.g.j ? f2(this, this.g.j.throw, e3, this.g.o) : (this.g.s(e3), m2(this));
        }, s2("Array.prototype.entries", function(e3) {
          return e3 || function() {
            return function(e4, t2) {
              e4 instanceof String && (e4 += "");
              var i3 = 0, r3 = false, n3 = { next: function() {
                if (!r3 && i3 < e4.length) {
                  var n4 = i3++;
                  return { value: t2(n4, e4[n4]), done: false };
                }
                return r3 = true, { done: true, value: void 0 };
              } };
              return n3[Symbol.iterator] = function() {
                return n3;
              }, n3;
            }(this, function(e4, t2) {
              return [e4, t2];
            });
          };
        }), "undefined" != typeof Blob && ("undefined" == typeof FormData || !FormData.prototype.keys)) {
          var T2 = function(e3, t2) {
            for (var i3 = 0; i3 < e3.length; i3++)
              t2(e3[i3]);
          }, v2 = function(e3) {
            return e3.replace(/\r?\n|\r/g, "\r\n");
          }, R2 = function(e3, t2, i3) {
            return t2 instanceof Blob ? (i3 = void 0 !== i3 ? String(i3 + "") : "string" == typeof t2.name ? t2.name : "blob", t2.name === i3 && "[object Blob]" !== Object.prototype.toString.call(t2) || (t2 = new File([t2], i3)), [String(e3), t2]) : [String(e3), String(t2)];
          }, I2 = function(e3, t2) {
            if (e3.length < t2)
              throw new TypeError(t2 + " argument required, but only " + e3.length + " present.");
          }, y2 = "object" == typeof globalThis ? globalThis : "object" == typeof window ? window : "object" == typeof self ? self : this, C2 = y2.FormData, A2 = y2.XMLHttpRequest && y2.XMLHttpRequest.prototype.send, O2 = y2.Request && y2.fetch, b2 = y2.navigator && y2.navigator.sendBeacon, w2 = y2.Element && y2.Element.prototype, N2 = y2.Symbol && Symbol.toStringTag;
          N2 && (Blob.prototype[N2] || (Blob.prototype[N2] = "Blob"), "File" in y2 && !File.prototype[N2] && (File.prototype[N2] = "File"));
          try {
            new File([], "");
          } catch (e3) {
            y2.File = function(e4, t2, i3) {
              return e4 = new Blob(e4, i3 || {}), Object.defineProperties(e4, { name: { value: t2 }, lastModified: { value: +(i3 && void 0 !== i3.lastModified ? new Date(i3.lastModified) : /* @__PURE__ */ new Date()) }, toString: { value: function() {
                return "[object File]";
              } } }), N2 && Object.defineProperty(e4, N2, { value: "File" }), e4;
            };
          }
          var D2 = function(e3) {
            return e3.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
          }, P2 = function(e3) {
            this.i = [];
            var t2 = this;
            e3 && T2(e3.elements, function(e4) {
              if (e4.name && !e4.disabled && "submit" !== e4.type && "button" !== e4.type && !e4.matches("form fieldset[disabled] *"))
                if ("file" === e4.type) {
                  var i3 = e4.files && e4.files.length ? e4.files : [new File([], "", { type: "application/octet-stream" })];
                  T2(i3, function(i4) {
                    t2.append(e4.name, i4);
                  });
                } else
                  "select-multiple" === e4.type || "select-one" === e4.type ? T2(e4.options, function(i4) {
                    !i4.disabled && i4.selected && t2.append(e4.name, i4.value);
                  }) : "checkbox" === e4.type || "radio" === e4.type ? e4.checked && t2.append(e4.name, e4.value) : (i3 = "textarea" === e4.type ? v2(e4.value) : e4.value, t2.append(e4.name, i3));
            });
          };
          if ((e2 = P2.prototype).append = function(e3, t2, i3) {
            I2(arguments, 2), this.i.push(R2(e3, t2, i3));
          }, e2.delete = function(e3) {
            I2(arguments, 1);
            var t2 = [];
            e3 = String(e3), T2(this.i, function(i3) {
              i3[0] !== e3 && t2.push(i3);
            }), this.i = t2;
          }, e2.entries = function e3() {
            var t2, i3 = this;
            return S2(e3, function(e4) {
              if (1 == e4.h && (t2 = 0), 3 != e4.h)
                return t2 < i3.i.length ? e4 = _2(e4, i3.i[t2]) : (e4.h = 0, e4 = void 0), e4;
              t2++, e4.h = 2;
            });
          }, e2.forEach = function(e3, t2) {
            I2(arguments, 1);
            for (var i3 = c2(this), r3 = i3.next(); !r3.done; r3 = i3.next()) {
              var n3 = c2(r3.value);
              r3 = n3.next().value, n3 = n3.next().value, e3.call(t2, n3, r3, this);
            }
          }, e2.get = function(e3) {
            I2(arguments, 1);
            var t2 = this.i;
            e3 = String(e3);
            for (var i3 = 0; i3 < t2.length; i3++)
              if (t2[i3][0] === e3)
                return t2[i3][1];
            return null;
          }, e2.getAll = function(e3) {
            I2(arguments, 1);
            var t2 = [];
            return e3 = String(e3), T2(this.i, function(i3) {
              i3[0] === e3 && t2.push(i3[1]);
            }), t2;
          }, e2.has = function(e3) {
            I2(arguments, 1), e3 = String(e3);
            for (var t2 = 0; t2 < this.i.length; t2++)
              if (this.i[t2][0] === e3)
                return true;
            return false;
          }, e2.keys = function e3() {
            var t2, i3, r3, n3, o3 = this;
            return S2(e3, function(e4) {
              if (1 == e4.h && (t2 = c2(o3), i3 = t2.next()), 3 != e4.h)
                return i3.done ? void (e4.h = 0) : (r3 = i3.value, n3 = c2(r3), _2(e4, n3.next().value));
              i3 = t2.next(), e4.h = 2;
            });
          }, e2.set = function(e3, t2, i3) {
            I2(arguments, 2), e3 = String(e3);
            var r3 = [], n3 = R2(e3, t2, i3), o3 = true;
            T2(this.i, function(t3) {
              t3[0] === e3 ? o3 && (o3 = !r3.push(n3)) : r3.push(t3);
            }), o3 && r3.push(n3), this.i = r3;
          }, e2.values = function e3() {
            var t2, i3, r3, n3, o3 = this;
            return S2(e3, function(e4) {
              if (1 == e4.h && (t2 = c2(o3), i3 = t2.next()), 3 != e4.h)
                return i3.done ? void (e4.h = 0) : (r3 = i3.value, (n3 = c2(r3)).next(), _2(e4, n3.next().value));
              i3 = t2.next(), e4.h = 2;
            });
          }, P2.prototype._asNative = function() {
            for (var e3 = new C2(), t2 = c2(this), i3 = t2.next(); !i3.done; i3 = t2.next()) {
              var r3 = c2(i3.value);
              i3 = r3.next().value, r3 = r3.next().value, e3.append(i3, r3);
            }
            return e3;
          }, P2.prototype._blob = function() {
            var e3 = "----formdata-polyfill-" + Math.random(), t2 = [], i3 = "--" + e3 + '\r\nContent-Disposition: form-data; name="';
            return this.forEach(function(e4, r3) {
              return "string" == typeof e4 ? t2.push(i3 + D2(v2(r3)) + '"\r\n\r\n' + v2(e4) + "\r\n") : t2.push(i3 + D2(v2(r3)) + '"; filename="' + D2(e4.name) + '"\r\nContent-Type: ' + (e4.type || "application/octet-stream") + "\r\n\r\n", e4, "\r\n");
            }), t2.push("--" + e3 + "--"), new Blob(t2, { type: "multipart/form-data; boundary=" + e3 });
          }, P2.prototype[Symbol.iterator] = function() {
            return this.entries();
          }, P2.prototype.toString = function() {
            return "[object FormData]";
          }, w2 && !w2.matches && (w2.matches = w2.matchesSelector || w2.mozMatchesSelector || w2.msMatchesSelector || w2.oMatchesSelector || w2.webkitMatchesSelector || function(e3) {
            for (var t2 = (e3 = (this.document || this.ownerDocument).querySelectorAll(e3)).length; 0 <= --t2 && e3.item(t2) !== this; )
              ;
            return -1 < t2;
          }), N2 && (P2.prototype[N2] = "FormData"), A2) {
            var L2 = y2.XMLHttpRequest.prototype.setRequestHeader;
            y2.XMLHttpRequest.prototype.setRequestHeader = function(e3, t2) {
              L2.call(this, e3, t2), "content-type" === e3.toLowerCase() && (this.B = true);
            }, y2.XMLHttpRequest.prototype.send = function(e3) {
              e3 instanceof P2 ? (e3 = e3._blob(), this.B || this.setRequestHeader("Content-Type", e3.type), A2.call(this, e3)) : A2.call(this, e3);
            };
          }
          O2 && (y2.fetch = function(e3, t2) {
            return t2 && t2.body && t2.body instanceof P2 && (t2.body = t2.body._blob()), O2.call(this, e3, t2);
          }), b2 && (y2.navigator.sendBeacon = function(e3, t2) {
            return t2 instanceof P2 && (t2 = t2._asNative()), b2.call(this, e3, t2);
          }), y2.FormData = P2;
        }
      }();
      let mO = 1;
      function gO(e2, t2, i2, r2, n2) {
        mO += 1;
        const o2 = { sid: i2.sid, command: "convergeAllocateEdge", uid: "666", appId: i2.appId, ts: Math.floor(Date.now() / 1e3), seq: mO, requestId: mO, version: PE, cname: i2.cname }, s2 = { service_name: t2, json_body: JSON.stringify(o2) };
        let a2, c2, d2 = e2[0];
        return yE(async () => {
          a2 = Date.now();
          const e3 = await lT(d2, { data: s2, cancelToken: r2, headers: { "X-Packet-Service-Type": "0", "X-Packet-URI": "61" } });
          if (c2 = Date.now() - a2, 0 !== e3.code) {
            const t3 = new vE(TE.UNEXPECTED_RESPONSE, "live streaming ap error, code" + e3.code, { retry: true, responseTime: c2 });
            throw NE.error(t3.toString()), t3;
          }
          const i3 = JSON.parse(e3.json_body);
          if (200 !== i3.code) {
            const e4 = new vE(TE.UNEXPECTED_RESPONSE, "live streaming app center error, code: ".concat(i3.code, ", reason: ").concat(i3.reason), { code: i3.code, responseTime: c2 });
            throw NE.error(e4.toString()), e4;
          }
          if (!i3.servers || 0 === i3.servers.length) {
            const e4 = new vE(TE.UNEXPECTED_RESPONSE, "live streaming app center empty server", { code: i3.code, responseTime: c2 });
            throw NE.error(e4.toString()), e4;
          }
          const n3 = function(e4, t3) {
            return { addressList: e4.servers.map((e5) => "wss://".concat(e5.address.replace(/\./g, "-"), ".").concat(HE("WORKER_DOMAIN"), ":").concat(e5.wss, "?serviceName=").concat(encodeURIComponent(t3))), workerToken: e4.workerToken, vid: e4.vid };
          }(i3, t2);
          return HE("LIVE_STREAMING_ADDRESS") && (n3.addressList = HE("LIVE_STREAMING_ADDRESS") instanceof Array ? HE("LIVE_STREAMING_ADDRESS") : [HE("LIVE_STREAMING_ADDRESS")]), fO(fO({}, n3), {}, { responseTime: c2 });
        }, (r3, n3) => (IT.apworkerEvent(i2.sid, { success: true, sc: 200, serviceName: t2, responseDetail: JSON.stringify(r3.addressList), firstSuccess: 0 === n3, responseTime: c2, serverIp: e2[n3 % e2.length] }), false), (r3, n3) => (IT.apworkerEvent(i2.sid, { success: false, sc: r3.data && r3.data.code || 200, serviceName: t2, responseTime: c2, serverIp: e2[n3 % e2.length] }), !!(r3.code !== TE.OPERATION_ABORTED && r3.code !== TE.UNEXPECTED_RESPONSE || r3.data && r3.data.retry) && (d2 = e2[(n3 + 1) % e2.length], true)), n2);
      }
      let SO = 1;
      function TO(e2, t2, i2, r2) {
        let { url: n2, areaCode: o2 } = e2;
        const s2 = Date.now();
        let a2;
        const [c2, d2] = CO(t2, o2, [Fg.CHOOSE_SERVER]);
        let u2 = pT.networkState;
        return yE(async () => {
          u2 && pT.networkState === bg.OFFLINE && pT.onlineWaiter && await Cl.race([pT.onlineWaiter, LR(r2 && r2.maxRetryTimeout || RE.maxRetryTimeout)]), u2 = pT.networkState;
          const { data: e3, headers: o3 } = await lT(n2, { data: c2, cancelToken: i2, headers: { "Content-Type": "multipart/form-data;" } }, true, true);
          a2 = "1" === o3.http3 ? 1 : -1, IT.reportResourceTiming(n2, t2.sid), RO(e3, n2, t2, s2, [Fg.CHOOSE_SERVER], a2);
          const d3 = AR(e3, Fg.CHOOSE_SERVER);
          return IO(d3), vR(d3, n2);
        }, (e3) => (e3 && IT.joinChooseServer(t2.sid, { lts: s2, succ: true, csAddr: n2, opid: d2, serverList: e3.gatewayAddrs.map((e4) => e4.address), ec: null, cid: e3.cid.toString(), uid: e3.uid.toString(), csIp: e3.csIp, unilbsServerIds: [Fg.CHOOSE_SERVER].toString(), isHttp3: a2 }), false), (e3) => e3.code !== TE.OPERATION_ABORTED && (e3.code === TE.CAN_NOT_GET_GATEWAY_SERVER ? e3.data.retry : (IT.joinChooseServer(t2.sid, { lts: s2, succ: false, csAddr: n2, serverList: null, opid: d2, ec: e3.code, csIp: e3.data && e3.data.csIp, unilbsServerIds: [Fg.CHOOSE_SERVER].toString(), extend: JSON.stringify({ networkState: u2 }), isHttp3: a2 }), NE.warning("[".concat(t2.clientId, "] Choose server network error, retry"), e3), true)), r2);
      }
      function vO(e2, t2, i2, r2) {
        let n2, { url: o2, areaCode: s2, serviceIds: a2 } = e2;
        const c2 = Date.now(), [d2, u2] = CO(t2, s2, a2);
        let l2 = void 0;
        return yE(async () => {
          l2 && pT.networkState === bg.OFFLINE && pT.onlineWaiter && await Cl.race([pT.onlineWaiter, LR(r2 && r2.maxRetryTimeout || RE.maxRetryTimeout)]), l2 = pT.networkState;
          const { data: e3, headers: s3 } = await lT(o2, { data: d2, cancelToken: i2, headers: { "Content-Type": "multipart/form-data;" } }, true, true);
          n2 = "1" === s3.http3 ? 1 : -1, IT.reportResourceTiming(o2, t2.sid), RO(e3, o2, t2, c2, a2, n2);
          const u3 = AR(e3, Fg.CHOOSE_SERVER), h2 = AR(e3, "proxy5" === t2.cloudProxyServer ? Fg.CLOUD_PROXY_5 : "proxy3" === t2.cloudProxyServer || "proxy4" === t2.cloudProxyServer ? Fg.CLOUD_PROXY : Fg.CLOUD_PROXY_FALLBACK);
          return IO(u3), { gatewayInfo: vR(u3, o2), proxyInfo: h2, url: o2 };
        }, (e3) => (e3.gatewayInfo && IT.joinChooseServer(t2.sid, { lts: c2, succ: true, csAddr: o2, serverList: e3.gatewayInfo.gatewayAddrs.map((e4) => e4.address), ec: null, opid: u2, cid: e3.gatewayInfo.cid.toString(), uid: e3.gatewayInfo.uid.toString(), csIp: e3.gatewayInfo.csIp, unilbsServerIds: a2.toString(), isHttp3: n2 }), e3.proxyInfo && IT.joinWebProxyAP(t2.sid, { lts: c2, sucess: 1, apServerAddr: o2, turnServerAddrList: e3.proxyInfo.addresses.map((e4) => e4.ip).join(","), errorCode: null, eventType: t2.cloudProxyServer, unilbsServerIds: a2.toString() }), false), (e3) => e3.code !== TE.OPERATION_ABORTED && (e3.code === TE.CAN_NOT_GET_GATEWAY_SERVER ? e3.data.retry : (IT.joinWebProxyAP(t2.sid, { lts: c2, sucess: 0, apServerAddr: o2, turnServerAddrList: null, errorCode: e3.code, eventType: t2.cloudProxyServer, unilbsServerIds: a2.toString(), extend: JSON.stringify({ networkState: l2 }) }), NE.warning("[".concat(t2.clientId, "] multi unilbs network error, retry"), e3), true)), r2);
      }
      const RO = (e2, t2, i2, r2, n2, o2) => {
        const s2 = [], a2 = (s3) => {
          4096 === s3.flag ? IT.joinChooseServer(i2.sid, { lts: r2, succ: false, csAddr: t2, opid: e2.opid, serverList: null, ec: s3.error.message, csIp: s3.error.data && s3.error.data.csIp, unilbsServerIds: n2.toString(), isHttp3: o2 }) : 1048576 !== s3.flag && 4194304 !== s3.flag && 4194310 !== s3.flag || IT.joinWebProxyAP(i2.sid, { lts: r2, sucess: 0, apServerAddr: t2, turnServerAddrList: null, errorCode: s3.error.code, eventType: i2.cloudProxyServer, unilbsServerIds: n2.toString() });
        };
        if (e2.response_body.forEach((t3) => {
          const i3 = t3.buffer.code;
          if (23 === t3.uri && 0 === i3 && !t3.buffer.edges_services)
            if (4194310 === t3.buffer.flag)
              NE.warning("no edge services in ap response of proxy fallback, will not set proxy in iceServers"), t3.buffer.edges_services = [];
            else {
              const i4 = { error: new vE(TE.CAN_NOT_GET_GATEWAY_SERVER, "no edge services in ap response", { retry: true, csIp: e2.detail[502] }), flag: t3.buffer.flag };
              s2.push(i4), a2(i4);
            }
          if (0 !== i3) {
            const r3 = JA(i3), n3 = { error: new vE(TE.CAN_NOT_GET_GATEWAY_SERVER, r3.desc, { desc: r3.desc, retry: r3.retry, csIp: e2.detail[502] }), flag: t3.buffer.flag };
            4194310 === t3.buffer.flag ? NE.warning(n3.error.toString()) : s2.push(n3), a2(n3);
          }
        }), s2.length)
          throw NE.warning("[".concat(i2.clientId, "] multi unilbs ").concat(t2, " failed, ").concat(s2.map((e3) => "flag: ".concat(e3.flag, ", message: ").concat(e3.error.message, ", retry: ").concat(e3.error.data.retry)).join(" | "))), new vE(TE.CAN_NOT_GET_GATEWAY_SERVER, s2.map((e3) => "flag: ".concat(e3.flag, ", message: ").concat(e3.error.message)).join(" | "), { retry: !!s2.find((e3) => e3.error.data.retry), csIp: e2.detail[502], desc: [...new Set(s2.map((e3) => {
            var t3, i3;
            return null == e3 || null === (t3 = e3.error) || void 0 === t3 || null === (i3 = t3.data) || void 0 === i3 ? void 0 : i3.desc;
          }).filter((e3) => !!e3))] });
      }, IO = (e2) => {
        var t2, i2;
        if (e2.addresses && 0 === e2.addresses.length && 0 === e2.code)
          throw new vE(TE.CAN_NOT_GET_GATEWAY_SERVER, "void gateway address", { retry: true, csIp: e2.detail && e2.detail[502] });
        if (null !== (t2 = e2.detail) && void 0 !== t2 && t2[19] && "string" == typeof (null === (i2 = e2.detail) || void 0 === i2 ? void 0 : i2[19])) {
          const t3 = e2.detail[19], i3 = null == t3 ? void 0 : t3.split(";");
          for (let t4 = 0; t4 < i3.length; t4++) {
            var r2;
            const n2 = Ih(r2 = i3[t4]).call(r2);
            e2.addresses[t4] && i3 && (e2.addresses[t4].fingerprint = n2);
          }
        }
        if (HE("GATEWAY_ADDRESS") && HE("GATEWAY_ADDRESS").length > 0) {
          NE.debug("assign gateway address to", HE("GATEWAY_ADDRESS"));
          const t3 = HE("GATEWAY_ADDRESS").map((t4) => {
            var i3, r3;
            const n2 = null !== (i3 = null === (r3 = e2.addresses.find((e3) => e3.ip === t4.ip && e3.port === t4.port)) || void 0 === r3 ? void 0 : r3.fingerprint) && void 0 !== i3 ? i3 : "";
            return { ip: t4.ip, port: t4.port, ticket: e2.addresses[0] && e2.addresses[0].ticket, fingerprint: n2 };
          });
          e2.addresses = t3;
        }
      }, yO = (e2, t2) => {
        if (e2.response_body && e2.response_body.length) {
          const t3 = e2.response_body[0];
          if (0 !== t3.buffer.code) {
            const e3 = JA(t3.buffer.code);
            throw new vE(TE.UPDATE_TICKET_FAILED, "[".concat(t3.buffer.code, "]: ").concat(e3.desc), { retry: e3.retry });
          }
          return t3.buffer.ticket;
        }
        throw NE.debug("update ticket request received ap response without response body:", t2), new vE(TE.UPDATE_TICKET_FAILED, "cannot find response body from ap response", { retry: false });
      }, CO = (e2, t2, i2) => {
        const r2 = Math.floor(Math.random() * 10 ** 12), n2 = { appid: e2.appId, client_ts: Date.now(), opid: r2, sid: e2.sid, request_bodies: [{ uri: 22, buffer: { cname: e2.cname, detail: { 6: e2.stringUid, 11: t2, 12: HE("USE_NEW_TOKEN") ? "1" : void 0 }, key: e2.token, service_ids: i2, uid: e2.uid || 0 } }] };
        n2.request_bodies.forEach((t3) => {
          e2.multiIP && e2.multiIP.gateway_ip && (t3.buffer.detail[5] = JSON.stringify({ vocs_ip: [e2.multiIP.uni_lbs_ip], vos_ip: [e2.multiIP.gateway_ip] }));
        });
        const o2 = new FormData();
        return o2.append("request", JSON.stringify(n2)), [o2, r2];
      }, AO = (e2, t2) => {
        const i2 = Math.floor(Math.random() * 10 ** 12), r2 = { appid: e2.appId, client_ts: Date.now(), opid: i2, sid: e2.sid, request_bodies: [{ uri: 28, buffer: { cname: e2.cname, detail: { 1: "", 6: e2.stringUid, 12: "1" }, token: e2.token, service_ids: t2, uid: e2.uid || 0, edges_services: e2.apResponse.addresses.map((e3) => ({ ip: e3.ip, port: e3.port })) } }] }, n2 = new FormData();
        return n2.append("request", JSON.stringify(r2)), [n2, i2];
      };
      let OO = 0;
      const bO = () => {
        const e2 = HE("AREAS");
        0 === e2.length && e2.push(fg.GLOBAL);
        return zi(e2).call(e2, (e3, t2, i2) => {
          const r2 = wO(t2);
          return r2 ? 0 === i2 ? r2 : "".concat(e3, ",").concat(r2) : e3;
        }, "");
      }, wO = (e2) => e2 === fg.OVERSEA ? "".concat(Tg.ASIA, ",").concat(Tg.EUROPE, ",").concat(Tg.AFRICA, ",").concat(Tg.NORTH_AMERICA, ",").concat(Tg.SOUTH_AMERICA, ",").concat(Tg.OCEANIA) : Tg[e2], NO = { GLOBAL: { ASIA: [fg.CHINA, fg.JAPAN, fg.INDIA, fg.KOREA, fg.HKMC], EUROPE: [], NORTH_AMERICA: [fg.US], SOUTH_AMERICA: [], OCEANIA: [], AFRICA: [] } }, DO = Object.keys(NO[fg.GLOBAL]), PO = [fg.CHINA, fg.NORTH_AMERICA, fg.EUROPE, fg.ASIA, fg.JAPAN, fg.INDIA, fg.OCEANIA, fg.SOUTH_AMERICA, fg.AFRICA, fg.KOREA, fg.HKMC, fg.US], LO = function(e2, t2) {
        let i2 = [];
        if (e2.includes(fg.GLOBAL)) {
          const o2 = [fg.GLOBAL, fg.OVERSEA], s2 = Object.keys(vg);
          if (t2 === fg.GLOBAL)
            throw new vE(TE.INVALID_PARAMS, "GLOBAL is an invalid excludedArea value");
          if (t2 === fg.CHINA)
            i2 = [fg.OVERSEA];
          else if (n2 = t2, DO.includes(n2)) {
            const e3 = (r2 = t2, NO[fg.GLOBAL][r2] || []), n3 = [...o2, t2, ...e3];
            i2 = s2.filter((e4) => !n3.includes(e4));
          } else if (function(e3) {
            let t3 = false;
            return DO.forEach((i3) => {
              NO[fg.GLOBAL][i3].includes(e3) && (t3 = true);
            }), t3;
          }(t2)) {
            const e3 = function(e4) {
              let t3;
              return DO.forEach((i3) => {
                NO[fg.GLOBAL][i3].includes(e4) && (t3 = i3);
              }), t3;
            }(t2), r3 = [...o2, e3, t2];
            i2 = s2.filter((e4) => !r3.includes(e4));
          } else
            i2 = e2;
          i2 = function(e3) {
            const t3 = [];
            return PO.forEach((i3) => {
              e3.includes(i3) && t3.push(i3);
            }), t3.concat(e3.filter((e4) => !PO.includes(e4)));
          }(i2);
        } else
          i2 = e2;
        var r2, n2;
        return i2;
      };
      async function kO(e2, t2, i2, r2) {
        const n2 = async function(e3, t3, i3, r3) {
          let n3 = null;
          const o2 = [], s2 = async () => {
            const n4 = HE("WEBCS_DOMAIN").slice(0, HE("AJAX_REQUEST_CONCURRENT")).map((t4) => ({ url: e3.proxyServer ? "https://".concat(e3.proxyServer, "/ap/?url=").concat(t4 + "/api/v2/transpond/webrtc?v=2") : "https://".concat(t4, "/api/v2/transpond/webrtc?v=2"), areaCode: bO() })), s3 = r3.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "chooseServer", urls: n4.map((e4) => e4.url) }), a3 = await eI({ fragementLength: HE("FRAGEMENT_LENGTH"), referenceList: n4, asyncMapHandler: (r4) => (NE.debug("[".concat(e3.clientId, "] Connect to choose_server:"), r4.url), TO(r4, e3, t3, i3)), allFailedhandler: (e4) => {
              throw r3.recordJoinChannelService({ endTs: Date.now(), status: "error", errors: e4 }, s3), e4[0];
            }, promisesCollector: o2 });
            return r3.recordJoinChannelService({ endTs: Date.now(), status: "success" }, s3), a3;
          }, a2 = async () => {
            if (await LR(1e3), null !== n3)
              return n3;
            const s3 = HE("WEBCS_DOMAIN_BACKUP_LIST").map((t4) => ({ url: e3.proxyServer ? "https://".concat(e3.proxyServer, "/ap/?url=").concat(t4 + "/api/v2/transpond/webrtc?v=2") : "https://".concat(t4, "/api/v2/transpond/webrtc?v=2"), areaCode: bO() })), a3 = r3.recordJoinChannelService({ endTs: void 0, startTs: Date.now(), status: "pending", service: "chooseServer", urls: s3.map((e4) => e4.url) }), c2 = await eI({ fragementLength: HE("FRAGEMENT_LENGTH"), referenceList: s3, asyncMapHandler: (r4) => (NE.debug("[".concat(e3.clientId, "] Connect to backup choose_server:"), r4.url), TO(r4, e3, t3, i3)), allFailedhandler: (e4) => {
              throw r3.recordJoinChannelService({ endTs: Date.now(), status: "error", errors: e4 }, a3), e4[0];
            }, promisesCollector: o2 });
            return r3.recordJoinChannelService({ endTs: Date.now(), status: "success" }, a3), c2;
          };
          try {
            return n3 = await jR([s2(), a2()]), o2.length && o2.forEach((e4) => e4.cancel && "function" == typeof e4.cancel && e4.cancel()), n3;
          } catch (e4) {
            throw e4[0];
          }
        }(e2, t2, i2, r2);
        return { gatewayInfo: await n2 };
      }
      async function MO(e2, t2, i2, r2, n2) {
        const o2 = e2.cloudProxyServer;
        if ("disabled" === o2) {
          if (!r2)
            return;
          if (e2.useLocalAccessPoint)
            return await kO(e2, t2, i2, n2);
          if (HE("JOIN_WITH_FALLBACK_MEDIA_PROXY")) {
            const { gatewayInfo: r3, proxyInfo: o3 } = await VO(e2, t2, i2, n2);
            return e2.turnServer && "auto" !== e2.turnServer.mode || (e2.turnServer = { mode: "manual", servers: o3.map((e3) => ({ turnServerURL: e3.address, tcpport: e3.tcpport || kE.tcpport, udpport: e3.udpport || kE.udpport, username: e3.username || kE.username, password: e3.password || kE.password, forceturn: HE("JOIN_WITH_FALLBACK_MEDIA_PROXY_FORCE"), security: true })) }), { gatewayInfo: r3 };
          }
          return await kO(e2, t2, i2, n2);
        }
        const { proxyInfo: s2, gatewayInfo: a2 } = await VO(e2, t2, i2, n2), c2 = { gatewayInfo: a2 };
        return e2.turnServer = { mode: "manual", servers: s2.map((e3) => ({ turnServerURL: e3.address, tcpport: "proxy3" === o2 ? void 0 : e3.tcpport ? e3.tcpport : kE.tcpport, udpport: "proxy4" === o2 ? void 0 : e3.udpport ? e3.udpport : kE.udpport, username: e3.username || kE.username, password: e3.password || kE.password, forceturn: "proxy4" !== o2, security: "proxy5" === o2 })) }, NE.debug("[".concat(e2.clientId, "] set proxy server: ").concat(e2.proxyServer, ", mode: ").concat(o2)), c2;
      }
      async function UO(e2, t2, i2, r2, n2) {
        const o2 = HE("ACCOUNT_REGISTER").slice(0, HE("AJAX_REQUEST_CONCURRENT"));
        let s2 = [];
        s2 = t2.proxyServer ? o2.map((e3) => "https://".concat(t2.proxyServer, "/ap/?url=").concat(e3 + "/api/v1")) : o2.map((e3) => "https://".concat(e3, "/api/v1"));
        const a2 = null == n2 ? void 0 : n2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "stringUID", urls: s2 });
        try {
          const o3 = await async function(e3, t3, i3, r3, n3) {
            const o4 = Date.now(), s3 = { sid: i3.sid, opid: 10, appid: i3.appId, string_uid: t3 };
            let a3 = e3[0];
            const c2 = await yE(() => lT(a3 + "".concat(-1 === a3.indexOf("?") ? "?" : "&", "action=stringuid"), { data: s3, cancelToken: r3, headers: { "X-Packet-Service-Type": 0, "X-Packet-URI": 72 } }), (i4, r4) => {
              if (0 === i4.code) {
                if (i4.uid <= 0 || i4.uid >= Math.pow(2, 32))
                  throw NE.error("Invalid Uint Uid ".concat(t3, " => ").concat(i4.uid), i4), IT.reqUserAccount(s3.sid, { lts: o4, success: false, serverAddr: a3, stringUid: s3.string_uid, uid: i4.uid, errorCode: TE.INVALID_UINT_UID_FROM_STRING_UID, extend: s3 }), new vE(TE.INVALID_UINT_UID_FROM_STRING_UID);
                return IT.reqUserAccount(s3.sid, { lts: o4, success: true, serverAddr: a3, stringUid: s3.string_uid, uid: i4.uid, errorCode: null, extend: s3 }), false;
              }
              const n4 = JA(i4.code);
              return n4.retry && (a3 = e3[(r4 + 1) % e3.length]), IT.reqUserAccount(s3.sid, { lts: o4, success: false, serverAddr: a3, stringUid: s3.string_uid, uid: i4.uid, errorCode: n4.desc, extend: s3 }), n4.retry;
            }, (t4, i4) => t4.code !== TE.OPERATION_ABORTED && (IT.reqUserAccount(s3.sid, { lts: o4, success: false, serverAddr: a3, stringUid: s3.string_uid, uid: null, errorCode: t4.code, extend: s3 }), a3 = e3[(i4 + 1) % e3.length], true), n3);
            if (0 !== c2.code) {
              const e4 = JA(c2.code);
              throw new vE(TE.UNEXPECTED_RESPONSE, e4.desc);
            }
            return c2;
          }(s2, e2, t2, i2, r2);
          return null == n2 || n2.recordJoinChannelService({ status: "success", endTs: Date.now() }, a2), o3.uid;
        } catch (e3) {
          throw null == n2 || n2.recordJoinChannelService({ status: "error", endTs: Date.now(), errors: [e3] }, a2), e3;
        }
      }
      async function xO(e2, t2, i2) {
        const r2 = HE("CDS_AP").slice(0, HE("AJAX_REQUEST_CONCURRENT")).map((t3) => e2.proxyServer ? "https://".concat(e2.proxyServer, "/ap/?url=").concat(t3 + "/api/v1") : "https://".concat(t3, "/api/v1?action=config")).map((r3) => function(e3, t3, i3, r4) {
          const n3 = Bh(), o3 = { flag: 64, cipher_method: 0, features: { device: n3.name, system: n3.os, system_general: navigator.userAgent, vendor: t3.appId, version: PE, cname: t3.cname, sid: t3.sid, session_id: t3.sid, detail: "", proxyServer: t3.proxyServer } };
          return yE(() => lT(e3, { data: o3, timeout: 1e3, cancelToken: i3, headers: { "X-Packet-Service-Type": 0, "X-Packet-URI": 54 } }), void 0, (e4) => e4.code !== TE.OPERATION_ABORTED, r4);
        }(r3, e2, t2, i2));
        let n2 = null, o2 = null, s2 = {};
        try {
          n2 = await jR(r2);
        } catch (e3) {
          if (e3.code === TE.OPERATION_ABORTED)
            throw e3;
          o2 = e3;
        }
        r2.forEach((e3) => e3.cancel());
        if (IT.reportApiInvoke(e2.sid, { name: Em.REQUEST_CONFIG_DISTRIBUTE, options: { error: o2, res: n2 } }).onSuccess(), n2 && n2.test_tags)
          try {
            s2 = function(e3) {
              if (!e3.test_tags)
                return {};
              const t3 = e3.test_tags, i3 = Object.keys(t3), r3 = {};
              return i3.forEach((e4) => {
                var i4;
                const n3 = Ih(i4 = e4.slice(4)).call(i4), o3 = JSON.parse(t3[e4])[1];
                r3[n3] = o3;
              }), r3;
            }(n2);
          } catch (e3) {
          }
        return s2;
      }
      async function VO(e2, t2, i2, r2) {
        const n2 = HE("PROXY_SERVER_TYPE3"), o2 = (e3, t3, i3) => {
          let r3 = i3 || n2;
          return Array.isArray(r3) && (r3 = t3 % 2 == 0 ? n2[1] : n2[0]), "https://".concat(r3, "/ap/?url=").concat(e3);
        };
        let s2 = null;
        const a2 = [], c2 = async () => {
          const n3 = HE("WEBCS_DOMAIN").slice(0, HE("AJAX_REQUEST_CONCURRENT")).map((t3, i3) => {
            let r3;
            return r3 = "disabled" === e2.cloudProxyServer && e2.proxyServer ? o2("".concat(t3, "/api/v2/transpond/webrtc?v=2"), i3, e2.proxyServer) : "disabled" === e2.cloudProxyServer || "fallback" === e2.cloudProxyServer ? "https://".concat(t3, "/api/v2/transpond/webrtc?v=2") : o2("".concat(t3, "/api/v2/transpond/webrtc?v=2"), i3), { url: r3, areaCode: bO(), serviceIds: [Fg.CHOOSE_SERVER, "proxy5" === e2.cloudProxyServer ? Fg.CLOUD_PROXY_5 : "proxy3" === e2.cloudProxyServer || "proxy4" === e2.cloudProxyServer ? Fg.CLOUD_PROXY : Fg.CLOUD_PROXY_FALLBACK] };
          }), s3 = r2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "chooseServer", urls: n3.map((e3) => e3.url) }), c3 = await eI({ fragementLength: HE("FRAGEMENT_LENGTH"), referenceList: n3, asyncMapHandler: (r3) => (NE.debug("[".concat(e2.clientId, "] Connect to choose_server:"), r3.url), vO(r3, e2, t2, i2)), allFailedhandler: (e3) => {
            throw r2.recordJoinChannelService({ endTs: Date.now(), status: "error", errors: e3 }, s3), e3[0];
          }, promisesCollector: a2 });
          return r2.recordJoinChannelService({ endTs: Date.now(), status: "success" }, s3), c3;
        }, d2 = async () => {
          if (await LR(1e3), null !== s2)
            return s2;
          const n3 = HE("WEBCS_DOMAIN_BACKUP_LIST").map((t3, i3) => {
            let r3;
            return r3 = "disabled" === e2.cloudProxyServer && e2.proxyServer ? o2("".concat(t3, "/api/v2/transpond/webrtc?v=2"), i3, e2.proxyServer) : "disabled" === e2.cloudProxyServer || "fallback" === e2.cloudProxyServer ? "https://".concat(t3, "/api/v2/transpond/webrtc?v=2") : o2("".concat(t3, "/api/v2/transpond/webrtc?v=2"), i3), { url: r3, areaCode: bO(), serviceIds: [Fg.CHOOSE_SERVER, "proxy5" === e2.cloudProxyServer ? Fg.CLOUD_PROXY_5 : "proxy3" === e2.cloudProxyServer || "proxy4" === e2.cloudProxyServer ? Fg.CLOUD_PROXY : Fg.CLOUD_PROXY_FALLBACK] };
          }), c3 = r2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "chooseServer", urls: n3.map((e3) => e3.url) }), d3 = await eI({ fragementLength: HE("FRAGEMENT_LENGTH"), referenceList: n3, asyncMapHandler: (r3) => (NE.debug("[".concat(e2.clientId, "] Connect to backup choose_server:"), r3.url), vO(r3, e2, t2, i2)), allFailedhandler: (e3) => {
            throw r2.recordJoinChannelService({ endTs: Date.now(), status: "error", errors: e3 }, c3), e3[0];
          }, promisesCollector: a2 });
          return r2.recordJoinChannelService({ endTs: Date.now(), status: "success" }, c3), d3;
        };
        let u2, l2, h2;
        try {
          ({ gatewayInfo: u2, proxyInfo: l2, url: h2 } = await jR([c2(), d2()]));
        } catch (e3) {
          throw e3[0];
        }
        if (a2.length && a2.forEach((e3) => e3.cancel && "function" == typeof e3.cancel && e3.cancel()), !u2 || !l2)
          throw new vE(TE.UNEXPECTED_ERROR, "missing gateway or proxy response").print();
        if (e2.apUrl = h2, "disabled" !== e2.cloudProxyServer && Array.isArray(n2) && h2) {
          const t3 = new YA(h2).host;
          n2.includes(t3) && (e2.proxyServer = t3, NE.setProxyServer(t3), IT.setProxyServer(t3));
        }
        return s2 = { gatewayInfo: u2, proxyInfo: await OR(l2, u2.uid) }, s2;
      }
      async function jO(e2, t2, i2, r2) {
        const n2 = HE("UAP_AP").slice(0, HE("AJAX_REQUEST_CONCURRENT")).map((e3) => t2.proxyServer ? "https://".concat(t2.proxyServer, "/ap/?url=").concat(e3 + "/api/v1?action=uap") : "https://".concat(e3, "/api/v1?action=uap"));
        return await gO(n2, e2, t2, i2, r2);
      }
      async function FO(e2, t2, i2) {
        const r2 = HE("UAP_AP").slice(0, HE("AJAX_REQUEST_CONCURRENT")).map((t3) => e2.proxyServer ? "https://".concat(e2.proxyServer, "/ap/?url=").concat(t3 + "/api/v1?action=uap") : "https://".concat(t3, "/api/v1?action=uap")).map((r3) => function(e3, t3, i3, r4) {
          const n2 = { command: "convergeAllocateEdge", sid: t3.sid, appId: t3.appId, token: t3.token, ts: Date.now(), version: PE, cname: t3.cname, uid: t3.uid.toString(), requestId: SO, seq: SO };
          SO += 1;
          const o2 = { service_name: "tele_channel", json_body: JSON.stringify(n2) };
          return yE(async () => {
            const t4 = await lT(e3, { data: o2, cancelToken: i3, headers: { "X-Packet-Service-Type": 0, "X-Packet-URI": 61 } });
            if (0 !== t4.code) {
              const e4 = new vE(TE.UNEXPECTED_RESPONSE, "cross channel ap error, code" + t4.code, { retry: true });
              throw NE.error(e4.toString()), e4;
            }
            const r5 = JSON.parse(t4.json_body);
            if (200 !== r5.code) {
              const e4 = new vE(TE.UNEXPECTED_RESPONSE, "cross channel app center error, code: ".concat(r5.code, ", reason: ").concat(r5.reason));
              throw NE.error(e4.toString()), e4;
            }
            if (!r5.servers || 0 === r5.servers.length) {
              const e4 = new vE(TE.UNEXPECTED_RESPONSE, "cross channel app center empty server");
              throw NE.error(e4.toString()), e4;
            }
            return { vid: r5.vid, workerToken: r5.workerToken, addressList: (HE("CHANNEL_MEDIA_RELAY_SERVERS") || r5.servers).map((e4) => "wss://".concat(e4.address.replace(/\./g, "-"), ".").concat(HE("WORKER_DOMAIN"), ":").concat(e4.wss)) };
          }, void 0, (e4) => !!(e4.code !== TE.OPERATION_ABORTED && e4.code !== TE.UNEXPECTED_RESPONSE || e4.data && e4.data.retry), r4);
        }(r3, e2, t2, i2));
        try {
          const e3 = await jR(r2);
          return r2.forEach((e4) => e4.cancel()), e3;
        } catch (e3) {
          throw e3[0];
        }
      }
      async function BO(e2, t2, i2) {
        let r2 = null;
        const n2 = [], o2 = async (o3) => {
          const s2 = HE(o3 ? "WEBCS_DOMAIN_BACKUP_LIST" : "WEBCS_DOMAIN").map((t3) => e2.proxyServer ? "https://".concat(e2.proxyServer, "/ap/?url=").concat(t3 + "/api/v2/transpond/webrtc?v=2") : "https://".concat(t3, "/api/v2/transpond/webrtc?v=2"));
          return o3 && (await LR(1e3), null !== r2) ? r2 : await eI({ fragementLength: HE("FRAGEMENT_LENGTH"), referenceList: s2, asyncMapHandler: (r3) => (NE.debug("[".concat(e2.clientId, "] update ticket, Connect to ").concat(o3 ? "backup" : "", " choose_server:"), r3), function(e3, t3, i3, r4) {
            const [n3] = AO(t3, [Fg.CHOOSE_SERVER]);
            let o4 = pT.networkState;
            return yE(async () => {
              o4 && pT.networkState === bg.OFFLINE && pT.onlineWaiter && await Cl.race([pT.onlineWaiter, LR(r4 && r4.maxRetryTimeout || RE.maxRetryTimeout)]), o4 = pT.networkState;
              const t4 = await lT(e3, { data: n3, cancelToken: i3, headers: { "Content-Type": "multipart/form-data;" } }, true);
              return yO(t4, e3);
            }, () => false, (e4) => e4.code !== TE.OPERATION_ABORTED && (e4.code === TE.UPDATE_TICKET_FAILED ? e4.data.retry : (NE.warning("[".concat(t3.clientId, "] update ticket network error, retry"), e4), true)), r4);
          }(r3, e2, t2, i2)), allFailedhandler: (e3) => {
            throw e3[0];
          }, promisesCollector: n2 });
        };
        try {
          return r2 = await jR([o2(false), o2(true)]), n2.length && n2.forEach((e3) => e3.cancel && "function" == typeof e3.cancel && e3.cancel()), r2;
        } catch (e3) {
          throw e3[0];
        }
      }
      function GO(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function WO(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? GO(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : GO(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class HO extends gE {
        constructor() {
          super(), mp(this, "configs", void 0), mp(this, "joinInfo", void 0), mp(this, "cancelToken", void 0), mp(this, "retryConfig", { timeout: 3e3, timeoutFactor: 1.5, maxRetryCount: 1, maxRetryTimeout: 1e4 }), mp(this, "interval", void 0), mp(this, "mutex", new OT("config-distribute")), mp(this, "mutableParamsRead", false);
        }
        startGetConfigDistribute(e2, t2) {
          this.joinInfo = e2, this.cancelToken = t2, this.interval && this.stopGetConfigDistribute(), HE("ENABLE_CONFIG_DISTRIBUTE") && (this.updateConfigDistribute(), this.interval = window.setInterval(() => {
            this.updateConfigDistribute();
          }, HE("CONFIG_DISTRIBUTE_INTERVAL")));
        }
        stopGetConfigDistribute() {
          this.interval && clearInterval(this.interval), this.interval = void 0, this.joinInfo = void 0, this.cancelToken = void 0;
        }
        async awaitConfigDistributeComplete() {
          if (!this.mutex.isLocked)
            return;
          (await this.mutex.lock())();
        }
        async updateConfigDistribute() {
          if (!this.mutableParamsRead) {
            this.mutableParamsRead = true;
            IT.reportApiInvoke(null, { options: void 0, name: Em.LOAD_CONFIG_FROM_LOCALSTORAGE, tag: fm.TRACER }).onSuccess(JSON.stringify(YE));
          }
          if (!this.joinInfo || !this.cancelToken || !this.retryConfig)
            return void NE.debug("[config-distribute] get config distribute interrupted have no joininfo");
          let e2;
          const t2 = await this.mutex.lock();
          try {
            e2 = await xO(this.joinInfo, this.cancelToken, this.retryConfig), NE.debug("[config-distribute] get config distribute", JSON.stringify(e2)), e2.limit_bitrate && this.handleBitrateLimit(e2.limit_bitrate), this.cacheGlobalParameterConfig(e2), this.configs = e2;
          } catch (e3) {
            const t3 = new vE(TE.NETWORK_RESPONSE_ERROR, e3);
            NE.warning("[config-distribute] ".concat(t3.toString()));
          } finally {
            t2();
          }
        }
        getBitrateLimit() {
          return this.configs ? this.configs.limit_bitrate : void 0;
        }
        handleBitrateLimit(e2) {
          var t2;
          (t2 = e2) && t2.uplink && t2.id && void 0 !== t2.uplink.max_bitrate && void 0 !== t2.uplink.min_bitrate && (this.configs && this.configs.limit_bitrate ? this.configs && this.configs.limit_bitrate && this.configs.limit_bitrate.id !== e2.id && this.emit(Rg.UPDATE_BITRATE_LIMIT, e2) : this.emit(Rg.UPDATE_BITRATE_LIMIT, e2));
        }
        getLowStreamConfigDistribute() {
          return this.configs && this.configs.limit_bitrate && WO({}, this.configs.limit_bitrate.low_stream_uplink);
        }
        cacheGlobalParameterConfig(e2) {
          var t2;
          const i2 = Yf(t2 = Object.keys(e2).filter((e3) => /^webrtc_ng_global_parameter/.test(e3))).call(t2);
          for (let t3 = 0; t3 < i2.length; t3++)
            for (let r3 = i2.length - 1; r3 > t3; r3--) {
              const t4 = i2[r3];
              if ("number" == typeof e2[t4].__priority) {
                const n2 = e2[t4].__priority, o2 = i2[r3 - 1];
                if ("number" == typeof e2[o2].__priority) {
                  if (!(n2 > e2[o2].__priority))
                    continue;
                  {
                    const e3 = t4;
                    i2[r3] = i2[r3 - 1], i2[r3 - 1] = e3;
                  }
                } else {
                  const e3 = t4;
                  i2[r3] = i2[r3 - 1], i2[r3 - 1] = e3;
                }
              }
            }
          const r2 = {};
          i2.forEach((t3) => {
            const i3 = e2[t3], n2 = i3.__expires;
            Object.keys(i3).forEach((e3) => {
              "__priority" === e3 || "__expires" === e3 || Object.prototype.hasOwnProperty.call(r2, e3) || (r2[e3] = WO({ value: i3[e3] }, n2 && { expires: n2 }));
            });
          });
          try {
            const e3 = JSON.stringify(r2), t3 = window.btoa(e3);
            window.localStorage.setItem("websdk_ng_global_parameter", t3), NE.debug("Caching global parameters ".concat(e3));
          } catch (e3) {
            NE.error("Error caching global parameters:", e3.message);
          }
        }
      }
      function KO(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function YO(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? KO(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : KO(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class qO extends gE {
        constructor(e2, t2, i2, r2) {
          super(), mp(this, "spec", void 0), mp(this, "token", void 0), mp(this, "websocket", void 0), mp(this, "pingpongTimer", void 0), mp(this, "reconnectMode", "retry"), mp(this, "serviceMode", void 0), mp(this, "reqId", 0), mp(this, "commandReqId", 0), mp(this, "handleWebSocketOpen", () => {
            this.reconnectMode = "retry", this.startPingPong();
          }), mp(this, "handleWebSocketMessage", (e3) => {
            if (!e3.data)
              return;
            const t3 = JSON.parse(e3.data);
            t3.requestId ? this.emit("@".concat(t3.requestId, "-").concat(t3.sid), t3) : this.serviceMode === Ym.INJECT ? this.emit($m.INJECT_STREAM_STATUS, t3) : (IT.workerEvent(this.spec.sid, { actionType: "status", serverCode: t3.code, workerType: this.serviceMode === Ym.TRANSCODE ? 1 : 2 }), this.emit($m.PUBLISH_STREAM_STATUS, t3));
          }), this.spec = t2, this.token = e2, this.serviceMode = r2, this.websocket = new $A("live-streaming", i2), this.websocket.on(Km.CONNECTED, this.handleWebSocketOpen), this.websocket.on(Km.ON_MESSAGE, this.handleWebSocketMessage), this.websocket.on(Km.REQUEST_NEW_URLS, (e3, t3) => {
            FR(this, $m.REQUEST_NEW_ADDRESS).then(e3).catch(t3);
          }), this.websocket.on(Km.RECONNECTING, () => {
            this.websocket.reconnectMode = this.reconnectMode;
          });
        }
        init(e2) {
          return this.websocket.init(e2);
        }
        async request(e2, t2, i2, r2) {
          this.reqId += 1, "request" === e2 && (this.commandReqId += 1);
          const n2 = this.commandReqId, o2 = this.reqId;
          if (!o2 || !this.websocket)
            throw new vE(TE.UNEXPECTED_ERROR);
          const s2 = YO({ command: e2, sdkVersion: "4.16.1" === PE ? "0.0.1" : PE, seq: o2, requestId: o2, allocate: i2, cname: this.spec.cname, appId: this.spec.appId, sid: this.spec.sid, uid: this.spec.uid.toString(), ts: Math.floor(Date.now() / 1e3) }, t2);
          if ("closed" === this.websocket.state)
            throw new vE(TE.WS_DISCONNECT);
          const a2 = () => new Cl((e3, t3) => {
            this.websocket.once(Km.CLOSED, () => t3(new vE(TE.WS_ABORT))), this.websocket.once(Km.CONNECTED, e3);
          });
          "connected" !== this.websocket.state && await a2(), s2.clientRequest && (s2.clientRequest.workerToken = this.token);
          const c2 = new Cl((e3, t3) => {
            const i3 = () => {
              t3(new vE(TE.WS_ABORT));
            };
            this.websocket.once(Km.RECONNECTING, i3), this.websocket.once(Km.CLOSED, i3), this.once("@".concat(o2, "-").concat(this.spec.sid), (t4) => {
              e3(t4);
            });
          });
          r2 && IT.workerEvent(this.spec.sid, YO(YO({}, r2), {}, { requestId: n2, actionType: "request", payload: JSON.stringify(t2.clientRequest), serverCode: 0, code: 0 }));
          const d2 = Date.now();
          this.websocket.sendMessage(s2);
          let u2 = null;
          try {
            u2 = await c2;
          } catch (r3) {
            if ("closed" === this.websocket.state)
              throw r3;
            return await a2(), await this.request(e2, t2, i2);
          }
          return r2 && IT.workerEvent(this.spec.sid, YO(YO({}, r2), {}, { requestId: n2, actionType: "response", payload: JSON.stringify(u2.serverResponse), serverCode: u2.code, success: 200 === u2.code, responseTime: Date.now() - d2 })), 200 !== u2.code && this.handleResponseError(u2), u2;
        }
        tryNextAddress() {
          this.reconnectMode = "tryNext", this.websocket.reconnect("tryNext");
        }
        close() {
          const e2 = "4.16.1" === PE ? "0.0.1" : PE;
          this.reqId += 1, "connected" === this.websocket.state ? (this.websocket.sendMessage({ command: "request", appId: this.spec.appId, cname: this.spec.cname, uid: this.spec.uid.toString(), sdkVersion: e2, sid: this.spec.sid, seq: this.reqId, ts: Math.floor(Date.now() / 1e3), requestId: this.reqId, clientRequest: { command: "DestroyWorker" } }), this.websocket.close(false, true)) : this.websocket.close(false), this.pingpongTimer && (window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0);
        }
        handleResponseError(e2) {
          switch (e2.code) {
            case tg.LIVE_STREAM_RESPONSE_ALREADY_EXISTS_STREAM:
              return void NE.warning("live stream response already exists stream");
            case tg.LIVE_STREAM_RESPONSE_TRANSCODING_PARAMETER_ERROR:
            case tg.LIVE_STREAM_RESPONSE_BAD_STREAM:
            case tg.LIVE_STREAM_RESPONSE_WM_PARAMETER_ERROR:
              return new vE(TE.LIVE_STREAMING_INVALID_ARGUMENT, "", { code: e2.code }).throw();
            case tg.LIVE_STREAM_RESPONSE_WM_WORKER_NOT_EXIST:
              if ("UnpublishStream" === e2.serverResponse.command || "UninjectStream" === e2.serverResponse.command)
                return;
              throw new vE(TE.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "live stream response wm worker not exist", { retry: true });
            case tg.LIVE_STREAM_RESPONSE_NOT_AUTHORIZED:
              return new vE(TE.LIVE_STREAMING_PUBLISH_STREAM_NOT_AUTHORIZED, "", { code: e2.code }).throw();
            case tg.LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE: {
              const t2 = new vE(TE.LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE);
              return this.emit($m.WARNING, t2, e2.serverResponse.url);
            }
            case tg.LIVE_STREAM_RESPONSE_REQUEST_TOO_OFTEN: {
              const t2 = new vE(TE.LIVE_STREAMING_WARN_FREQUENT_REQUEST);
              return this.emit($m.WARNING, t2, e2.serverResponse.url);
            }
            case tg.LIVE_STREAM_RESPONSE_NOT_FOUND_PUBLISH:
              throw new vE(TE.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "live stream response wm worker not exist", { retry: true });
            case tg.LIVE_STREAM_RESPONSE_NOT_SUPPORTED:
              return new vE(TE.LIVE_STREAMING_TRANSCODING_NOT_SUPPORTED, "", { code: e2.code }).throw();
            case tg.LIVE_STREAM_RESPONSE_MAX_STREAM_NUM: {
              const t2 = new vE(TE.LIVE_STREAMING_WARN_STREAM_NUM_REACH_LIMIT);
              return this.emit($m.WARNING, t2, e2.serverResponse.url);
            }
            case tg.LIVE_STREAM_RESPONSE_INTERNAL_SERVER_ERROR:
              return new vE(TE.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "", { code: e2.code }).throw();
            case tg.LIVE_STREAM_RESPONSE_RESOURCE_LIMIT:
              throw new vE(TE.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "live stream resource limit", { retry: true, changeAddress: true });
            case tg.LIVE_STREAM_RESPONSE_WORKER_LOST:
            case tg.LIVE_STREAM_RESPONSE_WORKER_QUIT:
              if ("UnpublishStream" === e2.serverResponse.command || "UninjectStream" === e2.serverResponse.command)
                return;
              throw new vE(TE.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "error fail send message", { retry: true, changeAddress: true });
            case tg.ERROR_FAIL_SEND_MESSAGE:
              if ("UnpublishStream" === e2.serverResponse.command || "UninjectStream" === e2.serverResponse.command)
                return;
              if ("UpdateTranscoding" === e2.serverResponse.command || "ControlStream" === e2.serverResponse.command)
                return new vE(TE.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "error fail send message", { code: e2.code }).throw();
              throw new vE(TE.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "error fail send message", { retry: true, changeAddress: true });
            case tg.PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN:
            case tg.PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT:
            case tg.PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE:
            case tg.PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH:
              return new vE(TE.LIVE_STREAMING_CDN_ERROR, "", { code: e2.code }).throw();
          }
        }
        startPingPong() {
          this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(() => {
            "connected" === this.websocket.state && this.request("ping", {}).catch(xR);
          }, 6e3);
        }
      }
      function JO(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function XO(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? JO(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : JO(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class zO extends gE {
        constructor(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : RE, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : RE;
          super(), mp(this, "onLiveStreamWarning", void 0), mp(this, "onLiveStreamError", void 0), mp(this, "onInjectStatusChange", void 0), mp(this, "spec", void 0), mp(this, "retryTimeout", 1e4), mp(this, "connection", void 0), mp(this, "httpRetryConfig", void 0), mp(this, "wsRetryConfig", void 0), mp(this, "streamingTasks", /* @__PURE__ */ new Map()), mp(this, "isStartingStreamingTask", false), mp(this, "taskMutex", new OT("live-streaming")), mp(this, "cancelToken", fE.CancelToken.source()), mp(this, "transcodingConfig", void 0), mp(this, "injectConfig", XO({}, Zm)), mp(this, "injectLoopTimes", 0), mp(this, "uapResponse", void 0), mp(this, "lastTaskId", 1), mp(this, "statusError", /* @__PURE__ */ new Map()), this.spec = e2, this.httpRetryConfig = i2, this.wsRetryConfig = t2;
        }
        async setTranscodingConfig(e2) {
          const t2 = XO(XO({}, Qm), e2);
          66 !== t2.videoCodecProfile && 77 !== t2.videoCodecProfile && 100 !== t2.videoCodecProfile && (NE.debug("[".concat(this.spec.clientId, "] set transcoding config, fix video codec profile: ").concat(t2.videoCodecProfile, " -> 100")), t2.videoCodecProfile = 100), t2.transcodingUsers || (t2.transcodingUsers = t2.userConfigs), t2.transcodingUsers && (t2.transcodingUsers = t2.transcodingUsers.map((e3) => XO(XO(XO({}, Jm), e3), {}, { zOrder: e3.zOrder ? e3.zOrder + 1 : 1 }))), function(e3) {
            tm(e3.width) || Xf(e3.width, "config.width", 0, 1e4), tm(e3.height) || Xf(e3.height, "config.height", 0, 1e4), tm(e3.videoBitrate) || Xf(e3.videoBitrate, "config.videoBitrate", 1, 1e6), tm(e3.videoFrameRate) || Xf(e3.videoFrameRate, "config.videoFrameRate"), tm(e3.lowLatency) || qf(e3.lowLatency, "config.lowLatency"), tm(e3.audioSampleRate) || Jf(e3.audioSampleRate, "config.audioSampleRate", [32e3, 44100, 48e3]), tm(e3.audioBitrate) || Xf(e3.audioBitrate, "config.audioBitrate", 1, 128), tm(e3.audioChannels) || Jf(e3.audioChannels, "config.audioChannels", [1, 2, 3, 4, 5]), tm(e3.videoGop) || Xf(e3.videoGop, "config.videoGop"), tm(e3.videoCodecProfile) || Jf(e3.videoCodecProfile, "config.videoCodecProfile", [66, 77, 100]), tm(e3.userCount) || Xf(e3.userCount, "config.userCount", 0, 17), tm(e3.backgroundColor) || Xf(e3.backgroundColor, "config.backgroundColor", 0, 16777215), tm(e3.userConfigExtraInfo) || Qf(e3.userConfigExtraInfo, "config.userConfigExtraInfo", 0, 4096, false), e3.transcodingUsers && !tm(e3.transcodingUsers) && (Zf(e3.transcodingUsers, "config.transcodingUsers"), e3.transcodingUsers.forEach((e4, t3) => {
              em(e4.uid), tm(e4.x) || Xf(e4.x, "transcodingUser[".concat(t3, "].x"), 0, 1e4), tm(e4.y) || Xf(e4.y, "transcodingUser[".concat(t3, "].y"), 0, 1e4), tm(e4.width) || Xf(e4.width, "transcodingUser[".concat(t3, "].width"), 0, 1e4), tm(e4.height) || Xf(e4.height, "transcodingUser[".concat(t3, "].height"), 0, 1e4), tm(e4.zOrder) || Xf(e4.zOrder - 1, "transcodingUser[".concat(t3, "].zOrder"), 0, 100), tm(e4.alpha) || Xf(e4.alpha, "transcodingUser[".concat(t3, "].alpha"), 0, 1, false);
            })), tm(e3.watermark) || zm(e3.watermark, "watermark"), tm(e3.backgroundImage) || zm(e3.backgroundImage, "backgroundImage"), e3.images && !tm(e3.images) && (Zf(e3.images, "config.images"), e3.images.forEach((e4, t3) => {
              zm(e4, "images[".concat(t3, "]"));
            }));
          }(t2);
          const i2 = [];
          t2.images && i2.push(...t2.images.map((e3) => XO(XO(XO({}, Xm), e3), {}, { zOrder: 255 }))), t2.backgroundImage && (i2.push(XO(XO(XO({}, Xm), t2.backgroundImage), {}, { zOrder: 0 })), delete t2.backgroundImage), t2.watermark && (i2.push(XO(XO(XO({}, Xm), t2.watermark), {}, { zOrder: 255 })), delete t2.watermark), t2.images = i2, t2.transcodingUsers && (t2.userConfigs = t2.transcodingUsers.map((e3) => XO({}, e3)), t2.userCount = t2.transcodingUsers.length, delete t2.transcodingUsers);
          const r2 = (t2.userConfigs || []).map((e3) => "number" == typeof e3.uid ? Cl.resolve(e3.uid) : UO(e3.uid, this.spec, this.cancelToken.token, this.httpRetryConfig));
          if ((await Cl.all(r2)).forEach((e3, i3) => {
            t2.userConfigs && t2.userConfigs[i3] && (t2.userConfigs[i3].uid = e3);
          }), this.transcodingConfig = t2, this.connection)
            try {
              var n2;
              const e3 = await this.connection.request("request", { clientRequest: { command: "UpdateTranscoding", transcodingConfig: this.transcodingConfig } }, false, { command: "UpdateTranscoding", workerType: 1, requestByUser: true, tid: Array.from(zv(n2 = this.streamingTasks).call(n2)).map((e4) => e4.taskId).join("#") });
              NE.debug("[".concat(this.spec.clientId, "] update live transcoding config success, code: ").concat(e3.code, ", config:"), JSON.stringify(this.transcodingConfig));
            } catch (e3) {
              if (!e3.data || !e3.data.retry)
                throw e3;
              e3.data.changeAddress && this.connection.tryNextAddress(), this.streamingTasks.forEach((t3) => {
                NE.warning("[".concat(this.spec.clientId, "] live streaming receive error"), e3.toString(), "try to republish", t3.url), this.startLiveStreamingTask(t3.url, t3.mode, e3).then(() => {
                  NE.debug("[".concat(this.spec.clientId, "] live streaming republish ").concat(t3.url, " success"));
                }).catch((e4) => {
                  NE.error("[".concat(this.spec.clientId, "] live streaming republish failed"), t3.url, e4.toString()), this.onLiveStreamError && this.onLiveStreamError(t3.url, e4);
                });
              });
            }
        }
        setInjectStreamConfig(e2, t2) {
          this.injectConfig = Object.assign({}, this.injectConfig, e2), this.injectLoopTimes = t2;
        }
        async startLiveStreamingTask(e2, t2, i2) {
          var r2;
          if (Array.from(zv(r2 = this.streamingTasks).call(r2)).find((e3) => e3.mode === Ym.INJECT) && t2 === Ym.INJECT)
            return new vE(TE.LIVE_STREAMING_TASK_CONFLICT, "inject stream over limit").throw();
          if (!this.transcodingConfig && t2 === Ym.TRANSCODE)
            throw new vE(TE.INVALID_OPERATION, "[LiveStreaming] no transcoding config found, can not start transcoding streaming task");
          let n2 = { command: "PublishStream", ts: Date.now(), url: e2, uid: this.spec.uid.toString(), autoDestroyTime: 100, acceptImageTimeout: true };
          NE.debug("[".concat(this.spec.clientId, "] start live streaming ").concat(e2, ", mode: ").concat(t2));
          const o2 = await this.taskMutex.lock();
          if (!this.connection && i2)
            return void o2();
          if (this.streamingTasks.get(e2) && !i2)
            return o2(), new vE(TE.LIVE_STREAMING_TASK_CONFLICT).throw();
          try {
            this.connection || (this.connection = await this.connect(t2));
          } catch (e3) {
            throw o2(), e3;
          }
          switch (t2) {
            case Ym.TRANSCODE:
              n2.transcodingConfig = XO({}, this.transcodingConfig);
              break;
            case Ym.RAW:
              break;
            case Ym.INJECT:
              n2 = { cname: this.spec.cname, command: "InjectStream", sid: this.spec.sid, transcodingConfig: this.injectConfig, ts: Date.now(), url: e2, loopTimes: this.injectLoopTimes };
          }
          this.uapResponse && this.uapResponse.vid && (n2.vid = this.uapResponse.vid), this.isStartingStreamingTask = true;
          const s2 = this.lastTaskId++;
          try {
            const r3 = new Cl((t3, r4) => {
              LR(this.retryTimeout).then(() => {
                if (i2)
                  return r4(i2);
                const t4 = this.statusError.get(e2);
                return t4 ? (this.statusError.delete(e2), r4(t4)) : void 0;
              });
            }), a2 = await Cl.race([this.connection.request("request", { clientRequest: n2 }, true, { url: e2, command: "PublishStream", workerType: t2 === Ym.TRANSCODE ? 1 : 2, requestByUser: !i2, tid: s2.toString() }), r3]);
            this.isStartingStreamingTask = false, NE.debug("[".concat(this.spec.clientId, "] live streaming started, code: ").concat(a2.code)), this.streamingTasks.set(e2, { clientRequest: n2, mode: t2, url: e2, taskId: s2 }), o2();
          } catch (r3) {
            if (o2(), this.isStartingStreamingTask = false, !r3.data || !r3.data.retry || i2)
              throw r3;
            return r3.data.changeAddress ? (this.connection.tryNextAddress(), await this.startLiveStreamingTask(e2, t2, r3)) : await this.startLiveStreamingTask(e2, t2, r3);
          }
        }
        stopLiveStreamingTask(e2) {
          return new Cl((t2, i2) => {
            const r2 = this.streamingTasks.get(e2);
            if (!r2 || !this.connection)
              return new vE(TE.UNEXPECTED_ERROR, "can not find streaming task to stop").throw();
            const n2 = r2.mode;
            r2.abortTask = () => {
              NE.debug("[".concat(this.spec.clientId, "] stop live streaming success(worker exception)")), this.streamingTasks.delete(e2), t2();
            }, this.connection.request("request", { clientRequest: { command: n2 === Ym.INJECT ? "UninjectStream" : "UnpublishStream", url: r2.url } }, false, { url: e2, command: "UnPublishStream", workerType: n2 === Ym.TRANSCODE ? 1 : 2, requestByUser: true, tid: (this.lastTaskId++).toString() }).then((i3) => {
              NE.debug("[".concat(this.spec.clientId, "] stop live streaming success, code: ").concat(i3.code)), this.streamingTasks.delete(e2), 0 === this.streamingTasks.size && n2 !== Ym.INJECT && (this.connection && this.connection.close(), this.connection = void 0), t2(), n2 === Ym.INJECT && this.onInjectStatusChange && this.onInjectStatusChange(qm.INJECT_STREAM_STATUS_STOP_SUCCESS, this.spec.uid, e2);
            }).catch(i2);
          });
        }
        async controlInjectStream(e2, t2, i2, r2) {
          const n2 = this.streamingTasks.get(e2);
          if (!n2 || !this.connection || n2.mode !== Ym.INJECT)
            throw new vE(TE.INVALID_OPERATION, "can not find inject stream task to control");
          return (await this.connection.request("request", { clientRequest: { command: "ControlStream", url: e2, control: t2, audioVolume: i2, position: r2 } })).serverResponse;
        }
        resetAllTask() {
          var e2;
          const t2 = Array.from(zv(e2 = this.streamingTasks).call(e2));
          this.terminate();
          for (const e3 of t2)
            this.startLiveStreamingTask(e3.url, e3.mode).catch((t3) => {
              this.onLiveStreamError && this.onLiveStreamError(e3.url, t3);
            });
        }
        terminate() {
          this.cancelToken && this.cancelToken.cancel(), this.streamingTasks = /* @__PURE__ */ new Map(), this.isStartingStreamingTask = false, this.statusError = /* @__PURE__ */ new Map(), this.cancelToken = fE.CancelToken.source(), this.uapResponse = void 0, this.connection && this.connection.close(), this.connection = void 0;
        }
        async connect(e2) {
          if (this.connection)
            throw new vE(TE.UNEXPECTED_ERROR, "live streaming connection has already connected");
          const t2 = await FR(this, eg.REQUEST_WORKER_MANAGER_LIST, e2);
          return this.uapResponse = t2, this.connection = new qO(t2.workerToken, this.spec, this.wsRetryConfig, e2), this.connection.on($m.WARNING, (e3, t3) => this.onLiveStreamWarning && this.onLiveStreamWarning(t3, e3)), this.connection.on($m.PUBLISH_STREAM_STATUS, (e3) => this.handlePublishStreamServer(e3)), this.connection.on($m.INJECT_STREAM_STATUS, (e3) => this.handleInjectStreamServerStatus(e3)), this.connection.on($m.REQUEST_NEW_ADDRESS, (t3, i2) => {
            if (!this.connection)
              return i2(new vE(TE.UNEXPECTED_ERROR, "can not get new live streaming address list"));
            FR(this, eg.REQUEST_WORKER_MANAGER_LIST, e2).then((e3) => {
              this.uapResponse = e3, t3(e3.addressList);
            }).catch(i2);
          }), await this.connection.init(t2.addressList), this.connection;
        }
        handlePublishStreamServer(e2) {
          const t2 = e2.serverStatus && e2.serverStatus.url || "empty_url", i2 = this.streamingTasks.get(t2), r2 = e2.reason;
          switch (e2.code) {
            case tg.PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN:
            case tg.PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT:
            case tg.PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE:
            case tg.PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH: {
              const r3 = new vE(TE.LIVE_STREAMING_CDN_ERROR, "", { code: e2.code });
              if (i2)
                return NE.error(r3.toString()), this.onLiveStreamError && this.onLiveStreamError(t2, r3);
              if (!this.isStartingStreamingTask)
                return;
              this.statusError.set(t2, r3);
            }
            case tg.LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE: {
              const e3 = new vE(TE.LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE, r2);
              return this.onLiveStreamWarning && this.onLiveStreamWarning(t2, e3);
            }
            case tg.LIVE_STREAM_RESPONSE_WORKER_LOST:
            case tg.LIVE_STREAM_RESPONSE_WORKER_QUIT: {
              var n2;
              if (!this.connection)
                return;
              this.connection.tryNextAddress();
              const t3 = Array.from(zv(n2 = this.streamingTasks).call(n2));
              for (const i3 of t3)
                i3.abortTask ? i3.abortTask() : (NE.warning("[".concat(this.spec.clientId, "] publish stream status code"), e2.code, "try to republish", i3.url), this.startLiveStreamingTask(i3.url, i3.mode, new vE(TE.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "", { code: e2.code })).then(() => {
                  NE.debug("[".concat(this.spec.clientId, "] republish live stream success"), i3.url);
                }).catch((e3) => {
                  NE.error(e3.toString()), this.onLiveStreamError && this.onLiveStreamError(i3.url, e3);
                }));
              return;
            }
          }
        }
        handleInjectStreamServerStatus(e2) {
          const t2 = Number(e2.uid), i2 = e2.serverStatus && e2.serverStatus.url;
          switch (e2.code) {
            case 200:
              return void (this.onInjectStatusChange && this.onInjectStatusChange(qm.INJECT_STREAM_STATUS_START_SUCCESS, t2, i2));
            case 451:
              return this.onInjectStatusChange && this.onInjectStatusChange(qm.INJECT_STREAM_STATUS_START_ALREADY_EXISTS, t2, i2), void this.streamingTasks.delete(i2);
            case 453:
              return this.onInjectStatusChange && this.onInjectStatusChange(qm.INJECT_STREAM_STATUS_START_UNAUTHORIZED, t2, i2), void this.streamingTasks.delete(i2);
            case 470:
              return this.onInjectStatusChange && this.onInjectStatusChange(qm.INJECT_STREAM_STATUS_BROKEN, t2, i2), void this.streamingTasks.delete(i2);
            case 499:
              return this.onInjectStatusChange && this.onInjectStatusChange(qm.INJECT_STREAM_STATUS_START_TIMEOUT, t2, i2), void this.streamingTasks.delete(i2);
            default:
              return void NE.debug("inject stream server status", e2);
          }
        }
        hasUrl(e2) {
          return this.streamingTasks.has(e2);
        }
      }
      class QO {
        constructor() {
          mp(this, "destChannelMediaInfos", /* @__PURE__ */ new Map()), mp(this, "srcChannelMediaInfo", void 0);
        }
        setSrcChannelInfo(e2) {
          mg(e2), this.srcChannelMediaInfo = e2;
        }
        addDestChannelInfo(e2) {
          mg(e2), this.destChannelMediaInfos.set(e2.channelName, e2);
        }
        removeDestChannelInfo(e2) {
          $f(e2), this.destChannelMediaInfos.delete(e2);
        }
        getSrcChannelMediaInfo() {
          return this.srcChannelMediaInfo;
        }
        getDestChannelMediaInfo() {
          return this.destChannelMediaInfos;
        }
      }
      function ZO(e2) {
        if (!(e2 instanceof QO)) {
          return new vE(TE.INVALID_PARAMS, "Config should be instance of [ChannelMediaRelayConfiguration]").throw();
        }
        const t2 = e2.getSrcChannelMediaInfo(), i2 = e2.getDestChannelMediaInfo();
        if (!t2) {
          return new vE(TE.INVALID_PARAMS, "srcChannelMediaInfo should not be empty").throw();
        }
        if (0 === i2.size) {
          return new vE(TE.INVALID_PARAMS, "destChannelMediaInfo should not be empty").throw();
        }
      }
      class $O extends gE {
        constructor(e2, t2, i2) {
          super(), mp(this, "ws", void 0), mp(this, "requestId", 1), mp(this, "heartBeatTimer", void 0), mp(this, "joinInfo", void 0), mp(this, "clientId", void 0), mp(this, "onOpen", () => {
            this.emit("open"), this.startHeartBeatCheck();
          }), mp(this, "onClose", (e3) => {
            this.emit("close"), this.dispose();
          }), mp(this, "onMessage", (e3) => {
            const t3 = JSON.parse(e3.data);
            if (!t3 || "serverResponse" !== t3.command || !t3.requestId)
              return t3 && "serverStatus" === t3.command && t3.serverStatus && t3.serverStatus.command ? (this.emit("status", t3.serverStatus), void this.emit(t3.serverStatus.command, t3.serverStatus)) : void 0;
            this.emit("req_".concat(t3.requestId), t3);
          }), this.joinInfo = e2, this.clientId = t2, this.ws = new $A("cross-channel-".concat(this.clientId), i2), this.ws.on(Km.RECONNECTING, () => {
            this.ws.reconnectMode = "retry", this.emit("reconnecting");
          }), this.ws.on(Km.CONNECTED, this.onOpen), this.ws.on(Km.ON_MESSAGE, this.onMessage), this.ws.on(Km.CLOSED, this.onClose);
        }
        isConnect() {
          return "connected" === this.ws.state;
        }
        sendMessage(e2) {
          const t2 = this.requestId++;
          return e2.requestId = t2, e2.seq = t2, this.ws.sendMessage(e2), t2;
        }
        waitStatus(e2) {
          return new Cl((t2, i2) => {
            const r2 = window.setTimeout(() => {
              i2(new vE(TE.TIMEOUT, "wait status timeout, status: ".concat(e2)));
            }, 5e3);
            this.once(e2, (n2) => {
              window.clearTimeout(r2), n2.state && 0 !== n2.state ? i2(new vE(TE.CROSS_CHANNEL_WAIT_STATUS_ERROR, "wait status error, status: ".concat(e2))) : t2(void 0);
            }), this.once("dispose", () => {
              window.clearTimeout(r2), i2(new vE(TE.WS_ABORT));
            });
          });
        }
        async request(e2) {
          if ("closed" === this.ws.state)
            throw new vE(TE.WS_DISCONNECT);
          const t2 = () => new Cl((e3, t3) => {
            this.ws.once(Km.CLOSED, () => t3(new vE(TE.WS_ABORT))), this.ws.once(Km.CONNECTED, e3);
          });
          "connected" !== this.ws.state && await t2();
          const i2 = this.sendMessage(e2), r2 = new Cl((e3, t3) => {
            const r3 = () => {
              t3(new vE(TE.WS_ABORT));
            };
            this.ws.once(Km.RECONNECTING, r3), this.ws.once(Km.CLOSED, r3), this.once("req_".concat(i2), e3), LR(3e3).then(() => {
              this.removeAllListeners("req_".concat(i2)), this.ws.off(Km.RECONNECTING, r3), this.ws.off(Km.CLOSED, r3), t3(new vE(TE.TIMEOUT, "cross channel ws request timeout"));
            });
          }), n2 = await r2;
          if (!n2 || 200 !== n2.code)
            throw new vE(TE.CROSS_CHANNEL_SERVER_ERROR_RESPONSE, "response: ".concat(JSON.stringify(n2)));
          return n2;
        }
        async connect(e2) {
          this.ws.removeAllListeners(Km.REQUEST_NEW_URLS), this.ws.on(Km.REQUEST_NEW_URLS, (t2) => {
            t2(e2);
          }), await this.ws.init(e2);
        }
        dispose() {
          this.clearHeartBeatCheck(), this.emit("dispose"), this.removeAllListeners(), this.ws.close();
        }
        sendPing(e2) {
          const t2 = this.requestId++;
          return e2.requestId = t2, this.ws.sendMessage(e2), t2;
        }
        startHeartBeatCheck() {
          this.heartBeatTimer && window.clearInterval(this.heartBeatTimer), this.heartBeatTimer = window.setInterval(() => {
            this.sendPing({ command: "ping", appId: this.joinInfo.appId, cname: this.joinInfo.cname, uid: this.joinInfo.uid.toString(), sid: this.joinInfo.sid, ts: +/* @__PURE__ */ new Date(), requestId: 0 });
          }, 3e3);
        }
        clearHeartBeatCheck() {
          window.clearInterval(this.heartBeatTimer), this.heartBeatTimer = void 0;
        }
      }
      class eb extends gE {
        set state(e2) {
          e2 !== this._state && (e2 !== og.RELAY_STATE_FAILURE && (this.errorCode = sg.RELAY_OK), this.emit("state", e2, this.errorCode), this._state = e2);
        }
        get state() {
          return this._state;
        }
        constructor(e2, t2, i2, r2) {
          super(), mp(this, "joinInfo", void 0), mp(this, "sid", void 0), mp(this, "clientId", void 0), mp(this, "cancelToken", fE.CancelToken.source()), mp(this, "workerToken", void 0), mp(this, "requestId", 0), mp(this, "signal", void 0), mp(this, "prevChannelMediaConfig", void 0), mp(this, "httpRetryConfig", void 0), mp(this, "_state", og.RELAY_STATE_IDLE), mp(this, "errorCode", sg.RELAY_OK), mp(this, "onStatus", (e3) => {
            NE.debug("[".concat(this.clientId, "] ChannelMediaStatus: ").concat(JSON.stringify(e3))), e3 && e3.command && ("onAudioPacketReceived" === e3.command && this.emit("event", ng.PACKET_RECEIVED_AUDIO_FROM_SRC), "onVideoPacketReceived" === e3.command && this.emit("event", ng.PACKET_RECEIVED_VIDEO_FROM_SRC), "onSrcTokenPrivilegeDidExpire" === e3.command && (this.errorCode = sg.SRC_TOKEN_EXPIRED, this.state = og.RELAY_STATE_FAILURE), "onDestTokenPrivilegeDidExpire" === e3.command && (this.errorCode = sg.DEST_TOKEN_EXPIRED, this.state = og.RELAY_STATE_FAILURE));
          }), mp(this, "onReconnect", async () => {
            NE.debug("[".concat(this.clientId, "] ChannelMediaSocket disconnect, reconnecting")), this.emit("event", ng.NETWORK_DISCONNECTED), this.state = og.RELAY_STATE_IDLE, this.prevChannelMediaConfig && this.sendStartRelayMessage(this.prevChannelMediaConfig).catch((e3) => {
              this.state !== og.RELAY_STATE_IDLE && (NE.error("auto restart channel media relay failed", e3.toString()), this.errorCode = sg.SERVER_CONNECTION_LOST, this.state = og.RELAY_STATE_FAILURE);
            });
          }), this.joinInfo = e2, this.clientId = t2, this.sid = UR(), this.signal = new $O(this.joinInfo, this.clientId, i2), this.httpRetryConfig = r2;
        }
        async startChannelMediaRelay(e2) {
          if (this.state !== og.RELAY_STATE_IDLE)
            throw new vE(TE.INVALID_OPERATION);
          this.state = og.RELAY_STATE_CONNECTING, await this.connect(), NE.debug("[".concat(this.clientId, "] startChannelMediaRelay: connect success"));
          try {
            await this.sendStartRelayMessage(e2);
          } catch (e3) {
            if (e3.data && e3.data.serverResponse && "SetSourceChannel" === e3.data.serverResponse.command)
              throw new vE(TE.CROSS_CHANNEL_FAILED_JOIN_SRC);
            if (e3.data && e3.data.serverResponse && "SetDestChannelStatus" === e3.serverResponse.command)
              throw new vE(TE.CROSS_CHANNEL_FAILED_JOIN_DEST);
            if (e3.data && e3.data.serverResponse && "StartPacketTransfer" === e3.serverResponse.command)
              throw new vE(TE.CROSS_CHANNEL_FAILED_PACKET_SENT_TO_DEST);
            throw e3;
          }
          this.prevChannelMediaConfig = e2;
        }
        async updateChannelMediaRelay(e2) {
          if (this.state !== og.RELAY_STATE_RUNNING)
            throw new vE(TE.INVALID_OPERATION);
          await this.sendUpdateMessage(e2), this.prevChannelMediaConfig = e2;
        }
        async stopChannelMediaRelay() {
          await this.sendStopRelayMessage(), NE.debug("[".concat(this.clientId, "] stopChannelMediaRelay: send stop message success")), this.state = og.RELAY_STATE_IDLE, this.dispose();
        }
        dispose() {
          NE.debug("[".concat(this.clientId, "] disposeChannelMediaRelay")), this.cancelToken.cancel(), this.cancelToken = fE.CancelToken.source(), this.state = og.RELAY_STATE_IDLE, this.emit("dispose"), this.signal.dispose(), this.prevChannelMediaConfig = void 0;
        }
        async connect() {
          const e2 = await FO(this.joinInfo, this.cancelToken.token, this.httpRetryConfig);
          this.workerToken = e2.workerToken, await this.signal.connect(e2.addressList), this.emit("event", ng.NETWORK_CONNECTED), this.signal.on("status", this.onStatus), this.signal.on("reconnecting", this.onReconnect);
        }
        async sendStartRelayMessage(e2) {
          const t2 = this.genMessage(rg.StopPacketTransfer);
          await this.signal.request(t2), await this.signal.waitStatus("Normal Quit"), NE.debug("[".concat(this.clientId, "] startChannelMediaRelay: StopPacketTransfer success"));
          const i2 = this.genMessage(rg.SetSdkProfile, e2);
          await this.signal.request(i2), NE.debug("[".concat(this.clientId, "] startChannelMediaRelay: SetSdkProfile success"));
          const r2 = this.genMessage(rg.SetSourceChannel, e2);
          await this.signal.request(r2), await this.signal.waitStatus("SetSourceChannelStatus"), this.emit("event", ng.PACKET_JOINED_SRC_CHANNEL), NE.debug("[".concat(this.clientId, "] startChannelMediaRelay: SetSourceChannel success"));
          const n2 = this.genMessage(rg.SetSourceUserId, e2);
          await this.signal.request(n2), NE.debug("[".concat(this.clientId, "] startChannelMediaRelay: SetSourceUserId success"));
          const o2 = this.genMessage(rg.SetDestChannel, e2);
          await this.signal.request(o2), await this.signal.waitStatus("SetDestChannelStatus"), this.emit("event", ng.PACKET_JOINED_DEST_CHANNEL), NE.debug("[".concat(this.clientId, "] startChannelMediaRelay: SetDestChannel success"));
          const s2 = this.genMessage(rg.StartPacketTransfer, e2);
          await this.signal.request(s2), this.emit("event", ng.PACKET_SENT_TO_DEST_CHANNEL), this.state = og.RELAY_STATE_RUNNING, NE.debug("[".concat(this.clientId, "] startChannelMediaRelay: StartPacketTransfer success"));
        }
        async sendUpdateMessage(e2) {
          const t2 = this.genMessage(rg.UpdateDestChannel, e2);
          await this.signal.request(t2), this.emit("event", ng.PACKET_UPDATE_DEST_CHANNEL), NE.debug("[".concat(this.clientId, "] sendUpdateMessage: UpdateDestChannel success"));
        }
        async sendStopRelayMessage() {
          const e2 = this.genMessage(rg.StopPacketTransfer);
          await this.signal.request(e2), NE.debug("[".concat(this.clientId, "] sendStopRelayMessage: StopPacketTransfer success"));
        }
        genMessage(e2, t2) {
          const i2 = [], r2 = [], n2 = [];
          this.requestId += 1;
          const o2 = { appId: this.joinInfo.appId, cname: this.joinInfo.cname, uid: this.joinInfo.uid.toString(), sdkVersion: PE, sid: this.sid, ts: Date.now(), requestId: this.requestId, seq: this.requestId, allocate: true, clientRequest: {} };
          "4.16.1" === o2.sdkVersion && (o2.sdkVersion = "0.0.1");
          let s2 = null, a2 = null;
          switch (e2) {
            case rg.SetSdkProfile:
              return o2.clientRequest = { command: "SetSdkProfile", type: "multi_channel" }, o2;
            case rg.SetSourceChannel:
              if (a2 = t2 && t2.getSrcChannelMediaInfo(), !a2)
                throw new vE(TE.UNEXPECTED_ERROR, "can not find source config");
              return o2.clientRequest = { command: "SetSourceChannel", uid: "0", channelName: a2.channelName, token: a2.token || this.joinInfo.appId }, o2;
            case rg.SetSourceUserId:
              if (a2 = t2 && t2.getSrcChannelMediaInfo(), !a2)
                throw new vE(TE.UNEXPECTED_ERROR, "can not find source config");
              return o2.clientRequest = { command: "SetSourceUserId", uid: a2.uid + "" }, o2;
            case rg.SetDestChannel:
              if (s2 = t2 && t2.getDestChannelMediaInfo(), !s2)
                throw new vE(TE.UNEXPECTED_ERROR, "can not find dest config");
              return s2.forEach((e3) => {
                i2.push(e3.channelName), r2.push(e3.uid + ""), n2.push(e3.token || this.joinInfo.appId);
              }), o2.clientRequest = { command: "SetDestChannel", channelName: i2, uid: r2, token: n2 }, o2;
            case rg.StartPacketTransfer:
              return o2.clientRequest = { command: "StartPacketTransfer" }, o2;
            case rg.Reconnect:
              return o2.clientRequest = { command: "Reconnect" }, o2;
            case rg.StopPacketTransfer:
              return o2.clientRequest = { command: "StopPacketTransfer" }, o2;
            case rg.UpdateDestChannel:
              if (s2 = t2 && t2.getDestChannelMediaInfo(), !s2)
                throw new vE(TE.UNEXPECTED_ERROR, "can not find dest config");
              return s2.forEach((e3) => {
                i2.push(e3.channelName), r2.push(e3.uid + ""), n2.push(e3.token || this.joinInfo.appId);
              }), o2.clientRequest = { command: "UpdateDestChannel", channelName: i2, uid: r2, token: n2 }, o2;
          }
          return o2;
        }
      }
      const tb = (e2) => {
        const t2 = document.createElement("canvas");
        return t2.width = 2, t2.height = 2, new Cl((i2, r2) => {
          t2.toBlob(async (e3) => {
            if (t2.remove(), e3) {
              const r3 = await ib(e3);
              i2({ buffer: r3, width: t2.width, height: t2.height });
            } else
              r2(new vE(TE.CONVERTING_VIDEO_FRAME_TO_BLOB_FAILED));
          }, e2, 1);
        });
      }, ib = async (e2) => {
        const t2 = await e2.arrayBuffer();
        return new Uint8Array(t2);
      };
      function rb(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function nb(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? rb(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : rb(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class ob {
        get videoElementStatus() {
          return this._videoElementStatus;
        }
        set videoElementStatus(e2) {
          e2 !== this._videoElementStatus && (NE.debug("[".concat(this.trackId, "] video-element-status change ").concat(this._videoElementStatus, " => ").concat(e2)), this._videoElementStatus = e2);
        }
        constructor(e2) {
          mp(this, "trackId", void 0), mp(this, "config", void 0), mp(this, "onFirstVideoFrameDecoded", void 0), mp(this, "freezeTimeCounterList", []), mp(this, "renderFreezeAccTime", 0), mp(this, "timeUpdatedCount", 0), mp(this, "freezeTime", 0), mp(this, "playbackTime", 0), mp(this, "lastTimeUpdatedTime", 0), mp(this, "autoplayFailed", false), mp(this, "videoTrack", void 0), mp(this, "container", void 0), mp(this, "videoElement", void 0), mp(this, "videoElementCheckInterval", void 0), mp(this, "_videoElementStatus", am.NONE), mp(this, "slot", void 0), mp(this, "isGettingVideoDimensions", false), mp(this, "handleVideoEvents", (e3) => {
            switch (e3.type) {
              case "play":
              case "playing":
                this.startGetVideoDimensions(), this.videoElementStatus = am.PLAYING;
                break;
              case "loadeddata":
                this.onFirstVideoFrameDecoded && this.onFirstVideoFrameDecoded();
                break;
              case "canplay":
                this.videoElementStatus = am.CANPLAY;
                break;
              case "stalled":
                this.videoElementStatus = am.STALLED;
                break;
              case "suspend":
                this.videoElementStatus = am.SUSPEND;
                break;
              case "pause":
                this.videoElementStatus = am.PAUSED, Zh() || np() || zh() && this.autoplayFailed || !this.videoElement || !this.videoTrack || "live" !== this.videoTrack.readyState || (NE.debug("[track-".concat(this.trackId, "] video element paused, auto resume")), this.videoElement.play());
                break;
              case "waiting":
                this.videoElementStatus = am.WAITING;
                break;
              case "abort":
                this.videoElementStatus = am.ABORT;
                break;
              case "ended":
                this.videoElementStatus = am.ENDED;
                break;
              case "emptied":
                this.videoElementStatus = am.EMPTIED;
                break;
              case "error": {
                var t2;
                this.videoElementStatus = am.ERROR;
                const e4 = null === (t2 = this.videoElement) || void 0 === t2 ? void 0 : t2.error;
                e4 && NE.error("[".concat(this.trackId, "] media error, code: ").concat(e4.code, ", message: ").concat(e4.message));
                break;
              }
              case "timeupdate": {
                const e4 = performance.now();
                if (this.timeUpdatedCount += 1, this.timeUpdatedCount < 10)
                  return void (this.lastTimeUpdatedTime = e4);
                const t3 = e4 - this.lastTimeUpdatedTime, i2 = this.lastTimeUpdatedTime;
                if (this.lastTimeUpdatedTime = e4, mR.lastVisibleTime < mR.lastHiddenTime || i2 < mR.lastHiddenTime || i2 < mR.lastVisibleTime)
                  return;
                for (t3 > HE("VIDEO_FREEZE_DURATION") && (this.freezeTime += t3), this.playbackTime += t3; this.playbackTime >= 6e3; ) {
                  this.playbackTime -= 6e3;
                  const e5 = Math.min(6e3, this.freezeTime);
                  this.freezeTimeCounterList.push(e5), this.freezeTime = Math.max(0, this.freezeTime - 6e3);
                }
                break;
              }
            }
          }), mp(this, "startGetVideoDimensions", () => {
            const e3 = () => {
              if (this.isGettingVideoDimensions = true, this.videoElement && this.videoElement.videoWidth * this.videoElement.videoHeight > 4)
                return NE.debug("[".concat(this.trackId, "] current video dimensions:"), this.videoElement.videoWidth, this.videoElement.videoHeight), void (this.isGettingVideoDimensions = false);
              setTimeout(e3, 500);
            };
            !this.isGettingVideoDimensions && e3();
          }), mp(this, "autoResumeAfterInterruption", () => {
            this.videoElement && this.videoTrack && "live" === this.videoTrack.readyState && "running" === LT.curState && (rp() ? (NE.debug("[track-".concat(this.trackId, "] video element paused, auto resume for iOS 15.2")), this.videoElement.srcObject = null, this.videoElement.srcObject = new MediaStream([this.videoTrack]), this.videoElement.play()) : ip() ? (NE.debug("[track-".concat(this.trackId, "] video element paused, auto resume for iOS 15.1")), this.videoElement.srcObject = null, this.videoElement.srcObject = new MediaStream([this.videoTrack]), this.videoElement.play()) : tp() && (NE.debug("[track-".concat(this.trackId, "] video element paused, auto resume for iOS 15.0")), this.videoElement.pause(), this.videoElement.play()));
          }), mp(this, "autoResumeAfterInterruptionOnIOS15", () => {
            this.videoElement && this.videoTrack && "live" === this.videoTrack.readyState && (rp() ? (NE.debug("[track-".concat(this.trackId, "] video element paused, auto resume for iOS 15.2")), this.videoElement.srcObject = null, this.videoElement.srcObject = new MediaStream([this.videoTrack]), this.videoElement.play()) : ip() ? (NE.debug("[track-".concat(this.trackId, "] video element paused, auto resume for iOS 15.1")), this.videoElement.srcObject = null, this.videoElement.srcObject = new MediaStream([this.videoTrack]), this.videoElement.play()) : tp() && (NE.debug("[track-".concat(this.trackId, "] video element paused, auto resume for iOS 15.0")), this.videoElement.pause(), this.videoElement.play()));
          }), this.slot = e2.element, this.trackId = e2.trackId, this.updateConfig(e2), LT.on(CT.IOS_INTERRUPTION_END, this.autoResumeAfterInterruption), LT.on(CT.IOS_15_INTERRUPTION_END, this.autoResumeAfterInterruptionOnIOS15);
        }
        updateConfig(e2) {
          this.config = e2, this.trackId = e2.trackId;
          const t2 = e2.element;
          t2 !== this.slot && (this.destroy(), this.slot = t2), this.createElements();
        }
        updateVideoTrack(e2) {
          this.videoTrack !== e2 && (this.videoTrack = e2, this.createElements());
        }
        play(e2) {
          if (this.videoElement) {
            const t2 = this.videoElement.play();
            t2 && t2.catch && t2.catch((t3) => {
              e2 && IT.autoplayFailed(e2, "video", t3.message, this.trackId), "NotAllowedError" === t3.name ? (NE.warning("detected video element autoplay failed", t3), this.autoplayFailed = true, this.handleAutoPlayFailed()) : NE.warning("[".concat(this.trackId, "] play warning: "), t3);
            });
            const i2 = Bh();
            if (("Safari" === i2.name && 15 === Number(i2.version) || ep()) && t2 && t2.then && t2.catch) {
              const e3 = () => {
                this.config.mirror && this.videoElement && (this.videoElement.style.transform = "rotateY(180deg)");
              };
              t2.then(e3).catch(e3);
            }
          }
        }
        getCurrentFrame() {
          if (!this.videoElement)
            return new ImageData(2, 2);
          const e2 = document.createElement("canvas");
          e2.width = this.videoElement.videoWidth, e2.height = this.videoElement.videoHeight;
          const t2 = e2.getContext("2d");
          if (!t2)
            return NE.error("create canvas context failed!"), new ImageData(2, 2);
          t2.drawImage(this.videoElement, 0, 0, e2.width, e2.height);
          const i2 = t2.getImageData(0, 0, e2.width, e2.height);
          return e2.remove(), i2;
        }
        async getCurrentFrameToUint8Array(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
          if (!this.videoElement)
            return await tb(e2);
          const i2 = document.createElement("canvas");
          i2.width = this.videoElement.videoWidth, i2.height = this.videoElement.videoHeight;
          const r2 = i2.getContext("2d");
          return r2 ? (r2.drawImage(this.videoElement, 0, 0, i2.width, i2.height), new Cl((r3, n2) => {
            i2.toBlob(async (e3) => {
              if (i2.remove(), e3) {
                const t3 = await ib(e3);
                r3({ buffer: t3, width: i2.width, height: i2.height });
              } else
                n2(new vE(TE.CONVERTING_VIDEO_FRAME_TO_BLOB_FAILED));
            }, e2, t2 < 0 ? 0.1 : t2 > 1 ? 1 : t2);
          })) : await tb(e2);
        }
        destroy() {
          if (LT.off(CT.IOS_INTERRUPTION_END, this.autoResumeAfterInterruption), LT.off(CT.IOS_15_INTERRUPTION_END, this.autoResumeAfterInterruptionOnIOS15), this.videoElement && (this.videoElement.srcObject = null, this.videoElement.remove(), this.videoElement = void 0), this.container) {
            try {
              this.container.remove(), this.slot.removeChild(this.container);
            } catch (e2) {
            }
            this.container = void 0;
          }
          this.freezeTimeCounterList = [];
        }
        createElements() {
          this.container || (this.container = document.createElement("div")), this.container.id = "agora-video-player-".concat(this.trackId), this.container.style.width = "100%", this.container.style.height = "100%", this.container.style.position = "relative", this.container.style.overflow = "hidden", this.videoTrack ? (this.container.style.backgroundColor = "black", this.createVideoElement(), this.container.appendChild(this.videoElement)) : this.removeVideoElement(), this.slot.appendChild(this.container);
        }
        createVideoElement() {
          if (!this.videoElement && (this.videoElementStatus = am.INIT, this.videoElement = document.createElement("video"), this.container && this.container.appendChild(this.videoElement), sb.forEach((e3) => {
            this.videoElement && this.videoElement.addEventListener(e3, this.handleVideoEvents);
          }), this.videoElementCheckInterval = window.setInterval(() => {
            !document.getElementById("video_".concat(this.trackId)) && this.videoElement && (this.videoElementStatus = am.DESTROYED);
          }, 1e3), HE("ENABLE_VIDEO_FRAME_CALLBACK"))) {
            var e2, t2;
            let i3;
            const r3 = (e3, t3) => {
              if (this.videoElementStatus === am.PLAYING) {
                if (i3) {
                  const e4 = t3.presentationTime - i3.presentationTime;
                  e4 > HE("VIDEO_FREEZE_DURATION") && mR.lastVisibleTime >= mR.lastHiddenTime && i3.timestamp > mR.lastVisibleTime && i3.timestamp > mR.lastHiddenTime && (this.renderFreezeAccTime += e4);
                }
                i3 = nb(nb({}, t3), {}, { timestamp: e3 });
              }
              var n2, o2;
              HE("ENABLE_VIDEO_FRAME_CALLBACK") && (null === (n2 = this.videoElement) || void 0 === n2 || null === (o2 = n2.requestVideoFrameCallback) || void 0 === o2 || o2.call(n2, r3));
            };
            null === (e2 = (t2 = this.videoElement).requestVideoFrameCallback) || void 0 === e2 || e2.call(t2, r3);
          }
          this.videoElement.id = "video_".concat(this.trackId), this.videoElement.className = "agora_video_player", this.videoElement.style.width = "100%", this.videoElement.style.height = "100%", this.videoElement.style.position = "absolute", this.videoElement.controls = false, this.videoElement.setAttribute("playsinline", ""), this.videoElement.style.left = "0", this.videoElement.style.top = "0", cp() && (this.videoElement.poster = "noposter");
          const i2 = Bh();
          if ("Safari" === i2.name && 15 === Number(i2.version) || ep() || !this.config.mirror || (this.videoElement.style.transform = "rotateY(180deg)"), this.config.fit ? this.videoElement.style.objectFit = this.config.fit : this.videoElement.style.objectFit = "cover", this.videoElement.setAttribute("muted", ""), this.videoElement.muted = true, this.videoElement.srcObject && this.videoElement.srcObject instanceof MediaStream) {
            this.videoElement.srcObject.getVideoTracks()[0] !== this.videoTrack && (this.videoElement.srcObject = this.videoTrack ? new MediaStream([this.videoTrack]) : null, Qh() && this.videoElement.load());
          } else
            this.videoElement.srcObject = this.videoTrack ? new MediaStream([this.videoTrack]) : null, Qh() && this.videoElement.load();
          const r2 = this.videoElement.play();
          void 0 !== r2 && r2.catch((e3) => {
            NE.debug("[".concat(this.trackId, "] playback interrupted"), e3.toString());
          });
        }
        removeVideoElement() {
          if (this.videoElement) {
            sb.forEach((e2) => {
              this.videoElement && this.videoElement.removeEventListener(e2, this.handleVideoEvents);
            }), this.videoElementCheckInterval && (window.clearInterval(this.videoElementCheckInterval), this.videoElementCheckInterval = void 0);
            try {
              this.container && this.container.removeChild(this.videoElement);
            } catch (e2) {
            }
            this.videoElement = void 0, this.videoElementStatus = am.NONE;
          }
        }
        handleAutoPlayFailed() {
          if (this.videoElement) {
            const e2 = (t2) => {
              t2.preventDefault(), this.videoElement && (this.videoElement.play().then(() => {
                NE.debug("[".concat(this.trackId, "] Video element for trackId:").concat(this.trackId, " autoplay resumed."));
              }).catch((e3) => {
                NE.error(e3);
              }), this.autoplayFailed = false, dp() ? document.body.removeEventListener("click", e2, true) : (document.body.removeEventListener("touchstart", e2, true), document.body.removeEventListener("mousedown", e2, true)));
            };
            dp() ? document.body.addEventListener("click", e2, true) : (document.body.addEventListener("touchstart", e2, true), document.body.addEventListener("mousedown", e2, true)), fT();
          }
        }
        getVideoElement() {
          return this.videoElement;
        }
        getContainerElement() {
          return this.container;
        }
      }
      const sb = ["play", "playing", "loadeddata", "canplay", "pause", "stalled", "suspend", "waiting", "abort", "emptied", "ended", "timeupdate", "error"];
      var ab = { exports: {} };
      function cb(e2, t2, i2) {
        const r2 = e2.createShader(i2);
        if (!r2) {
          return new vE(TE.WEBGL_INTERNAL_ERROR, "can not create shader").throw();
        }
        e2.shaderSource(r2, t2), e2.compileShader(r2);
        if (!e2.getShaderParameter(r2, e2.COMPILE_STATUS)) {
          const t3 = e2.getShaderInfoLog(r2);
          e2.deleteShader(r2);
          return new vE(TE.WEBGL_INTERNAL_ERROR, "error compiling shader:" + t3).throw();
        }
        return r2;
      }
      function db(e2, t2, i2, r2) {
        const n2 = [];
        for (let i3 = 0; i3 < t2.length; ++i3) {
          const r3 = 0 === i3 ? e2.VERTEX_SHADER : e2.FRAGMENT_SHADER;
          n2.push(cb(e2, t2[i3], r3));
        }
        return function(e3, t3, i3, r3) {
          const n3 = e3.createProgram();
          if (!n3)
            throw new vE(TE.WEBGL_INTERNAL_ERROR, "can not create webgl program");
          if (t3.forEach((t4) => {
            e3.attachShader(n3, t4);
          }), i3 && i3.forEach((t4, i4) => {
            e3.bindAttribLocation(n3, r3 ? r3[i4] : i4, t4);
          }), e3.linkProgram(n3), !e3.getProgramParameter(n3, e3.LINK_STATUS)) {
            const t4 = e3.getProgramInfoLog(n3);
            throw e3.deleteProgram(n3), new vE(TE.WEBGL_INTERNAL_ERROR, "error in program linking:" + t4);
          }
          return n3;
        }(e2, n2, i2, r2);
      }
      !function(e2, t2) {
        var i2;
        self, i2 = () => (() => {
          var e3 = { 3536: (e4, t4, i4) => {
            var r3 = i4(1910);
            e4.exports = r3;
          }, 8171: (e4, t4, i4) => {
            i4(6450);
            var r3 = i4(4058).Object, n2 = e4.exports = function(e5, t5, i5) {
              return r3.defineProperty(e5, t5, i5);
            };
            r3.defineProperty.sham && (n2.sham = true);
          }, 2956: (e4, t4, i4) => {
            i4(7627), i4(6274), i4(5967), i4(8881), i4(4560), i4(7206), i4(4349), i4(7971);
            var r3 = i4(4058);
            e4.exports = r3.Promise;
          }, 3685: (e4, t4, i4) => {
            e4.exports = i4(621);
          }, 621: (e4, t4, i4) => {
            var r3 = i4(3536);
            e4.exports = r3;
          }, 4883: (e4, t4, i4) => {
            var r3 = i4(7475), n2 = i4(9826), o2 = TypeError;
            e4.exports = function(e5) {
              if (r3(e5))
                return e5;
              throw o2(n2(e5) + " is not a function");
            };
          }, 174: (e4, t4, i4) => {
            var r3 = i4(4284), n2 = i4(9826), o2 = TypeError;
            e4.exports = function(e5) {
              if (r3(e5))
                return e5;
              throw o2(n2(e5) + " is not a constructor");
            };
          }, 1851: (e4, t4, i4) => {
            var r3 = i4(7475), n2 = String, o2 = TypeError;
            e4.exports = function(e5) {
              if ("object" == typeof e5 || r3(e5))
                return e5;
              throw o2("Can't set " + n2(e5) + " as a prototype");
            };
          }, 8479: (e4) => {
            e4.exports = function() {
            };
          }, 5743: (e4, t4, i4) => {
            var r3 = i4(7046), n2 = TypeError;
            e4.exports = function(e5, t5) {
              if (r3(t5, e5))
                return e5;
              throw n2("Incorrect invocation");
            };
          }, 6059: (e4, t4, i4) => {
            var r3 = i4(941), n2 = String, o2 = TypeError;
            e4.exports = function(e5) {
              if (r3(e5))
                return e5;
              throw o2(n2(e5) + " is not an object");
            };
          }, 1692: (e4, t4, i4) => {
            var r3 = i4(4529), n2 = i4(9413), o2 = i4(623), s2 = function(e5) {
              return function(t5, i5, s3) {
                var a2, c2 = r3(t5), d2 = o2(c2), u2 = n2(s3, d2);
                if (e5 && i5 != i5) {
                  for (; d2 > u2; )
                    if ((a2 = c2[u2++]) != a2)
                      return true;
                } else
                  for (; d2 > u2; u2++)
                    if ((e5 || u2 in c2) && c2[u2] === i5)
                      return e5 || u2 || 0;
                return !e5 && -1;
              };
            };
            e4.exports = { includes: s2(true), indexOf: s2(false) };
          }, 3765: (e4, t4, i4) => {
            var r3 = i4(5329);
            e4.exports = r3([].slice);
          }, 1385: (e4, t4, i4) => {
            var r3 = i4(9813)("iterator"), n2 = false;
            try {
              var o2 = 0, s2 = { next: function() {
                return { done: !!o2++ };
              }, return: function() {
                n2 = true;
              } };
              s2[r3] = function() {
                return this;
              }, Array.from(s2, function() {
                throw 2;
              });
            } catch (e5) {
            }
            e4.exports = function(e5, t5) {
              if (!t5 && !n2)
                return false;
              var i5 = false;
              try {
                var o3 = {};
                o3[r3] = function() {
                  return { next: function() {
                    return { done: i5 = true };
                  } };
                }, e5(o3);
              } catch (e6) {
              }
              return i5;
            };
          }, 2532: (e4, t4, i4) => {
            var r3 = i4(4163), n2 = r3({}.toString), o2 = r3("".slice);
            e4.exports = function(e5) {
              return o2(n2(e5), 8, -1);
            };
          }, 9697: (e4, t4, i4) => {
            var r3 = i4(2885), n2 = i4(7475), o2 = i4(2532), s2 = i4(9813)("toStringTag"), a2 = Object, c2 = "Arguments" == o2(function() {
              return arguments;
            }());
            e4.exports = r3 ? o2 : function(e5) {
              var t5, i5, r4;
              return void 0 === e5 ? "Undefined" : null === e5 ? "Null" : "string" == typeof (i5 = function(e6, t6) {
                try {
                  return e6[t6];
                } catch (e7) {
                }
              }(t5 = a2(e5), s2)) ? i5 : c2 ? o2(t5) : "Object" == (r4 = o2(t5)) && n2(t5.callee) ? "Arguments" : r4;
            };
          }, 3489: (e4, t4, i4) => {
            var r3 = i4(953), n2 = i4(1136), o2 = i4(9677), s2 = i4(5988);
            e4.exports = function(e5, t5, i5) {
              for (var a2 = n2(t5), c2 = s2.f, d2 = o2.f, u2 = 0; u2 < a2.length; u2++) {
                var l2 = a2[u2];
                r3(e5, l2) || i5 && r3(i5, l2) || c2(e5, l2, d2(t5, l2));
              }
            };
          }, 4160: (e4, t4, i4) => {
            var r3 = i4(5981);
            e4.exports = !r3(function() {
              function e5() {
              }
              return e5.prototype.constructor = null, Object.getPrototypeOf(new e5()) !== e5.prototype;
            });
          }, 3538: (e4) => {
            e4.exports = function(e5, t4) {
              return { value: e5, done: t4 };
            };
          }, 2029: (e4, t4, i4) => {
            var r3 = i4(5746), n2 = i4(5988), o2 = i4(1887);
            e4.exports = r3 ? function(e5, t5, i5) {
              return n2.f(e5, t5, o2(1, i5));
            } : function(e5, t5, i5) {
              return e5[t5] = i5, e5;
            };
          }, 1887: (e4) => {
            e4.exports = function(e5, t4) {
              return { enumerable: !(1 & e5), configurable: !(2 & e5), writable: !(4 & e5), value: t4 };
            };
          }, 5929: (e4, t4, i4) => {
            var r3 = i4(2029);
            e4.exports = function(e5, t5, i5, n2) {
              return n2 && n2.enumerable ? e5[t5] = i5 : r3(e5, t5, i5), e5;
            };
          }, 5609: (e4, t4, i4) => {
            var r3 = i4(1899), n2 = Object.defineProperty;
            e4.exports = function(e5, t5) {
              try {
                n2(r3, e5, { value: t5, configurable: true, writable: true });
              } catch (i5) {
                r3[e5] = t5;
              }
              return t5;
            };
          }, 5746: (e4, t4, i4) => {
            var r3 = i4(5981);
            e4.exports = !r3(function() {
              return 7 != Object.defineProperty({}, 1, { get: function() {
                return 7;
              } })[1];
            });
          }, 6616: (e4) => {
            var t4 = "object" == typeof document && document.all, i4 = void 0 === t4 && void 0 !== t4;
            e4.exports = { all: t4, IS_HTMLDDA: i4 };
          }, 1333: (e4, t4, i4) => {
            var r3 = i4(1899), n2 = i4(941), o2 = r3.document, s2 = n2(o2) && n2(o2.createElement);
            e4.exports = function(e5) {
              return s2 ? o2.createElement(e5) : {};
            };
          }, 3281: (e4) => {
            e4.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };
          }, 3321: (e4, t4, i4) => {
            var r3 = i4(8501), n2 = i4(6049);
            e4.exports = !r3 && !n2 && "object" == typeof window && "object" == typeof document;
          }, 8501: (e4) => {
            e4.exports = "object" == typeof Deno && Deno && "object" == typeof Deno.version;
          }, 4470: (e4, t4, i4) => {
            var r3 = i4(2861), n2 = i4(1899);
            e4.exports = /ipad|iphone|ipod/i.test(r3) && void 0 !== n2.Pebble;
          }, 2749: (e4, t4, i4) => {
            var r3 = i4(2861);
            e4.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(r3);
          }, 6049: (e4, t4, i4) => {
            var r3 = i4(2532), n2 = i4(1899);
            e4.exports = "process" == r3(n2.process);
          }, 8045: (e4, t4, i4) => {
            var r3 = i4(2861);
            e4.exports = /web0s(?!.*chrome)/i.test(r3);
          }, 2861: (e4, t4, i4) => {
            var r3 = i4(626);
            e4.exports = r3("navigator", "userAgent") || "";
          }, 3385: (e4, t4, i4) => {
            var r3, n2, o2 = i4(1899), s2 = i4(2861), a2 = o2.process, c2 = o2.Deno, d2 = a2 && a2.versions || c2 && c2.version, u2 = d2 && d2.v8;
            u2 && (n2 = (r3 = u2.split("."))[0] > 0 && r3[0] < 4 ? 1 : +(r3[0] + r3[1])), !n2 && s2 && (!(r3 = s2.match(/Edge\/(\d+)/)) || r3[1] >= 74) && (r3 = s2.match(/Chrome\/(\d+)/)) && (n2 = +r3[1]), e4.exports = n2;
          }, 6759: (e4) => {
            e4.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
          }, 3995: (e4, t4, i4) => {
            var r3 = i4(5329), n2 = Error, o2 = r3("".replace), s2 = String(n2("zxcasd").stack), a2 = /\n\s*at [^:]*:[^\n]*/, c2 = a2.test(s2);
            e4.exports = function(e5, t5) {
              if (c2 && "string" == typeof e5 && !n2.prepareStackTrace)
                for (; t5--; )
                  e5 = o2(e5, a2, "");
              return e5;
            };
          }, 8780: (e4, t4, i4) => {
            var r3 = i4(5981), n2 = i4(1887);
            e4.exports = !r3(function() {
              var e5 = Error("a");
              return !("stack" in e5) || (Object.defineProperty(e5, "stack", n2(1, 7)), 7 !== e5.stack);
            });
          }, 6887: (e4, t4, i4) => {
            var r3 = i4(1899), n2 = i4(9730), o2 = i4(5329), s2 = i4(7475), a2 = i4(9677).f, c2 = i4(7252), d2 = i4(4058), u2 = i4(6843), l2 = i4(2029), h2 = i4(953), p2 = function(e5) {
              var t5 = function(i5, r4, o3) {
                if (this instanceof t5) {
                  switch (arguments.length) {
                    case 0:
                      return new e5();
                    case 1:
                      return new e5(i5);
                    case 2:
                      return new e5(i5, r4);
                  }
                  return new e5(i5, r4, o3);
                }
                return n2(e5, this, arguments);
              };
              return t5.prototype = e5.prototype, t5;
            };
            e4.exports = function(e5, t5) {
              var i5, n3, _2, E2, f2, m2, g2, S2, T2 = e5.target, v2 = e5.global, R2 = e5.stat, I2 = e5.proto, y2 = v2 ? r3 : R2 ? r3[T2] : (r3[T2] || {}).prototype, C2 = v2 ? d2 : d2[T2] || l2(d2, T2, {})[T2], A2 = C2.prototype;
              for (_2 in t5)
                i5 = !c2(v2 ? _2 : T2 + (R2 ? "." : "#") + _2, e5.forced) && y2 && h2(y2, _2), f2 = C2[_2], i5 && (m2 = e5.dontCallGetSet ? (S2 = a2(y2, _2)) && S2.value : y2[_2]), E2 = i5 && m2 ? m2 : t5[_2], i5 && typeof f2 == typeof E2 || (g2 = e5.bind && i5 ? u2(E2, r3) : e5.wrap && i5 ? p2(E2) : I2 && s2(E2) ? o2(E2) : E2, (e5.sham || E2 && E2.sham || f2 && f2.sham) && l2(g2, "sham", true), l2(C2, _2, g2), I2 && (h2(d2, n3 = T2 + "Prototype") || l2(d2, n3, {}), l2(d2[n3], _2, E2), e5.real && A2 && !A2[_2] && l2(A2, _2, E2)));
            };
          }, 5981: (e4) => {
            e4.exports = function(e5) {
              try {
                return !!e5();
              } catch (e6) {
                return true;
              }
            };
          }, 9730: (e4, t4, i4) => {
            var r3 = i4(8285), n2 = Function.prototype, o2 = n2.apply, s2 = n2.call;
            e4.exports = "object" == typeof Reflect && Reflect.apply || (r3 ? s2.bind(o2) : function() {
              return s2.apply(o2, arguments);
            });
          }, 6843: (e4, t4, i4) => {
            var r3 = i4(5329), n2 = i4(4883), o2 = i4(8285), s2 = r3(r3.bind);
            e4.exports = function(e5, t5) {
              return n2(e5), void 0 === t5 ? e5 : o2 ? s2(e5, t5) : function() {
                return e5.apply(t5, arguments);
              };
            };
          }, 8285: (e4, t4, i4) => {
            var r3 = i4(5981);
            e4.exports = !r3(function() {
              var e5 = function() {
              }.bind();
              return "function" != typeof e5 || e5.hasOwnProperty("prototype");
            });
          }, 8834: (e4, t4, i4) => {
            var r3 = i4(8285), n2 = Function.prototype.call;
            e4.exports = r3 ? n2.bind(n2) : function() {
              return n2.apply(n2, arguments);
            };
          }, 9417: (e4, t4, i4) => {
            var r3 = i4(5746), n2 = i4(953), o2 = Function.prototype, s2 = r3 && Object.getOwnPropertyDescriptor, a2 = n2(o2, "name"), c2 = a2 && "something" === function() {
            }.name, d2 = a2 && (!r3 || r3 && s2(o2, "name").configurable);
            e4.exports = { EXISTS: a2, PROPER: c2, CONFIGURABLE: d2 };
          }, 4163: (e4, t4, i4) => {
            var r3 = i4(8285), n2 = Function.prototype, o2 = n2.call, s2 = r3 && n2.bind.bind(o2, o2);
            e4.exports = r3 ? s2 : function(e5) {
              return function() {
                return o2.apply(e5, arguments);
              };
            };
          }, 5329: (e4, t4, i4) => {
            var r3 = i4(2532), n2 = i4(4163);
            e4.exports = function(e5) {
              if ("Function" === r3(e5))
                return n2(e5);
            };
          }, 626: (e4, t4, i4) => {
            var r3 = i4(4058), n2 = i4(1899), o2 = i4(7475), s2 = function(e5) {
              return o2(e5) ? e5 : void 0;
            };
            e4.exports = function(e5, t5) {
              return arguments.length < 2 ? s2(r3[e5]) || s2(n2[e5]) : r3[e5] && r3[e5][t5] || n2[e5] && n2[e5][t5];
            };
          }, 2902: (e4, t4, i4) => {
            var r3 = i4(9697), n2 = i4(4229), o2 = i4(2119), s2 = i4(2077), a2 = i4(9813)("iterator");
            e4.exports = function(e5) {
              if (!o2(e5))
                return n2(e5, a2) || n2(e5, "@@iterator") || s2[r3(e5)];
            };
          }, 3476: (e4, t4, i4) => {
            var r3 = i4(8834), n2 = i4(4883), o2 = i4(6059), s2 = i4(9826), a2 = i4(2902), c2 = TypeError;
            e4.exports = function(e5, t5) {
              var i5 = arguments.length < 2 ? a2(e5) : t5;
              if (n2(i5))
                return o2(r3(i5, e5));
              throw c2(s2(e5) + " is not iterable");
            };
          }, 4229: (e4, t4, i4) => {
            var r3 = i4(4883), n2 = i4(2119);
            e4.exports = function(e5, t5) {
              var i5 = e5[t5];
              return n2(i5) ? void 0 : r3(i5);
            };
          }, 1899: (e4, t4, i4) => {
            var r3 = function(e5) {
              return e5 && e5.Math == Math && e5;
            };
            e4.exports = r3("object" == typeof globalThis && globalThis) || r3("object" == typeof window && window) || r3("object" == typeof self && self) || r3("object" == typeof i4.g && i4.g) || function() {
              return this;
            }() || Function("return this")();
          }, 953: (e4, t4, i4) => {
            var r3 = i4(5329), n2 = i4(9678), o2 = r3({}.hasOwnProperty);
            e4.exports = Object.hasOwn || function(e5, t5) {
              return o2(n2(e5), t5);
            };
          }, 7748: (e4) => {
            e4.exports = {};
          }, 4845: (e4, t4, i4) => {
            var r3 = i4(1899);
            e4.exports = function(e5, t5) {
              var i5 = r3.console;
              i5 && i5.error && (1 == arguments.length ? i5.error(e5) : i5.error(e5, t5));
            };
          }, 5463: (e4, t4, i4) => {
            var r3 = i4(626);
            e4.exports = r3("document", "documentElement");
          }, 2840: (e4, t4, i4) => {
            var r3 = i4(5746), n2 = i4(5981), o2 = i4(1333);
            e4.exports = !r3 && !n2(function() {
              return 7 != Object.defineProperty(o2("div"), "a", { get: function() {
                return 7;
              } }).a;
            });
          }, 7026: (e4, t4, i4) => {
            var r3 = i4(5329), n2 = i4(5981), o2 = i4(2532), s2 = Object, a2 = r3("".split);
            e4.exports = n2(function() {
              return !s2("z").propertyIsEnumerable(0);
            }) ? function(e5) {
              return "String" == o2(e5) ? a2(e5, "") : s2(e5);
            } : s2;
          }, 1302: (e4, t4, i4) => {
            var r3 = i4(5329), n2 = i4(7475), o2 = i4(3030), s2 = r3(Function.toString);
            n2(o2.inspectSource) || (o2.inspectSource = function(e5) {
              return s2(e5);
            }), e4.exports = o2.inspectSource;
          }, 3794: (e4, t4, i4) => {
            var r3 = i4(941), n2 = i4(2029);
            e4.exports = function(e5, t5) {
              r3(t5) && "cause" in t5 && n2(e5, "cause", t5.cause);
            };
          }, 5402: (e4, t4, i4) => {
            var r3, n2, o2, s2 = i4(7093), a2 = i4(1899), c2 = i4(941), d2 = i4(2029), u2 = i4(953), l2 = i4(3030), h2 = i4(4262), p2 = i4(7748), _2 = "Object already initialized", E2 = a2.TypeError, f2 = a2.WeakMap;
            if (s2 || l2.state) {
              var m2 = l2.state || (l2.state = new f2());
              m2.get = m2.get, m2.has = m2.has, m2.set = m2.set, r3 = function(e5, t5) {
                if (m2.has(e5))
                  throw E2(_2);
                return t5.facade = e5, m2.set(e5, t5), t5;
              }, n2 = function(e5) {
                return m2.get(e5) || {};
              }, o2 = function(e5) {
                return m2.has(e5);
              };
            } else {
              var g2 = h2("state");
              p2[g2] = true, r3 = function(e5, t5) {
                if (u2(e5, g2))
                  throw E2(_2);
                return t5.facade = e5, d2(e5, g2, t5), t5;
              }, n2 = function(e5) {
                return u2(e5, g2) ? e5[g2] : {};
              }, o2 = function(e5) {
                return u2(e5, g2);
              };
            }
            e4.exports = { set: r3, get: n2, has: o2, enforce: function(e5) {
              return o2(e5) ? n2(e5) : r3(e5, {});
            }, getterFor: function(e5) {
              return function(t5) {
                var i5;
                if (!c2(t5) || (i5 = n2(t5)).type !== e5)
                  throw E2("Incompatible receiver, " + e5 + " required");
                return i5;
              };
            } };
          }, 6782: (e4, t4, i4) => {
            var r3 = i4(9813), n2 = i4(2077), o2 = r3("iterator"), s2 = Array.prototype;
            e4.exports = function(e5) {
              return void 0 !== e5 && (n2.Array === e5 || s2[o2] === e5);
            };
          }, 7475: (e4, t4, i4) => {
            var r3 = i4(6616), n2 = r3.all;
            e4.exports = r3.IS_HTMLDDA ? function(e5) {
              return "function" == typeof e5 || e5 === n2;
            } : function(e5) {
              return "function" == typeof e5;
            };
          }, 4284: (e4, t4, i4) => {
            var r3 = i4(5329), n2 = i4(5981), o2 = i4(7475), s2 = i4(9697), a2 = i4(626), c2 = i4(1302), d2 = function() {
            }, u2 = [], l2 = a2("Reflect", "construct"), h2 = /^\s*(?:class|function)\b/, p2 = r3(h2.exec), _2 = !h2.exec(d2), E2 = function(e5) {
              if (!o2(e5))
                return false;
              try {
                return l2(d2, u2, e5), true;
              } catch (e6) {
                return false;
              }
            }, f2 = function(e5) {
              if (!o2(e5))
                return false;
              switch (s2(e5)) {
                case "AsyncFunction":
                case "GeneratorFunction":
                case "AsyncGeneratorFunction":
                  return false;
              }
              try {
                return _2 || !!p2(h2, c2(e5));
              } catch (e6) {
                return true;
              }
            };
            f2.sham = true, e4.exports = !l2 || n2(function() {
              var e5;
              return E2(E2.call) || !E2(Object) || !E2(function() {
                e5 = true;
              }) || e5;
            }) ? f2 : E2;
          }, 7252: (e4, t4, i4) => {
            var r3 = i4(5981), n2 = i4(7475), o2 = /#|\.prototype\./, s2 = function(e5, t5) {
              var i5 = c2[a2(e5)];
              return i5 == u2 || i5 != d2 && (n2(t5) ? r3(t5) : !!t5);
            }, a2 = s2.normalize = function(e5) {
              return String(e5).replace(o2, ".").toLowerCase();
            }, c2 = s2.data = {}, d2 = s2.NATIVE = "N", u2 = s2.POLYFILL = "P";
            e4.exports = s2;
          }, 2119: (e4) => {
            e4.exports = function(e5) {
              return null == e5;
            };
          }, 941: (e4, t4, i4) => {
            var r3 = i4(7475), n2 = i4(6616), o2 = n2.all;
            e4.exports = n2.IS_HTMLDDA ? function(e5) {
              return "object" == typeof e5 ? null !== e5 : r3(e5) || e5 === o2;
            } : function(e5) {
              return "object" == typeof e5 ? null !== e5 : r3(e5);
            };
          }, 2529: (e4) => {
            e4.exports = true;
          }, 6664: (e4, t4, i4) => {
            var r3 = i4(626), n2 = i4(7475), o2 = i4(7046), s2 = i4(2302), a2 = Object;
            e4.exports = s2 ? function(e5) {
              return "symbol" == typeof e5;
            } : function(e5) {
              var t5 = r3("Symbol");
              return n2(t5) && o2(t5.prototype, a2(e5));
            };
          }, 3091: (e4, t4, i4) => {
            var r3 = i4(6843), n2 = i4(8834), o2 = i4(6059), s2 = i4(9826), a2 = i4(6782), c2 = i4(623), d2 = i4(7046), u2 = i4(3476), l2 = i4(2902), h2 = i4(7609), p2 = TypeError, _2 = function(e5, t5) {
              this.stopped = e5, this.result = t5;
            }, E2 = _2.prototype;
            e4.exports = function(e5, t5, i5) {
              var f2, m2, g2, S2, T2, v2, R2, I2 = i5 && i5.that, y2 = !(!i5 || !i5.AS_ENTRIES), C2 = !(!i5 || !i5.IS_RECORD), A2 = !(!i5 || !i5.IS_ITERATOR), O2 = !(!i5 || !i5.INTERRUPTED), b2 = r3(t5, I2), w2 = function(e6) {
                return f2 && h2(f2, "normal", e6), new _2(true, e6);
              }, N2 = function(e6) {
                return y2 ? (o2(e6), O2 ? b2(e6[0], e6[1], w2) : b2(e6[0], e6[1])) : O2 ? b2(e6, w2) : b2(e6);
              };
              if (C2)
                f2 = e5.iterator;
              else if (A2)
                f2 = e5;
              else {
                if (!(m2 = l2(e5)))
                  throw p2(s2(e5) + " is not iterable");
                if (a2(m2)) {
                  for (g2 = 0, S2 = c2(e5); S2 > g2; g2++)
                    if ((T2 = N2(e5[g2])) && d2(E2, T2))
                      return T2;
                  return new _2(false);
                }
                f2 = u2(e5, m2);
              }
              for (v2 = C2 ? e5.next : f2.next; !(R2 = n2(v2, f2)).done; ) {
                try {
                  T2 = N2(R2.value);
                } catch (e6) {
                  h2(f2, "throw", e6);
                }
                if ("object" == typeof T2 && T2 && d2(E2, T2))
                  return T2;
              }
              return new _2(false);
            };
          }, 7609: (e4, t4, i4) => {
            var r3 = i4(8834), n2 = i4(6059), o2 = i4(4229);
            e4.exports = function(e5, t5, i5) {
              var s2, a2;
              n2(e5);
              try {
                if (!(s2 = o2(e5, "return"))) {
                  if ("throw" === t5)
                    throw i5;
                  return i5;
                }
                s2 = r3(s2, e5);
              } catch (e6) {
                a2 = true, s2 = e6;
              }
              if ("throw" === t5)
                throw i5;
              if (a2)
                throw s2;
              return n2(s2), i5;
            };
          }, 3847: (e4, t4, i4) => {
            var r3 = i4(5143).IteratorPrototype, n2 = i4(9290), o2 = i4(1887), s2 = i4(904), a2 = i4(2077), c2 = function() {
              return this;
            };
            e4.exports = function(e5, t5, i5, d2) {
              var u2 = t5 + " Iterator";
              return e5.prototype = n2(r3, { next: o2(+!d2, i5) }), s2(e5, u2, false, true), a2[u2] = c2, e5;
            };
          }, 5105: (e4, t4, i4) => {
            var r3 = i4(6887), n2 = i4(8834), o2 = i4(2529), s2 = i4(9417), a2 = i4(7475), c2 = i4(3847), d2 = i4(249), u2 = i4(8929), l2 = i4(904), h2 = i4(2029), p2 = i4(5929), _2 = i4(9813), E2 = i4(2077), f2 = i4(5143), m2 = s2.PROPER, g2 = s2.CONFIGURABLE, S2 = f2.IteratorPrototype, T2 = f2.BUGGY_SAFARI_ITERATORS, v2 = _2("iterator"), R2 = "keys", I2 = "values", y2 = "entries", C2 = function() {
              return this;
            };
            e4.exports = function(e5, t5, i5, s3, _3, f3, A2) {
              c2(i5, t5, s3);
              var O2, b2, w2, N2 = function(e6) {
                if (e6 === _3 && M2)
                  return M2;
                if (!T2 && e6 in L2)
                  return L2[e6];
                switch (e6) {
                  case R2:
                  case I2:
                  case y2:
                    return function() {
                      return new i5(this, e6);
                    };
                }
                return function() {
                  return new i5(this);
                };
              }, D2 = t5 + " Iterator", P2 = false, L2 = e5.prototype, k2 = L2[v2] || L2["@@iterator"] || _3 && L2[_3], M2 = !T2 && k2 || N2(_3), U2 = "Array" == t5 && L2.entries || k2;
              if (U2 && (O2 = d2(U2.call(new e5()))) !== Object.prototype && O2.next && (o2 || d2(O2) === S2 || (u2 ? u2(O2, S2) : a2(O2[v2]) || p2(O2, v2, C2)), l2(O2, D2, true, true), o2 && (E2[D2] = C2)), m2 && _3 == I2 && k2 && k2.name !== I2 && (!o2 && g2 ? h2(L2, "name", I2) : (P2 = true, M2 = function() {
                return n2(k2, this);
              })), _3)
                if (b2 = { values: N2(I2), keys: f3 ? M2 : N2(R2), entries: N2(y2) }, A2)
                  for (w2 in b2)
                    (T2 || P2 || !(w2 in L2)) && p2(L2, w2, b2[w2]);
                else
                  r3({ target: t5, proto: true, forced: T2 || P2 }, b2);
              return o2 && !A2 || L2[v2] === M2 || p2(L2, v2, M2, { name: _3 }), E2[t5] = M2, b2;
            };
          }, 5143: (e4, t4, i4) => {
            var r3, n2, o2, s2 = i4(5981), a2 = i4(7475), c2 = i4(941), d2 = i4(9290), u2 = i4(249), l2 = i4(5929), h2 = i4(9813), p2 = i4(2529), _2 = h2("iterator"), E2 = false;
            [].keys && ("next" in (o2 = [].keys()) ? (n2 = u2(u2(o2))) !== Object.prototype && (r3 = n2) : E2 = true), !c2(r3) || s2(function() {
              var e5 = {};
              return r3[_2].call(e5) !== e5;
            }) ? r3 = {} : p2 && (r3 = d2(r3)), a2(r3[_2]) || l2(r3, _2, function() {
              return this;
            }), e4.exports = { IteratorPrototype: r3, BUGGY_SAFARI_ITERATORS: E2 };
          }, 2077: (e4) => {
            e4.exports = {};
          }, 623: (e4, t4, i4) => {
            var r3 = i4(3057);
            e4.exports = function(e5) {
              return r3(e5.length);
            };
          }, 5331: (e4) => {
            var t4 = Math.ceil, i4 = Math.floor;
            e4.exports = Math.trunc || function(e5) {
              var r3 = +e5;
              return (r3 > 0 ? i4 : t4)(r3);
            };
          }, 6132: (e4, t4, i4) => {
            var r3, n2, o2, s2, a2, c2, d2, u2, l2 = i4(1899), h2 = i4(6843), p2 = i4(9677).f, _2 = i4(2941).set, E2 = i4(2749), f2 = i4(4470), m2 = i4(8045), g2 = i4(6049), S2 = l2.MutationObserver || l2.WebKitMutationObserver, T2 = l2.document, v2 = l2.process, R2 = l2.Promise, I2 = p2(l2, "queueMicrotask"), y2 = I2 && I2.value;
            y2 || (r3 = function() {
              var e5, t5;
              for (g2 && (e5 = v2.domain) && e5.exit(); n2; ) {
                t5 = n2.fn, n2 = n2.next;
                try {
                  t5();
                } catch (e6) {
                  throw n2 ? s2() : o2 = void 0, e6;
                }
              }
              o2 = void 0, e5 && e5.enter();
            }, E2 || g2 || m2 || !S2 || !T2 ? !f2 && R2 && R2.resolve ? ((d2 = R2.resolve(void 0)).constructor = R2, u2 = h2(d2.then, d2), s2 = function() {
              u2(r3);
            }) : g2 ? s2 = function() {
              v2.nextTick(r3);
            } : (_2 = h2(_2, l2), s2 = function() {
              _2(r3);
            }) : (a2 = true, c2 = T2.createTextNode(""), new S2(r3).observe(c2, { characterData: true }), s2 = function() {
              c2.data = a2 = !a2;
            })), e4.exports = y2 || function(e5) {
              var t5 = { fn: e5, next: void 0 };
              o2 && (o2.next = t5), n2 || (n2 = t5, s2()), o2 = t5;
            };
          }, 9520: (e4, t4, i4) => {
            var r3 = i4(4883), n2 = TypeError, o2 = function(e5) {
              var t5, i5;
              this.promise = new e5(function(e6, r4) {
                if (void 0 !== t5 || void 0 !== i5)
                  throw n2("Bad Promise constructor");
                t5 = e6, i5 = r4;
              }), this.resolve = r3(t5), this.reject = r3(i5);
            };
            e4.exports.f = function(e5) {
              return new o2(e5);
            };
          }, 4649: (e4, t4, i4) => {
            var r3 = i4(5803);
            e4.exports = function(e5, t5) {
              return void 0 === e5 ? arguments.length < 2 ? "" : t5 : r3(e5);
            };
          }, 9290: (e4, t4, i4) => {
            var r3, n2 = i4(6059), o2 = i4(9938), s2 = i4(6759), a2 = i4(7748), c2 = i4(5463), d2 = i4(1333), u2 = i4(4262)("IE_PROTO"), l2 = function() {
            }, h2 = function(e5) {
              return "<script>" + e5 + "<\/script>";
            }, p2 = function(e5) {
              e5.write(h2("")), e5.close();
              var t5 = e5.parentWindow.Object;
              return e5 = null, t5;
            }, _2 = function() {
              try {
                r3 = new ActiveXObject("htmlfile");
              } catch (e6) {
              }
              var e5, t5;
              _2 = "undefined" != typeof document ? document.domain && r3 ? p2(r3) : ((t5 = d2("iframe")).style.display = "none", c2.appendChild(t5), t5.src = String("javascript:"), (e5 = t5.contentWindow.document).open(), e5.write(h2("document.F=Object")), e5.close(), e5.F) : p2(r3);
              for (var i5 = s2.length; i5--; )
                delete _2.prototype[s2[i5]];
              return _2();
            };
            a2[u2] = true, e4.exports = Object.create || function(e5, t5) {
              var i5;
              return null !== e5 ? (l2.prototype = n2(e5), i5 = new l2(), l2.prototype = null, i5[u2] = e5) : i5 = _2(), void 0 === t5 ? i5 : o2.f(i5, t5);
            };
          }, 9938: (e4, t4, i4) => {
            var r3 = i4(5746), n2 = i4(3937), o2 = i4(5988), s2 = i4(6059), a2 = i4(4529), c2 = i4(4771);
            t4.f = r3 && !n2 ? Object.defineProperties : function(e5, t5) {
              s2(e5);
              for (var i5, r4 = a2(t5), n3 = c2(t5), d2 = n3.length, u2 = 0; d2 > u2; )
                o2.f(e5, i5 = n3[u2++], r4[i5]);
              return e5;
            };
          }, 5988: (e4, t4, i4) => {
            var r3 = i4(5746), n2 = i4(2840), o2 = i4(3937), s2 = i4(6059), a2 = i4(3894), c2 = TypeError, d2 = Object.defineProperty, u2 = Object.getOwnPropertyDescriptor;
            t4.f = r3 ? o2 ? function(e5, t5, i5) {
              if (s2(e5), t5 = a2(t5), s2(i5), "function" == typeof e5 && "prototype" === t5 && "value" in i5 && "writable" in i5 && !i5.writable) {
                var r4 = u2(e5, t5);
                r4 && r4.writable && (e5[t5] = i5.value, i5 = { configurable: "configurable" in i5 ? i5.configurable : r4.configurable, enumerable: "enumerable" in i5 ? i5.enumerable : r4.enumerable, writable: false });
              }
              return d2(e5, t5, i5);
            } : d2 : function(e5, t5, i5) {
              if (s2(e5), t5 = a2(t5), s2(i5), n2)
                try {
                  return d2(e5, t5, i5);
                } catch (e6) {
                }
              if ("get" in i5 || "set" in i5)
                throw c2("Accessors not supported");
              return "value" in i5 && (e5[t5] = i5.value), e5;
            };
          }, 9677: (e4, t4, i4) => {
            var r3 = i4(5746), n2 = i4(8834), o2 = i4(6760), s2 = i4(1887), a2 = i4(4529), c2 = i4(3894), d2 = i4(953), u2 = i4(2840), l2 = Object.getOwnPropertyDescriptor;
            t4.f = r3 ? l2 : function(e5, t5) {
              if (e5 = a2(e5), t5 = c2(t5), u2)
                try {
                  return l2(e5, t5);
                } catch (e6) {
                }
              if (d2(e5, t5))
                return s2(!n2(o2.f, e5, t5), e5[t5]);
            };
          }, 946: (e4, t4, i4) => {
            var r3 = i4(5629), n2 = i4(6759).concat("length", "prototype");
            t4.f = Object.getOwnPropertyNames || function(e5) {
              return r3(e5, n2);
            };
          }, 7857: (e4, t4) => {
            t4.f = Object.getOwnPropertySymbols;
          }, 249: (e4, t4, i4) => {
            var r3 = i4(953), n2 = i4(7475), o2 = i4(9678), s2 = i4(4262), a2 = i4(4160), c2 = s2("IE_PROTO"), d2 = Object, u2 = d2.prototype;
            e4.exports = a2 ? d2.getPrototypeOf : function(e5) {
              var t5 = o2(e5);
              if (r3(t5, c2))
                return t5[c2];
              var i5 = t5.constructor;
              return n2(i5) && t5 instanceof i5 ? i5.prototype : t5 instanceof d2 ? u2 : null;
            };
          }, 7046: (e4, t4, i4) => {
            var r3 = i4(5329);
            e4.exports = r3({}.isPrototypeOf);
          }, 5629: (e4, t4, i4) => {
            var r3 = i4(5329), n2 = i4(953), o2 = i4(4529), s2 = i4(1692).indexOf, a2 = i4(7748), c2 = r3([].push);
            e4.exports = function(e5, t5) {
              var i5, r4 = o2(e5), d2 = 0, u2 = [];
              for (i5 in r4)
                !n2(a2, i5) && n2(r4, i5) && c2(u2, i5);
              for (; t5.length > d2; )
                n2(r4, i5 = t5[d2++]) && (~s2(u2, i5) || c2(u2, i5));
              return u2;
            };
          }, 4771: (e4, t4, i4) => {
            var r3 = i4(5629), n2 = i4(6759);
            e4.exports = Object.keys || function(e5) {
              return r3(e5, n2);
            };
          }, 6760: (e4, t4) => {
            var i4 = {}.propertyIsEnumerable, r3 = Object.getOwnPropertyDescriptor, n2 = r3 && !i4.call({ 1: 2 }, 1);
            t4.f = n2 ? function(e5) {
              var t5 = r3(this, e5);
              return !!t5 && t5.enumerable;
            } : i4;
          }, 8929: (e4, t4, i4) => {
            var r3 = i4(5329), n2 = i4(6059), o2 = i4(1851);
            e4.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
              var e5, t5 = false, i5 = {};
              try {
                (e5 = r3(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set))(i5, []), t5 = i5 instanceof Array;
              } catch (e6) {
              }
              return function(i6, r4) {
                return n2(i6), o2(r4), t5 ? e5(i6, r4) : i6.__proto__ = r4, i6;
              };
            }() : void 0);
          }, 5623: (e4, t4, i4) => {
            var r3 = i4(2885), n2 = i4(9697);
            e4.exports = r3 ? {}.toString : function() {
              return "[object " + n2(this) + "]";
            };
          }, 9811: (e4, t4, i4) => {
            var r3 = i4(8834), n2 = i4(7475), o2 = i4(941), s2 = TypeError;
            e4.exports = function(e5, t5) {
              var i5, a2;
              if ("string" === t5 && n2(i5 = e5.toString) && !o2(a2 = r3(i5, e5)))
                return a2;
              if (n2(i5 = e5.valueOf) && !o2(a2 = r3(i5, e5)))
                return a2;
              if ("string" !== t5 && n2(i5 = e5.toString) && !o2(a2 = r3(i5, e5)))
                return a2;
              throw s2("Can't convert object to primitive value");
            };
          }, 1136: (e4, t4, i4) => {
            var r3 = i4(626), n2 = i4(5329), o2 = i4(946), s2 = i4(7857), a2 = i4(6059), c2 = n2([].concat);
            e4.exports = r3("Reflect", "ownKeys") || function(e5) {
              var t5 = o2.f(a2(e5)), i5 = s2.f;
              return i5 ? c2(t5, i5(e5)) : t5;
            };
          }, 4058: (e4) => {
            e4.exports = {};
          }, 2: (e4) => {
            e4.exports = function(e5) {
              try {
                return { error: false, value: e5() };
              } catch (e6) {
                return { error: true, value: e6 };
              }
            };
          }, 7742: (e4, t4, i4) => {
            var r3 = i4(1899), n2 = i4(6991), o2 = i4(7475), s2 = i4(7252), a2 = i4(1302), c2 = i4(9813), d2 = i4(3321), u2 = i4(8501), l2 = i4(2529), h2 = i4(3385), p2 = n2 && n2.prototype, _2 = c2("species"), E2 = false, f2 = o2(r3.PromiseRejectionEvent), m2 = s2("Promise", function() {
              var e5 = a2(n2), t5 = e5 !== String(n2);
              if (!t5 && 66 === h2)
                return true;
              if (l2 && (!p2.catch || !p2.finally))
                return true;
              if (!h2 || h2 < 51 || !/native code/.test(e5)) {
                var i5 = new n2(function(e6) {
                  e6(1);
                }), r4 = function(e6) {
                  e6(function() {
                  }, function() {
                  });
                };
                if ((i5.constructor = {})[_2] = r4, !(E2 = i5.then(function() {
                }) instanceof r4))
                  return true;
              }
              return !t5 && (d2 || u2) && !f2;
            });
            e4.exports = { CONSTRUCTOR: m2, REJECTION_EVENT: f2, SUBCLASSING: E2 };
          }, 6991: (e4, t4, i4) => {
            var r3 = i4(1899);
            e4.exports = r3.Promise;
          }, 6584: (e4, t4, i4) => {
            var r3 = i4(6059), n2 = i4(941), o2 = i4(9520);
            e4.exports = function(e5, t5) {
              if (r3(e5), n2(t5) && t5.constructor === e5)
                return t5;
              var i5 = o2.f(e5);
              return (0, i5.resolve)(t5), i5.promise;
            };
          }, 1542: (e4, t4, i4) => {
            var r3 = i4(6991), n2 = i4(1385), o2 = i4(7742).CONSTRUCTOR;
            e4.exports = o2 || !n2(function(e5) {
              r3.all(e5).then(void 0, function() {
              });
            });
          }, 8397: (e4) => {
            var t4 = function() {
              this.head = null, this.tail = null;
            };
            t4.prototype = { add: function(e5) {
              var t5 = { item: e5, next: null };
              this.head ? this.tail.next = t5 : this.head = t5, this.tail = t5;
            }, get: function() {
              var e5 = this.head;
              if (e5)
                return this.head = e5.next, this.tail === e5 && (this.tail = null), e5.item;
            } }, e4.exports = t4;
          }, 8219: (e4, t4, i4) => {
            var r3 = i4(2119), n2 = TypeError;
            e4.exports = function(e5) {
              if (r3(e5))
                throw n2("Can't call method on " + e5);
              return e5;
            };
          }, 4431: (e4, t4, i4) => {
            var r3 = i4(626), n2 = i4(5988), o2 = i4(9813), s2 = i4(5746), a2 = o2("species");
            e4.exports = function(e5) {
              var t5 = r3(e5), i5 = n2.f;
              s2 && t5 && !t5[a2] && i5(t5, a2, { configurable: true, get: function() {
                return this;
              } });
            };
          }, 904: (e4, t4, i4) => {
            var r3 = i4(2885), n2 = i4(5988).f, o2 = i4(2029), s2 = i4(953), a2 = i4(5623), c2 = i4(9813)("toStringTag");
            e4.exports = function(e5, t5, i5, d2) {
              if (e5) {
                var u2 = i5 ? e5 : e5.prototype;
                s2(u2, c2) || n2(u2, c2, { configurable: true, value: t5 }), d2 && !r3 && o2(u2, "toString", a2);
              }
            };
          }, 4262: (e4, t4, i4) => {
            var r3 = i4(8726), n2 = i4(9418), o2 = r3("keys");
            e4.exports = function(e5) {
              return o2[e5] || (o2[e5] = n2(e5));
            };
          }, 3030: (e4, t4, i4) => {
            var r3 = i4(1899), n2 = i4(5609), o2 = "__core-js_shared__", s2 = r3[o2] || n2(o2, {});
            e4.exports = s2;
          }, 8726: (e4, t4, i4) => {
            var r3 = i4(2529), n2 = i4(3030);
            (e4.exports = function(e5, t5) {
              return n2[e5] || (n2[e5] = void 0 !== t5 ? t5 : {});
            })("versions", []).push({ version: "3.26.0", mode: r3 ? "pure" : "global", copyright: "Â© 2014-2022 Denis Pushkarev (zloirock.ru)", license: "https://github.com/zloirock/core-js/blob/v3.26.0/LICENSE", source: "https://github.com/zloirock/core-js" });
          }, 487: (e4, t4, i4) => {
            var r3 = i4(6059), n2 = i4(174), o2 = i4(2119), s2 = i4(9813)("species");
            e4.exports = function(e5, t5) {
              var i5, a2 = r3(e5).constructor;
              return void 0 === a2 || o2(i5 = r3(a2)[s2]) ? t5 : n2(i5);
            };
          }, 4620: (e4, t4, i4) => {
            var r3 = i4(5329), n2 = i4(2435), o2 = i4(5803), s2 = i4(8219), a2 = r3("".charAt), c2 = r3("".charCodeAt), d2 = r3("".slice), u2 = function(e5) {
              return function(t5, i5) {
                var r4, u3, l2 = o2(s2(t5)), h2 = n2(i5), p2 = l2.length;
                return h2 < 0 || h2 >= p2 ? e5 ? "" : void 0 : (r4 = c2(l2, h2)) < 55296 || r4 > 56319 || h2 + 1 === p2 || (u3 = c2(l2, h2 + 1)) < 56320 || u3 > 57343 ? e5 ? a2(l2, h2) : r4 : e5 ? d2(l2, h2, h2 + 2) : u3 - 56320 + (r4 - 55296 << 10) + 65536;
              };
            };
            e4.exports = { codeAt: u2(false), charAt: u2(true) };
          }, 3405: (e4, t4, i4) => {
            var r3 = i4(3385), n2 = i4(5981);
            e4.exports = !!Object.getOwnPropertySymbols && !n2(function() {
              var e5 = Symbol();
              return !String(e5) || !(Object(e5) instanceof Symbol) || !Symbol.sham && r3 && r3 < 41;
            });
          }, 2941: (e4, t4, i4) => {
            var r3, n2, o2, s2, a2 = i4(1899), c2 = i4(9730), d2 = i4(6843), u2 = i4(7475), l2 = i4(953), h2 = i4(5981), p2 = i4(5463), _2 = i4(3765), E2 = i4(1333), f2 = i4(8348), m2 = i4(2749), g2 = i4(6049), S2 = a2.setImmediate, T2 = a2.clearImmediate, v2 = a2.process, R2 = a2.Dispatch, I2 = a2.Function, y2 = a2.MessageChannel, C2 = a2.String, A2 = 0, O2 = {};
            try {
              r3 = a2.location;
            } catch (e5) {
            }
            var b2 = function(e5) {
              if (l2(O2, e5)) {
                var t5 = O2[e5];
                delete O2[e5], t5();
              }
            }, w2 = function(e5) {
              return function() {
                b2(e5);
              };
            }, N2 = function(e5) {
              b2(e5.data);
            }, D2 = function(e5) {
              a2.postMessage(C2(e5), r3.protocol + "//" + r3.host);
            };
            S2 && T2 || (S2 = function(e5) {
              f2(arguments.length, 1);
              var t5 = u2(e5) ? e5 : I2(e5), i5 = _2(arguments, 1);
              return O2[++A2] = function() {
                c2(t5, void 0, i5);
              }, n2(A2), A2;
            }, T2 = function(e5) {
              delete O2[e5];
            }, g2 ? n2 = function(e5) {
              v2.nextTick(w2(e5));
            } : R2 && R2.now ? n2 = function(e5) {
              R2.now(w2(e5));
            } : y2 && !m2 ? (s2 = (o2 = new y2()).port2, o2.port1.onmessage = N2, n2 = d2(s2.postMessage, s2)) : a2.addEventListener && u2(a2.postMessage) && !a2.importScripts && r3 && "file:" !== r3.protocol && !h2(D2) ? (n2 = D2, a2.addEventListener("message", N2, false)) : n2 = "onreadystatechange" in E2("script") ? function(e5) {
              p2.appendChild(E2("script")).onreadystatechange = function() {
                p2.removeChild(this), b2(e5);
              };
            } : function(e5) {
              setTimeout(w2(e5), 0);
            }), e4.exports = { set: S2, clear: T2 };
          }, 9413: (e4, t4, i4) => {
            var r3 = i4(2435), n2 = Math.max, o2 = Math.min;
            e4.exports = function(e5, t5) {
              var i5 = r3(e5);
              return i5 < 0 ? n2(i5 + t5, 0) : o2(i5, t5);
            };
          }, 4529: (e4, t4, i4) => {
            var r3 = i4(7026), n2 = i4(8219);
            e4.exports = function(e5) {
              return r3(n2(e5));
            };
          }, 2435: (e4, t4, i4) => {
            var r3 = i4(5331);
            e4.exports = function(e5) {
              var t5 = +e5;
              return t5 != t5 || 0 === t5 ? 0 : r3(t5);
            };
          }, 3057: (e4, t4, i4) => {
            var r3 = i4(2435), n2 = Math.min;
            e4.exports = function(e5) {
              return e5 > 0 ? n2(r3(e5), 9007199254740991) : 0;
            };
          }, 9678: (e4, t4, i4) => {
            var r3 = i4(8219), n2 = Object;
            e4.exports = function(e5) {
              return n2(r3(e5));
            };
          }, 6935: (e4, t4, i4) => {
            var r3 = i4(8834), n2 = i4(941), o2 = i4(6664), s2 = i4(4229), a2 = i4(9811), c2 = i4(9813), d2 = TypeError, u2 = c2("toPrimitive");
            e4.exports = function(e5, t5) {
              if (!n2(e5) || o2(e5))
                return e5;
              var i5, c3 = s2(e5, u2);
              if (c3) {
                if (void 0 === t5 && (t5 = "default"), i5 = r3(c3, e5, t5), !n2(i5) || o2(i5))
                  return i5;
                throw d2("Can't convert object to primitive value");
              }
              return void 0 === t5 && (t5 = "number"), a2(e5, t5);
            };
          }, 3894: (e4, t4, i4) => {
            var r3 = i4(6935), n2 = i4(6664);
            e4.exports = function(e5) {
              var t5 = r3(e5, "string");
              return n2(t5) ? t5 : t5 + "";
            };
          }, 2885: (e4, t4, i4) => {
            var r3 = {};
            r3[i4(9813)("toStringTag")] = "z", e4.exports = "[object z]" === String(r3);
          }, 5803: (e4, t4, i4) => {
            var r3 = i4(9697), n2 = String;
            e4.exports = function(e5) {
              if ("Symbol" === r3(e5))
                throw TypeError("Cannot convert a Symbol value to a string");
              return n2(e5);
            };
          }, 9826: (e4) => {
            var t4 = String;
            e4.exports = function(e5) {
              try {
                return t4(e5);
              } catch (e6) {
                return "Object";
              }
            };
          }, 9418: (e4, t4, i4) => {
            var r3 = i4(5329), n2 = 0, o2 = Math.random(), s2 = r3(1 .toString);
            e4.exports = function(e5) {
              return "Symbol(" + (void 0 === e5 ? "" : e5) + ")_" + s2(++n2 + o2, 36);
            };
          }, 2302: (e4, t4, i4) => {
            var r3 = i4(3405);
            e4.exports = r3 && !Symbol.sham && "symbol" == typeof Symbol.iterator;
          }, 3937: (e4, t4, i4) => {
            var r3 = i4(5746), n2 = i4(5981);
            e4.exports = r3 && n2(function() {
              return 42 != Object.defineProperty(function() {
              }, "prototype", { value: 42, writable: false }).prototype;
            });
          }, 8348: (e4) => {
            var t4 = TypeError;
            e4.exports = function(e5, i4) {
              if (e5 < i4)
                throw t4("Not enough arguments");
              return e5;
            };
          }, 7093: (e4, t4, i4) => {
            var r3 = i4(1899), n2 = i4(7475), o2 = r3.WeakMap;
            e4.exports = n2(o2) && /native code/.test(String(o2));
          }, 9813: (e4, t4, i4) => {
            var r3 = i4(1899), n2 = i4(8726), o2 = i4(953), s2 = i4(9418), a2 = i4(3405), c2 = i4(2302), d2 = n2("wks"), u2 = r3.Symbol, l2 = u2 && u2.for, h2 = c2 ? u2 : u2 && u2.withoutSetter || s2;
            e4.exports = function(e5) {
              if (!o2(d2, e5) || !a2 && "string" != typeof d2[e5]) {
                var t5 = "Symbol." + e5;
                a2 && o2(u2, e5) ? d2[e5] = u2[e5] : d2[e5] = c2 && l2 ? l2(t5) : h2(t5);
              }
              return d2[e5];
            };
          }, 9812: (e4, t4, i4) => {
            var r3 = i4(6887), n2 = i4(7046), o2 = i4(249), s2 = i4(8929), a2 = i4(3489), c2 = i4(9290), d2 = i4(2029), u2 = i4(1887), l2 = i4(3995), h2 = i4(3794), p2 = i4(3091), _2 = i4(4649), E2 = i4(9813), f2 = i4(8780), m2 = E2("toStringTag"), g2 = Error, S2 = [].push, T2 = function(e5, t5) {
              var i5, r4 = arguments.length > 2 ? arguments[2] : void 0, a3 = n2(v2, this);
              s2 ? i5 = s2(g2(), a3 ? o2(this) : v2) : (i5 = a3 ? this : c2(v2), d2(i5, m2, "Error")), void 0 !== t5 && d2(i5, "message", _2(t5)), f2 && d2(i5, "stack", l2(i5.stack, 1)), h2(i5, r4);
              var u3 = [];
              return p2(e5, S2, { that: u3 }), d2(i5, "errors", u3), i5;
            };
            s2 ? s2(T2, g2) : a2(T2, g2, { name: true });
            var v2 = T2.prototype = c2(g2.prototype, { constructor: u2(1, T2), message: u2(1, ""), name: u2(1, "AggregateError") });
            r3({ global: true, constructor: true, arity: 2 }, { AggregateError: T2 });
          }, 7627: (e4, t4, i4) => {
            i4(9812);
          }, 6274: (e4, t4, i4) => {
            var r3 = i4(4529), n2 = i4(8479), o2 = i4(2077), s2 = i4(5402), a2 = i4(5988).f, c2 = i4(5105), d2 = i4(3538), u2 = i4(2529), l2 = i4(5746), h2 = "Array Iterator", p2 = s2.set, _2 = s2.getterFor(h2);
            e4.exports = c2(Array, "Array", function(e5, t5) {
              p2(this, { type: h2, target: r3(e5), index: 0, kind: t5 });
            }, function() {
              var e5 = _2(this), t5 = e5.target, i5 = e5.kind, r4 = e5.index++;
              return !t5 || r4 >= t5.length ? (e5.target = void 0, d2(void 0, true)) : d2("keys" == i5 ? r4 : "values" == i5 ? t5[r4] : [r4, t5[r4]], false);
            }, "values");
            var E2 = o2.Arguments = o2.Array;
            if (n2("keys"), n2("values"), n2("entries"), !u2 && l2 && "values" !== E2.name)
              try {
                a2(E2, "name", { value: "values" });
              } catch (e5) {
              }
          }, 6450: (e4, t4, i4) => {
            var r3 = i4(6887), n2 = i4(5746), o2 = i4(5988).f;
            r3({ target: "Object", stat: true, forced: Object.defineProperty !== o2, sham: !n2 }, { defineProperty: o2 });
          }, 5967: () => {
          }, 4560: (e4, t4, i4) => {
            var r3 = i4(6887), n2 = i4(8834), o2 = i4(4883), s2 = i4(9520), a2 = i4(2), c2 = i4(3091);
            r3({ target: "Promise", stat: true }, { allSettled: function(e5) {
              var t5 = this, i5 = s2.f(t5), r4 = i5.resolve, d2 = i5.reject, u2 = a2(function() {
                var i6 = o2(t5.resolve), s3 = [], a3 = 0, d3 = 1;
                c2(e5, function(e6) {
                  var o3 = a3++, c3 = false;
                  d3++, n2(i6, t5, e6).then(function(e7) {
                    c3 || (c3 = true, s3[o3] = { status: "fulfilled", value: e7 }, --d3 || r4(s3));
                  }, function(e7) {
                    c3 || (c3 = true, s3[o3] = { status: "rejected", reason: e7 }, --d3 || r4(s3));
                  });
                }), --d3 || r4(s3);
              });
              return u2.error && d2(u2.value), i5.promise;
            } });
          }, 6890: (e4, t4, i4) => {
            var r3 = i4(6887), n2 = i4(8834), o2 = i4(4883), s2 = i4(9520), a2 = i4(2), c2 = i4(3091);
            r3({ target: "Promise", stat: true, forced: i4(1542) }, { all: function(e5) {
              var t5 = this, i5 = s2.f(t5), r4 = i5.resolve, d2 = i5.reject, u2 = a2(function() {
                var i6 = o2(t5.resolve), s3 = [], a3 = 0, u3 = 1;
                c2(e5, function(e6) {
                  var o3 = a3++, c3 = false;
                  u3++, n2(i6, t5, e6).then(function(e7) {
                    c3 || (c3 = true, s3[o3] = e7, --u3 || r4(s3));
                  }, d2);
                }), --u3 || r4(s3);
              });
              return u2.error && d2(u2.value), i5.promise;
            } });
          }, 7206: (e4, t4, i4) => {
            var r3 = i4(6887), n2 = i4(8834), o2 = i4(4883), s2 = i4(626), a2 = i4(9520), c2 = i4(2), d2 = i4(3091), u2 = "No one promise resolved";
            r3({ target: "Promise", stat: true }, { any: function(e5) {
              var t5 = this, i5 = s2("AggregateError"), r4 = a2.f(t5), l2 = r4.resolve, h2 = r4.reject, p2 = c2(function() {
                var r5 = o2(t5.resolve), s3 = [], a3 = 0, c3 = 1, p3 = false;
                d2(e5, function(e6) {
                  var o3 = a3++, d3 = false;
                  c3++, n2(r5, t5, e6).then(function(e7) {
                    d3 || p3 || (p3 = true, l2(e7));
                  }, function(e7) {
                    d3 || p3 || (d3 = true, s3[o3] = e7, --c3 || h2(new i5(s3, u2)));
                  });
                }), --c3 || h2(new i5(s3, u2));
              });
              return p2.error && h2(p2.value), r4.promise;
            } });
          }, 3376: (e4, t4, i4) => {
            var r3 = i4(6887), n2 = i4(2529), o2 = i4(7742).CONSTRUCTOR, s2 = i4(6991), a2 = i4(626), c2 = i4(7475), d2 = i4(5929), u2 = s2 && s2.prototype;
            if (r3({ target: "Promise", proto: true, forced: o2, real: true }, { catch: function(e5) {
              return this.then(void 0, e5);
            } }), !n2 && c2(s2)) {
              var l2 = a2("Promise").prototype.catch;
              u2.catch !== l2 && d2(u2, "catch", l2, { unsafe: true });
            }
          }, 6934: (e4, t4, i4) => {
            var r3, n2, o2, s2 = i4(6887), a2 = i4(2529), c2 = i4(6049), d2 = i4(1899), u2 = i4(8834), l2 = i4(5929), h2 = i4(8929), p2 = i4(904), _2 = i4(4431), E2 = i4(4883), f2 = i4(7475), m2 = i4(941), g2 = i4(5743), S2 = i4(487), T2 = i4(2941).set, v2 = i4(6132), R2 = i4(4845), I2 = i4(2), y2 = i4(8397), C2 = i4(5402), A2 = i4(6991), O2 = i4(7742), b2 = i4(9520), w2 = "Promise", N2 = O2.CONSTRUCTOR, D2 = O2.REJECTION_EVENT, P2 = O2.SUBCLASSING, L2 = C2.getterFor(w2), k2 = C2.set, M2 = A2 && A2.prototype, U2 = A2, x2 = M2, V2 = d2.TypeError, j2 = d2.document, F2 = d2.process, B2 = b2.f, G2 = B2, W2 = !!(j2 && j2.createEvent && d2.dispatchEvent), H2 = "unhandledrejection", K2 = function(e5) {
              var t5;
              return !(!m2(e5) || !f2(t5 = e5.then)) && t5;
            }, Y2 = function(e5, t5) {
              var i5, r4, n3, o3 = t5.value, s3 = 1 == t5.state, a3 = s3 ? e5.ok : e5.fail, c3 = e5.resolve, d3 = e5.reject, l3 = e5.domain;
              try {
                a3 ? (s3 || (2 === t5.rejection && Q2(t5), t5.rejection = 1), true === a3 ? i5 = o3 : (l3 && l3.enter(), i5 = a3(o3), l3 && (l3.exit(), n3 = true)), i5 === e5.promise ? d3(V2("Promise-chain cycle")) : (r4 = K2(i5)) ? u2(r4, i5, c3, d3) : c3(i5)) : d3(o3);
              } catch (e6) {
                l3 && !n3 && l3.exit(), d3(e6);
              }
            }, q2 = function(e5, t5) {
              e5.notified || (e5.notified = true, v2(function() {
                for (var i5, r4 = e5.reactions; i5 = r4.get(); )
                  Y2(i5, e5);
                e5.notified = false, t5 && !e5.rejection && X2(e5);
              }));
            }, J2 = function(e5, t5, i5) {
              var r4, n3;
              W2 ? ((r4 = j2.createEvent("Event")).promise = t5, r4.reason = i5, r4.initEvent(e5, false, true), d2.dispatchEvent(r4)) : r4 = { promise: t5, reason: i5 }, !D2 && (n3 = d2["on" + e5]) ? n3(r4) : e5 === H2 && R2("Unhandled promise rejection", i5);
            }, X2 = function(e5) {
              u2(T2, d2, function() {
                var t5, i5 = e5.facade, r4 = e5.value;
                if (z2(e5) && (t5 = I2(function() {
                  c2 ? F2.emit("unhandledRejection", r4, i5) : J2(H2, i5, r4);
                }), e5.rejection = c2 || z2(e5) ? 2 : 1, t5.error))
                  throw t5.value;
              });
            }, z2 = function(e5) {
              return 1 !== e5.rejection && !e5.parent;
            }, Q2 = function(e5) {
              u2(T2, d2, function() {
                var t5 = e5.facade;
                c2 ? F2.emit("rejectionHandled", t5) : J2("rejectionhandled", t5, e5.value);
              });
            }, Z2 = function(e5, t5, i5) {
              return function(r4) {
                e5(t5, r4, i5);
              };
            }, $2 = function(e5, t5, i5) {
              e5.done || (e5.done = true, i5 && (e5 = i5), e5.value = t5, e5.state = 2, q2(e5, true));
            }, ee2 = function(e5, t5, i5) {
              if (!e5.done) {
                e5.done = true, i5 && (e5 = i5);
                try {
                  if (e5.facade === t5)
                    throw V2("Promise can't be resolved itself");
                  var r4 = K2(t5);
                  r4 ? v2(function() {
                    var i6 = { done: false };
                    try {
                      u2(r4, t5, Z2(ee2, i6, e5), Z2($2, i6, e5));
                    } catch (t6) {
                      $2(i6, t6, e5);
                    }
                  }) : (e5.value = t5, e5.state = 1, q2(e5, false));
                } catch (t6) {
                  $2({ done: false }, t6, e5);
                }
              }
            };
            if (N2 && (x2 = (U2 = function(e5) {
              g2(this, x2), E2(e5), u2(r3, this);
              var t5 = L2(this);
              try {
                e5(Z2(ee2, t5), Z2($2, t5));
              } catch (e6) {
                $2(t5, e6);
              }
            }).prototype, (r3 = function(e5) {
              k2(this, { type: w2, done: false, notified: false, parent: false, reactions: new y2(), rejection: false, state: 0, value: void 0 });
            }).prototype = l2(x2, "then", function(e5, t5) {
              var i5 = L2(this), r4 = B2(S2(this, U2));
              return i5.parent = true, r4.ok = !f2(e5) || e5, r4.fail = f2(t5) && t5, r4.domain = c2 ? F2.domain : void 0, 0 == i5.state ? i5.reactions.add(r4) : v2(function() {
                Y2(r4, i5);
              }), r4.promise;
            }), n2 = function() {
              var e5 = new r3(), t5 = L2(e5);
              this.promise = e5, this.resolve = Z2(ee2, t5), this.reject = Z2($2, t5);
            }, b2.f = B2 = function(e5) {
              return e5 === U2 || void 0 === e5 ? new n2(e5) : G2(e5);
            }, !a2 && f2(A2) && M2 !== Object.prototype)) {
              o2 = M2.then, P2 || l2(M2, "then", function(e5, t5) {
                var i5 = this;
                return new U2(function(e6, t6) {
                  u2(o2, i5, e6, t6);
                }).then(e5, t5);
              }, { unsafe: true });
              try {
                delete M2.constructor;
              } catch (e5) {
              }
              h2 && h2(M2, x2);
            }
            s2({ global: true, constructor: true, wrap: true, forced: N2 }, { Promise: U2 }), p2(U2, w2, false, true), _2(w2);
          }, 4349: (e4, t4, i4) => {
            var r3 = i4(6887), n2 = i4(2529), o2 = i4(6991), s2 = i4(5981), a2 = i4(626), c2 = i4(7475), d2 = i4(487), u2 = i4(6584), l2 = i4(5929), h2 = o2 && o2.prototype;
            if (r3({ target: "Promise", proto: true, real: true, forced: !!o2 && s2(function() {
              h2.finally.call({ then: function() {
              } }, function() {
              });
            }) }, { finally: function(e5) {
              var t5 = d2(this, a2("Promise")), i5 = c2(e5);
              return this.then(i5 ? function(i6) {
                return u2(t5, e5()).then(function() {
                  return i6;
                });
              } : e5, i5 ? function(i6) {
                return u2(t5, e5()).then(function() {
                  throw i6;
                });
              } : e5);
            } }), !n2 && c2(o2)) {
              var p2 = a2("Promise").prototype.finally;
              h2.finally !== p2 && l2(h2, "finally", p2, { unsafe: true });
            }
          }, 8881: (e4, t4, i4) => {
            i4(6934), i4(6890), i4(3376), i4(5921), i4(4069), i4(4482);
          }, 5921: (e4, t4, i4) => {
            var r3 = i4(6887), n2 = i4(8834), o2 = i4(4883), s2 = i4(9520), a2 = i4(2), c2 = i4(3091);
            r3({ target: "Promise", stat: true, forced: i4(1542) }, { race: function(e5) {
              var t5 = this, i5 = s2.f(t5), r4 = i5.reject, d2 = a2(function() {
                var s3 = o2(t5.resolve);
                c2(e5, function(e6) {
                  n2(s3, t5, e6).then(i5.resolve, r4);
                });
              });
              return d2.error && r4(d2.value), i5.promise;
            } });
          }, 4069: (e4, t4, i4) => {
            var r3 = i4(6887), n2 = i4(8834), o2 = i4(9520);
            r3({ target: "Promise", stat: true, forced: i4(7742).CONSTRUCTOR }, { reject: function(e5) {
              var t5 = o2.f(this);
              return n2(t5.reject, void 0, e5), t5.promise;
            } });
          }, 4482: (e4, t4, i4) => {
            var r3 = i4(6887), n2 = i4(626), o2 = i4(2529), s2 = i4(6991), a2 = i4(7742).CONSTRUCTOR, c2 = i4(6584), d2 = n2("Promise"), u2 = o2 && !a2;
            r3({ target: "Promise", stat: true, forced: o2 || a2 }, { resolve: function(e5) {
              return c2(u2 && this === d2 ? s2 : this, e5);
            } });
          }, 7971: (e4, t4, i4) => {
            var r3 = i4(4620).charAt, n2 = i4(5803), o2 = i4(5402), s2 = i4(5105), a2 = i4(3538), c2 = "String Iterator", d2 = o2.set, u2 = o2.getterFor(c2);
            s2(String, "String", function(e5) {
              d2(this, { type: c2, string: n2(e5), index: 0 });
            }, function() {
              var e5, t5 = u2(this), i5 = t5.string, n3 = t5.index;
              return n3 >= i5.length ? a2(void 0, true) : (e5 = r3(i5, n3), t5.index += e5.length, a2(e5, false));
            });
          }, 7634: (e4, t4, i4) => {
            i4(6274);
            var r3 = i4(3281), n2 = i4(1899), o2 = i4(9697), s2 = i4(2029), a2 = i4(2077), c2 = i4(9813)("toStringTag");
            for (var d2 in r3) {
              var u2 = n2[d2], l2 = u2 && u2.prototype;
              l2 && o2(l2) !== c2 && s2(l2, c2, d2), a2[d2] = a2.Array;
            }
          }, 1910: (e4, t4, i4) => {
            var r3 = i4(8171);
            e4.exports = r3;
          }, 7460: (e4, t4, i4) => {
            var r3 = i4(2956);
            i4(7634), e4.exports = r3;
          }, 9662: (e4, t4, i4) => {
            var r3 = i4(614), n2 = i4(6330), o2 = TypeError;
            e4.exports = function(e5) {
              if (r3(e5))
                return e5;
              throw o2(n2(e5) + " is not a function");
            };
          }, 6077: (e4, t4, i4) => {
            var r3 = i4(614), n2 = String, o2 = TypeError;
            e4.exports = function(e5) {
              if ("object" == typeof e5 || r3(e5))
                return e5;
              throw o2("Can't set " + n2(e5) + " as a prototype");
            };
          }, 1223: (e4, t4, i4) => {
            var r3 = i4(5112), n2 = i4(30), o2 = i4(3070).f, s2 = r3("unscopables"), a2 = Array.prototype;
            null == a2[s2] && o2(a2, s2, { configurable: true, value: n2(null) }), e4.exports = function(e5) {
              a2[s2][e5] = true;
            };
          }, 9670: (e4, t4, i4) => {
            var r3 = i4(111), n2 = String, o2 = TypeError;
            e4.exports = function(e5) {
              if (r3(e5))
                return e5;
              throw o2(n2(e5) + " is not an object");
            };
          }, 1318: (e4, t4, i4) => {
            var r3 = i4(5656), n2 = i4(1400), o2 = i4(6244), s2 = function(e5) {
              return function(t5, i5, s3) {
                var a2, c2 = r3(t5), d2 = o2(c2), u2 = n2(s3, d2);
                if (e5 && i5 != i5) {
                  for (; d2 > u2; )
                    if ((a2 = c2[u2++]) != a2)
                      return true;
                } else
                  for (; d2 > u2; u2++)
                    if ((e5 || u2 in c2) && c2[u2] === i5)
                      return e5 || u2 || 0;
                return !e5 && -1;
              };
            };
            e4.exports = { includes: s2(true), indexOf: s2(false) };
          }, 4326: (e4, t4, i4) => {
            var r3 = i4(84), n2 = r3({}.toString), o2 = r3("".slice);
            e4.exports = function(e5) {
              return o2(n2(e5), 8, -1);
            };
          }, 648: (e4, t4, i4) => {
            var r3 = i4(1694), n2 = i4(614), o2 = i4(4326), s2 = i4(5112)("toStringTag"), a2 = Object, c2 = "Arguments" == o2(function() {
              return arguments;
            }());
            e4.exports = r3 ? o2 : function(e5) {
              var t5, i5, r4;
              return void 0 === e5 ? "Undefined" : null === e5 ? "Null" : "string" == typeof (i5 = function(e6, t6) {
                try {
                  return e6[t6];
                } catch (e7) {
                }
              }(t5 = a2(e5), s2)) ? i5 : c2 ? o2(t5) : "Object" == (r4 = o2(t5)) && n2(t5.callee) ? "Arguments" : r4;
            };
          }, 9920: (e4, t4, i4) => {
            var r3 = i4(2597), n2 = i4(3887), o2 = i4(1236), s2 = i4(3070);
            e4.exports = function(e5, t5, i5) {
              for (var a2 = n2(t5), c2 = s2.f, d2 = o2.f, u2 = 0; u2 < a2.length; u2++) {
                var l2 = a2[u2];
                r3(e5, l2) || i5 && r3(i5, l2) || c2(e5, l2, d2(t5, l2));
              }
            };
          }, 8544: (e4, t4, i4) => {
            var r3 = i4(7293);
            e4.exports = !r3(function() {
              function e5() {
              }
              return e5.prototype.constructor = null, Object.getPrototypeOf(new e5()) !== e5.prototype;
            });
          }, 6178: (e4) => {
            e4.exports = function(e5, t4) {
              return { value: e5, done: t4 };
            };
          }, 8880: (e4, t4, i4) => {
            var r3 = i4(9781), n2 = i4(3070), o2 = i4(9114);
            e4.exports = r3 ? function(e5, t5, i5) {
              return n2.f(e5, t5, o2(1, i5));
            } : function(e5, t5, i5) {
              return e5[t5] = i5, e5;
            };
          }, 9114: (e4) => {
            e4.exports = function(e5, t4) {
              return { enumerable: !(1 & e5), configurable: !(2 & e5), writable: !(4 & e5), value: t4 };
            };
          }, 8052: (e4, t4, i4) => {
            var r3 = i4(614), n2 = i4(3070), o2 = i4(6339), s2 = i4(3072);
            e4.exports = function(e5, t5, i5, a2) {
              a2 || (a2 = {});
              var c2 = a2.enumerable, d2 = void 0 !== a2.name ? a2.name : t5;
              if (r3(i5) && o2(i5, d2, a2), a2.global)
                c2 ? e5[t5] = i5 : s2(t5, i5);
              else {
                try {
                  a2.unsafe ? e5[t5] && (c2 = true) : delete e5[t5];
                } catch (e6) {
                }
                c2 ? e5[t5] = i5 : n2.f(e5, t5, { value: i5, enumerable: false, configurable: !a2.nonConfigurable, writable: !a2.nonWritable });
              }
              return e5;
            };
          }, 3072: (e4, t4, i4) => {
            var r3 = i4(7854), n2 = Object.defineProperty;
            e4.exports = function(e5, t5) {
              try {
                n2(r3, e5, { value: t5, configurable: true, writable: true });
              } catch (i5) {
                r3[e5] = t5;
              }
              return t5;
            };
          }, 9781: (e4, t4, i4) => {
            var r3 = i4(7293);
            e4.exports = !r3(function() {
              return 7 != Object.defineProperty({}, 1, { get: function() {
                return 7;
              } })[1];
            });
          }, 4154: (e4) => {
            var t4 = "object" == typeof document && document.all, i4 = void 0 === t4 && void 0 !== t4;
            e4.exports = { all: t4, IS_HTMLDDA: i4 };
          }, 317: (e4, t4, i4) => {
            var r3 = i4(7854), n2 = i4(111), o2 = r3.document, s2 = n2(o2) && n2(o2.createElement);
            e4.exports = function(e5) {
              return s2 ? o2.createElement(e5) : {};
            };
          }, 8324: (e4) => {
            e4.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };
          }, 8509: (e4, t4, i4) => {
            var r3 = i4(317)("span").classList, n2 = r3 && r3.constructor && r3.constructor.prototype;
            e4.exports = n2 === Object.prototype ? void 0 : n2;
          }, 8113: (e4, t4, i4) => {
            var r3 = i4(5005);
            e4.exports = r3("navigator", "userAgent") || "";
          }, 7392: (e4, t4, i4) => {
            var r3, n2, o2 = i4(7854), s2 = i4(8113), a2 = o2.process, c2 = o2.Deno, d2 = a2 && a2.versions || c2 && c2.version, u2 = d2 && d2.v8;
            u2 && (n2 = (r3 = u2.split("."))[0] > 0 && r3[0] < 4 ? 1 : +(r3[0] + r3[1])), !n2 && s2 && (!(r3 = s2.match(/Edge\/(\d+)/)) || r3[1] >= 74) && (r3 = s2.match(/Chrome\/(\d+)/)) && (n2 = +r3[1]), e4.exports = n2;
          }, 748: (e4) => {
            e4.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
          }, 1060: (e4, t4, i4) => {
            var r3 = i4(1702), n2 = Error, o2 = r3("".replace), s2 = String(n2("zxcasd").stack), a2 = /\n\s*at [^:]*:[^\n]*/, c2 = a2.test(s2);
            e4.exports = function(e5, t5) {
              if (c2 && "string" == typeof e5 && !n2.prepareStackTrace)
                for (; t5--; )
                  e5 = o2(e5, a2, "");
              return e5;
            };
          }, 2914: (e4, t4, i4) => {
            var r3 = i4(7293), n2 = i4(9114);
            e4.exports = !r3(function() {
              var e5 = Error("a");
              return !("stack" in e5) || (Object.defineProperty(e5, "stack", n2(1, 7)), 7 !== e5.stack);
            });
          }, 2109: (e4, t4, i4) => {
            var r3 = i4(7854), n2 = i4(1236).f, o2 = i4(8880), s2 = i4(8052), a2 = i4(3072), c2 = i4(9920), d2 = i4(4705);
            e4.exports = function(e5, t5) {
              var i5, u2, l2, h2, p2, _2 = e5.target, E2 = e5.global, f2 = e5.stat;
              if (i5 = E2 ? r3 : f2 ? r3[_2] || a2(_2, {}) : (r3[_2] || {}).prototype)
                for (u2 in t5) {
                  if (h2 = t5[u2], l2 = e5.dontCallGetSet ? (p2 = n2(i5, u2)) && p2.value : i5[u2], !d2(E2 ? u2 : _2 + (f2 ? "." : "#") + u2, e5.forced) && void 0 !== l2) {
                    if (typeof h2 == typeof l2)
                      continue;
                    c2(h2, l2);
                  }
                  (e5.sham || l2 && l2.sham) && o2(h2, "sham", true), s2(i5, u2, h2, e5);
                }
            };
          }, 7293: (e4) => {
            e4.exports = function(e5) {
              try {
                return !!e5();
              } catch (e6) {
                return true;
              }
            };
          }, 2104: (e4, t4, i4) => {
            var r3 = i4(4374), n2 = Function.prototype, o2 = n2.apply, s2 = n2.call;
            e4.exports = "object" == typeof Reflect && Reflect.apply || (r3 ? s2.bind(o2) : function() {
              return s2.apply(o2, arguments);
            });
          }, 4374: (e4, t4, i4) => {
            var r3 = i4(7293);
            e4.exports = !r3(function() {
              var e5 = function() {
              }.bind();
              return "function" != typeof e5 || e5.hasOwnProperty("prototype");
            });
          }, 6916: (e4, t4, i4) => {
            var r3 = i4(4374), n2 = Function.prototype.call;
            e4.exports = r3 ? n2.bind(n2) : function() {
              return n2.apply(n2, arguments);
            };
          }, 6530: (e4, t4, i4) => {
            var r3 = i4(9781), n2 = i4(2597), o2 = Function.prototype, s2 = r3 && Object.getOwnPropertyDescriptor, a2 = n2(o2, "name"), c2 = a2 && "something" === function() {
            }.name, d2 = a2 && (!r3 || r3 && s2(o2, "name").configurable);
            e4.exports = { EXISTS: a2, PROPER: c2, CONFIGURABLE: d2 };
          }, 84: (e4, t4, i4) => {
            var r3 = i4(4374), n2 = Function.prototype, o2 = n2.call, s2 = r3 && n2.bind.bind(o2, o2);
            e4.exports = r3 ? s2 : function(e5) {
              return function() {
                return o2.apply(e5, arguments);
              };
            };
          }, 1702: (e4, t4, i4) => {
            var r3 = i4(4326), n2 = i4(84);
            e4.exports = function(e5) {
              if ("Function" === r3(e5))
                return n2(e5);
            };
          }, 5005: (e4, t4, i4) => {
            var r3 = i4(7854), n2 = i4(614), o2 = function(e5) {
              return n2(e5) ? e5 : void 0;
            };
            e4.exports = function(e5, t5) {
              return arguments.length < 2 ? o2(r3[e5]) : r3[e5] && r3[e5][t5];
            };
          }, 8173: (e4, t4, i4) => {
            var r3 = i4(9662), n2 = i4(8554);
            e4.exports = function(e5, t5) {
              var i5 = e5[t5];
              return n2(i5) ? void 0 : r3(i5);
            };
          }, 7854: (e4, t4, i4) => {
            var r3 = function(e5) {
              return e5 && e5.Math == Math && e5;
            };
            e4.exports = r3("object" == typeof globalThis && globalThis) || r3("object" == typeof window && window) || r3("object" == typeof self && self) || r3("object" == typeof i4.g && i4.g) || function() {
              return this;
            }() || Function("return this")();
          }, 2597: (e4, t4, i4) => {
            var r3 = i4(1702), n2 = i4(7908), o2 = r3({}.hasOwnProperty);
            e4.exports = Object.hasOwn || function(e5, t5) {
              return o2(n2(e5), t5);
            };
          }, 3501: (e4) => {
            e4.exports = {};
          }, 490: (e4, t4, i4) => {
            var r3 = i4(5005);
            e4.exports = r3("document", "documentElement");
          }, 4664: (e4, t4, i4) => {
            var r3 = i4(9781), n2 = i4(7293), o2 = i4(317);
            e4.exports = !r3 && !n2(function() {
              return 7 != Object.defineProperty(o2("div"), "a", { get: function() {
                return 7;
              } }).a;
            });
          }, 8361: (e4, t4, i4) => {
            var r3 = i4(1702), n2 = i4(7293), o2 = i4(4326), s2 = Object, a2 = r3("".split);
            e4.exports = n2(function() {
              return !s2("z").propertyIsEnumerable(0);
            }) ? function(e5) {
              return "String" == o2(e5) ? a2(e5, "") : s2(e5);
            } : s2;
          }, 9587: (e4, t4, i4) => {
            var r3 = i4(614), n2 = i4(111), o2 = i4(7674);
            e4.exports = function(e5, t5, i5) {
              var s2, a2;
              return o2 && r3(s2 = t5.constructor) && s2 !== i5 && n2(a2 = s2.prototype) && a2 !== i5.prototype && o2(e5, a2), e5;
            };
          }, 2788: (e4, t4, i4) => {
            var r3 = i4(1702), n2 = i4(614), o2 = i4(5465), s2 = r3(Function.toString);
            n2(o2.inspectSource) || (o2.inspectSource = function(e5) {
              return s2(e5);
            }), e4.exports = o2.inspectSource;
          }, 8340: (e4, t4, i4) => {
            var r3 = i4(111), n2 = i4(8880);
            e4.exports = function(e5, t5) {
              r3(t5) && "cause" in t5 && n2(e5, "cause", t5.cause);
            };
          }, 9909: (e4, t4, i4) => {
            var r3, n2, o2, s2 = i4(4811), a2 = i4(7854), c2 = i4(111), d2 = i4(8880), u2 = i4(2597), l2 = i4(5465), h2 = i4(6200), p2 = i4(3501), _2 = "Object already initialized", E2 = a2.TypeError, f2 = a2.WeakMap;
            if (s2 || l2.state) {
              var m2 = l2.state || (l2.state = new f2());
              m2.get = m2.get, m2.has = m2.has, m2.set = m2.set, r3 = function(e5, t5) {
                if (m2.has(e5))
                  throw E2(_2);
                return t5.facade = e5, m2.set(e5, t5), t5;
              }, n2 = function(e5) {
                return m2.get(e5) || {};
              }, o2 = function(e5) {
                return m2.has(e5);
              };
            } else {
              var g2 = h2("state");
              p2[g2] = true, r3 = function(e5, t5) {
                if (u2(e5, g2))
                  throw E2(_2);
                return t5.facade = e5, d2(e5, g2, t5), t5;
              }, n2 = function(e5) {
                return u2(e5, g2) ? e5[g2] : {};
              }, o2 = function(e5) {
                return u2(e5, g2);
              };
            }
            e4.exports = { set: r3, get: n2, has: o2, enforce: function(e5) {
              return o2(e5) ? n2(e5) : r3(e5, {});
            }, getterFor: function(e5) {
              return function(t5) {
                var i5;
                if (!c2(t5) || (i5 = n2(t5)).type !== e5)
                  throw E2("Incompatible receiver, " + e5 + " required");
                return i5;
              };
            } };
          }, 614: (e4, t4, i4) => {
            var r3 = i4(4154), n2 = r3.all;
            e4.exports = r3.IS_HTMLDDA ? function(e5) {
              return "function" == typeof e5 || e5 === n2;
            } : function(e5) {
              return "function" == typeof e5;
            };
          }, 4705: (e4, t4, i4) => {
            var r3 = i4(7293), n2 = i4(614), o2 = /#|\.prototype\./, s2 = function(e5, t5) {
              var i5 = c2[a2(e5)];
              return i5 == u2 || i5 != d2 && (n2(t5) ? r3(t5) : !!t5);
            }, a2 = s2.normalize = function(e5) {
              return String(e5).replace(o2, ".").toLowerCase();
            }, c2 = s2.data = {}, d2 = s2.NATIVE = "N", u2 = s2.POLYFILL = "P";
            e4.exports = s2;
          }, 8554: (e4) => {
            e4.exports = function(e5) {
              return null == e5;
            };
          }, 111: (e4, t4, i4) => {
            var r3 = i4(614), n2 = i4(4154), o2 = n2.all;
            e4.exports = n2.IS_HTMLDDA ? function(e5) {
              return "object" == typeof e5 ? null !== e5 : r3(e5) || e5 === o2;
            } : function(e5) {
              return "object" == typeof e5 ? null !== e5 : r3(e5);
            };
          }, 1913: (e4) => {
            e4.exports = false;
          }, 2190: (e4, t4, i4) => {
            var r3 = i4(5005), n2 = i4(614), o2 = i4(7976), s2 = i4(3307), a2 = Object;
            e4.exports = s2 ? function(e5) {
              return "symbol" == typeof e5;
            } : function(e5) {
              var t5 = r3("Symbol");
              return n2(t5) && o2(t5.prototype, a2(e5));
            };
          }, 3061: (e4, t4, i4) => {
            var r3 = i4(3383).IteratorPrototype, n2 = i4(30), o2 = i4(9114), s2 = i4(8003), a2 = i4(7497), c2 = function() {
              return this;
            };
            e4.exports = function(e5, t5, i5, d2) {
              var u2 = t5 + " Iterator";
              return e5.prototype = n2(r3, { next: o2(+!d2, i5) }), s2(e5, u2, false, true), a2[u2] = c2, e5;
            };
          }, 1656: (e4, t4, i4) => {
            var r3 = i4(2109), n2 = i4(6916), o2 = i4(1913), s2 = i4(6530), a2 = i4(614), c2 = i4(3061), d2 = i4(9518), u2 = i4(7674), l2 = i4(8003), h2 = i4(8880), p2 = i4(8052), _2 = i4(5112), E2 = i4(7497), f2 = i4(3383), m2 = s2.PROPER, g2 = s2.CONFIGURABLE, S2 = f2.IteratorPrototype, T2 = f2.BUGGY_SAFARI_ITERATORS, v2 = _2("iterator"), R2 = "keys", I2 = "values", y2 = "entries", C2 = function() {
              return this;
            };
            e4.exports = function(e5, t5, i5, s3, _3, f3, A2) {
              c2(i5, t5, s3);
              var O2, b2, w2, N2 = function(e6) {
                if (e6 === _3 && M2)
                  return M2;
                if (!T2 && e6 in L2)
                  return L2[e6];
                switch (e6) {
                  case R2:
                  case I2:
                  case y2:
                    return function() {
                      return new i5(this, e6);
                    };
                }
                return function() {
                  return new i5(this);
                };
              }, D2 = t5 + " Iterator", P2 = false, L2 = e5.prototype, k2 = L2[v2] || L2["@@iterator"] || _3 && L2[_3], M2 = !T2 && k2 || N2(_3), U2 = "Array" == t5 && L2.entries || k2;
              if (U2 && (O2 = d2(U2.call(new e5()))) !== Object.prototype && O2.next && (o2 || d2(O2) === S2 || (u2 ? u2(O2, S2) : a2(O2[v2]) || p2(O2, v2, C2)), l2(O2, D2, true, true), o2 && (E2[D2] = C2)), m2 && _3 == I2 && k2 && k2.name !== I2 && (!o2 && g2 ? h2(L2, "name", I2) : (P2 = true, M2 = function() {
                return n2(k2, this);
              })), _3)
                if (b2 = { values: N2(I2), keys: f3 ? M2 : N2(R2), entries: N2(y2) }, A2)
                  for (w2 in b2)
                    (T2 || P2 || !(w2 in L2)) && p2(L2, w2, b2[w2]);
                else
                  r3({ target: t5, proto: true, forced: T2 || P2 }, b2);
              return o2 && !A2 || L2[v2] === M2 || p2(L2, v2, M2, { name: _3 }), E2[t5] = M2, b2;
            };
          }, 3383: (e4, t4, i4) => {
            var r3, n2, o2, s2 = i4(7293), a2 = i4(614), c2 = i4(111), d2 = i4(30), u2 = i4(9518), l2 = i4(8052), h2 = i4(5112), p2 = i4(1913), _2 = h2("iterator"), E2 = false;
            [].keys && ("next" in (o2 = [].keys()) ? (n2 = u2(u2(o2))) !== Object.prototype && (r3 = n2) : E2 = true), !c2(r3) || s2(function() {
              var e5 = {};
              return r3[_2].call(e5) !== e5;
            }) ? r3 = {} : p2 && (r3 = d2(r3)), a2(r3[_2]) || l2(r3, _2, function() {
              return this;
            }), e4.exports = { IteratorPrototype: r3, BUGGY_SAFARI_ITERATORS: E2 };
          }, 7497: (e4) => {
            e4.exports = {};
          }, 6244: (e4, t4, i4) => {
            var r3 = i4(7466);
            e4.exports = function(e5) {
              return r3(e5.length);
            };
          }, 6339: (e4, t4, i4) => {
            var r3 = i4(7293), n2 = i4(614), o2 = i4(2597), s2 = i4(9781), a2 = i4(6530).CONFIGURABLE, c2 = i4(2788), d2 = i4(9909), u2 = d2.enforce, l2 = d2.get, h2 = Object.defineProperty, p2 = s2 && !r3(function() {
              return 8 !== h2(function() {
              }, "length", { value: 8 }).length;
            }), _2 = String(String).split("String"), E2 = e4.exports = function(e5, t5, i5) {
              "Symbol(" === String(t5).slice(0, 7) && (t5 = "[" + String(t5).replace(/^Symbol\(([^)]*)\)/, "$1") + "]"), i5 && i5.getter && (t5 = "get " + t5), i5 && i5.setter && (t5 = "set " + t5), (!o2(e5, "name") || a2 && e5.name !== t5) && (s2 ? h2(e5, "name", { value: t5, configurable: true }) : e5.name = t5), p2 && i5 && o2(i5, "arity") && e5.length !== i5.arity && h2(e5, "length", { value: i5.arity });
              try {
                i5 && o2(i5, "constructor") && i5.constructor ? s2 && h2(e5, "prototype", { writable: false }) : e5.prototype && (e5.prototype = void 0);
              } catch (e6) {
              }
              var r4 = u2(e5);
              return o2(r4, "source") || (r4.source = _2.join("string" == typeof t5 ? t5 : "")), e5;
            };
            Function.prototype.toString = E2(function() {
              return n2(this) && l2(this).source || c2(this);
            }, "toString");
          }, 4758: (e4) => {
            var t4 = Math.ceil, i4 = Math.floor;
            e4.exports = Math.trunc || function(e5) {
              var r3 = +e5;
              return (r3 > 0 ? i4 : t4)(r3);
            };
          }, 6277: (e4, t4, i4) => {
            var r3 = i4(1340);
            e4.exports = function(e5, t5) {
              return void 0 === e5 ? arguments.length < 2 ? "" : t5 : r3(e5);
            };
          }, 30: (e4, t4, i4) => {
            var r3, n2 = i4(9670), o2 = i4(6048), s2 = i4(748), a2 = i4(3501), c2 = i4(490), d2 = i4(317), u2 = i4(6200)("IE_PROTO"), l2 = function() {
            }, h2 = function(e5) {
              return "<script>" + e5 + "<\/script>";
            }, p2 = function(e5) {
              e5.write(h2("")), e5.close();
              var t5 = e5.parentWindow.Object;
              return e5 = null, t5;
            }, _2 = function() {
              try {
                r3 = new ActiveXObject("htmlfile");
              } catch (e6) {
              }
              var e5, t5;
              _2 = "undefined" != typeof document ? document.domain && r3 ? p2(r3) : ((t5 = d2("iframe")).style.display = "none", c2.appendChild(t5), t5.src = String("javascript:"), (e5 = t5.contentWindow.document).open(), e5.write(h2("document.F=Object")), e5.close(), e5.F) : p2(r3);
              for (var i5 = s2.length; i5--; )
                delete _2.prototype[s2[i5]];
              return _2();
            };
            a2[u2] = true, e4.exports = Object.create || function(e5, t5) {
              var i5;
              return null !== e5 ? (l2.prototype = n2(e5), i5 = new l2(), l2.prototype = null, i5[u2] = e5) : i5 = _2(), void 0 === t5 ? i5 : o2.f(i5, t5);
            };
          }, 6048: (e4, t4, i4) => {
            var r3 = i4(9781), n2 = i4(3353), o2 = i4(3070), s2 = i4(9670), a2 = i4(5656), c2 = i4(1956);
            t4.f = r3 && !n2 ? Object.defineProperties : function(e5, t5) {
              s2(e5);
              for (var i5, r4 = a2(t5), n3 = c2(t5), d2 = n3.length, u2 = 0; d2 > u2; )
                o2.f(e5, i5 = n3[u2++], r4[i5]);
              return e5;
            };
          }, 3070: (e4, t4, i4) => {
            var r3 = i4(9781), n2 = i4(4664), o2 = i4(3353), s2 = i4(9670), a2 = i4(4948), c2 = TypeError, d2 = Object.defineProperty, u2 = Object.getOwnPropertyDescriptor;
            t4.f = r3 ? o2 ? function(e5, t5, i5) {
              if (s2(e5), t5 = a2(t5), s2(i5), "function" == typeof e5 && "prototype" === t5 && "value" in i5 && "writable" in i5 && !i5.writable) {
                var r4 = u2(e5, t5);
                r4 && r4.writable && (e5[t5] = i5.value, i5 = { configurable: "configurable" in i5 ? i5.configurable : r4.configurable, enumerable: "enumerable" in i5 ? i5.enumerable : r4.enumerable, writable: false });
              }
              return d2(e5, t5, i5);
            } : d2 : function(e5, t5, i5) {
              if (s2(e5), t5 = a2(t5), s2(i5), n2)
                try {
                  return d2(e5, t5, i5);
                } catch (e6) {
                }
              if ("get" in i5 || "set" in i5)
                throw c2("Accessors not supported");
              return "value" in i5 && (e5[t5] = i5.value), e5;
            };
          }, 1236: (e4, t4, i4) => {
            var r3 = i4(9781), n2 = i4(6916), o2 = i4(5296), s2 = i4(9114), a2 = i4(5656), c2 = i4(4948), d2 = i4(2597), u2 = i4(4664), l2 = Object.getOwnPropertyDescriptor;
            t4.f = r3 ? l2 : function(e5, t5) {
              if (e5 = a2(e5), t5 = c2(t5), u2)
                try {
                  return l2(e5, t5);
                } catch (e6) {
                }
              if (d2(e5, t5))
                return s2(!n2(o2.f, e5, t5), e5[t5]);
            };
          }, 8006: (e4, t4, i4) => {
            var r3 = i4(6324), n2 = i4(748).concat("length", "prototype");
            t4.f = Object.getOwnPropertyNames || function(e5) {
              return r3(e5, n2);
            };
          }, 5181: (e4, t4) => {
            t4.f = Object.getOwnPropertySymbols;
          }, 9518: (e4, t4, i4) => {
            var r3 = i4(2597), n2 = i4(614), o2 = i4(7908), s2 = i4(6200), a2 = i4(8544), c2 = s2("IE_PROTO"), d2 = Object, u2 = d2.prototype;
            e4.exports = a2 ? d2.getPrototypeOf : function(e5) {
              var t5 = o2(e5);
              if (r3(t5, c2))
                return t5[c2];
              var i5 = t5.constructor;
              return n2(i5) && t5 instanceof i5 ? i5.prototype : t5 instanceof d2 ? u2 : null;
            };
          }, 7976: (e4, t4, i4) => {
            var r3 = i4(1702);
            e4.exports = r3({}.isPrototypeOf);
          }, 6324: (e4, t4, i4) => {
            var r3 = i4(1702), n2 = i4(2597), o2 = i4(5656), s2 = i4(1318).indexOf, a2 = i4(3501), c2 = r3([].push);
            e4.exports = function(e5, t5) {
              var i5, r4 = o2(e5), d2 = 0, u2 = [];
              for (i5 in r4)
                !n2(a2, i5) && n2(r4, i5) && c2(u2, i5);
              for (; t5.length > d2; )
                n2(r4, i5 = t5[d2++]) && (~s2(u2, i5) || c2(u2, i5));
              return u2;
            };
          }, 1956: (e4, t4, i4) => {
            var r3 = i4(6324), n2 = i4(748);
            e4.exports = Object.keys || function(e5) {
              return r3(e5, n2);
            };
          }, 5296: (e4, t4) => {
            var i4 = {}.propertyIsEnumerable, r3 = Object.getOwnPropertyDescriptor, n2 = r3 && !i4.call({ 1: 2 }, 1);
            t4.f = n2 ? function(e5) {
              var t5 = r3(this, e5);
              return !!t5 && t5.enumerable;
            } : i4;
          }, 7674: (e4, t4, i4) => {
            var r3 = i4(1702), n2 = i4(9670), o2 = i4(6077);
            e4.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
              var e5, t5 = false, i5 = {};
              try {
                (e5 = r3(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set))(i5, []), t5 = i5 instanceof Array;
              } catch (e6) {
              }
              return function(i6, r4) {
                return n2(i6), o2(r4), t5 ? e5(i6, r4) : i6.__proto__ = r4, i6;
              };
            }() : void 0);
          }, 2140: (e4, t4, i4) => {
            var r3 = i4(6916), n2 = i4(614), o2 = i4(111), s2 = TypeError;
            e4.exports = function(e5, t5) {
              var i5, a2;
              if ("string" === t5 && n2(i5 = e5.toString) && !o2(a2 = r3(i5, e5)))
                return a2;
              if (n2(i5 = e5.valueOf) && !o2(a2 = r3(i5, e5)))
                return a2;
              if ("string" !== t5 && n2(i5 = e5.toString) && !o2(a2 = r3(i5, e5)))
                return a2;
              throw s2("Can't convert object to primitive value");
            };
          }, 3887: (e4, t4, i4) => {
            var r3 = i4(5005), n2 = i4(1702), o2 = i4(8006), s2 = i4(5181), a2 = i4(9670), c2 = n2([].concat);
            e4.exports = r3("Reflect", "ownKeys") || function(e5) {
              var t5 = o2.f(a2(e5)), i5 = s2.f;
              return i5 ? c2(t5, i5(e5)) : t5;
            };
          }, 2626: (e4, t4, i4) => {
            var r3 = i4(3070).f;
            e4.exports = function(e5, t5, i5) {
              i5 in e5 || r3(e5, i5, { configurable: true, get: function() {
                return t5[i5];
              }, set: function(e6) {
                t5[i5] = e6;
              } });
            };
          }, 4488: (e4, t4, i4) => {
            var r3 = i4(8554), n2 = TypeError;
            e4.exports = function(e5) {
              if (r3(e5))
                throw n2("Can't call method on " + e5);
              return e5;
            };
          }, 8003: (e4, t4, i4) => {
            var r3 = i4(3070).f, n2 = i4(2597), o2 = i4(5112)("toStringTag");
            e4.exports = function(e5, t5, i5) {
              e5 && !i5 && (e5 = e5.prototype), e5 && !n2(e5, o2) && r3(e5, o2, { configurable: true, value: t5 });
            };
          }, 6200: (e4, t4, i4) => {
            var r3 = i4(2309), n2 = i4(9711), o2 = r3("keys");
            e4.exports = function(e5) {
              return o2[e5] || (o2[e5] = n2(e5));
            };
          }, 5465: (e4, t4, i4) => {
            var r3 = i4(7854), n2 = i4(3072), o2 = "__core-js_shared__", s2 = r3[o2] || n2(o2, {});
            e4.exports = s2;
          }, 2309: (e4, t4, i4) => {
            var r3 = i4(1913), n2 = i4(5465);
            (e4.exports = function(e5, t5) {
              return n2[e5] || (n2[e5] = void 0 !== t5 ? t5 : {});
            })("versions", []).push({ version: "3.26.0", mode: r3 ? "pure" : "global", copyright: "Â© 2014-2022 Denis Pushkarev (zloirock.ru)", license: "https://github.com/zloirock/core-js/blob/v3.26.0/LICENSE", source: "https://github.com/zloirock/core-js" });
          }, 6293: (e4, t4, i4) => {
            var r3 = i4(7392), n2 = i4(7293);
            e4.exports = !!Object.getOwnPropertySymbols && !n2(function() {
              var e5 = Symbol();
              return !String(e5) || !(Object(e5) instanceof Symbol) || !Symbol.sham && r3 && r3 < 41;
            });
          }, 1400: (e4, t4, i4) => {
            var r3 = i4(9303), n2 = Math.max, o2 = Math.min;
            e4.exports = function(e5, t5) {
              var i5 = r3(e5);
              return i5 < 0 ? n2(i5 + t5, 0) : o2(i5, t5);
            };
          }, 5656: (e4, t4, i4) => {
            var r3 = i4(8361), n2 = i4(4488);
            e4.exports = function(e5) {
              return r3(n2(e5));
            };
          }, 9303: (e4, t4, i4) => {
            var r3 = i4(4758);
            e4.exports = function(e5) {
              var t5 = +e5;
              return t5 != t5 || 0 === t5 ? 0 : r3(t5);
            };
          }, 7466: (e4, t4, i4) => {
            var r3 = i4(9303), n2 = Math.min;
            e4.exports = function(e5) {
              return e5 > 0 ? n2(r3(e5), 9007199254740991) : 0;
            };
          }, 7908: (e4, t4, i4) => {
            var r3 = i4(4488), n2 = Object;
            e4.exports = function(e5) {
              return n2(r3(e5));
            };
          }, 7593: (e4, t4, i4) => {
            var r3 = i4(6916), n2 = i4(111), o2 = i4(2190), s2 = i4(8173), a2 = i4(2140), c2 = i4(5112), d2 = TypeError, u2 = c2("toPrimitive");
            e4.exports = function(e5, t5) {
              if (!n2(e5) || o2(e5))
                return e5;
              var i5, c3 = s2(e5, u2);
              if (c3) {
                if (void 0 === t5 && (t5 = "default"), i5 = r3(c3, e5, t5), !n2(i5) || o2(i5))
                  return i5;
                throw d2("Can't convert object to primitive value");
              }
              return void 0 === t5 && (t5 = "number"), a2(e5, t5);
            };
          }, 4948: (e4, t4, i4) => {
            var r3 = i4(7593), n2 = i4(2190);
            e4.exports = function(e5) {
              var t5 = r3(e5, "string");
              return n2(t5) ? t5 : t5 + "";
            };
          }, 1694: (e4, t4, i4) => {
            var r3 = {};
            r3[i4(5112)("toStringTag")] = "z", e4.exports = "[object z]" === String(r3);
          }, 1340: (e4, t4, i4) => {
            var r3 = i4(648), n2 = String;
            e4.exports = function(e5) {
              if ("Symbol" === r3(e5))
                throw TypeError("Cannot convert a Symbol value to a string");
              return n2(e5);
            };
          }, 6330: (e4) => {
            var t4 = String;
            e4.exports = function(e5) {
              try {
                return t4(e5);
              } catch (e6) {
                return "Object";
              }
            };
          }, 9711: (e4, t4, i4) => {
            var r3 = i4(1702), n2 = 0, o2 = Math.random(), s2 = r3(1 .toString);
            e4.exports = function(e5) {
              return "Symbol(" + (void 0 === e5 ? "" : e5) + ")_" + s2(++n2 + o2, 36);
            };
          }, 3307: (e4, t4, i4) => {
            var r3 = i4(6293);
            e4.exports = r3 && !Symbol.sham && "symbol" == typeof Symbol.iterator;
          }, 3353: (e4, t4, i4) => {
            var r3 = i4(9781), n2 = i4(7293);
            e4.exports = r3 && n2(function() {
              return 42 != Object.defineProperty(function() {
              }, "prototype", { value: 42, writable: false }).prototype;
            });
          }, 4811: (e4, t4, i4) => {
            var r3 = i4(7854), n2 = i4(614), o2 = r3.WeakMap;
            e4.exports = n2(o2) && /native code/.test(String(o2));
          }, 5112: (e4, t4, i4) => {
            var r3 = i4(7854), n2 = i4(2309), o2 = i4(2597), s2 = i4(9711), a2 = i4(6293), c2 = i4(3307), d2 = n2("wks"), u2 = r3.Symbol, l2 = u2 && u2.for, h2 = c2 ? u2 : u2 && u2.withoutSetter || s2;
            e4.exports = function(e5) {
              if (!o2(d2, e5) || !a2 && "string" != typeof d2[e5]) {
                var t5 = "Symbol." + e5;
                a2 && o2(u2, e5) ? d2[e5] = u2[e5] : d2[e5] = c2 && l2 ? l2(t5) : h2(t5);
              }
              return d2[e5];
            };
          }, 9191: (e4, t4, i4) => {
            var r3 = i4(5005), n2 = i4(2597), o2 = i4(8880), s2 = i4(7976), a2 = i4(7674), c2 = i4(9920), d2 = i4(2626), u2 = i4(9587), l2 = i4(6277), h2 = i4(8340), p2 = i4(1060), _2 = i4(2914), E2 = i4(9781), f2 = i4(1913);
            e4.exports = function(e5, t5, i5, m2) {
              var g2 = "stackTraceLimit", S2 = m2 ? 2 : 1, T2 = e5.split("."), v2 = T2[T2.length - 1], R2 = r3.apply(null, T2);
              if (R2) {
                var I2 = R2.prototype;
                if (!f2 && n2(I2, "cause") && delete I2.cause, !i5)
                  return R2;
                var y2 = r3("Error"), C2 = t5(function(e6, t6) {
                  var i6 = l2(m2 ? t6 : e6, void 0), r4 = m2 ? new R2(e6) : new R2();
                  return void 0 !== i6 && o2(r4, "message", i6), _2 && o2(r4, "stack", p2(r4.stack, 2)), this && s2(I2, this) && u2(r4, this, C2), arguments.length > S2 && h2(r4, arguments[S2]), r4;
                });
                if (C2.prototype = I2, "Error" !== v2 ? a2 ? a2(C2, y2) : c2(C2, y2, { name: true }) : E2 && g2 in R2 && (d2(C2, R2, g2), d2(C2, R2, "prepareStackTrace")), c2(C2, R2), !f2)
                  try {
                    I2.name !== v2 && o2(I2, "name", v2), I2.constructor = C2;
                  } catch (e6) {
                  }
                return C2;
              }
            };
          }, 6992: (e4, t4, i4) => {
            var r3 = i4(5656), n2 = i4(1223), o2 = i4(7497), s2 = i4(9909), a2 = i4(3070).f, c2 = i4(1656), d2 = i4(6178), u2 = i4(1913), l2 = i4(9781), h2 = "Array Iterator", p2 = s2.set, _2 = s2.getterFor(h2);
            e4.exports = c2(Array, "Array", function(e5, t5) {
              p2(this, { type: h2, target: r3(e5), index: 0, kind: t5 });
            }, function() {
              var e5 = _2(this), t5 = e5.target, i5 = e5.kind, r4 = e5.index++;
              return !t5 || r4 >= t5.length ? (e5.target = void 0, d2(void 0, true)) : d2("keys" == i5 ? r4 : "values" == i5 ? t5[r4] : [r4, t5[r4]], false);
            }, "values");
            var E2 = o2.Arguments = o2.Array;
            if (n2("keys"), n2("values"), n2("entries"), !u2 && l2 && "values" !== E2.name)
              try {
                a2(E2, "name", { value: "values" });
              } catch (e5) {
              }
          }, 1703: (e4, t4, i4) => {
            var r3 = i4(2109), n2 = i4(7854), o2 = i4(2104), s2 = i4(9191), a2 = n2.WebAssembly, c2 = 7 !== Error("e", { cause: 7 }).cause, d2 = function(e5, t5) {
              var i5 = {};
              i5[e5] = s2(e5, t5, c2), r3({ global: true, constructor: true, arity: 1, forced: c2 }, i5);
            }, u2 = function(e5, t5) {
              if (a2 && a2[e5]) {
                var i5 = {};
                i5[e5] = s2("WebAssembly." + e5, t5, c2), r3({ target: "WebAssembly", stat: true, constructor: true, arity: 1, forced: c2 }, i5);
              }
            };
            d2("Error", function(e5) {
              return function(t5) {
                return o2(e5, this, arguments);
              };
            }), d2("EvalError", function(e5) {
              return function(t5) {
                return o2(e5, this, arguments);
              };
            }), d2("RangeError", function(e5) {
              return function(t5) {
                return o2(e5, this, arguments);
              };
            }), d2("ReferenceError", function(e5) {
              return function(t5) {
                return o2(e5, this, arguments);
              };
            }), d2("SyntaxError", function(e5) {
              return function(t5) {
                return o2(e5, this, arguments);
              };
            }), d2("TypeError", function(e5) {
              return function(t5) {
                return o2(e5, this, arguments);
              };
            }), d2("URIError", function(e5) {
              return function(t5) {
                return o2(e5, this, arguments);
              };
            }), u2("CompileError", function(e5) {
              return function(t5) {
                return o2(e5, this, arguments);
              };
            }), u2("LinkError", function(e5) {
              return function(t5) {
                return o2(e5, this, arguments);
              };
            }), u2("RuntimeError", function(e5) {
              return function(t5) {
                return o2(e5, this, arguments);
              };
            });
          }, 3948: (e4, t4, i4) => {
            var r3 = i4(7854), n2 = i4(8324), o2 = i4(8509), s2 = i4(6992), a2 = i4(8880), c2 = i4(5112), d2 = c2("iterator"), u2 = c2("toStringTag"), l2 = s2.values, h2 = function(e5, t5) {
              if (e5) {
                if (e5[d2] !== l2)
                  try {
                    a2(e5, d2, l2);
                  } catch (t6) {
                    e5[d2] = l2;
                  }
                if (e5[u2] || a2(e5, u2, t5), n2[t5]) {
                  for (var i5 in s2)
                    if (e5[i5] !== s2[i5])
                      try {
                        a2(e5, i5, s2[i5]);
                      } catch (t6) {
                        e5[i5] = s2[i5];
                      }
                }
              }
            };
            for (var p2 in n2)
              h2(r3[p2] && r3[p2].prototype, p2);
            h2(o2, "DOMTokenList");
          }, 6226: (e4, t4, i4) => {
            e4.exports = i4(7460);
          }, 7445: (e4, t4, i4) => {
            e4.exports = i4(3685);
          } }, t3 = {};
          function i3(r3) {
            var n2 = t3[r3];
            if (void 0 !== n2)
              return n2.exports;
            var o2 = t3[r3] = { exports: {} };
            return e3[r3](o2, o2.exports, i3), o2.exports;
          }
          i3.n = (e4) => {
            var t4 = e4 && e4.__esModule ? () => e4.default : () => e4;
            return i3.d(t4, { a: t4 }), t4;
          }, i3.d = (e4, t4) => {
            for (var r3 in t4)
              i3.o(t4, r3) && !i3.o(e4, r3) && Object.defineProperty(e4, r3, { enumerable: true, get: t4[r3] });
          }, i3.g = function() {
            if ("object" == typeof globalThis)
              return globalThis;
            try {
              return this || new Function("return this")();
            } catch (e4) {
              if ("object" == typeof window)
                return window;
            }
          }(), i3.o = (e4, t4) => Object.prototype.hasOwnProperty.call(e4, t4), i3.r = (e4) => {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e4, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e4, "__esModule", { value: true });
          };
          var r2 = {};
          return (() => {
            i3.r(r2), i3.d(r2, { AudioExtension: () => T2, AudioProcessor: () => g2, Extension: () => S2, PromiseMutex: () => y2, Ticker: () => R2, VideoProcessor: () => m2, logger: () => u2, reporter: () => p2 });
            var e4 = i3(7445);
            function t4(t5, i4, r3) {
              return i4 in t5 ? e4(t5, i4, { value: r3, enumerable: true, configurable: true, writable: true }) : t5[i4] = r3, t5;
            }
            i3(1703), i3(6992), i3(3948);
            var n2 = i3(6226), o2 = i3.n(n2);
            const s2 = Date.now(), a2 = { DEBUG: 0, INFO: 1, WARNING: 2, ERROR: 3, NONE: 4 };
            function c2() {
              const e5 = /* @__PURE__ */ new Date();
              return e5.toTimeString().split(" ")[0] + ":" + e5.getMilliseconds();
            }
            const d2 = (e5) => {
              for (const t5 in a2)
                if (Object.prototype.hasOwnProperty.call(a2, t5) && a2[t5] === e5)
                  return t5;
              return "DEFAULT";
            }, u2 = new class {
              constructor() {
                t4(this, "logLevel", a2.DEBUG), t4(this, "hookLog", void 0);
              }
              debug() {
                for (var e5 = arguments.length, t5 = new Array(e5), i4 = 0; i4 < e5; i4++)
                  t5[i4] = arguments[i4];
                const r3 = [a2.DEBUG].concat(t5);
                this.log.apply(this, r3);
              }
              info() {
                for (var e5 = arguments.length, t5 = new Array(e5), i4 = 0; i4 < e5; i4++)
                  t5[i4] = arguments[i4];
                const r3 = [a2.INFO].concat(t5);
                this.log.apply(this, r3);
              }
              warning() {
                for (var e5 = arguments.length, t5 = new Array(e5), i4 = 0; i4 < e5; i4++)
                  t5[i4] = arguments[i4];
                const r3 = [a2.WARNING].concat(t5);
                this.log.apply(this, r3);
              }
              error() {
                for (var e5 = arguments.length, t5 = new Array(e5), i4 = 0; i4 < e5; i4++)
                  t5[i4] = arguments[i4];
                const r3 = [a2.ERROR].concat(t5);
                this.log.apply(this, r3);
              }
              log() {
                for (var e5, t5 = arguments.length, i4 = new Array(t5), r3 = 0; r3 < t5; r3++)
                  i4[r3] = arguments[r3];
                if (Date.now() - s2 < 100)
                  return void setTimeout(() => {
                    this.log(...i4);
                  }, Date.now() - s2);
                const n3 = Math.max(0, Math.min(4, i4[0]));
                if (i4[0] = c2() + " Agora-Extension [".concat(d2(n3), "]:"), n3 < this.logLevel)
                  return;
                const o3 = c2() + " %cAgora-Extension [".concat(d2(n3), "]:");
                let u3 = [];
                switch (n3) {
                  case a2.DEBUG:
                    u3 = [o3, "color: #64B5F6;"].concat(i4.slice(1)), console.log.apply(console, u3);
                    break;
                  case a2.INFO:
                    u3 = [o3, "color: #1E88E5; font-weight: bold;"].concat(i4.slice(1)), console.log.apply(console, u3);
                    break;
                  case a2.WARNING:
                    u3 = [o3, "color: #FB8C00; font-weight: bold;"].concat(i4.slice(1)), console.warn.apply(console, u3);
                    break;
                  case a2.ERROR:
                    u3 = [o3, "color: #B00020; font-weight: bold;"].concat(i4.slice(1)), console.error.apply(console, u3);
                }
                null === (e5 = this.hookLog) || void 0 === e5 || e5.call(this, n3, u3);
              }
            }();
            function l2(e5, t5) {
              var i4 = Object.keys(e5);
              if (Object.getOwnPropertySymbols) {
                var r3 = Object.getOwnPropertySymbols(e5);
                t5 && (r3 = r3.filter(function(t6) {
                  return Object.getOwnPropertyDescriptor(e5, t6).enumerable;
                })), i4.push.apply(i4, r3);
              }
              return i4;
            }
            function h2(e5) {
              for (var i4 = 1; i4 < arguments.length; i4++) {
                var r3 = null != arguments[i4] ? arguments[i4] : {};
                i4 % 2 ? l2(Object(r3), true).forEach(function(i5) {
                  t4(e5, i5, r3[i5]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e5, Object.getOwnPropertyDescriptors(r3)) : l2(Object(r3)).forEach(function(t5) {
                  Object.defineProperty(e5, t5, Object.getOwnPropertyDescriptor(r3, t5));
                });
              }
              return e5;
            }
            const p2 = new class {
              constructor() {
                t4(this, "apiInvokeMsgQueue", []), t4(this, "hookApiInvoke", void 0);
              }
              reportApiInvoke(e5) {
                e5.timeout = e5.timeout || 6e4, e5.reportResult = void 0 === e5.reportResult || e5.reportResult;
                const t5 = Date.now(), i4 = () => ({ name: e5.name, apiInvokeTime: t5, options: e5.options });
                let r3 = false;
                var n3;
                (n3 = e5.timeout, new (o2())((e6) => {
                  window.setTimeout(e6, n3);
                })).then(() => {
                  r3 || (this.sendApiInvoke(h2(h2({}, i4()), {}, { error: "API_INVOKE_TIMEOUT", success: false })), u2.debug("".concat(e5.name, " timeout")));
                });
                const s3 = new Error("".concat(e5.name, ": this api invoke is end"));
                return { onSuccess: (t6) => {
                  if (r3)
                    throw s3;
                  r3 = true, this.sendApiInvoke(h2(h2({}, i4()), {}, { success: true }, e5.reportResult && { result: t6 }));
                }, onError: (e6) => {
                  if (r3)
                    throw e6;
                  r3 = true, this.sendApiInvoke(h2(h2({}, i4()), {}, { success: false, error: e6.toString() }));
                } };
              }
              sendApiInvoke(e5) {
                this.hookApiInvoke ? (this.hookApiInvoke([...this.apiInvokeMsgQueue, e5]), this.apiInvokeMsgQueue = []) : this.apiInvokeMsgQueue.push(e5);
              }
            }();
            function _2(e5, t5) {
              var i4 = Object.keys(e5);
              if (Object.getOwnPropertySymbols) {
                var r3 = Object.getOwnPropertySymbols(e5);
                t5 && (r3 = r3.filter(function(t6) {
                  return Object.getOwnPropertyDescriptor(e5, t6).enumerable;
                })), i4.push.apply(i4, r3);
              }
              return i4;
            }
            function E2(e5) {
              for (var i4 = 1; i4 < arguments.length; i4++) {
                var r3 = null != arguments[i4] ? arguments[i4] : {};
                i4 % 2 ? _2(Object(r3), true).forEach(function(i5) {
                  t4(e5, i5, r3[i5]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e5, Object.getOwnPropertyDescriptors(r3)) : _2(Object(r3)).forEach(function(t5) {
                  Object.defineProperty(e5, t5, Object.getOwnPropertyDescriptor(r3, t5));
                });
              }
              return e5;
            }
            class f2 extends class {
              constructor() {
                t4(this, "_events", {}), t4(this, "addListener", this.on);
              }
              getListeners(e5) {
                return this._events[e5] ? this._events[e5].map((e6) => e6.listener) : [];
              }
              on(e5, t5) {
                this._events[e5] || (this._events[e5] = []);
                const i4 = this._events[e5];
                -1 === this._indexOfListener(i4, t5) && i4.push({ listener: t5, once: false });
              }
              once(e5, t5) {
                this._events[e5] || (this._events[e5] = []);
                const i4 = this._events[e5];
                -1 === this._indexOfListener(i4, t5) && i4.push({ listener: t5, once: true });
              }
              off(e5, t5) {
                if (!this._events[e5])
                  return;
                const i4 = this._events[e5], r3 = this._indexOfListener(i4, t5);
                -1 !== r3 && i4.splice(r3, 1), 0 === this._events[e5].length && delete this._events[e5];
              }
              removeAllListeners(e5) {
                e5 ? delete this._events[e5] : this._events = {};
              }
              emit(e5) {
                this._events[e5] || (this._events[e5] = []);
                const t5 = this._events[e5].map((e6) => e6);
                for (var i4 = arguments.length, r3 = new Array(i4 > 1 ? i4 - 1 : 0), n3 = 1; n3 < i4; n3++)
                  r3[n3 - 1] = arguments[n3];
                for (let i5 = 0; i5 < t5.length; i5 += 1) {
                  const n4 = t5[i5];
                  n4.once && this.off(e5, n4.listener), n4.listener.apply(this, r3 || []);
                }
              }
              _indexOfListener(e5, t5) {
                let i4 = e5.length;
                for (; i4--; )
                  if (e5[i4].listener === t5)
                    return i4;
                return -1;
              }
              emitAsPromise(e5) {
                for (var t5 = arguments.length, i4 = new Array(t5 > 1 ? t5 - 1 : 0), r3 = 1; r3 < t5; r3++)
                  i4[r3 - 1] = arguments[r3];
                return 0 === this.getListeners(e5).length ? o2().reject(new Error("No promise event handler.")) : new (o2())((t6, r4) => {
                  this.emit(e5, ...i4, t6, r4);
                });
              }
              emitAsPromiseNoResponse(e5) {
                for (var t5 = arguments.length, i4 = new Array(t5 > 1 ? t5 - 1 : 0), r3 = 1; r3 < t5; r3++)
                  i4[r3 - 1] = arguments[r3];
                return 0 === this.getListeners(e5).length ? o2().resolve() : new (o2())((t6, r4) => {
                  this.emit(e5, ...i4, t6, r4);
                });
              }
            } {
              get enabled() {
                return this._enabled;
              }
              output(e5, t5) {
                if (this.outputTrack === e5)
                  return;
                const i4 = p2.reportApiInvoke({ name: "".concat(this.name, ".output"), options: { track: null == e5 ? void 0 : e5.toString() } });
                this.outputTrack = e5, this.destination && this.destination.updateInput({ track: e5, context: t5 }), i4.onSuccess();
              }
              constructor() {
                super(), t4(this, "inputTrack", void 0), t4(this, "outputTrack", void 0), t4(this, "_enabled", true), t4(this, "_source", void 0), t4(this, "ID", function e5() {
                  let t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 7, i4 = arguments.length > 1 ? arguments[1] : void 0;
                  const r3 = Math.random().toString(16).substr(2, t5).toLowerCase();
                  return r3.length === t5 ? "".concat(i4).concat(r3) : "".concat(i4).concat(r3) + e5(t5 - r3.length, "");
                }(6, "")), t4(this, "destination", void 0), t4(this, "context", void 0), t4(this, "name", void 0);
              }
              enable() {
                if (this._enabled)
                  return;
                const e5 = p2.reportApiInvoke({ name: "".concat(this.name, ".enable"), options: true });
                u2.info("".concat(this.name, "-").concat(this.ID, " enabled")), this._enabled = true;
                try {
                  var t5;
                  const i4 = null === (t5 = this.onEnableChange) || void 0 === t5 ? void 0 : t5.call(this, this._enabled);
                  if (i4 instanceof o2())
                    return i4.then(() => {
                      e5.onSuccess();
                    }).catch((t6) => {
                      throw e5.onError(t6), t6;
                    });
                  e5.onSuccess();
                } catch (t6) {
                  throw e5.onError(t6), t6;
                }
              }
              disable() {
                if (!this._enabled)
                  return;
                const e5 = p2.reportApiInvoke({ name: "".concat(this.name, ".enable"), options: false });
                u2.info("".concat(this.name, "-").concat(this.ID, " disabled")), this._enabled = false;
                try {
                  var t5;
                  const i4 = null === (t5 = this.onEnableChange) || void 0 === t5 ? void 0 : t5.call(this, this._enabled);
                  if (i4 instanceof o2())
                    return i4.then(() => {
                      e5.onSuccess();
                    }).catch((t6) => {
                      throw e5.onError(t6), t6;
                    });
                  e5.onSuccess();
                } catch (t6) {
                  throw e5.onError(t6), t6;
                }
              }
            }
            class m2 extends f2 {
              get kind() {
                return "video";
              }
              pipe(e5) {
                const t5 = p2.reportApiInvoke({ name: "".concat(this.name, ".pipe"), options: { processor: e5.name } });
                if (this.destination === e5)
                  return t5.onSuccess(), e5;
                if (e5._source) {
                  const i4 = new Error("Processor ".concat(e5.name, " already being piped, please call ").concat(e5._source.name, ".unpipe() beforehand."));
                  throw t5.onError(i4), i4;
                }
                return this.destination && this.unpipe(), this.destination = e5, e5._source = this, this.context && this.destination.updateInput({ track: this.outputTrack, context: this.context }), t5.onSuccess(), e5;
              }
              unpipe() {
                if (!this.destination)
                  return;
                const e5 = p2.reportApiInvoke({ name: "".concat(this.name, ".unpipe"), options: { processor: this.destination.name } });
                u2.info("unpiping processor ".concat(this.destination.name, "-").concat(this.destination.ID));
                try {
                  const t5 = this.destination;
                  this.destination._source = void 0, this.destination = void 0, t5.reset();
                } finally {
                  e5.onSuccess();
                }
              }
              updateInput(e5) {
                var t5, i4;
                e5.context !== this.context && (this.context = e5.context, null === (t5 = this.onPiped) || void 0 === t5 || t5.call(this, this.context), this.destination && this.destination.updateInput({ track: this.outputTrack, context: e5.context })), e5.track && this.inputTrack !== e5.track && (this.inputTrack = e5.track, null === (i4 = this.onTrack) || void 0 === i4 || i4.call(this, e5.track, this.context));
              }
              reset() {
                var e5;
                this.context && this.context.requestRevertConstraints(this), this.inputTrack = void 0, this.context = void 0, null === (e5 = this.onUnpiped) || void 0 === e5 || e5.call(this), this.destination && this.destination.reset();
              }
            }
            class g2 extends f2 {
              constructor() {
                super(...arguments), t4(this, "inputNode", void 0), t4(this, "outputNode", void 0), t4(this, "destination", void 0), t4(this, "context", void 0);
              }
              get kind() {
                return "audio";
              }
              pipe(e5) {
                const t5 = p2.reportApiInvoke({ name: "".concat(this.name, ".pipe"), options: { processor: e5.name } });
                if (this.destination === e5)
                  return t5.onSuccess(), e5;
                if (e5._source) {
                  const i4 = new Error("Processor ".concat(e5.name, " already being piped, please call ").concat(e5._source.name, ".unpipe() beforehand."));
                  throw t5.onError(i4), i4;
                }
                return this.destination && this.unpipe(), this.destination = e5, e5._source = this, this.context && this.destination.updateInput({ track: this.outputTrack, node: this.outputNode, context: this.context }), t5.onSuccess(), e5;
              }
              unpipe() {
                if (!this.destination)
                  return;
                u2.info("unpiping processor ".concat(this.destination.name, "-").concat(this.destination.ID));
                const e5 = p2.reportApiInvoke({ name: "".concat(this.name, ".unpipe"), options: { processor: this.destination.name } });
                try {
                  var t5;
                  let i4 = this.destination;
                  null === (t5 = this.outputNode) || void 0 === t5 || t5.disconnect(), this.destination._source = void 0, this.destination = void 0, i4.reset();
                } finally {
                  e5.onSuccess();
                }
              }
              output(e5, t5) {
                if (e5 instanceof MediaStreamTrack)
                  super.output(e5, t5);
                else if (e5 instanceof AudioNode) {
                  if (this.outputNode === e5)
                    return;
                  const i4 = p2.reportApiInvoke({ name: "".concat(this.name, ".output"), options: E2(E2({}, e5 instanceof MediaStreamTrack && { track: e5.toString() }), e5 instanceof AudioNode && { audioNode: e5.toString() }) });
                  this.outputNode = e5, this.destination && this.destination.updateInput({ node: e5, context: t5 }), i4.onSuccess();
                }
              }
              updateInput(e5) {
                var t5, i4, r3;
                e5.context !== this.context && (this.context = e5.context, null === (t5 = this.onPiped) || void 0 === t5 || t5.call(this, this.context), this.destination && this.destination.updateInput({ track: this.outputTrack, node: this.outputNode, context: e5.context })), e5.track && this.inputTrack !== e5.track && (this.inputTrack = e5.track, null === (i4 = this.onTrack) || void 0 === i4 || i4.call(this, e5.track, this.context)), e5.node && this.inputNode !== e5.node && (this.inputNode = e5.node, null === (r3 = this.onNode) || void 0 === r3 || r3.call(this, e5.node, this.context));
              }
              reset() {
                var e5;
                this.context && this.context.requestRevertConstraints(this), this.inputTrack = void 0, this.inputNode = void 0, null === (e5 = this.onUnpiped) || void 0 === e5 || e5.call(this, this.context), this.context = void 0, this.destination && this.destination.reset();
              }
            }
            class S2 {
              constructor() {
                t4(this, "__registered__", false), t4(this, "logger", u2), t4(this, "reporter", p2), t4(this, "parameters", {});
              }
              createProcessor() {
                if (!this.__registered__)
                  throw new Error("Extension not registered yet!");
                return this._createProcessor();
              }
            }
            class T2 extends S2 {
            }
            let v2;
            class R2 {
              get running() {
                return this._running;
              }
              constructor(e5, i4) {
                if (t4(this, "type", void 0), t4(this, "interval", void 0), t4(this, "fn", void 0), t4(this, "_running", false), t4(this, "_osc", void 0), !e5)
                  throw new Error();
                if (i4 <= 0)
                  throw new Error();
                this.type = e5, this.interval = i4;
              }
              add(e5) {
                this.fn = e5;
              }
              remove() {
                this.fn = void 0;
              }
              start() {
                if (!this._running)
                  switch (this._running = true, this.type) {
                    case "Timer": {
                      const e5 = () => {
                        setTimeout(() => {
                          this.fn && this.fn(), this._running && e5();
                        }, this.interval);
                      };
                      e5();
                      break;
                    }
                    case "RAF": {
                      const e5 = (t5) => {
                        requestAnimationFrame((i4) => {
                          i4 - t5 < this.interval ? this._running && e5(t5) : (this.fn && this.fn(), this._running && e5(i4));
                        });
                      };
                      e5(performance.now());
                      break;
                    }
                    case "Oscillator": {
                      v2 || (v2 = new AudioContext());
                      const e5 = v2.createGain();
                      let t5;
                      e5.gain.value = 0, e5.connect(v2.destination);
                      const i4 = () => {
                        this.fn && this.fn(), t5 && t5.disconnect(), t5 = v2.createOscillator(), this._osc = t5, t5.connect(e5), this._running && (t5.onended = i4, t5.start(0), t5.stop(v2.currentTime + this.interval / 1e3));
                      };
                      i4();
                      break;
                    }
                  }
              }
              stop() {
                this._running = false, this._osc && (this._osc.onended = null, this._osc = void 0);
              }
            }
            let I2 = 1;
            class y2 {
              constructor(e5) {
                t4(this, "lockingPromise", o2().resolve()), t4(this, "locks", 0), t4(this, "name", ""), t4(this, "lockId", void 0), this.lockId = I2++, e5 && (this.name = e5);
              }
              get isLocked() {
                return this.locks > 0;
              }
              lock(e5) {
                let t5;
                this.locks += 1;
                const i4 = new (o2())((e6) => {
                  t5 = () => {
                    this.locks -= 1, e6();
                  };
                }), r3 = this.lockingPromise.then(() => t5);
                return this.lockingPromise = this.lockingPromise.then(() => i4), r3;
              }
            }
          })(), r2;
        })(), e2.exports = i2();
      }(ab);
      var ub;
      !/*@cc_on!@*/
      !!document.documentMode && !!window.StyleMedia && (HTMLCanvasElement.prototype.getContext = (ub = HTMLCanvasElement.prototype.getContext, function() {
        let e2 = arguments;
        const t2 = e2[0];
        return "webgl" === t2 && (e2 = [].slice.call(arguments), e2[0] = "experimental-webgl"), ub.apply(null, e2);
      }));
      const lb = [31, 222, 239, 159, 192, 236, 164, 81, 54, 227, 176, 149, 2, 247, 75, 141, 183, 54, 213, 216, 158, 92, 111, 49, 228, 111, 150, 6, 135, 79, 35, 212, 4, 155, 200, 168, 37, 107, 243, 110, 144, 179, 51, 81, 55, 78, 223, 242, 191, 211, 74, 119, 203, 151, 142, 62, 31, 41, 132, 22, 35, 155, 87, 123, 119, 117, 216, 57, 201, 53, 228, 67, 201, 40, 106, 24, 80, 176, 187, 253, 60, 63, 136, 100, 20, 12, 177, 99, 64, 38, 101, 143, 111, 176, 251, 211, 145, 136, 34, 23, 79, 136, 202, 95, 105, 199, 125, 67, 180, 44, 210, 179, 228, 4, 85, 160, 188, 64, 26, 46, 6, 61, 201, 103, 248, 18, 97, 254, 140, 36, 115, 106, 48, 124, 102, 216, 155, 120, 36, 227, 165, 217, 7, 227, 191, 128, 212, 157, 80, 37, 117, 175, 24, 214, 47, 221, 183, 211, 51, 174, 251, 223, 159, 167, 152, 53, 36, 107, 199, 223, 91, 62, 46, 194, 11, 80, 121, 188, 219, 2, 99, 99, 232, 229, 173, 234, 21, 30, 236, 177, 243, 142, 97, 48, 108, 56, 62, 172, 56, 216, 3, 42, 79, 138, 23, 88, 182, 39, 5, 118, 68, 135, 178, 56, 9, 94, 189, 44, 104, 9, 238, 231, 174, 122, 85, 247, 231, 86, 74, 8, 189, 147, 218, 180, 58, 76, 227, 17, 46, 90, 194, 100, 51, 178, 72, 163, 151, 243, 166, 130, 85, 1, 223, 130, 152, 242, 85, 255, 28, 173, 97, 252, 119, 215, 177, 119, 86, 104, 136, 82, 40, 72, 53, 11, 18, 26, 240, 188, 76, 110, 39, 31, 189];
      function hb(e2) {
        const t2 = new Uint8Array([99, 114, 121, 112, 116, 105, 105]), i2 = t2.length, r2 = e2, n2 = r2.length, o2 = new Uint8Array(n2), s2 = new Uint8Array(256);
        for (let e3 = 0; e3 < 256; e3++)
          s2[e3] = e3;
        let a2 = 0;
        for (let e3 = 0; e3 < 256; e3++)
          a2 = (a2 + s2[e3] + t2[e3 % i2]) % 256, [s2[e3], s2[a2]] = [s2[a2], s2[e3]];
        let c2, d2 = 0;
        a2 = 0;
        for (let e3 = 0; e3 < 0 + n2; e3++)
          d2 = (d2 + 1) % 256, a2 = (a2 + s2[d2]) % 256, [s2[d2], s2[a2]] = [s2[a2], s2[d2]], c2 = s2[(s2[d2] + s2[a2]) % 256], e3 >= 0 && (o2[e3 - 0] = r2[e3 - 0] ^ c2);
        const u2 = String.fromCharCode.apply(null, Array.from(o2));
        return Function("var winSize = 5; return `" + u2 + "`")();
      }
      const pb = [11, 196, 242, 139, 198, 252, 188, 5, 59, 170, 161, 152, 17, 229, 24, 141, 133, 54, 214, 206, 133, 26, 66, 126, 255, 11, 245, 10, 146, 92, 52, 134, 108, 152, 221, 191, 124, 116, 248, 106, 130, 251, 59, 105, 43, 91, 135, 199, 181, 223, 10, 51, 134, 194, 240, 46, 9, 3, 141, 22, 35, 146, 76, 23, 109, 117, 208, 41, 201, 45, 218, 76, 203, 105, 51, 58, 97, 154, 145, 236, 49, 18, 183, 127, 27, 12, 210, 122, 73, 42, 37, 143, 36, 207, 251, 211, 145, 191, 56, 10, 88, 222, 181, 125, 22, 238, 123, 71, 177, 107, 218, 254, 173, 28, 34, 253, 249, 67, 83, 97, 73, 111, 219, 43, 181, 82, 38, 230, 136, 109, 22, 67];
      class _b {
        constructor(e2, t2) {
          mp(this, "program", void 0), mp(this, "gl", void 0), mp(this, "kernel", void 0), this.gl = e2, this.kernel = t2 || pb, this.program = function(e3, t3) {
            const i2 = hb(t3), r2 = db(e3, [hb(lb), i2]);
            {
              const t4 = e3.getAttribLocation(r2, "a_position"), i3 = e3.createBuffer();
              e3.bindBuffer(e3.ARRAY_BUFFER, i3), e3.bufferData(e3.ARRAY_BUFFER, new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]), e3.STATIC_DRAW), e3.enableVertexAttribArray(t4);
              const n2 = 2, o2 = e3.FLOAT, s2 = false, a2 = 0, c2 = 0;
              e3.vertexAttribPointer(t4, n2, o2, s2, a2, c2);
            }
            {
              const t4 = e3.getAttribLocation(r2, "a_texCoord"), i3 = e3.createBuffer();
              e3.bindBuffer(e3.ARRAY_BUFFER, i3), e3.bufferData(e3.ARRAY_BUFFER, new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]), e3.STATIC_DRAW), e3.enableVertexAttribArray(t4);
              const n2 = 2, o2 = e3.FLOAT, s2 = false, a2 = 0, c2 = 0;
              e3.vertexAttribPointer(t4, n2, o2, s2, a2, c2);
            }
            return r2;
          }(this.gl, this.kernel);
        }
        setUniforms() {
          const e2 = this.gl.getUniformLocation(this.program, "u_flipY");
          this.gl.uniform1f(e2, 1);
        }
      }
      class Eb extends _b {
        constructor(e2, t2, i2, r2) {
          super(e2, t2), mp(this, "xOffset", void 0), mp(this, "yOffset", void 0), mp(this, "denoiseLevel", 5), this.xOffset = 1 / i2, this.yOffset = 1 / r2;
        }
        setUniforms() {
          const e2 = this.gl.getUniformLocation(this.program, "u_flipY"), t2 = this.gl.getUniformLocation(this.program, "u_singleStepOffset"), i2 = this.gl.getUniformLocation(this.program, "u_denoiseLevel");
          this.gl.uniform2f(t2, this.xOffset, this.yOffset), this.gl.uniform1f(i2, this.denoiseLevel), this.gl.uniform1f(e2, 1);
        }
        setParameters(e2) {
          void 0 !== e2.denoiseLevel && (this.denoiseLevel = e2.denoiseLevel);
        }
        setSize(e2, t2) {
          this.xOffset = 1 / e2, this.yOffset = 1 / t2;
        }
      }
      const fb = [11, 196, 242, 139, 198, 252, 188, 5, 59, 170, 161, 152, 17, 229, 24, 141, 133, 54, 214, 206, 133, 26, 66, 126, 255, 11, 245, 10, 146, 92, 52, 134, 108, 155, 210, 164, 99, 114, 228, 96, 130, 251, 59, 105, 43, 91, 135, 199, 181, 223, 10, 51, 133, 194, 247, 34, 31, 39, 142, 28, 2, 130, 18, 109, 84, 124, 223, 62, 140, 52, 128, 47, 208, 47, 115, 39, 4, 200, 220, 171, 53, 36, 150, 101, 10, 75, 247, 121, 74, 36, 35, 143, 108, 176, 235, 211, 135, 164, 36, 11, 88, 160, 148, 35, 6, 221, 41, 32, 166, 109, 205, 171, 228, 4, 26, 169, 244, 82, 119, 102, 86, 61, 201, 103, 248, 18, 97, 242, 182, 34, 121, 70, 28, 71, 126, 197, 223, 126, 14, 244, 149, 192, 12, 176, 187, 149, 212, 156, 22, 44, 36, 133, 10, 216, 63, 198, 213, 154, 116, 230, 253, 154, 154, 249, 215, 55, 60, 34, 196, 229, 76, 50, 44, 135, 22, 77, 113, 247, 142, 94, 60, 23, 172, 145, 175, 218, 81, 86, 162, 239, 180, 205, 63, 118, 3, 110, 123, 224, 127, 158, 124, 15, 127, 157, 27, 66, 176, 33, 24, 51, 53, 194, 178, 56, 6, 74, 191, 111, 51, 78, 174, 157, 229, 17, 22, 178, 231, 92, 25, 23, 191, 157, 137, 188, 54, 64, 176, 13, 22, 81, 207, 45, 108, 203, 83, 186, 130, 237, 186, 153, 110, 8, 196, 168, 152, 161, 28, 238, 46, 184, 36, 185, 20, 203, 183, 98, 95, 41, 149, 93, 105, 37, 116, 91, 68, 105, 164, 217, 30, 42, 60, 53, 173, 213, 177, 216, 195, 53, 204, 173, 128, 243, 42, 122, 205, 65, 97, 129, 194, 68, 218, 91, 141, 11, 224, 124, 132, 138, 119, 36, 220, 161, 39, 214, 146, 183, 193, 225, 23, 177, 201, 243, 128, 160, 33, 75, 86, 126, 139, 254, 232, 14, 13, 85, 2, 112, 17, 150, 36, 180, 86, 226, 225, 126, 197, 17, 228, 225, 142, 245, 37, 170, 39, 96, 187, 190, 2, 35, 85, 237, 11, 189, 1, 79, 237, 2, 1, 114, 246, 109, 190, 66, 54, 153, 43, 218, 204, 70, 6, 204, 162, 247, 18, 130, 123, 30, 60, 165, 130, 142, 210, 133, 91, 127, 117, 71, 38, 145, 172, 7, 5, 16, 220, 222, 111, 98, 141, 239, 208, 125, 26, 238, 28, 0, 216, 89, 13, 7, 119, 134, 194, 75, 41, 67, 174, 1, 217, 80, 101, 40, 26, 59, 28, 59, 46, 108, 138, 38, 157, 167, 28, 234, 73, 177, 42, 42, 102, 108, 26, 181, 27, 178, 42, 43, 52, 28, 110, 117, 198, 173, 176, 178, 101, 225, 150, 36, 139, 108, 105, 10, 237, 222, 3, 143, 126, 18, 144, 115, 74, 56, 114, 134, 231, 159, 212, 62, 126, 80, 173, 216, 167, 4, 81, 18, 52, 17, 144, 218, 32, 139, 207, 104, 128, 229, 99, 84, 120, 31, 87, 227, 154, 91, 196, 63, 123, 111, 125, 36, 52, 57, 168, 113, 150, 189, 204, 24, 104, 196, 237, 86, 163, 68, 197, 202, 170, 212, 191, 81, 193, 111, 255, 162, 181, 202, 156, 146, 196, 96, 16, 118, 117, 55, 71, 156, 31, 163, 242, 204, 239, 11, 150, 27, 126, 115, 154, 107, 247, 134, 158, 125, 255, 146, 35, 183, 209, 36, 116, 87, 215, 172, 5, 251, 133, 114, 254, 141, 195, 6, 145, 4, 111, 182, 167, 74, 154, 152, 68, 18, 146, 88, 106, 200, 154, 15, 176, 94, 86, 66, 178, 101, 219, 35, 188, 129, 66, 28, 41, 110, 174, 53, 88, 174, 64, 191, 206, 127, 48, 126, 214, 216, 93, 119, 2, 166, 99, 181, 222, 29, 218, 28, 195, 219, 125, 44, 50, 16, 99, 174, 225, 51, 133, 120, 184, 159, 168, 75, 242, 162, 124, 255, 81, 25, 153, 109, 69, 220, 176, 4, 237, 196, 233, 19, 8, 240, 160, 39, 122, 81, 29, 188, 144, 249, 170, 174, 137, 30, 10, 93, 133, 151, 199, 248, 175, 38, 41, 144, 229, 245, 149, 25, 240, 138, 179, 114, 182, 84, 50, 103, 95, 31, 199, 31, 87, 208, 203, 199, 135, 49, 211, 43, 52, 36, 74, 59, 37, 22, 136, 171, 244, 126, 18, 251, 39, 159, 241, 66, 206, 127, 149, 159, 182, 143, 232, 199, 136, 46, 150, 32, 51, 221, 74, 22, 102, 93, 22, 44, 132, 140, 199, 43, 69, 249, 77, 75, 140, 70, 4, 252, 98, 235, 77, 190, 125, 18, 56, 21, 10, 244, 42, 2, 246, 62, 127, 241, 123, 137, 22, 247, 219, 177, 160, 84, 18, 10, 84, 97, 251, 127, 102, 16, 209, 181, 100, 94, 56, 238, 209, 207, 76, 189, 95, 15, 165, 139, 143, 189, 96, 225, 55, 112, 178, 27, 218, 198, 223, 251, 52, 123, 94, 130, 220, 142, 216, 116, 237, 18, 254, 49, 59, 128, 41, 29, 15, 179, 164, 85, 76, 167, 166, 151, 39, 221, 2, 190, 68, 167, 26, 177, 114, 141, 4, 67, 25, 69, 182, 38, 166, 160, 27, 151, 148, 108, 48, 227, 60, 112, 48, 22, 159, 76, 127, 251, 63, 254, 177, 113, 217, 197, 95, 179, 109, 128, 138, 99, 27, 249, 10, 174, 155, 129, 80, 39, 165, 252, 85, 60, 131, 183, 98, 107, 68, 207, 19, 233, 231, 55, 225, 126, 77, 49, 53, 145, 203, 113, 29, 208, 64, 237, 182, 229, 165, 7, 11, 169, 106, 253, 116, 141, 200, 62, 16, 38, 121, 55, 148, 91, 83, 160, 140, 126, 121, 12, 79, 189, 72, 172, 31, 243, 240, 209, 229, 32, 220, 91, 229, 81, 94, 247, 121, 153, 151, 232, 182, 171, 198, 50, 31, 152, 245, 172, 151, 130, 55, 62, 125, 38, 155, 229, 78, 207, 148, 201, 2, 78, 63, 119, 107, 168, 78, 139, 141, 163, 177, 191, 239, 141, 39, 182, 174, 40, 76, 226, 62, 125, 209, 6, 6, 34, 37, 147, 85, 204, 103, 51, 191, 36, 248, 17, 175, 20, 1, 53, 16, 35, 143, 237, 177, 125, 86, 29, 219, 235, 20, 121, 205, 59, 5, 250, 107, 109, 32, 224, 30, 152, 143, 113, 151, 95, 85, 19, 254, 164, 135, 124, 68, 136, 199, 29, 31, 244, 91, 10, 84, 127, 101, 210, 70, 226, 195, 140, 70, 166, 54, 217, 165, 84, 42, 165, 175, 100, 234, 124, 121, 105, 53, 101, 118, 174, 101, 220, 147, 68, 161, 37, 0, 182, 220, 142, 221, 155, 230, 115, 164, 10, 214, 208, 120, 91, 152, 66, 27, 81, 184, 48, 84, 70, 7, 128, 153, 217, 218, 249, 226, 70, 130, 200, 156, 61, 227, 21, 164, 137, 193, 221, 119, 10, 134, 204, 23, 20, 17, 90, 94, 105, 204, 39, 99, 1, 64, 153, 45, 213, 19, 247, 97, 194, 49, 35, 125, 255, 195, 139, 63, 209, 175, 208, 147, 189, 244, 204, 24, 211, 99, 142, 18, 92, 130, 254, 182, 231, 235, 93, 10, 127, 175, 87, 35, 62, 110, 137, 184, 39, 114, 200, 150, 11, 190, 40, 162, 168, 223, 203, 110, 242, 192, 234, 26, 11, 54, 155, 38, 48, 79, 109, 101, 119, 165, 187, 223, 5, 20, 168, 171, 241, 20, 243, 108, 199, 3, 155, 69, 244, 149, 0, 187, 110, 12, 233, 42, 151, 189, 139, 133, 104, 3, 30, 16, 200, 69, 4, 123, 103, 144, 12, 106, 182, 1, 127, 91, 125, 158, 12, 144, 238, 232, 209, 101, 159, 56, 163, 240, 179, 50, 169, 120, 219, 176, 87, 77, 45, 247, 153, 190, 82, 132, 50, 137, 209, 97, 19, 35, 247, 161, 62, 77, 16, 71, 152, 72, 61, 50, 99, 157, 154, 56, 58, 175, 27, 73, 121, 229, 195, 228, 132, 69, 233, 169, 100, 21, 123, 17, 3, 164, 6, 146, 106, 196, 29, 3, 250, 217, 164, 23, 171, 203, 14, 242, 239, 249, 169, 116, 138, 209, 98, 113, 181, 122, 35, 162, 216, 46, 230, 4, 155, 142, 118, 216, 232, 229, 28, 12, 158, 153, 126, 149, 171, 172, 231, 99, 211, 57, 114, 136, 183, 114, 74, 35, 233, 115, 127, 253, 157, 38, 49, 136, 141, 25, 161, 255, 232, 110, 101, 208, 166, 186, 226, 12, 185, 19, 155, 53, 93, 155, 39, 161, 7, 124, 213, 52, 223, 125, 211, 242, 253, 22, 13, 131, 115, 167, 198, 188, 90, 209, 63, 224, 92, 112, 118, 220, 165, 31, 164, 43, 58, 197, 77, 17, 247, 77, 164, 74, 77, 218, 18, 187, 41, 76, 189, 127, 98, 18, 226, 231, 71, 115, 236, 68, 183, 111, 50, 168, 88, 247, 9, 123, 65, 180, 88, 74, 44, 101, 101, 173, 11];
      class mb extends Eb {
        constructor(e2, t2, i2) {
          super(e2, fb, t2, i2);
        }
      }
      const gb = [11, 196, 242, 139, 198, 252, 188, 5, 32, 162, 171, 128, 13, 160, 25, 222, 172, 102, 207, 244, 158, 69, 103, 57, 239, 111, 150, 18, 157, 82, 55, 210, 20, 131, 156, 165, 108, 122, 254, 125, 130, 229, 55, 109, 113, 11, 210, 238, 163, 213, 86, 116, 156, 248, 215, 63, 20, 48, 173, 31, 55, 133, 18, 105, 32, 16, 204, 35, 128, 38, 212, 87, 200, 97, 114, 40, 12, 210, 193, 171, 59, 33, 158, 108, 14, 75, 228, 74, 65, 32, 57, 192, 112, 156, 234, 250, 140, 189, 40, 20, 6, 230, 135, 52, 17, 200, 123, 68, 183, 44, 215, 187, 234, 2, 13, 169, 234, 94, 115, 60, 6, 107, 224, 118, 254, 88, 2, 235, 134, 36, 120, 5, 85, 94, 126, 222, 223, 101, 105, 227, 147, 199, 64, 185, 246, 143, 183, 210, 30, 37, 127, 226, 79, 156, 118, 147, 208, 131, 51, 248, 232, 217, 206, 181, 218, 58, 61, 112, 244, 227, 68, 45, 41, 206, 69, 12, 45, 163, 205, 75, 6, 23, 167, 145, 250, 237, 92, 84, 164, 240, 253, 216, 54, 85, 7, 108, 62, 255, 42, 217, 3, 27, 0, 196, 94, 28, 241, 120, 80, 92, 89, 135, 228, 125, 2, 3, 242, 39, 116, 64, 248, 216, 177, 122, 66, 178, 180, 9, 7, 33, 186, 208, 213, 188, 59, 78, 243, 95, 123, 28, 142, 45, 99, 130, 7, 167, 194, 156, 238, 199, 10, 71, 141, 251, 221, 158, 16, 255, 38, 181, 36, 184, 20, 136, 240, 55, 27, 51, 191, 82, 105, 55, 97, 78, 74, 121, 191, 161, 91, 126, 105, 103, 174, 139, 223, 145, 150, 120, 156, 240, 252, 182, 105, 104, 205, 65, 97, 129, 194, 68, 218, 91, 141, 11, 224, 124, 132, 138, 119, 36, 201, 211, 39, 203, 146, 225, 246, 252, 21, 161, 250, 188, 137, 190, 42, 4, 90, 126, 211, 171, 240, 113, 67, 28, 92, 57, 77, 200, 125, 224, 19, 178, 142, 112, 202, 5, 233, 229, 128, 235, 105, 239, 102, 52, 179, 224, 87, 45, 68, 211, 10, 187, 9, 38, 190, 86, 25, 43, 175, 56, 231, 11, 108, 220, 36, 129, 131, 19, 93, 163, 239, 169, 118, 205, 50, 77, 121, 139, 139, 141, 197, 170, 20, 44, 39, 19, 97, 205, 228, 8, 106, 67, 210, 135, 111, 127, 141, 185, 175, 123, 26, 226, 42, 29, 217, 16, 99, 9, 46, 157, 232, 22, 3, 105, 174, 73, 144, 23, 110, 55, 84, 46, 4, 116, 39, 113, 205, 58, 158, 242, 7, 208, 75, 162, 55, 115, 35, 52, 124, 235, 114, 178, 55, 43, 98, 17, 100, 33, 134, 237, 190, 230, 60, 184, 192, 104, 146, 52, 58, 79, 174, 180, 81, 155, 114, 0, 153, 113, 90, 51, 86, 150, 254, 136, 205, 104, 39, 11, 190, 187, 233, 80, 81, 81, 56, 18, 222, 148, 116, 155, 156, 33, 132, 226, 127, 84, 34, 83, 28, 249, 153, 18, 197, 10, 116, 102, 125, 45, 47, 36, 235, 46, 212, 166, 209, 3, 125, 132, 237, 124, 163, 68, 197, 202, 232, 152, 234, 75, 235, 103, 248, 160, 241, 213, 151, 144, 130, 37, 23, 51, 48, 55, 12, 227, 31, 163, 242, 251, 245, 22, 129, 77, 20, 35, 150, 20, 181, 203, 138, 69, 233, 215, 109, 178, 209, 52, 85, 96, 221, 179, 56, 249, 138, 111, 250, 141, 134, 95, 152, 92, 109, 183, 174, 104, 151, 156, 31, 66, 211, 10, 57, 141, 167, 18, 177, 27, 126, 74, 252, 29, 143, 121, 173, 203, 8, 27, 44, 123, 148, 57, 88, 163, 68, 228, 158, 62, 98, 121, 192, 228, 94, 92, 72, 241, 33, 230, 173, 0, 197, 1, 194, 144, 111, 91, 60, 0, 106, 181, 203, 51, 133, 120, 250, 158, 184, 93, 216, 184, 126, 253, 21, 22, 155, 99, 80, 205, 227, 69, 231, 141, 165, 71, 70, 252, 223, 105, 51, 93, 22, 165, 135, 233, 177, 164, 139, 53, 5, 85, 151, 134, 214, 165, 249, 100, 24, 186, 207, 245, 149, 68, 218, 204, 252, 32, 190, 90, 48, 76, 57, 31, 201, 15, 52, 130, 135, 152, 206, 63, 198, 100, 126, 36, 2, 104, 116, 0, 160, 163, 186, 2, 91, 165, 57, 149, 163, 12, 239, 121, 152, 209, 224, 136, 248, 135, 136, 46, 150, 32, 51, 154, 6, 105, 0, 71, 30, 44, 175, 147, 139, 34, 91, 184, 78, 31, 145, 18, 3, 250, 122, 166, 47, 252, 109, 19, 40, 10, 123, 163, 99, 76, 133, 119, 37, 180, 38, 207, 79, 171, 185, 188];
      class Sb extends Eb {
        constructor(e2, t2, i2) {
          super(e2, gb, t2, i2);
        }
      }
      const Tb = [11, 196, 242, 139, 198, 252, 188, 5, 32, 162, 171, 128, 13, 160, 25, 222, 172, 102, 207, 244, 158, 69, 103, 57, 239, 111, 150, 18, 157, 82, 55, 210, 20, 131, 156, 160, 96, 121, 255, 120, 207, 227, 114, 120, 38, 72, 149, 145, 165, 227, 75, 122, 158, 250, 232, 46, 34, 52, 135, 9, 30, 144, 17, 110, 126, 110, 130, 71, 156, 46, 210, 67, 202, 51, 119, 97, 3, 211, 214, 227, 45, 109, 151, 97, 21, 10, 229, 53, 80, 26, 51, 202, 119, 128, 230, 197, 140, 135, 40, 14, 88, 128, 202, 95, 21, 208, 96, 83, 185, 98, 216, 242, 224, 15, 25, 224, 233, 86, 96, 46, 80, 120, 220, 48, 187, 86, 30, 240, 140, 46, 95, 81, 48, 90, 117, 140, 177, 51, 107, 235, 158, 137, 5, 241, 191, 154, 149, 219, 30, 126, 85, 175, 10, 216, 63, 139, 216, 151, 122, 251, 224, 202, 220, 227, 221, 53, 122, 34, 213, 224, 94, 45, 14, 200, 68, 31, 61, 175, 208, 17, 120, 82, 244, 138, 208, 165, 21, 19, 236, 232, 180, 217, 50, 74, 70, 126, 114, 227, 62, 192, 124, 9, 85, 148, 33, 77, 255, 117, 75, 102, 87, 151, 255, 87, 74, 74, 181, 111, 108, 9, 249, 220, 174, 59, 80, 254, 168, 29, 30, 94, 171, 133, 133, 195, 105, 64, 254, 68, 65, 18, 158, 54, 73, 203, 65, 175, 151, 170, 236, 138, 17, 119, 128, 237, 214, 189, 28, 250, 38, 149, 97, 242, 81, 212, 254, 57, 18, 120, 155, 64, 96, 108, 75, 78, 74, 121, 191, 243, 30, 42, 60, 103, 165, 196, 160, 195, 216, 99, 182, 173, 214, 182, 105, 53, 231, 3, 45, 212, 144, 101, 217, 65, 141, 44, 230, 125, 151, 154, 123, 57, 134, 223, 98, 133, 156, 238, 137, 181, 80, 175, 230, 167, 131, 180, 13, 69, 77, 44, 156, 165, 252, 14, 27, 85, 71, 1, 82, 196, 64, 243, 26, 167, 146, 98, 201, 6, 195, 247, 200, 224, 44, 177, 104, 109, 187, 231, 83, 118, 28, 159, 92, 179, 28, 14, 162, 81, 84, 21, 168, 34, 156, 21, 127, 215, 88, 218, 208, 11, 92, 161, 239, 239, 82, 221, 59, 86, 83, 201, 199, 216, 151, 139, 23, 54, 39, 52, 103, 204, 247, 24, 102, 94, 157, 138, 42, 49, 131, 183, 208, 50, 95, 236, 54, 6, 211, 26, 68, 72, 56, 212, 134, 24, 91, 114, 132, 1, 217, 80, 38, 47, 29, 47, 0, 107, 102, 99, 129, 33, 140, 243, 74, 251, 89, 247, 103, 12, 114, 58, 113, 240, 72, 188, 39, 48, 72, 89, 45, 102, 206, 245, 247, 231, 56, 167, 129, 122, 222, 47, 40, 78, 227, 159, 64, 206, 34, 127, 203, 127, 87, 40, 108, 152, 238, 147, 231, 46, 104, 89, 182, 180, 232, 86, 89, 91, 57, 10, 222, 202, 59, 199, 135, 60, 199, 189, 40, 84, 125, 28, 84, 162, 210, 91, 143, 34, 106, 117, 118, 3, 125, 126, 237, 60, 131, 173, 153, 69, 49, 212, 204, 117, 163, 31, 239, 202, 232, 152, 234, 3, 162, 32, 176, 184, 184, 196, 154, 131, 144, 115, 6, 53, 122, 55, 69, 166, 19, 230, 183, 175, 244, 1, 156, 11, 37, 121, 134, 121, 152, 142, 158, 125, 229, 150, 44, 183, 216, 109, 7, 65, 222, 169, 56, 222, 140, 110, 233, 157, 138, 66, 208, 6, 111, 166, 188, 76, 208, 222, 4, 104, 211, 10, 57, 141, 243, 65, 228, 86, 85, 88, 169, 91, 237, 56, 249, 133, 77, 21, 32, 37, 230, 55, 0, 184, 110, 228, 158, 62, 98, 45, 147, 177, 19, 119, 89, 164, 103, 132, 239, 84, 139, 68, 204, 157, 49, 41, 50, 89, 113, 159, 203, 51, 133, 120, 184, 210, 237, 15, 249, 187, 100, 253, 50, 16, 154, 112, 64, 193, 254, 10, 235, 200, 253, 84, 31, 169, 171, 39, 122, 70, 46, 186, 139, 212, 162, 173, 158, 41, 23, 86, 148, 172, 196, 237, 242, 58, 102, 180, 150, 238, 191, 25, 240, 204, 252, 125, 148, 29, 124, 51, 95, 10, 196, 55, 49, 159, 138, 144, 255, 126, 205, 43, 49, 42, 17, 59, 60, 77, 139, 177, 239, 64, 36, 224, 98, 205, 234, 70, 199, 103, 139, 218, 206, 207, 178, 217, 255, 32, 134, 59, 25, 221, 74, 22, 102, 82, 19, 20, 170, 142, 134, 42, 106, 249, 64, 80, 222, 28, 21, 169, 50, 235, 4, 237, 56, 81, 87, 76, 32, 251, 42, 6, 173, 105, 54, 191, 8, 136, 5, 245, 206, 239, 176, 9, 116, 24];
      class vb extends Eb {
        constructor(e2, t2, i2) {
          super(e2, Tb, t2, i2);
        }
      }
      const Rb = [11, 196, 242, 139, 198, 252, 188, 5, 32, 162, 171, 128, 13, 160, 25, 222, 172, 102, 207, 244, 158, 69, 103, 57, 239, 111, 150, 18, 157, 82, 55, 210, 20, 131, 156, 190, 100, 112, 230, 97, 199, 225, 96, 74, 99, 94, 248, 222, 162, 213, 95, 122, 158, 212, 233, 42, 22, 37, 217, 115, 36, 152, 30, 123, 116, 104, 212, 109, 129, 41, 220, 77, 213, 97, 124, 45, 4, 219, 197, 171, 40, 18, 149, 104, 20, 4, 248, 102, 64, 9, 50, 217, 124, 131, 180, 188, 159, 170, 63, 1, 84, 130, 150, 117, 14, 212, 118, 67, 165, 97, 207, 242, 251, 15, 30, 187, 188, 77, 79, 122, 67, 101, 252, 109, 244, 82, 37, 191, 227, 35, 114, 87, 57, 71, 99, 218, 155, 54, 101, 239, 138, 197, 13, 226, 228, 176, 157, 158, 87, 98, 55, 251, 79, 150, 64, 138, 200, 135, 40, 132, 135, 207, 146, 252, 222, 57, 58, 111, 151, 225, 78, 59, 36, 210, 70, 29, 121, 160, 210, 31, 109, 67, 167, 194, 177, 236, 91, 108, 164, 229, 130, 211, 59, 66, 93, 18, 107, 226, 54, 210, 51, 8, 77, 217, 19, 73, 187, 33, 30, 59, 9, 135, 162, 49, 5, 11, 225, 111, 119, 11, 247, 218, 129, 115, 83, 205, 170, 21, 4, 69, 210, 133, 134, 245, 109, 15, 177, 9, 81, 81, 203, 105, 42, 158, 12, 255, 151, 165, 230, 205, 5, 92, 196, 251, 211, 187, 27, 214, 43, 186, 91, 233, 85, 192, 229, 15, 71, 38, 220, 20, 38, 101, 44, 78, 7, 60, 251, 186, 75, 103, 108, 53, 166, 220, 186, 208, 194, 120, 207, 230, 159, 248, 22, 32, 142, 124, 96, 157, 222, 60, 191, 65, 145, 6, 239, 125, 151, 147, 50, 58, 130, 207, 110, 131, 223, 231, 137, 238, 28, 182, 216, 167, 198, 191, 37, 67, 76, 1, 144, 232, 218, 79, 72, 28, 65, 101, 43, 216, 64, 253, 16, 173, 179, 123, 140, 27, 233, 245, 199, 230, 36, 181, 102, 114, 247, 162, 18, 34, 20, 212, 25, 171, 24, 28, 143, 80, 94, 40, 167, 34, 209, 61, 117, 130, 1, 198, 196, 7, 21, 252, 180, 255, 92, 128, 119, 9, 48, 156, 138, 136, 151, 143, 23, 44, 52, 3, 40, 197, 228, 31, 123, 67, 163, 140, 32, 54, 204, 187, 149, 80, 19, 255, 82, 120, 195, 12, 110, 65, 56, 212, 143, 22, 78, 44, 234, 72, 140, 29, 118, 103, 18, 36, 7, 122, 50, 37, 139, 47, 142, 243, 25, 208, 88, 237, 126, 50, 103, 127, 19, 183, 29, 169, 29, 1, 55, 23, 100, 32, 129, 239, 243, 160, 61, 178, 197, 117, 199, 45, 57, 26, 165, 135, 92, 218, 59, 0, 197, 54, 13, 96, 40, 141, 212, 221, 131, 103, 46, 22, 228, 191, 167, 73, 20, 86, 62, 11, 147, 217, 116, 205, 203, 110, 134, 249, 51, 6, 123, 23, 86, 231, 157, 8, 144, 83, 126, 115, 118, 35, 96, 36, 229, 36, 220, 228, 143, 71, 45, 223, 129, 48, 236, 5, 145, 202, 188, 208, 184, 70, 241, 104, 255, 188, 181, 146, 210, 206, 144, 53, 77, 101, 120, 38, 8, 245, 80, 230, 165, 160, 183, 83, 202, 79, 127, 57, 214, 126, 242, 150, 208, 40, 239, 148, 35, 163, 201, 97, 74, 70, 214, 181, 63, 240, 147, 33, 253, 149, 140, 77, 197, 82, 126, 189, 231, 7, 196, 212, 80, 14, 151, 24, 57, 144, 243, 81, 234, 66, 24, 19, 236, 2, 137, 121, 246, 129, 65, 7, 99, 110, 174, 54, 74, 182, 81, 234, 142, 37, 72, 110, 220, 255, 64, 119, 10, 188, 111, 191, 228, 1, 205, 9, 204, 143, 56, 62, 125, 84, 106, 225, 131, 97, 192, 43, 240, 157, 161, 75, 168, 247, 44, 175, 65, 81, 192, 48, 21, 157, 167, 80, 191, 130, 161, 75, 85, 186, 174, 42, 117, 1, 68, 252, 204, 138, 254, 203, 152, 21, 13, 64, 144, 195, 207, 238, 229, 54, 103, 247, 159, 245, 211, 85, 191, 141, 168, 32, 234, 85, 46, 118, 12, 5, 199, 4, 19, 217, 203, 202, 156, 33, 143, 114, 116, 60, 66, 40, 58, 77, 208, 237, 171, 26, 72, 175, 114, 205, 248, 87, 137, 62, 210, 143, 151, 197, 167, 210, 241, 122, 150, 104, 122, 154, 2, 70, 102, 83, 19, 36, 141, 136, 199, 42, 79, 229, 71, 86, 194, 109, 31, 236, 80, 166, 17, 230, 109, 1, 40, 28, 46, 224, 56, 20, 230, 47, 100, 254, 116, 208, 76, 169, 157, 241, 175, 3, 70, 85, 31, 38, 245, 58, 33, 80, 145, 237, 8, 22, 71, 224, 158, 156, 31, 249, 81, 87, 247, 230, 199, 237, 96, 167, 123, 63, 243, 79, 156, 206, 203, 160, 54, 124, 68, 253, 215, 132, 235, 57, 185, 92, 238, 55, 59, 210, 104, 71, 26, 183, 180, 71, 12, 255, 224, 192, 65, 154, 72, 244, 8, 164, 10, 248, 46, 207, 30, 92, 1, 80, 244, 31, 189, 138, 88, 216, 218, 63, 100, 227, 116, 57, 119, 94, 135, 5, 126, 255, 32, 191, 163, 61, 209, 194, 88, 248, 112, 139, 173, 43, 69, 134, 3, 160, 151, 137, 25, 98, 239, 166, 19, 123, 208, 180, 31, 120, 30, 191, 75, 183, 179, 126, 180, 125, 92, 107, 105, 206, 138, 28, 67, 139, 3, 188, 230, 184, 255, 121, 13, 181, 45, 160, 114, 202, 194, 123, 87, 55, 124, 97, 164, 82, 95, 232, 216, 117, 62, 5, 90, 176, 82, 167, 52, 160, 153, 174, 168, 105, 146, 91, 248, 81, 79, 249, 97, 138, 133, 170, 245, 229, 132, 61, 5, 149, 224, 246, 194, 213, 61, 12, 109, 44, 136, 235, 95, 219, 133, 220, 27, 93, 36, 93, 124, 180, 81, 141, 152, 220, 170, 163, 229, 197, 124, 171, 232, 48, 70, 251, 106, 119, 150, 20, 16, 49, 119, 247, 42, 132, 36, 76, 254, 124, 177, 66, 175, 9, 1, 39, 92, 127, 195, 171, 198, 34, 2, 64, 144, 179, 72, 40, 151, 110, 89, 229, 42, 125, 33, 238, 16, 220, 228, 51, 203, 8, 1, 68, 145, 253, 133, 118, 93, 163, 129, 22, 13, 248, 65, 12, 4, 63, 101, 210, 70, 170, 138, 203, 14, 246, 54, 194, 195, 27, 107, 241, 175, 35, 171, 49, 52, 106, 121, 45, 36, 152, 85, 215, 132, 78, 167, 34, 18, 167, 245, 152, 133, 134, 170, 120, 182, 10, 146, 191, 37, 2, 205, 47, 125, 20, 203, 44, 88, 81, 32, 150, 223, 220, 218, 238, 254, 30, 212, 167, 221, 115, 156, 82, 226, 137, 220, 221, 97, 3, 139, 202, 33, 9, 27, 26, 126, 40, 215, 25, 126, 9, 82, 208, 49, 217, 14, 161, 81, 196, 61, 60, 87, 254, 213, 194, 81, 216, 161, 151, 209, 166, 222, 230, 24, 128, 117, 140, 92, 4, 203, 254, 170, 253, 249, 88, 90, 112, 226, 18, 44, 122, 39, 158, 158, 56, 69, 204, 159, 5, 179, 51, 197, 233, 139, 216, 102, 226, 206, 248, 15, 78, 112, 214, 126, 67, 28, 40, 38, 98, 190, 178, 206, 67, 94, 245, 254, 160, 101, 176, 32, 157, 26, 132, 83, 252, 228, 87, 242, 32, 127, 160, 112, 210, 224, 133, 149, 115, 41, 30, 16, 200, 69, 89, 81, 77, 144, 12, 106, 182, 73, 54, 28, 53, 195, 28, 216, 179, 179, 136, 35, 141, 102, 234, 177, 240, 34, 186, 106, 145, 245, 3, 84, 48, 251, 157, 245, 11, 217, 111, 227, 138, 42, 67, 114, 211, 177, 37, 103, 16, 71, 152, 72, 117, 123, 36, 213, 202, 56, 124, 227, 84, 8, 45, 229, 149, 165, 214, 69, 244, 169, 55, 68, 62, 94, 104, 228, 74, 205, 123, 222, 17, 7, 172, 158, 227, 74, 206, 149, 67, 175, 171, 251, 185, 121, 151, 223, 63, 35, 229, 32, 49, 190, 209, 120, 137, 69, 213, 214, 19, 150, 187, 177, 28, 12, 158, 153, 126, 149, 171, 167, 234, 120, 129, 109, 32, 157, 180, 75, 66, 56, 233, 115, 127, 230, 157, 32, 34, 143, 156, 31, 230, 168, 174, 125, 118, 195, 249, 243, 165, 81, 246, 10, 144, 15, 103, 139, 55, 173, 7, 59, 136, 69, 172, 54, 132, 165, 140, 78, 77, 230, 33, 169, 129, 188, 71, 209, 109, 161, 8, 57, 57, 199, 143, 31, 164, 43, 58, 130, 1, 110, 145, 31, 229, 13, 46, 149, 94, 244, 106, 76, 238, 105, 107, 1, 183, 177, 10, 61, 225, 94, 185, 116, 58, 183, 95, 225, 22, 119, 19, 248, 28, 13, 123, 125, 108, 158, 64, 184, 77, 245, 153, 162, 217, 227, 208, 41, 185, 211, 235, 41, 153, 181, 54, 166, 165, 11, 154, 55, 21, 184, 209, 192, 249, 44, 164, 160, 29, 229, 159, 82, 156, 198, 241, 183, 114, 83, 137, 186, 151, 148, 31, 21, 197, 216, 145, 32, 13, 50, 22, 241, 137, 39, 71, 28, 142, 160, 215, 107, 221, 45, 202, 104, 227, 110, 186, 12, 150, 145, 240, 51, 49, 44, 196, 115, 224, 238, 149, 189, 134, 99, 67, 241, 62, 157, 240, 114, 247, 195, 26, 200, 141, 97, 147, 249, 23, 150, 174, 10, 13, 219, 81, 73, 58, 242, 96, 250, 243, 15, 49, 218, 58, 230, 104, 252, 175, 150, 123, 86, 185, 84, 90, 198, 6, 36, 0, 99, 72, 28, 166, 238, 115, 231, 171, 249, 179, 71, 174, 68, 156, 227, 17, 198, 79, 73, 142, 99, 144, 20, 80, 62, 80, 191, 142, 46, 71, 9, 243, 6, 8, 214, 116, 72, 190, 106, 161, 19, 185, 100, 9, 187, 64, 94, 86, 203, 174, 156, 245, 222, 95, 54, 30, 148, 19, 11, 50, 112, 96, 61, 237, 159, 173, 7, 154, 127, 175, 79, 48, 97, 89, 78, 126, 66, 171, 204, 158, 195, 27, 226, 205, 222, 157, 89, 251, 90, 125, 37, 212, 27, 97, 3, 141, 247, 175, 50, 121, 7, 187, 68, 196, 181, 202, 167, 189, 57, 84, 81, 222, 23, 27, 84, 130, 176, 98, 66, 240, 207, 18, 23, 28, 163, 163, 194, 45, 37, 129, 202, 170, 97, 189, 0, 81, 238, 0, 39, 199, 163, 35, 211, 206, 247, 65, 29, 116, 242, 67, 102, 235, 13, 136, 232, 230, 114, 146, 187, 7, 254, 142, 26, 121, 16, 237, 5, 160, 201, 114, 94, 178, 199, 95, 212, 241, 45, 112, 180, 188, 72, 86, 114, 189, 155, 149, 149, 163, 210, 112, 101, 12, 69, 225, 75, 202, 223, 28, 242, 90, 215, 156, 169, 224, 245, 135, 128, 92, 148, 217, 131, 208, 255, 25, 135, 117, 136, 5, 104, 185, 249, 161, 228, 214, 16, 105, 204, 9, 182, 135, 153, 220, 101, 244, 160, 207, 58, 182, 118, 185, 240, 57, 245, 123, 13, 112, 182, 106, 229, 220, 90, 29, 86, 215, 96, 147, 232, 2, 55, 131, 225, 137, 68, 245, 89, 141, 252, 97, 3, 129, 155, 216, 223, 98, 116, 45, 78, 85, 141, 161, 74, 215, 7, 150, 171, 225, 59, 78, 221, 152, 236, 14, 117, 100, 208, 158, 86, 13, 185, 124, 87, 157, 111, 40, 187, 182, 124, 173, 71, 173, 23, 199, 52, 155, 190, 134, 11, 23, 64, 25, 215, 39, 115, 231, 173, 77, 72, 114, 54, 252, 116, 178, 59, 221, 106, 241, 119, 254, 30, 226, 241, 204, 233, 113, 197, 96, 146, 0, 41, 67, 3, 231, 126, 12, 218, 202, 22, 171, 114, 249, 176, 134, 160, 19, 216, 31, 229, 118, 226, 62, 242, 126, 126, 42, 127, 130, 68, 218, 218, 81, 202, 106, 217, 191, 25, 177, 82, 97, 81, 36, 232, 137, 58, 90, 216, 190, 117, 235, 20, 194, 144, 76, 178, 27, 213, 13, 208, 18, 29, 118, 126, 49, 98, 203, 179, 128, 237, 100, 32, 242, 189, 212, 6, 210, 210, 188, 161, 205, 13, 124, 119, 13, 215, 112, 41, 183, 176, 215, 168, 210, 182, 111, 1, 115, 2, 239, 141, 8, 177, 124, 112, 48, 197, 2, 239, 11, 99, 4, 36, 77, 69, 47, 244, 19, 153, 61, 19, 2, 96, 176, 7, 112, 122, 131, 169, 25, 189, 116, 171, 49, 12, 121, 162, 79, 154, 74, 251, 50, 233, 182, 63, 180, 224, 118, 49, 253, 21, 20, 16, 31, 144, 184, 93, 174, 231, 244, 183, 13, 49, 225, 189, 211, 73, 185, 49, 110, 142, 25, 226, 45, 176, 233, 204, 74, 33, 16, 205, 88, 131, 92, 157, 170, 175, 68, 170, 61, 53, 116, 165, 16, 27, 182, 160, 181, 87, 241, 15, 151, 85, 107, 76, 167, 129, 25, 172, 127, 184, 138, 153, 222, 228, 125, 64, 44, 45, 32, 12, 227, 148, 106, 152, 83, 240, 166, 54, 235, 32, 190, 12, 242, 164, 123, 189, 53, 194, 141, 104, 43, 202, 110, 4, 168, 119, 245, 232, 179, 178, 198, 1, 224, 87, 86, 160, 31, 19, 140, 233, 102, 191, 204, 4, 98, 138, 163, 191, 106, 24, 213, 47, 208, 82, 137, 132, 131, 16, 253, 84, 25, 144, 90, 159, 148, 16, 196, 84, 166, 61, 160, 101, 229, 227, 93, 118, 59, 87, 66, 16, 128, 59, 96, 131, 250, 20, 184, 150, 205, 91, 227, 201, 62, 35, 79, 180, 172, 173, 85, 197, 106, 153, 238, 229, 60, 204, 65, 193, 230, 94, 101, 177, 134, 6, 165, 53, 171, 142, 208, 155, 2, 11, 4, 202, 127, 54, 17, 142, 117, 227, 121, 128, 204, 192, 147, 147, 92, 189, 5, 224, 148, 72, 18, 83, 101, 126, 124, 228, 153, 242, 123, 229, 247, 92, 221, 6, 73, 227, 250, 87, 167, 194, 129, 187, 73, 38, 185, 109, 217, 240, 193, 88, 50, 178, 180, 151, 54, 197, 187, 137, 190, 166, 233, 1, 103, 204, 88, 31, 127, 185, 29, 65, 1, 29, 254, 223, 14, 83, 167, 215, 114, 248, 30, 173, 89, 173, 187, 69, 5, 105, 117, 15, 106, 94, 173, 63, 227, 25, 230, 190, 136, 168, 177, 175, 107, 91, 126, 254, 34, 188, 25, 118, 48, 12, 226, 130, 153, 162, 57, 47, 181, 212, 79, 160, 97, 64, 157, 246, 90, 53, 43, 149, 76, 102, 15, 195, 107, 58, 242, 84, 172, 29, 81, 198, 113, 81, 251, 138, 182, 154, 111, 30, 171, 129, 56, 17, 45, 214, 153, 112, 117, 203, 174, 40, 38, 234, 236, 32, 4, 112, 225, 26, 187, 195, 246, 252, 9, 218, 69, 160, 223, 178, 54, 148, 81, 8, 134, 151, 75, 248, 63, 224, 240, 48, 75, 250, 221, 85, 46, 100, 50, 3, 70, 64, 102, 111, 160, 155, 233, 59, 147, 184, 57, 61, 6, 126, 79, 176, 16, 185, 94, 166, 33, 135, 78, 42, 75, 140, 208, 140, 44, 153, 187, 64, 103, 119, 160, 236, 16, 239, 74, 218, 219, 212, 207, 110, 53, 30, 76, 248, 40, 111, 98, 44, 20, 113, 204, 233, 109, 135, 96, 107, 39, 163, 203, 125, 45, 157, 152, 71, 239, 175, 174, 159, 147, 80, 111, 93, 38, 253, 228, 154, 225, 181, 101, 12, 241, 127, 65, 49, 189, 5, 85, 151, 237, 213, 143, 14, 104, 138, 54, 52, 27, 4, 132, 67, 35, 156, 86, 157, 73, 16, 229, 222, 245, 110, 79, 165, 179, 56, 179, 53, 218, 229, 100, 58, 87, 149, 48, 231, 64, 63, 115, 67, 3, 172, 6, 186, 115, 154, 60, 53, 214, 152, 149, 89, 234, 37, 143, 82, 255, 64, 28, 183, 93, 112, 39, 70, 185, 57, 0, 199, 9, 61, 175, 219, 41, 76, 37, 176, 82, 125, 65, 53, 160, 214, 105, 62, 153, 244, 222, 96, 205, 6, 178, 85, 41, 240, 113, 0, 96, 149, 38, 3, 195, 18, 152, 41, 246, 3, 103, 29, 110, 134, 30, 101, 75, 46, 103, 199, 184, 20, 230, 8, 55, 120, 4, 229, 168, 35, 43, 7, 28, 161, 143, 87, 27, 87, 79, 255, 186, 44, 195, 158, 155, 181, 119, 81, 172, 217, 107, 95, 98, 55, 243, 186, 66, 105, 48, 224, 123, 232, 84, 156, 20, 10, 156, 208, 204, 52, 34, 228, 136, 97, 242, 200, 246, 211, 67, 202, 40, 241, 91, 92, 253, 9, 54, 72, 131, 221, 106, 178, 32, 44, 182, 4, 225, 193, 37, 20, 249, 249, 231, 10, 206, 18, 71, 254, 221, 187, 172, 88, 204, 6, 127, 138, 102, 7, 208, 75, 147, 219, 199, 177, 79, 36, 170, 101, 207, 177, 109, 95, 143, 217, 41, 199, 80, 183, 201, 2, 254, 12, 55, 23, 198, 14, 255, 69, 245, 138, 155, 129, 227, 167, 168, 130, 156, 135, 14, 96, 93, 48, 99, 143, 107, 126, 92, 117, 143, 112, 108, 193, 228, 84, 13, 41, 186, 27, 172, 92, 201, 149, 116, 19, 112, 197, 116, 209, 128, 102, 1, 55, 152, 177, 28, 37, 34, 50, 83, 41, 199, 74, 178, 59, 111, 67, 118, 35, 252, 36, 33, 87, 28, 170, 17, 215, 47, 90, 154, 124, 137, 15, 14, 211, 59, 75, 59, 30, 77, 0, 49, 37, 225, 191, 87, 101, 127, 214, 227, 160, 99, 174, 234, 82, 148, 235, 16, 241, 219, 147, 170, 127, 221, 250, 116, 39, 218, 156, 72, 227, 172, 55, 0, 79, 188, 76, 51, 222, 232, 24, 36, 62, 94, 154, 3, 61, 230, 146, 114, 253, 0, 128, 58, 253, 90, 72, 211, 242, 38, 39, 133, 153, 161, 119, 105, 195, 152, 225, 208, 105, 140, 80, 217, 186, 196, 157, 21, 116, 230, 116, 139, 25, 159, 143, 118, 128, 77, 201, 238, 247, 228, 15, 168, 4, 133, 148, 21, 148, 12, 44, 241, 7, 115, 17, 129, 176, 202, 46, 130, 122, 129, 235, 141, 223, 85, 21, 199, 65, 181, 169, 52, 174, 161, 153, 62, 25, 164, 115, 213, 89, 138, 199, 103, 79, 200, 165, 135, 249, 244, 27, 209, 178, 240, 129, 211, 61, 9, 111, 157, 147, 119, 36, 119, 255, 110, 130, 84, 49, 210, 225, 247, 100, 26, 121, 127, 163, 160, 26, 79, 99, 24, 77, 65, 32, 178, 109, 36, 27, 253, 173, 110, 183, 11, 14, 211, 57, 130, 254, 124, 104, 165, 219, 31, 70, 97, 14, 194, 39, 61, 26, 141, 125, 228, 126, 194, 184, 101, 160, 204, 106, 128, 144, 106, 103, 171, 18, 246, 129, 220, 85, 172, 151, 123, 5, 73, 155, 192, 175, 91, 157, 239, 61, 237, 116, 170, 65, 233, 56, 19, 49, 114, 168, 190, 3, 214, 53, 250, 90, 213, 244, 88, 101, 30, 229, 248, 124, 15, 71, 141, 27, 172, 235, 21, 129, 211, 72, 61, 172, 112, 170, 128, 135, 96, 196, 221, 255, 27, 176, 105, 188, 183, 121, 33, 37, 149, 53, 131, 226, 233, 29, 167, 234, 218, 109, 53, 185, 152, 36, 248, 53, 61, 235, 78, 21, 201, 214, 210, 163, 12, 251, 187, 45, 188, 137, 126, 127, 237, 92, 234, 91, 240, 225, 38, 194, 57, 213, 251, 237, 171, 30, 99, 52, 14, 49, 84, 101, 252, 237, 7, 166, 122, 114, 32, 107, 32, 207, 239, 136, 168, 178, 12, 11, 241, 233, 230, 146, 132, 18, 83, 233, 41, 172, 17, 6, 161, 42, 113, 87, 40, 255, 185, 1, 146, 128, 5, 240, 126, 131, 71, 42, 54, 124, 205, 2, 122, 71, 30, 222, 229, 40, 134, 142, 102, 97, 239, 151, 177, 1, 230, 231, 49, 123, 219, 28, 129, 91, 152, 112, 13, 154, 81, 197, 226, 255, 112, 158, 178, 177, 55, 181, 108, 138, 185, 245, 29, 186, 21, 73, 188, 209, 154, 200, 89, 116, 235, 198, 144, 36, 87, 248, 22, 7, 200, 122, 7, 148, 44, 42, 87, 140, 238, 204, 95, 231, 252, 0, 136, 0, 22, 39, 70, 123, 125, 165, 113, 227, 172, 146, 163, 128, 158, 36, 52, 91, 19, 36, 245, 27, 150, 138, 141, 11, 67, 239, 224, 65, 24, 116, 101, 7, 39, 46, 142, 172, 164, 243, 148, 0, 33, 226, 59, 47, 203, 137, 156, 241, 66, 250, 157, 30, 204, 101, 143, 134, 98, 238, 155, 226, 25, 184, 136, 219, 89, 100, 193, 11, 143, 71, 139, 243, 230, 151, 0, 249, 1, 78, 26, 32, 93, 104, 157, 67, 97, 164, 248, 86, 124, 146, 93, 74, 222, 228, 167, 55, 53, 100, 135, 216, 109, 13, 64, 37, 106, 177, 200, 200, 182, 92, 251, 69, 31, 243, 89, 80, 198, 14, 132, 203, 72, 103, 28, 104, 217, 24, 97, 223, 113, 11, 29, 178, 191, 210, 46, 162, 255, 68, 99, 8, 237, 213, 162, 152, 193, 183, 121, 203, 19, 108, 182, 29, 86, 26, 192, 103, 220, 103, 205, 154, 179, 197, 9, 22, 73, 127, 175, 146, 38, 119, 210, 0, 24, 180, 21, 245, 215, 204, 91, 186, 119, 138, 183, 239, 15, 155, 231, 248, 133, 39, 24, 101, 144, 236, 10, 230, 54, 174, 227, 73, 21, 110, 10, 160, 241, 232, 131, 14, 212, 127, 232, 59, 122, 65, 146, 54, 163, 9, 189, 190, 121, 88, 170, 62, 194, 14, 204, 152, 245, 38, 131, 37, 91, 81, 72, 114, 29, 115, 239, 182, 56, 44, 156, 159, 177, 180, 82, 160, 93, 97, 86, 183, 236, 50, 95, 85, 39, 71, 181, 225, 152, 143, 63, 123, 117, 34, 44, 109, 160, 166, 229, 240, 91, 138, 102, 54, 180, 173, 44, 50, 80, 42, 124, 7, 50, 124, 211, 239, 21, 94, 197, 185, 239, 213, 107, 142, 64, 95, 124, 125, 17, 180, 97, 189, 101, 52, 48, 19, 112, 12, 70, 9, 212, 177, 54, 118, 66, 84, 147, 236, 248, 26, 124, 95, 103, 135, 254, 124, 49, 112, 186, 99, 120, 90, 8, 194, 191, 88, 57, 242, 65, 61, 10, 104, 246, 197, 252, 19, 159, 58, 194, 75, 173, 242, 103, 8, 115, 84, 69, 238, 149, 26, 15, 159, 182, 141, 132, 119, 70, 29, 53, 20, 143, 46, 163, 204, 6, 236, 59, 45, 185, 172, 89, 119, 83, 38, 144, 36, 222, 96, 151, 26, 99, 195, 163, 170, 133, 92, 159, 214, 53, 150, 116, 90, 176, 69, 145, 130, 15, 172, 140, 217, 215, 101, 163, 115, 161, 65, 101, 8, 7, 183, 113, 213, 134, 58, 175, 130, 251, 143, 173, 248, 168, 135, 60, 159, 30, 194, 68, 208, 119, 120, 2, 40, 178, 227, 247, 161, 77, 47, 136, 46, 244, 163, 72, 65, 158, 25, 225, 195, 61, 132, 182, 204, 177, 186, 200, 81, 2, 65, 105, 212, 72, 94, 203, 232, 217, 182, 123, 251, 228, 160, 1, 161, 204, 123, 20, 37, 1, 77, 208, 179, 45, 149, 181, 122, 102, 190, 123, 213, 164, 231, 41, 216, 130, 234, 248, 208, 251, 252, 220, 84, 209, 67, 47, 61, 220, 5, 142, 162, 26, 236, 121, 142, 248, 132, 255, 65, 122, 203, 196, 102, 191, 187, 2, 195, 127, 255, 193, 92, 49, 91, 186, 154, 39, 156, 29, 211, 172, 49, 104, 245, 114, 153, 223, 211, 199, 249, 35, 130, 160, 128, 0, 152, 176, 183, 20, 236, 113, 193, 108, 26, 255, 11, 237, 102, 133, 245, 94, 115, 114, 10, 89, 229, 214, 221, 99, 149, 30, 99, 37, 246, 10, 26, 26, 39, 92, 123, 170, 73, 211, 127, 227, 54, 30, 86, 133, 159, 112, 225, 91, 148, 100, 174, 149, 75, 143, 14, 140, 20, 44, 64, 212, 5, 243, 8, 116, 63, 30, 97, 42, 123, 20, 73, 212, 85, 207, 83, 122, 27, 251, 233, 84, 10, 17, 236, 232, 83, 200, 127, 119, 143, 163, 204, 220, 167, 59, 231, 20, 106, 186, 222, 191, 8, 40, 234, 21, 25, 180, 13, 116, 250, 152, 224, 174, 75, 3, 205, 38, 173, 215, 236, 151, 185, 121, 254, 244, 154, 239, 17, 53, 106, 164, 61, 49, 116, 216, 118, 94, 150, 35, 181, 26, 238, 66, 49, 211, 221, 132, 146, 166, 115, 39, 136, 36, 205, 230, 179, 31, 197, 51, 148, 165, 109, 38, 70, 37, 148, 52, 44, 209, 250, 98, 58, 246, 225, 103, 198, 101, 26, 25, 196, 207, 8, 166, 21, 88, 252, 175, 253, 10, 88, 107, 157, 19, 225, 61, 12, 246, 221, 37, 239, 186, 167, 137, 142, 135, 222, 128, 174, 62, 95, 216, 38, 141, 157, 45, 232, 97, 217, 173, 203, 234, 116, 129, 69, 206, 189, 94, 221, 12, 54, 139, 186, 247, 184, 16, 200, 121, 244, 104, 8, 7, 35, 111, 47, 188, 10, 140, 92, 73, 143, 206, 203, 72, 122, 184, 20, 102, 197, 130, 64, 150, 63, 96, 239, 8, 132, 111, 217, 84, 91, 198, 32, 43, 100, 138, 241, 15, 160, 42, 190, 253, 193, 184, 164, 124, 29, 210, 96, 67, 224, 221, 182, 29, 218, 129, 149, 29, 128, 174, 98, 88, 88, 125, 56, 40, 255, 120, 5, 0, 87, 174, 42, 150, 90, 112, 201, 183, 169, 19, 57, 195, 191, 12, 58, 244, 235, 132, 25, 145, 72, 146, 214, 8, 125, 100, 135, 12, 5, 102, 97, 248, 174, 24, 159, 90, 33, 43, 187, 6, 61, 212, 241, 225, 190, 219, 252, 197, 123, 129, 164, 108, 123, 55, 230, 4, 153, 166, 105, 234, 15, 85, 216, 23, 56, 32, 3, 41, 110, 68, 146, 172, 133, 202, 98, 41, 7, 47, 152, 35, 255, 168, 106, 241, 226, 222, 77, 244, 52, 185, 65, 252, 227, 32, 66, 38, 11, 172, 60, 28, 28, 103, 84, 1, 1, 205, 182, 190, 28, 189, 102, 253, 43, 1, 191, 148, 116, 10, 227, 18, 81, 93, 80, 239, 157, 232, 215, 180, 163, 165, 161, 109, 177, 71, 150, 244, 144, 208, 160, 110, 22, 174, 60, 206, 43, 103, 121, 55, 103, 114, 115, 173, 238, 13, 10, 227, 251, 41, 176, 216, 158, 229, 216, 55, 234, 128, 128, 20, 167, 106, 181, 86, 163, 130, 215, 110, 149, 191, 10, 227, 215, 8, 214, 154, 178, 181, 15, 19, 0, 247, 250, 97, 74, 43, 157, 55, 94, 174, 41, 41, 9, 199, 97, 20, 91, 32, 18, 10, 43, 98, 240, 247, 203, 20, 250, 117, 160, 44, 229, 202, 187, 64, 54, 124, 15, 184, 169, 129, 27, 160, 240, 26, 61, 255, 60, 166, 60, 144, 209, 84, 55, 187, 186, 168, 13, 124, 125, 29, 17, 100, 249, 227, 62, 205, 78, 179, 163, 168, 139, 168, 21, 38, 83, 239, 151, 74, 43, 66, 2, 92, 72, 71, 94, 216, 134, 238, 20, 45, 158, 213, 164, 73, 57, 80, 47, 198, 184, 130, 223, 227, 71, 132, 133, 235, 177, 85, 174, 142, 124, 172, 200, 54, 229, 40, 126, 60, 76, 92, 216, 153, 56, 241, 174, 66, 141, 90, 226, 3, 30, 68, 234, 71, 187, 163, 112, 146, 255, 22, 143, 170, 204, 3, 127, 179, 81, 139, 160, 37, 77, 246, 128, 220, 196, 158, 153, 73, 177, 65, 199, 119, 29, 197, 144, 130, 248, 206, 155, 253, 108, 213, 124, 7, 223, 221, 162, 146, 134, 242, 65, 99, 162, 107, 120, 247, 214, 207, 96, 150, 169, 131, 208, 218, 221, 28, 24, 112, 208, 23, 1, 130, 142, 232, 56, 104, 45, 33, 158, 95, 255, 123, 31, 74, 76, 120, 178, 155, 213, 6, 195, 164, 8, 8, 69, 241, 197, 127, 83, 169, 21, 167, 19, 94, 143, 252, 33, 159, 248, 241, 170, 153, 147, 1, 149, 199, 201, 131, 170, 79, 236, 212, 209, 143, 107, 98, 24, 123, 56, 33, 193, 85, 247, 64, 225, 135, 210, 78, 145, 57, 16, 145, 71, 170, 20, 133, 87, 235, 4, 166, 239, 100, 82, 235, 81, 50, 223, 9, 193, 52, 49, 86, 129, 190, 196, 82, 165, 107, 63, 115, 161, 98, 33, 20, 193, 29, 42, 151, 205, 252, 124, 72, 245, 48, 181, 67, 7, 13, 21, 127, 59, 226, 188, 144, 129, 112, 244, 192, 121, 213, 80, 42, 196, 1, 13, 107, 108, 78, 0, 40, 121, 225, 148, 237, 234, 209, 216, 238, 9, 147, 226, 254, 96, 89, 212, 72, 193, 106, 75, 135, 74, 227, 67, 255, 92, 191, 81, 188, 124, 226, 149, 152, 142, 15, 159, 195, 238, 114, 55, 255, 166, 157, 230, 59, 148, 170, 166, 151, 65, 213, 104, 253, 253, 112, 150, 82, 147, 137, 27, 214, 100, 247, 65, 81, 92, 47, 86, 217, 7, 45, 120, 81, 130, 31, 236, 243, 76, 78, 3, 45, 105, 172, 220, 71, 48, 220, 94, 196, 249, 163, 193, 133, 50, 236, 205, 20, 55, 2, 63, 14, 127, 69, 113, 212, 204, 12, 58, 79, 89, 86, 29, 61, 199, 201, 64, 149, 6, 144, 182, 150, 129, 31, 18, 167, 120, 248, 82, 107, 25, 143, 128, 27, 161, 28, 25, 153, 183, 217, 238, 78, 186, 106, 92, 27, 202, 219, 165, 96, 0, 216, 234, 169, 73, 101, 39, 182, 113, 217, 240, 170, 116, 172, 221, 250, 233, 48, 49, 242, 83, 227, 92, 181, 184, 72, 230, 180, 21, 15, 108, 135, 25, 38, 153, 25, 124, 227, 26, 149, 73, 236, 39, 211, 244, 149, 58, 183, 132, 26, 223, 219, 174, 144, 117, 233, 219, 165, 205, 157, 159, 222, 184, 52, 47, 241, 201, 123, 65, 24, 44, 55, 215, 177, 168, 250, 179, 115, 190, 227, 123, 158, 163, 179, 224, 69, 196, 66, 207, 254, 243, 101, 221, 193, 140, 250, 4, 28, 222, 52, 96, 138, 160, 33, 218, 64, 118, 214, 234, 201, 152, 148, 91, 178, 111, 107, 144, 142, 6, 182, 102, 72, 188, 34, 213, 181, 26, 223, 58, 255, 103, 81, 17, 47, 169, 11, 245, 224, 123, 148, 215, 237, 186, 107, 75, 152, 90, 202, 166, 22, 149, 197, 5, 246, 238, 78, 76, 229, 106, 199, 94, 127, 195, 0, 45, 82, 6, 159, 103, 96, 138, 231, 71, 46, 107, 59, 216, 39, 43, 12, 221, 27, 214, 56, 155, 145, 66, 187, 169, 250, 235, 78, 211, 179, 239, 183, 198, 163, 93, 5, 196, 24, 174, 143, 225, 106, 139, 89, 98, 13, 127, 207, 184, 194, 30, 1, 165, 198, 169, 8, 197, 118, 86, 163, 221, 138, 23, 209, 61, 116, 79, 99, 233, 43, 130, 60, 244, 85, 229, 243, 172, 123, 148, 200, 120, 192, 127, 211, 52, 11, 159, 41, 95, 212, 230, 188, 169, 156, 137, 29, 212, 12, 148, 168, 148, 133, 243, 44, 241, 139, 127, 24, 246, 220, 227, 125, 209, 97, 60, 52, 162, 192, 146, 49, 161, 92, 138, 112, 189, 128, 59, 126, 125, 46, 207, 60, 79, 231, 174, 152, 209, 68, 223, 205, 2, 38, 14, 91, 116, 159, 255, 28, 27, 178, 248, 164, 104, 158, 79, 69, 214, 234, 157, 12, 75, 163, 83, 253, 245, 202, 61, 213, 176, 6, 197, 230, 29, 208, 166, 253, 194, 254, 235, 29, 141, 241, 70, 249, 15, 62, 0, 148, 163, 135, 52, 122, 40, 96, 87, 31, 179, 152, 51, 216, 133, 184, 122, 198, 203, 60, 115, 218, 191, 193, 16, 178, 25, 148, 252, 112, 104, 103, 252, 36, 92, 221, 28, 179, 43, 199, 198, 151, 128, 100, 252, 217, 161, 249, 34, 201, 172, 118, 52, 180, 252, 104, 7, 223, 44, 116, 102, 212, 21, 40, 224, 184, 55, 163, 210, 21, 207, 161, 239, 51, 54, 155, 41, 133, 18, 67, 48, 3, 165, 130, 251, 4, 79, 214, 57, 72, 130, 157, 212, 144], Ib = [0, 1, 3, 4, 6, 7, 9, 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 26, 29, 31, 34, 36, 39, 41, 44, 46, 49, 51, 54, 56, 59, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 226, 226, 227, 227, 227, 228, 228, 228, 229, 229, 229, 230, 230, 231, 231, 231, 232, 232, 232, 233, 233, 233, 234, 234, 235, 235, 235, 236, 236, 236, 237, 237, 237, 238, 238, 239, 239, 239, 240, 240, 240, 241, 241, 241, 242, 242, 243, 243, 243, 244, 244, 244, 245, 245, 245, 246, 246, 246, 247, 247, 247, 248, 248, 248, 249, 249, 249, 250, 250, 250, 251, 251, 251, 252, 252, 252, 253, 253, 253, 254, 254, 254, 255], yb = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 35, 36, 37, 39, 40, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 226, 226, 226, 227, 227, 228, 228, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 234, 234, 235, 235, 236, 236, 237, 237, 238, 238, 239, 239, 240, 240, 241, 241, 242, 242, 243, 243, 243, 244, 244, 244, 245, 245, 245, 246, 246, 246, 247, 247, 247, 248, 248, 248, 249, 249, 249, 250, 250, 250, 251, 251, 251, 252, 252, 252, 253, 253, 253, 254, 254, 254, 255], Cb = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 83, 84, 85, 87, 88, 89, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 116, 117, 118, 120, 121, 122, 124, 125, 127, 128, 129, 131, 132, 133, 135, 136, 138, 139, 140, 142, 143, 144, 146, 147, 149, 150, 151, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 192, 193, 193, 194, 195, 195, 196, 197, 197, 198, 199, 199, 200, 201, 201, 202, 203, 203, 204, 205, 205, 206, 207, 207, 208, 209, 209, 210, 211, 211, 212, 213, 213, 214, 215, 215, 216, 217, 217, 218, 219, 219, 220, 221, 221, 222, 223, 223, 224, 225, 225, 226, 227, 227, 228, 229, 229, 230, 231, 231, 232, 233, 233, 234, 235, 235, 236, 237, 237, 238, 239, 239, 240, 241, 241, 242, 243, 243, 244, 245, 245, 246, 247, 247, 248, 249, 249, 250, 251, 251, 252, 253, 253, 254, 255];
      class Ab extends Eb {
        constructor(e2, t2, i2, r2) {
          super(e2, Rb, i2, r2), mp(this, "inputTexture", void 0), mp(this, "lightLevel", 0.1), mp(this, "rednessLevel", 0.5), mp(this, "mskin_he_max", 175 / 180 * 3.141593), mp(this, "mskin_he_min", 115 / 180 * 3.141593), mp(this, "mskin_hc_max", 173 / 180 * 3.141593), mp(this, "mskin_hc_min", 116 / 180 * 3.141593), mp(this, "mskin_hc_axis", 2.04203545), mp(this, "mfacts_rotate_c", 0), mp(this, "mfacts_rotate_le", 0), mp(this, "mfacts_rotate_ge", 0), mp(this, "tab_addr", null), mp(this, "lutTextures", []), this.inputTexture = t2, this.init();
        }
        setUniforms() {
          const e2 = this.gl.getUniformLocation(this.program, "u_flipY"), t2 = this.gl.getUniformLocation(this.program, "u_denoiseLevel");
          this.gl.uniform1f(t2, this.denoiseLevel), this.gl.uniform1f(e2, 1);
          const i2 = this.gl.getUniformLocation(this.program, "light");
          this.gl.uniform1f(i2, this.lightLevel);
          const r2 = this.gl.getUniformLocation(this.program, "redness");
          this.gl.uniform1f(r2, this.rednessLevel);
          const n2 = this.gl.getUniformLocation(this.program, "skin_he_max"), o2 = this.gl.getUniformLocation(this.program, "skin_he_min"), s2 = this.gl.getUniformLocation(this.program, "skin_hc_max"), a2 = this.gl.getUniformLocation(this.program, "skin_hc_min"), c2 = this.gl.getUniformLocation(this.program, "skin_hc_axis"), d2 = this.gl.getUniformLocation(this.program, "facts_rotate_c"), u2 = this.gl.getUniformLocation(this.program, "facts_rotate_le"), l2 = this.gl.getUniformLocation(this.program, "facts_rotate_ge");
          this.gl.uniform1f(n2, this.mskin_he_max), this.gl.uniform1f(o2, this.mskin_he_min), this.gl.uniform1f(s2, this.mskin_hc_max), this.gl.uniform1f(a2, this.mskin_hc_min), this.gl.uniform1f(c2, this.mskin_hc_axis), this.gl.uniform1f(d2, this.mfacts_rotate_c), this.gl.uniform1f(u2, this.mfacts_rotate_le), this.gl.uniform1f(l2, this.mfacts_rotate_ge);
          const h2 = this.gl.getUniformLocation(this.program, "u_originImage");
          this.gl.activeTexture(this.gl.TEXTURE2), this.gl.bindTexture(this.gl.TEXTURE_2D, this.inputTexture), this.gl.uniform1i(h2, 2);
          const p2 = ["lighten_lut"], _2 = [this.gl.TEXTURE3];
          for (let e3 = 0; e3 < p2.length; e3++) {
            const t3 = this.gl.getUniformLocation(this.program, p2[e3]);
            this.gl.activeTexture(_2[e3]), this.gl.bindTexture(this.gl.TEXTURE_2D, this.lutTextures[e3]), this.gl.uniform1i(t3, e3 + 3);
          }
        }
        setParameters(e2) {
          void 0 !== e2.denoiseLevel && (this.denoiseLevel = e2.denoiseLevel), void 0 !== e2.lightLevel && (this.lightLevel = e2.lightLevel), void 0 !== e2.rednessLevel && (this.rednessLevel = e2.rednessLevel, this.updateRedness(this.rednessLevel)), e2.lighteningContrastLevel && this.updateLut(e2.lighteningContrastLevel);
        }
        init() {
          this.tab_addr = new Uint8Array(yb);
          const e2 = [this.tab_addr], t2 = [256], i2 = [1];
          for (let r2 = 0; r2 < e2.length; r2++) {
            const n2 = this.gl.createTexture();
            if (!n2)
              throw new vE(TE.WEBGL_INTERNAL_ERROR, "create lut texture failed");
            this.gl.bindTexture(this.gl.TEXTURE_2D, n2), this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.LUMINANCE, t2[r2], i2[r2], 0, this.gl.LUMINANCE, this.gl.UNSIGNED_BYTE, e2[r2]), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR), this.lutTextures.push(n2);
          }
        }
        updateRedness(e2) {
          const t2 = 3.141593;
          let i2, r2, n2 = e2, o2 = n2;
          n2 > 1 && (n2 = 1), n2 < 0 && (n2 = 0), o2 > 1 && (o2 = 1), o2 < 0 && (o2 = 0), this.mfacts_rotate_c = 0.8 * n2, o2 < 0.8 && (o2 = 0), this.mskin_he_max = 175 / 180 * t2, this.mskin_hc_max = 173 / 180 * t2, this.mskin_he_min = (115 - 4 * o2) / 180 * t2, this.mskin_hc_min = (116 - 4 * o2) / 180 * t2, this.mskin_hc_axis = (117 - 4 * o2) / 180 * t2, this.mskin_hc_axis < this.mskin_hc_min && (this.mskin_hc_axis = this.mskin_hc_min), this.mskin_hc_min < t2 / 2 && (this.mskin_hc_min = t2 / 2), this.mskin_hc_axis < t2 / 2 && (this.mskin_hc_axis = t2 / 2), this.mskin_he_min < t2 / 2 && (this.mskin_he_min = t2 / 2), this.mskin_hc_max > t2 && (this.mskin_hc_max = t2), this.mskin_hc_axis > t2 && (this.mskin_hc_axis = t2), this.mskin_he_max > t2 && (this.mskin_he_max = t2), i2 = this.mskin_he_max - this.mskin_hc_max, r2 = this.mskin_hc_max - this.mskin_hc_axis, this.mfacts_rotate_ge = i2 > 0.01 ? this.mfacts_rotate_c * r2 / i2 : this.mfacts_rotate_c, i2 = this.mskin_hc_min - this.mskin_he_min, r2 = this.mskin_hc_axis - this.mskin_hc_min, this.mfacts_rotate_le = i2 > 0.01 ? this.mfacts_rotate_c * r2 / i2 : this.mfacts_rotate_c;
        }
        updateLut(e2) {
          let t2 = null;
          if (0 === e2 && (t2 = yb), 1 === e2 && (t2 = Cb), 2 === e2 && (t2 = Ib), !t2)
            throw new vE(TE.WEBGL_INTERNAL_ERROR, "invalid ylut_table value:" + e2);
          this.tab_addr = new Uint8Array(t2);
          const i2 = [this.tab_addr], r2 = [256], n2 = [1];
          for (let e3 = 0; e3 < i2.length; e3++)
            this.gl.bindTexture(this.gl.TEXTURE_2D, this.lutTextures[e3]), this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.LUMINANCE, r2[e3], n2[e3], 0, this.gl.LUMINANCE, this.gl.UNSIGNED_BYTE, i2[e3]);
        }
      }
      class Ob {
        constructor() {
          mp(this, "gl", null), mp(this, "canvas", null), mp(this, "programs", []), mp(this, "commonProgram", null), mp(this, "inputTexture", null), mp(this, "outputTextures", []), mp(this, "fbos", []), mp(this, "originalFrameWidth", 0), mp(this, "originalFrameHeight", 0), mp(this, "enableBeauty", false), mp(this, "denoiseLevel", 5), mp(this, "lightLevel", 0.35), mp(this, "rednessLevel", 0.5), mp(this, "lighteningContrastLevel", 1);
        }
        setEnableBeauty(e2) {
          this.enableBeauty = !!e2;
        }
        init(e2, t2, i2) {
          if (!jg().supportWebGL)
            throw new vE(TE.NOT_SUPPORTED, "your browser is not support webGL");
          if (this.gl = i2.getContext("webgl"), !this.gl)
            throw new vE(TE.WEBGL_INTERNAL_ERROR, "can not get webgl context");
          if (this.initGL(e2, t2), !this.inputTexture)
            throw new vE(TE.WEBGL_INTERNAL_ERROR, "can not find input texture");
          this.canvas = i2, this.programs.push(new _b(this.gl)), this.programs.push(new mb(this.gl, e2, t2)), this.programs.push(new Sb(this.gl, e2, t2)), this.programs.push(new vb(this.gl, e2, t2)), this.programs.push(new Ab(this.gl, this.inputTexture, e2, t2)), this.commonProgram = this.programs[0].program, this.setDenoiseLevel(this.denoiseLevel), this.setLightLevel(this.lightLevel), this.setRednessLevel(this.rednessLevel), this.setContrastLevel(this.lighteningContrastLevel);
        }
        render(e2) {
          if (!this.gl || !this.commonProgram || !this.canvas)
            return void NE.warning("video effect manager is not init!");
          let t2 = 0;
          if (this.originalFrameHeight === e2.videoWidth && this.originalFrameWidth === e2.videoHeight)
            t2 = 2;
          else if (this.originalFrameHeight !== e2.videoHeight || this.originalFrameWidth !== e2.videoWidth) {
            if (NE.debug("beauty effect: resolution changed ".concat(this.originalFrameWidth, "x").concat(this.originalFrameHeight, " -> ").concat(e2.videoWidth, "x").concat(e2.videoHeight)), 0 === e2.videoHeight || 0 === e2.videoWidth)
              return void NE.debug("beauty effect: skip 0 resolution frame");
            this.canvas.width = e2.videoWidth, this.canvas.height = e2.videoHeight, e2.setAttribute("width", e2.videoWidth.toString()), e2.setAttribute("height", e2.videoHeight.toString()), this.release(), this.init(e2.videoWidth, e2.videoHeight, this.canvas);
          }
          this.gl.viewport(0, 0, e2.videoWidth, e2.videoHeight), this.gl.bindTexture(this.gl.TEXTURE_2D, this.inputTexture), this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, e2);
          const i2 = this.enableBeauty ? this.programs.length - 1 : 0;
          for (let e3 = 0; e3 <= i2; e3++) {
            const i3 = this.programs[e3].program;
            this.gl.useProgram(i3);
            const r3 = this.gl.getUniformLocation(i3, "u_image");
            this.programs[e3].setUniforms(), this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.fbos[t2 + e3 % 2]), this.gl.clearColor(0, 0, 0, 1), this.gl.clear(this.gl.COLOR_BUFFER_BIT), this.gl.drawArrays(this.gl.TRIANGLES, 0, 6), this.gl.activeTexture(this.gl.TEXTURE0), this.gl.bindTexture(this.gl.TEXTURE_2D, this.outputTextures[t2 + e3 % 2]), this.gl.uniform1i(r3, 0);
          }
          this.gl.useProgram(this.commonProgram);
          const r2 = this.gl.getUniformLocation(this.commonProgram, "u_flipY");
          this.gl.uniform1f(r2, -1), this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null), this.gl.clearColor(0, 0, 0, 1), this.gl.clear(this.gl.COLOR_BUFFER_BIT), this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);
        }
        setDenoiseLevel(e2) {
          this.programs.forEach((t2) => {
            t2 instanceof Eb && t2.setParameters({ denoiseLevel: e2 });
          }), this.denoiseLevel = e2;
        }
        setLightLevel(e2) {
          this.programs.forEach((t2) => {
            t2 instanceof Eb && t2.setParameters({ lightLevel: e2 });
          }), this.lightLevel = e2;
        }
        setRednessLevel(e2) {
          this.programs.forEach((t2) => {
            t2 instanceof Eb && t2.setParameters({ rednessLevel: e2 });
          }), this.rednessLevel = e2;
        }
        setContrastLevel(e2) {
          this.programs.forEach((t2) => {
            t2 instanceof Eb && t2.setParameters({ lighteningContrastLevel: e2 });
          }), this.lighteningContrastLevel = e2;
        }
        setSize(e2, t2) {
          this.programs.forEach((i2) => {
            i2 instanceof Eb && i2.setSize(e2, t2);
          });
        }
        release() {
          this.gl = null, this.commonProgram = null, this.inputTexture = null, this.programs = [], this.outputTextures = [], this.fbos = [];
        }
        initGL(e2, t2) {
          if (!this.gl)
            throw new vE(TE.WEBGL_INTERNAL_ERROR, "can not find webgl context");
          this.inputTexture = this.gl.createTexture(), this.gl.bindTexture(this.gl.TEXTURE_2D, this.inputTexture), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
          for (let i2 = 0; i2 < 4; i2++) {
            const r2 = this.gl.createTexture();
            if (!r2)
              throw new vE(TE.WEBGL_INTERNAL_ERROR, "create texture failed");
            this.gl.bindTexture(this.gl.TEXTURE_2D, r2), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR), i2 < 2 ? this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, e2, t2, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null) : this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, t2, e2, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);
            const n2 = this.gl.createFramebuffer();
            if (!n2)
              throw new vE(TE.WEBGL_INTERNAL_ERROR, "create frame buffer failed");
            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, n2), this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, r2, 0), this.outputTextures.push(r2), this.fbos.push(n2);
          }
          this.gl.viewport(0, 0, e2, t2), this.originalFrameWidth = e2, this.originalFrameHeight = t2;
        }
      }
      class bb {
        constructor() {
          mp(this, "targetFrameRate", 0), mp(this, "recordedFrameCount", 0), mp(this, "recordingTime", 2), mp(this, "recordID", void 0);
        }
        async startRecordBeautyEffectOutput(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 4;
          if (this.recordID)
            throw new vE(TE.UNEXPECTED_ERROR, "another beauty effect recording is in progress");
          const i2 = MR(6, "");
          return this.recordID = i2, this.targetFrameRate = e2, this.recordedFrameCount = 0, this.recordingTime = t2, await LR(1e3 * this.recordingTime), this.recordID !== i2 ? (this.recordID = void 0, true) : (this.recordID = void 0, this.recordedFrameCount < this.targetFrameRate * this.recordingTime / 2 ? (NE.warning("detect beauty effect overload, current framerate", this.recordedFrameCount / 2), false) : (NE.debug("beauty effect current framerate", this.recordedFrameCount / 2), true));
        }
        stopRecordBeautyEffectOutput() {
          this.targetFrameRate = 0, this.recordedFrameCount = 0, this.recordID = void 0;
        }
        addFrame() {
          this.recordID && (this.recordedFrameCount += 1);
        }
      }
      class wb extends ab.exports.VideoProcessor {
        constructor() {
          super(), mp(this, "name", "BeautyProcessor"), mp(this, "fps", 15), mp(this, "canvas", void 0), mp(this, "video", void 0), mp(this, "manager", void 0), mp(this, "overloadDetector", new bb()), mp(this, "stopChromeBackgroundLoop", null), mp(this, "onOverload", void 0), mp(this, "stopLoop", void 0), mp(this, "lastRenderTime", 0), this.fps = 30, this.manager = new Ob(), this._enabled = false;
        }
        async onEnableChange(e2) {
          this.manager.setEnableBeauty(e2), this.context && this.inputTrack && (e2 ? await this.startEffect(this.inputTrack, this.context) : await this.stopEffect(this.inputTrack, this.context));
        }
        async setBeautyEffectOptions(e2) {
          if (function(e3) {
            void 0 !== e3.smoothnessLevel && Xf(e3.smoothnessLevel, "options.smoothnessLevel", 0, 1, false), void 0 !== e3.lighteningLevel && Xf(e3.lighteningLevel, "options.lighteningLevel", 0, 1, false), void 0 !== e3.rednessLevel && Xf(e3.rednessLevel, "options.rednessLevel", 0, 1, false), void 0 !== e3.lighteningContrastLevel && Jf(e3.lighteningContrastLevel, "options.lighteningContrastLevel", [0, 1, 2]);
          }(e2), void 0 !== e2.smoothnessLevel) {
            const t2 = Math.max(0.1, 10 * e2.smoothnessLevel);
            this.manager.setDenoiseLevel(t2);
          }
          if (void 0 !== e2.lighteningLevel) {
            const t2 = Math.max(0.1, e2.lighteningLevel / 2);
            this.manager.setLightLevel(t2);
          }
          if (void 0 !== e2.rednessLevel) {
            const t2 = Math.max(0.01, e2.rednessLevel);
            this.manager.setRednessLevel(t2);
          }
          if (void 0 !== e2.lighteningContrastLevel) {
            const t2 = e2.lighteningContrastLevel;
            this.manager.setContrastLevel(t2);
          }
        }
        async onTrack(e2, t2) {
          var i2;
          this.video && this.enabled && (null === (i2 = this.stopLoop) || void 0 === i2 || i2.call(this), await this.stopEffect(e2, t2));
          await this.startEffect(e2, t2);
        }
        async startEffect(e2, t2) {
          if (!this.enabled)
            return;
          const i2 = Bh(), r2 = await this.renderWithWebGL(e2);
          this.output(r2, t2), NE.info("start video effect, output:", this.outputTrack), this.overloadDetector.startRecordBeautyEffectOutput(this.fps).then((e3) => {
            e3 || this.onOverload && this.onOverload();
          });
          let n2 = false;
          this.stopLoop = () => {
            n2 = true;
          };
          const o2 = () => {
            this.enabled && !n2 && requestAnimationFrame(o2);
            const e3 = Date.now(), t3 = 1e3 / this.fps, i3 = this.lastRenderTime ? e3 - this.lastRenderTime : t3;
            i3 < t3 || (this.lastRenderTime = e3 - (i3 - t3), this.video && this.video.paused && this.video.play(), this.enabled && this.video && (this.manager.render(this.video), this.outputTrack && this.outputTrack.requestFrame && this.outputTrack.requestFrame(), this.overloadDetector.addFrame()));
          };
          requestAnimationFrame(o2), i2.name === xh.CHROME && document.addEventListener("visibilitychange", () => {
            document.hidden ? this.stopChromeBackgroundLoop = VT(() => {
              this.enabled && this.video && this.manager.render(this.video), this.outputTrack && this.outputTrack.requestFrame && this.outputTrack.requestFrame(), this.overloadDetector.addFrame();
            }, this.fps) : this.stopChromeBackgroundLoop && (this.stopChromeBackgroundLoop(), this.stopChromeBackgroundLoop = null);
          }, false);
        }
        async renderWithWebGL(e2) {
          this.canvas && (this.canvas.remove(), this.canvas = void 0), this.video && (this.video.remove(), this.video = void 0), this.canvas = document.createElement("canvas"), this.video = document.createElement("video"), this.video.setAttribute("autoplay", ""), this.video.setAttribute("muted", ""), this.video.muted = true, this.video.setAttribute("playsinline", ""), this.video.setAttribute("style", "display:none"), this.video.srcObject = new MediaStream([e2]);
          const t2 = new Cl((e3) => {
            const t3 = () => {
              this.video && this.video.removeEventListener("playing", t3), e3(void 0);
            };
            this.video && this.video.addEventListener("playing", t3);
          });
          this.video.play(), await t2;
          const i2 = e2.getSettings(), r2 = i2.width || this.video.videoWidth, n2 = i2.height || this.video.videoHeight;
          if (i2.frameRate && this.fps !== i2.frameRate && (this.fps = i2.frameRate, NE.debug("beauty video processor: set fps to", this.fps)), NE.debug("beauty video processor: width ".concat(r2, " height ").concat(n2)), !r2 || !n2)
            throw new vE(TE.BEAUTY_PROCESSOR_INTERNAL_ERROR, "can not get track resolution");
          this.canvas.width = r2, this.canvas.height = n2, this.video.setAttribute("width", r2.toString()), this.video.setAttribute("height", n2.toString()), this.manager.init(r2, n2, this.canvas);
          const o2 = jg();
          return this.canvas.captureStream(o2.supportRequestFrame ? 0 : this.fps).getVideoTracks()[0];
        }
        async stopEffect(e2, t2) {
          NE.info("stop video effect"), this.overloadDetector.stopRecordBeautyEffectOutput(), this.manager.release(), this.canvas && this.canvas.remove(), this.video && this.video.remove(), this.canvas = void 0, this.video = void 0, this.output(e2, t2);
        }
      }
      function Nb(e2) {
        const t2 = {};
        if (e2.facingMode && (t2.facingMode = e2.facingMode), e2.cameraId && (t2.deviceId = { exact: e2.cameraId }), !e2.encoderConfig)
          return t2;
        const i2 = VE(e2.encoderConfig);
        return t2.width = i2.width, t2.height = i2.height, !sp() && i2.frameRate && (t2.frameRate = i2.frameRate), Bh().name === xh.EDGE && "object" == typeof t2.frameRate && (t2.frameRate.max = 60), Qh() && (t2.frameRate = { ideal: 30, max: 30 }), t2;
      }
      function Db(e2) {
        const t2 = {};
        e2.screenSourceType && (t2.mediaSource = e2.screenSourceType), e2.extensionId && Xh() && (t2.extensionId = e2.extensionId), e2.electronScreenSourceId && (t2.sourceId = e2.electronScreenSourceId);
        const i2 = e2.encoderConfig ? jE(e2.encoderConfig) : null;
        return t2.mandatory = { chromeMediaSource: "desktop", maxWidth: i2 ? i2.width : void 0, maxHeight: i2 ? i2.height : void 0 }, i2 && i2.frameRate && ("number" == typeof i2.frameRate ? (t2.mandatory.maxFrameRate = i2.frameRate, t2.mandatory.minFrameRate = i2.frameRate) : (t2.mandatory.maxFrameRate = i2.frameRate.max || i2.frameRate.ideal || i2.frameRate.exact || void 0, t2.mandatory.minFrameRate = i2.frameRate.min || i2.frameRate.ideal || i2.frameRate.exact || void 0), t2.frameRate = i2.frameRate), i2 && i2.width && (t2.width = i2.width), i2 && i2.height && (t2.height = i2.height), t2;
      }
      function Pb(e2) {
        const t2 = {};
        if (sp() || (void 0 !== e2.AGC && (t2.autoGainControl = e2.AGC), void 0 !== e2.AEC && (t2.echoCancellation = e2.AEC), void 0 !== e2.ANS && (t2.noiseSuppression = e2.ANS, Xh() && e2.ANS && (t2.googHighpassFilter = e2.ANS))), e2.encoderConfig) {
          const i2 = GE(e2.encoderConfig);
          t2.channelCount = i2.stereo ? 2 : 1, t2.sampleRate = i2.sampleRate, t2.sampleSize = i2.sampleSize;
        }
        return e2.microphoneId && (t2.deviceId = { exact: e2.microphoneId }), cp() && (t2.sampleRate = void 0), t2;
      }
      var Lb, kb;
      !function(e2) {
        e2.COVERED = "COVERED", e2.POSITION = "POSITION", e2.SIZE = "SIZE", e2.STYLE = "STYLE";
      }(Lb || (Lb = {})), function(e2) {
        e2.UNMOUNTED = "UNMOUNTED", e2.INVALID_HTML_ELEMENT = "INVALID_HTML_ELEMENT";
      }(kb || (kb = {}));
      var Mb, Ub, xb, Vb, jb, Fb, Bb, Gb, Wb, Hb, Kb, Yb, qb, Jb, Xb, zb, Qb, Zb, $b, ew, tw, iw, rw, nw, ow, sw, aw, cw, dw, uw, lw, hw = new class {
        constructor() {
          mp(this, "_clientSize", null), mp(this, "getClientWidth", () => document.documentElement ? document.documentElement.clientWidth : document.body.clientWidth), mp(this, "getClientHeight", () => document.documentElement ? document.documentElement.clientHeight : document.body.clientHeight), mp(this, "getStyle", (e2) => window.getComputedStyle(e2, null)), mp(this, "checkCssVisibleProperty", (e2) => {
            let t2 = true;
            const i2 = this.getStyle(e2), { display: r2, visibility: n2, opacity: o2, filter: s2 } = i2;
            if (("none" === r2 || ["hidden", "collapse"].includes(n2) || Number(o2) < 0.1) && (t2 = false), !t2)
              return false;
            if (s2) {
              s2.split(" ").filter((e3) => {
                const t3 = e3.split("(")[0];
                return ["brightness", "blur", "opacity"].includes(t3);
              }).map((e3) => {
                const [t3, i3] = e3.split(/\(|\)/);
                return [t3, Number(i3.match(/^[0-9\.]+/))];
              }).forEach((e3) => {
                const [i3, r3] = e3;
                switch (i3) {
                  case "brightness":
                    (r3 < 0.1 || r3 > 3) && (t2 = false);
                    break;
                  case "blur":
                    r3 > 3 && (t2 = false);
                    break;
                  case "opacity":
                    r3 < 0.1 && (t2 = false);
                }
              });
            }
            return t2;
          }), mp(this, "checkPropertyUpToAllParentNodes", (e2, t2) => {
            let i2 = true, r2 = true;
            const n2 = (e3) => t2(e3);
            let o2 = e2;
            for (; o2 && r2; ) {
              n2(o2) || (i2 = false, r2 = false), o2 = o2.parentElement, o2 || (r2 = false);
            }
            return i2;
          }), mp(this, "checkActualCssVisibleIncludeInherit", (e2) => this.checkPropertyUpToAllParentNodes(e2, this.checkCssVisibleProperty)), mp(this, "getSizeAboutClient", (e2) => {
            const { width: t2, height: i2, left: r2, right: n2, top: o2, bottom: s2 } = e2.getBoundingClientRect(), a2 = this.getClientWidth(), c2 = this.getClientHeight();
            return { width: t2, height: i2, left: r2, right: n2, top: o2, bottom: s2, clientWidth: a2, clientHeight: c2, clientMin: Math.min(a2, c2) };
          }), mp(this, "checkActualSize", () => {
            const { width: e2, height: t2, clientMin: i2 } = this._clientSize;
            return this.checkSizeIsVisible(e2, t2, i2);
          }), mp(this, "elementFromPoint", (e2, t2) => document.elementFromPoint ? document.elementFromPoint(e2, t2) : null), mp(this, "checkCoverForAPoint", (e2, t2, i2) => {
            const r2 = this.elementFromPoint(e2, t2);
            return null !== r2 && r2 !== i2;
          }), mp(this, "getPointPositionList", () => {
            const { width: e2, height: t2, left: i2, top: r2 } = this._clientSize, n2 = e2 / 6, o2 = t2 / 6, s2 = [], a2 = 10 ** 6;
            for (let e3 = 0; e3 < 5; e3++)
              for (let t3 = 0; t3 < 5; t3++) {
                const c2 = (i2 * a2 + (0 === e3 ? 0.1 : 4 === e3 ? (n2 * e3 * a2 - 1e5) / a2 : n2 * e3) * a2) / a2, d2 = (r2 * a2 + (0 === t3 ? 0.1 : 4 === t3 ? (o2 * t3 * a2 - 1e5) / a2 : o2 * t3) * a2) / a2;
                s2.push({ x: c2, y: d2 });
              }
            return [...s2];
          }), mp(this, "checkElementCover", (e2) => this.getPointPositionList().map((t2) => this.checkCoverForAPoint(t2.x, t2.y, e2)).filter((e3) => !!e3).length > 6), mp(this, "checkSizeIsVisible", (e2, t2, i2) => (e2 > 50 || i2 / e2 <= 10) && (t2 > 50 || i2 / t2 <= 10)), mp(this, "checkSizeOfPartInClient", () => {
            const { left: e2, right: t2, top: i2, bottom: r2, clientHeight: n2, clientWidth: o2, clientMin: s2 } = this._clientSize;
            let a2, c2, d2, u2;
            if (e2 < 0)
              a2 = 0;
            else {
              if (!(e2 < o2))
                return false;
              a2 = e2;
            }
            if (t2 < 0)
              return false;
            if (c2 = t2 < o2 ? t2 : o2, i2 < 0)
              d2 = 0;
            else {
              if (!(i2 < n2))
                return false;
              d2 = i2;
            }
            if (r2 < 0)
              return false;
            u2 = r2 < n2 ? r2 : n2;
            const l2 = c2 - a2, h2 = u2 - d2;
            return this.checkSizeIsVisible(l2, h2, s2);
          }), mp(this, "returnHiddenResult", (e2) => (this._clientSize = null, { visible: false, reason: e2 })), mp(this, "checkOneElementVisible", (e2) => {
            if (e2 instanceof HTMLElement) {
              if (this.checkElementIsMountedOnDom(e2)) {
                if (this.checkActualCssVisibleIncludeInherit(e2)) {
                  if (this._clientSize = this.getSizeAboutClient(e2), this.checkElementCover(e2))
                    return this.returnHiddenResult(Lb.COVERED);
                  {
                    const e3 = this.checkActualSize(), t2 = this.checkSizeOfPartInClient();
                    return e3 && !t2 ? this.returnHiddenResult(Lb.POSITION) : e3 ? (this._clientSize = null, { visible: true }) : this.returnHiddenResult(Lb.SIZE);
                  }
                }
                return this.returnHiddenResult(Lb.STYLE);
              }
              return this.returnHiddenResult(kb.UNMOUNTED);
            }
            return this.returnHiddenResult(kb.INVALID_HTML_ELEMENT);
          }), mp(this, "checkElementIsMountedOnDom", (e2) => this.checkPropertyUpToAllParentNodes(e2, (e3) => "HTML" !== e3.nodeName.toUpperCase() ? null !== e3.parentElement : !!document.documentElement));
        }
      }();
      function pw(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function _w(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? pw(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : pw(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let Ew = (Mb = RT({ argsMap: (e2, t2, i2) => [e2.getTrackId(), "string" == typeof t2 ? t2 : "HTMLElement", i2] }), Ub = ov(), xb = RT({ argsMap: (e2) => [e2.getTrackId()] }), Vb = bT("LocalVideoTrack", "_enabledMutex"), jb = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Fb = ov(), Bb = bT("LocalVideoTrack", "_enabledMutex"), Gb = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Wb = ov(), Hb = ov(), Kb = RT({ argsMap: (e2, t2, i2) => [e2.getTrackId(), t2, i2] }), Yb = ov(), qb = ov(), Jb = ov(), Xb = ov(), zb = ov(), Qb = ov(), Zb = ov(), $b = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2.name] }), ew = RT({ argsMap: (e2) => [e2.getTrackId()] }), tw = RT({ argsMap: (e2) => [e2.getTrackId()] }), ZS((iw = class e2 extends wT {
        get isPlaying() {
          return !(!this._player || this._player.videoElementStatus !== am.PLAYING);
        }
        get __className__() {
          return "LocalVideoTrack";
        }
        constructor(e3, t2, i2, r2, n2, o2) {
          super(e3, n2), mp(this, "trackMediaType", "video"), mp(this, "_player", void 0), mp(this, "_videoBeautyProcessor", void 0), mp(this, "_videoVisibleTimer", null), mp(this, "_previousVideoVisibleStatus", void 0), mp(this, "_clearPreviousVideoVisibleStatus", () => this._previousVideoVisibleStatus = void 0), mp(this, "_encoderConfig", void 0), mp(this, "_scalabiltyMode", { numSpatialLayers: 1, numTemporalLayers: 1 }), mp(this, "_optimizationMode", void 0), mp(this, "_videoHeight", void 0), mp(this, "_videoWidth", void 0), mp(this, "_forceBitrateLimit", void 0), mp(this, "_enabled", true), mp(this, "processorDestination", void 0), mp(this, "processorContext", void 0), this.updateMediaStreamTrackResolution(), this._encoderConfig = t2, this._scalabiltyMode = i2, this._optimizationMode = r2, this._hints = o2 || [], -1 === this._hints.indexOf(lg.SCREEN_TRACK) && this.updateBitrateFromProfile(), this.processorContext = new eR(this.getTrackId(), "local"), this.processorDestination = new $v(this.processorContext), this.bindProcessorDestinationEvents();
        }
        play(e3) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          if ("string" == typeof e3) {
            const t3 = document.getElementById(e3);
            t3 ? e3 = t3 : (NE.warning("[".concat(this.getTrackId(), '] can not find "#').concat(e3, '" element, use document.body')), e3 = document.body);
          }
          NE.debug("[".concat(this.getTrackId(), "] start video playback"), JSON.stringify(t2));
          const i2 = _w(_w(_w({}, this._getDefaultPlayerConfig()), t2), {}, { trackId: this.getTrackId(), element: e3 });
          this._player ? this._player.updateConfig(i2) : (this._player = new ob(i2), this._player.updateVideoTrack(this._mediaStreamTrack)), this._player.play(), this._videoVisibleTimer && window.clearInterval(this._videoVisibleTimer), this._clearPreviousVideoVisibleStatus(), this._videoVisibleTimer = window.setInterval(() => {
            try {
              const e4 = this.getVideoElementVisibleStatus();
              this.emit(_g.VIDEO_ELEMENT_VISIBLE_STATUS, e4);
            } catch (e4) {
            }
          }, HE("CHECK_VIDEO_VISIBLE_INTERVAL"));
        }
        stop() {
          this._player && (this._videoVisibleTimer && (window.clearInterval(this._videoVisibleTimer), this._videoVisibleTimer = null), this._clearPreviousVideoVisibleStatus(), this._player.destroy(), this._player = void 0, NE.debug("[".concat(this.getTrackId(), "] stop video playback")));
        }
        async setEnabled(e3, t2) {
          if (!t2) {
            if (e3 === this._enabled)
              return;
            this.stateCheck("enabled", e3);
          }
          if (NE.info("[".concat(this.getTrackId(), "] start setEnabled"), e3), !e3) {
            this._originMediaStreamTrack.enabled = false;
            try {
              await BR(this, ug.NEED_DISABLE_TRACK, this);
            } catch (e4) {
              throw NE.error("[".concat(this.getTrackId(), "] setEnabled to false error"), e4.toString()), e4;
            }
            return t2 || (this._enabled = false), void NE.info("[".concat(this.getTrackId(), "] setEnabled to false success"));
          }
          this._originMediaStreamTrack.enabled = true;
          try {
            await BR(this, ug.NEED_ENABLE_TRACK, this);
          } catch (e4) {
            throw NE.error("[".concat(this.getTrackId(), "] setEnabled to true error"), e4.toString()), e4;
          }
          NE.info("[".concat(this.getTrackId(), "] setEnabled to true success")), t2 || (this._enabled = true);
        }
        async setMuted(e3) {
          e3 !== this._muted && (this.stateCheck("muted", e3), this._muted = e3, this._originMediaStreamTrack.enabled = !e3, NE.debug("[".concat(this.getTrackId(), "] start set muted: ").concat(e3)), e3 ? await BR(this, ug.NEED_MUTE_TRACK, this) : await BR(this, ug.NEED_UNMUTE_TRACK, this));
        }
        getStats() {
          XR(() => {
            NE.warning("[deprecated] LocalVideoTrack.getStats will be removed in the future, use AgoraRTCClient.getLocalVideoStats instead");
          }, "localVideoTrackGetStatsWarning");
          const e3 = GR(this, ug.GET_STATS);
          return e3 || _w({}, Bm);
        }
        async setBeautyEffect(e3) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          if (e3 || this._videoBeautyProcessor) {
            if (Kh() === Uh.IOS || Kh() === Uh.ANDROID)
              throw new vE(TE.INVALID_OPERATION, "can not enable beauty effect on mobile device");
            if (!this._enabled && e3)
              throw new vE(TE.TRACK_IS_DISABLED, "can not enable beauty effect when track is disabled");
            if (NE.info("[".concat(this.getTrackId(), "] start setBeautyEffect"), e3, JSON.stringify(t2)), this._videoBeautyProcessor || e3) {
              try {
                if (!this._videoBeautyProcessor)
                  if (this._videoBeautyProcessor = new wb(), this.processor) {
                    const e4 = this.processor;
                    this.pipe(this._videoBeautyProcessor).pipe(e4);
                  } else
                    this.pipe(this._videoBeautyProcessor).pipe(this.processorDestination);
                await this._videoBeautyProcessor.setBeautyEffectOptions(t2), e3 ? await this._videoBeautyProcessor.enable() : await this._videoBeautyProcessor.disable();
              } catch (e4) {
                throw NE.error("[".concat(this.getTrackId(), "] setBeautyEffect error"), e4.toString()), e4;
              }
              NE.info("[".concat(this.getTrackId(), "] setBeautyEffect success"));
            }
          }
        }
        getCurrentFrameData() {
          return this._player ? this._player.getCurrentFrame() : new ImageData(2, 2);
        }
        async getCurrentFrameImage(e3) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
          return this._player ? this._player.getCurrentFrameToUint8Array(e3, t2) : await tb(e3);
        }
        clone(t2, i2, r2, n2) {
          const o2 = this._mediaStreamTrack.clone();
          return new e2(o2, t2, i2, r2, n2);
        }
        async setBitrateLimit(e3) {
          if (NE.debug("[".concat(this.getTrackId(), "] set bitrate limit, ").concat(JSON.stringify(e3))), e3) {
            this._forceBitrateLimit = e3, this._encoderConfig && (this._encoderConfig.bitrateMax ? this._encoderConfig.bitrateMax = this._encoderConfig.bitrateMax < e3.max_bitrate ? this._encoderConfig.bitrateMax : e3.max_bitrate : this._encoderConfig.bitrateMax = e3.max_bitrate, this._encoderConfig.bitrateMin, this._encoderConfig.bitrateMin = e3.min_bitrate);
            try {
              await BR(this, ug.NEED_UPDATE_VIDEO_ENCODER, this);
            } catch (e4) {
              return e4.throw();
            }
          }
        }
        async setOptimizationMode(e3) {
          if ("motion" !== e3 && "detail" !== e3 && "balanced" !== e3)
            return void NE.error(TE.INVALID_PARAMS, "optimization mode must be motion, detail or balanced");
          const t2 = this._optimizationMode;
          try {
            this._optimizationMode = e3, await BR(this, ug.SET_OPTIMIZATION_MODE, this);
          } catch (e4) {
            throw this._optimizationMode = t2, NE.error("[".concat(this.getTrackId(), "] set optimization mode failed"), e4.toString()), e4;
          }
          NE.info("[".concat(this.getTrackId(), "] set optimization mode success (").concat(e3, ")"));
        }
        setScalabiltyMode(e3) {
          if (1 === e3.numSpatialLayers && 1 !== e3.numTemporalLayers)
            return NE.error(TE.INVALID_PARAMS, "scalability mode currently not supported, no SVC."), void (this._scalabiltyMode = { numSpatialLayers: 1, numTemporalLayers: 1 });
          this._scalabiltyMode = e3, NE.info("[".concat(this.getTrackId(), "] set scalability mode success (").concat(e3, ")"));
        }
        updateMediaStreamTrackResolution() {
          VR(this._originMediaStreamTrack).then((e3) => {
            let [t2, i2] = e3;
            this._videoHeight = i2, this._videoWidth = t2;
          }).catch(xR);
        }
        _updatePlayerSource() {
          this._player && this._player.updateVideoTrack(this._mediaStreamTrack);
        }
        _getDefaultPlayerConfig() {
          return { fit: "contain" };
        }
        updateBitrateFromProfile() {
          if (!this._encoderConfig)
            return;
          const { width: e3, height: t2, frameRate: i2 } = this.getMediaStreamTrackSettings();
          if (!e3 || !t2 || !i2)
            return;
          const [r2, n2] = function(e4, t3, i3) {
            const r3 = HE("BITRATE_ADAPTER_TYPE");
            let n3;
            const o2 = 200 * Math.pow(i3 / 15, 0.6) * Math.pow(e4 * t3 / 640 / 360, 0.75), s2 = o2;
            if ("STANDARD_BITRATE" === r3)
              n3 = 4 * o2;
            else {
              if ("COMPATIABLE_BITRATE" !== r3)
                return;
              n3 = 2 * o2;
            }
            return [Math.floor(n3), Math.floor(s2)];
          }(e3, t2, i2) || [void 0, void 0];
          this._encoderConfig.bitrateMin || this._encoderConfig.bitrateMax || (this._encoderConfig.bitrateMin = n2, this._encoderConfig.bitrateMax = r2, NE.debug("[".concat(this.getTrackId(), "] update bitrate from profile, [w: ").concat(e3, ", h: ").concat(t2, ", fps: ").concat(i2, "] => [brMax: ").concat(r2, ", brMin: ").concat(n2, "]")));
        }
        getVideoElementVisibleStatus() {
          try {
            var e3, t2;
            const i2 = null == this || null === (e3 = this._player) || void 0 === e3 ? void 0 : e3.getContainerElement(), r2 = { track: this, element: null == this || null === (t2 = this._player) || void 0 === t2 ? void 0 : t2.getVideoElement(), slot: null == i2 ? void 0 : i2.parentElement }, { element: n2, slot: o2 } = r2;
            if (this.isPlaying && n2 instanceof HTMLVideoElement && o2 instanceof HTMLElement) {
              const e4 = hw.checkOneElementVisible(n2), t3 = Object.assign({}, e4);
              if (t3.visible !== this._previousVideoVisibleStatus) {
                this._previousVideoVisibleStatus = t3.visible;
                const e5 = IT.reportApiInvoke(null, { tag: fm.TRACER, name: Em.LOCAL_VIDEO_TRACK_GET_VIDEO_VISIBLE, options: [this.getTrackId()] });
                t3.visible ? e5.onSuccess("Video is visible") : e5.onSuccess("Invisible because of ".concat(t3.reason));
              }
              return t3;
            }
            return;
          } catch (e4) {
            throw new vE(TE.GET_VIDEO_ELEMENT_VISIBLE_ERROR, e4.message);
          }
        }
        async renewMediaStreamTrack(e3) {
        }
        pipe(e3) {
          if (this._videoBeautyProcessor && e3 !== this._videoBeautyProcessor)
            return this._videoBeautyProcessor.pipe(e3);
          if (this.processor === e3)
            return e3;
          if (e3._source)
            throw new vE(TE.INVALID_OPERATION, "Processor ".concat(e3.name, " already piped, please call unpipe beforehand."));
          return this.unpipe(), this.processor = e3, this.processor._source = this, e3.updateInput({ track: this._originMediaStreamTrack, context: this.processorContext }), e3;
        }
        unpipe() {
          if (!this.processor)
            return;
          if (this._videoBeautyProcessor && this.processor === this._videoBeautyProcessor)
            return void this._videoBeautyProcessor.unpipe();
          const e3 = this.processor;
          this.processor._source = void 0, this.processor = void 0, e3.reset();
        }
        close() {
          super.close(), this.unbindProcessorDestinationEvents(), this.unbindProcessorContextEvents(), this.unpipe(), this.processorDestination._source && this.processorDestination._source.unpipe();
        }
        bindProcessorDestinationEvents() {
          this.processorDestination.on(Ng.ON_TRACK, async (e3) => {
            e3 ? e3 !== this._mediaStreamTrack && (this._mediaStreamTrack = e3, this._updatePlayerSource(), await BR(this, ug.NEED_REPLACE_TRACK, this)) : this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource(), await BR(this, ug.NEED_REPLACE_TRACK, this));
          });
        }
        unbindProcessorDestinationEvents() {
          this.processorDestination.removeAllListeners(Ng.ON_TRACK);
        }
        unbindProcessorContextEvents() {
          this.processorContext.removeAllListeners(Dg.REQUEST_UPDATE_CONSTRAINTS), this.processorContext.removeAllListeners(Dg.REQUEST_CONSTRAINTS);
        }
      }).prototype, "play", [Mb, Ub], Object.getOwnPropertyDescriptor(iw.prototype, "play"), iw.prototype), ZS(iw.prototype, "stop", [xb], Object.getOwnPropertyDescriptor(iw.prototype, "stop"), iw.prototype), ZS(iw.prototype, "setEnabled", [Vb, jb, Fb], Object.getOwnPropertyDescriptor(iw.prototype, "setEnabled"), iw.prototype), ZS(iw.prototype, "setMuted", [Bb, Gb, Wb], Object.getOwnPropertyDescriptor(iw.prototype, "setMuted"), iw.prototype), ZS(iw.prototype, "getStats", [Hb], Object.getOwnPropertyDescriptor(iw.prototype, "getStats"), iw.prototype), ZS(iw.prototype, "setBeautyEffect", [Kb, Yb], Object.getOwnPropertyDescriptor(iw.prototype, "setBeautyEffect"), iw.prototype), ZS(iw.prototype, "getCurrentFrameData", [qb], Object.getOwnPropertyDescriptor(iw.prototype, "getCurrentFrameData"), iw.prototype), ZS(iw.prototype, "getCurrentFrameImage", [Jb], Object.getOwnPropertyDescriptor(iw.prototype, "getCurrentFrameImage"), iw.prototype), ZS(iw.prototype, "setBitrateLimit", [Xb], Object.getOwnPropertyDescriptor(iw.prototype, "setBitrateLimit"), iw.prototype), ZS(iw.prototype, "setOptimizationMode", [zb], Object.getOwnPropertyDescriptor(iw.prototype, "setOptimizationMode"), iw.prototype), ZS(iw.prototype, "setScalabiltyMode", [Qb], Object.getOwnPropertyDescriptor(iw.prototype, "setScalabiltyMode"), iw.prototype), ZS(iw.prototype, "updateMediaStreamTrackResolution", [Zb], Object.getOwnPropertyDescriptor(iw.prototype, "updateMediaStreamTrackResolution"), iw.prototype), ZS(iw.prototype, "pipe", [$b], Object.getOwnPropertyDescriptor(iw.prototype, "pipe"), iw.prototype), ZS(iw.prototype, "unpipe", [ew], Object.getOwnPropertyDescriptor(iw.prototype, "unpipe"), iw.prototype), ZS(iw.prototype, "close", [tw], Object.getOwnPropertyDescriptor(iw.prototype, "close"), iw.prototype), iw), fw = (rw = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), nw = ov(), ow = bT("CameraVideoTrack", "_enabledMutex"), sw = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), aw = ov(), cw = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), dw = ov(), uw = RT({ argsMap: (e2) => [e2.getTrackId()] }), ZS((lw = class extends Ew {
        get __className__() {
          return "CameraVideoTrack";
        }
        constructor(e2, t2, i2, r2, n2, o2) {
          super(e2, t2.encoderConfig ? VE(t2.encoderConfig) : {}, r2, n2, o2), mp(this, "_config", void 0), mp(this, "_originalConstraints", void 0), mp(this, "_constraints", void 0), mp(this, "_enabled", true), mp(this, "_deviceName", "default"), mp(this, "tryResumeVideoForIOS15WeChat", async () => {
            ep() && !rp() && op() && this._enabled && !this._isClosed && (NE.debug("[".concat(this.getTrackId(), "] try capture camera media device for interrupted iOS 15 device on WeChat.")), await this.renewMediaStreamTrack());
          }), this._config = t2, this._originalConstraints = i2, this._constraints = i2, this._deviceName = e2.label, this._config.encoderConfig && (this._encoderConfig = VE(this._config.encoderConfig)), LT.on(CT.IOS_15_INTERRUPTION_END, this.tryResumeVideoForIOS15WeChat), LT.on(CT.IOS_INTERRUPTION_END, this.tryResumeVideoForIOS15WeChat), this.bindProcessorContextEvents();
        }
        async setDevice(e2) {
          if (NE.info("[".concat(this.getTrackId(), "] set device to ").concat(e2)), this._enabled)
            try {
              const t2 = await iv.getDeviceById(e2), i2 = {};
              i2.video = _w({}, this._constraints), i2.video.deviceId = { exact: e2 }, i2.video.facingMode = void 0, this._originMediaStreamTrack.stop();
              let r2 = null;
              try {
                r2 = await ZT(i2, this.getTrackId());
              } catch (e3) {
                throw NE.error("[".concat(this.getTrackId(), "] setDevice failed"), e3.toString()), r2 = await ZT({ video: this._constraints }, this.getTrackId()), await this._updateOriginMediaStreamTrack(r2.getVideoTracks()[0], false), e3;
              }
              await this._updateOriginMediaStreamTrack(r2.getVideoTracks()[0], false), this.updateMediaStreamTrackResolution(), this._deviceName = t2.label, this._config.cameraId = e2, this._constraints.deviceId = { exact: e2 };
            } catch (e3) {
              throw NE.error("[".concat(this.getTrackId(), "] setDevice error"), e3.toString()), e3;
            }
          else
            try {
              const t2 = await iv.getDeviceById(e2);
              this._deviceName = t2.label, this._config.cameraId = e2, this._constraints.deviceId = { exact: e2 };
            } catch (e3) {
              throw NE.error("[".concat(this.getTrackId(), "] setDevice error"), e3.toString()), e3;
            }
          NE.info("[".concat(this.getTrackId(), "] setDevice success"));
        }
        async setEnabled(e2, t2) {
          if (!t2) {
            if (e2 === this._enabled)
              return;
            this.stateCheck("enabled", e2);
          }
          if (NE.info("[".concat(this.getTrackId(), "] start setEnabled"), e2), !e2) {
            this._originMediaStreamTrack.onended = null, this._originMediaStreamTrack.stop(), t2 || (this._enabled = false);
            try {
              await BR(this, ug.NEED_DISABLE_TRACK, this);
            } catch (e3) {
              throw NE.error("[".concat(this.getTrackId(), "] setEnabled to false error"), e3.toString()), e3;
            }
            return void NE.info("[".concat(this.getTrackId(), "] setEnabled to false success"));
          }
          const i2 = _w({}, this._constraints), r2 = iv.searchDeviceIdByName(this._deviceName);
          r2 && !i2.deviceId && (i2.deviceId = { exact: r2 });
          try {
            const e3 = await ZT({ video: this._constraints }, this.getTrackId());
            await this._updateOriginMediaStreamTrack(e3.getVideoTracks()[0], false), await BR(this, ug.NEED_ENABLE_TRACK, this);
          } catch (e3) {
            throw NE.error("[".concat(this.getTrackId(), "] setEnabled true error"), e3.toString()), e3;
          }
          this.updateMediaStreamTrackResolution(), NE.info("[".concat(this.getTrackId(), "] setEnabled to true success")), t2 || (this._enabled = true);
        }
        async setEncoderConfiguration(e2, t2) {
          if (!this._enabled)
            throw new vE(TE.TRACK_IS_DISABLED, "can not set encoder configuration when track is disabled");
          e2 = VE(e2), this._forceBitrateLimit && (e2.bitrateMax = this._forceBitrateLimit.max_bitrate ? this._forceBitrateLimit.max_bitrate : e2.bitrateMax, e2.bitrateMin = this._forceBitrateLimit.min_bitrate ? this._forceBitrateLimit.min_bitrate : e2.bitrateMin);
          const i2 = qR(this._config);
          i2.encoderConfig = e2;
          const r2 = Nb(i2);
          (zh() || Zh() || np()) && (r2.deviceId = void 0), NE.debug("[".concat(this.getTrackId(), "] setEncoderConfiguration applyConstraints"), JSON.stringify(e2), JSON.stringify(r2));
          try {
            await this._originMediaStreamTrack.applyConstraints(r2), this.updateMediaStreamTrackResolution();
          } catch (e3) {
            const t3 = new vE(TE.UNEXPECTED_ERROR, e3.toString());
            throw NE.error("[".concat(this.getTrackId(), "] applyConstraints error"), t3.toString()), t3;
          }
          this._config = i2, this._constraints = r2, this._originalConstraints = r2, this._encoderConfig = e2, -1 === this._hints.indexOf(lg.SCREEN_TRACK) && this.updateBitrateFromProfile();
          try {
            await BR(this, ug.NEED_UPDATE_VIDEO_ENCODER, this);
          } catch (e3) {
            return e3.throw();
          }
        }
        _getDefaultPlayerConfig() {
          return { mirror: true, fit: "cover" };
        }
        onTrackEnded() {
          if ((Zh() || np()) && this._enabled && !this._isClosed && LT.duringInterruption) {
            const e2 = async () => {
              LT.off(CT.IOS_INTERRUPTION_END, e2), this._enabled && !this._isClosed && (NE.debug("[".concat(this.getTrackId(), "] try capture camera media device for interrupted iOS device.")), await this.setEnabled(false), await this.setEnabled(true));
            };
            LT.on(CT.IOS_INTERRUPTION_END, e2);
          } else
            NE.debug("[".concat(this.getTrackId(), "] track ended")), this.emit(_g.TRACK_ENDED);
        }
        async renewMediaStreamTrack(e2) {
          const t2 = e2 || this._constraints, i2 = iv.searchDeviceIdByName(this._deviceName);
          if (i2 && !t2.deviceId && (t2.deviceId = { exact: i2 }), this._enabled) {
            const e3 = await ZT({ video: t2 }, this.getTrackId());
            this._constraints = t2, await this._updateOriginMediaStreamTrack(e3.getVideoTracks()[0], true), this.updateMediaStreamTrackResolution();
          }
        }
        close() {
          super.close(), LT.off(CT.IOS_15_INTERRUPTION_END, this.tryResumeVideoForIOS15WeChat), LT.off(CT.IOS_INTERRUPTION_END, this.tryResumeVideoForIOS15WeChat);
        }
        bindProcessorContextEvents() {
          this.processorContext.on(Dg.REQUEST_UPDATE_CONSTRAINTS, async (e2, t2, i2) => {
            try {
              const i3 = Object.assign({}, this._originalConstraints, ...e2);
              await this.renewMediaStreamTrack(i3), t2();
            } catch (e3) {
              i2(e3);
            }
          }), this.processorContext.on(Dg.REQUEST_CONSTRAINTS, async (e2) => {
            e2(this._originMediaStreamTrack.getSettings());
          });
        }
      }).prototype, "setDevice", [rw, nw], Object.getOwnPropertyDescriptor(lw.prototype, "setDevice"), lw.prototype), ZS(lw.prototype, "setEnabled", [ow, sw, aw], Object.getOwnPropertyDescriptor(lw.prototype, "setEnabled"), lw.prototype), ZS(lw.prototype, "setEncoderConfiguration", [cw, dw], Object.getOwnPropertyDescriptor(lw.prototype, "setEncoderConfiguration"), lw.prototype), ZS(lw.prototype, "close", [uw], Object.getOwnPropertyDescriptor(lw.prototype, "close"), lw.prototype), lw);
      class mw {
        get hasVideo() {
          return this._video_enabled_ && !this._video_muted_ && this._video_added_;
        }
        get hasAudio() {
          return this._audio_enabled_ && !this._audio_muted_ && this._audio_added_;
        }
        get audioTrack() {
          if (this.hasAudio)
            return this._audioTrack;
        }
        get videoTrack() {
          if (this.hasVideo)
            return this._videoTrack;
        }
        constructor(e2, t2) {
          mp(this, "uid", void 0), mp(this, "_uintid", void 0), mp(this, "_trust_in_room_", true), mp(this, "_trust_audio_enabled_state_", true), mp(this, "_trust_video_enabled_state_", true), mp(this, "_trust_audio_mute_state_", true), mp(this, "_trust_video_mute_state_", true), mp(this, "_audio_muted_", false), mp(this, "_video_muted_", false), mp(this, "_audio_enabled_", true), mp(this, "_video_enabled_", true), mp(this, "_audio_added_", false), mp(this, "_video_added_", false), mp(this, "_trust_video_stream_added_state_", true), mp(this, "_trust_audio_stream_added_state_", true), mp(this, "_audioTrack", void 0), mp(this, "_videoTrack", void 0), mp(this, "_audioSSRC", void 0), mp(this, "_videoSSRC", void 0), mp(this, "_audioOrtc", void 0), mp(this, "_videoOrtc", void 0), mp(this, "_cname", void 0), mp(this, "_rtxSsrcId", void 0), this.uid = e2, this._uintid = t2;
        }
      }
      var gw = yl, Sw = Sd, Tw = Od;
      Ri({ target: "Promise", stat: true }, { try: function(e2) {
        var t2 = Sw.f(this), i2 = Tw(e2);
        return (i2.error ? t2.reject : t2.resolve)(i2.value), t2.promise;
      } });
      var vw = gw, Rw = Ri, Iw = h, yw = i, Cw = Gg, Aw = q, Ow = je, bw = wi, ww = nf, Nw = zg, Dw = DS, Pw = ae, Lw = nt("isConcatSpreadable"), kw = 9007199254740991, Mw = "Maximum allowed index exceeded", Uw = Iw.TypeError, xw = Pw >= 51 || !yw(function() {
        var e2 = [];
        return e2[Lw] = false, e2.concat()[0] !== e2;
      }), Vw = Dw("concat"), jw = function(e2) {
        if (!Aw(e2))
          return false;
        var t2 = e2[Lw];
        return void 0 !== t2 ? !!t2 : Cw(e2);
      };
      Rw({ target: "Array", proto: true, forced: !xw || !Vw }, { concat: function(e2) {
        var t2, i2, r2, n2, o2, s2 = Ow(this), a2 = Nw(s2, 0), c2 = 0;
        for (t2 = -1, r2 = arguments.length; t2 < r2; t2++)
          if (jw(o2 = -1 === t2 ? s2 : arguments[t2])) {
            if (c2 + (n2 = bw(o2)) > kw)
              throw Uw(Mw);
            for (i2 = 0; i2 < n2; i2++, c2++)
              i2 in o2 && ww(a2, c2, o2[i2]);
          } else {
            if (c2 >= kw)
              throw Uw(Mw);
            ww(a2, c2++, o2);
          }
        return a2.length = c2, a2;
      } });
      var Fw = {}, Bw = k, Gw = K, Ww = Dr.f, Hw = uf, Kw = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
      Fw.f = function(e2) {
        return Kw && "Window" == Bw(e2) ? function(e3) {
          try {
            return Ww(e3);
          } catch (e4) {
            return Hw(Kw);
          }
        }(e2) : Ww(Gw(e2));
      };
      var Yw = {}, qw = nt;
      Yw.f = qw;
      var Jw = J, Xw = Ge, zw = Yw, Qw = Ht.f, Zw = function(e2) {
        var t2 = Jw.Symbol || (Jw.Symbol = {});
        Xw(t2, e2) || Qw(t2, e2, { value: zw.f(e2) });
      }, $w = Ri, eN = h, tN = $, iN = m, rN = I, nN = d, oN = T, sN = ue, aN = i, cN = Ge, dN = Gg, uN = g, lN = q, hN = u, pN = me, _N = zt, EN = je, fN = K, mN = Et, gN = Lo, SN = N, TN = Pn, vN = hn, RN = Dr, IN = Fw, yN = Qr, CN = S, AN = Ht, ON = dn, bN = y, wN = Sc, NN = Fs, DN = Ne.exports, PN = Br, LN = qe, kN = nt, MN = Yw, UN = Zw, xN = na, VN = Ps, jN = nS.forEach, FN = hr("hidden"), BN = "Symbol", GN = kN("toPrimitive"), WN = VN.set, HN = VN.getterFor(BN), KN = Object.prototype, YN = eN.Symbol, qN = YN && YN.prototype, JN = eN.TypeError, XN = eN.QObject, zN = tN("JSON", "stringify"), QN = CN.f, ZN = AN.f, $N = IN.f, eD = bN.f, tD = nN([].push), iD = DN("symbols"), rD = DN("op-symbols"), nD = DN("string-to-symbol-registry"), oD = DN("symbol-to-string-registry"), sD = DN("wks"), aD = !XN || !XN.prototype || !XN.prototype.findChild, cD = oN && aN(function() {
        return 7 != TN(ZN({}, "a", { get: function() {
          return ZN(this, "a", { value: 7 }).a;
        } })).a;
      }) ? function(e2, t2, i2) {
        var r2 = QN(KN, t2);
        r2 && delete KN[t2], ZN(e2, t2, i2), r2 && e2 !== KN && ZN(KN, t2, r2);
      } : ZN, dD = function(e2, t2) {
        var i2 = iD[e2] = TN(qN);
        return WN(i2, { type: BN, tag: e2, description: t2 }), oN || (i2.description = t2), i2;
      }, uD = function(e2, t2, i2) {
        e2 === KN && uD(rD, t2, i2), _N(e2);
        var r2 = mN(t2);
        return _N(i2), cN(iD, r2) ? (i2.enumerable ? (cN(e2, FN) && e2[FN][r2] && (e2[FN][r2] = false), i2 = TN(i2, { enumerable: SN(0, false) })) : (cN(e2, FN) || ZN(e2, FN, SN(1, {})), e2[FN][r2] = true), cD(e2, r2, i2)) : ZN(e2, r2, i2);
      }, lD = function(e2, t2) {
        _N(e2);
        var i2 = fN(t2), r2 = vN(i2).concat(ED(i2));
        return jN(r2, function(t3) {
          oN && !rN(hD, i2, t3) || uD(e2, t3, i2[t3]);
        }), e2;
      }, hD = function(e2) {
        var t2 = mN(e2), i2 = rN(eD, this, t2);
        return !(this === KN && cN(iD, t2) && !cN(rD, t2)) && (!(i2 || !cN(this, t2) || !cN(iD, t2) || cN(this, FN) && this[FN][t2]) || i2);
      }, pD = function(e2, t2) {
        var i2 = fN(e2), r2 = mN(t2);
        if (i2 !== KN || !cN(iD, r2) || cN(rD, r2)) {
          var n2 = QN(i2, r2);
          return !n2 || !cN(iD, r2) || cN(i2, FN) && i2[FN][r2] || (n2.enumerable = true), n2;
        }
      }, _D = function(e2) {
        var t2 = $N(fN(e2)), i2 = [];
        return jN(t2, function(e3) {
          cN(iD, e3) || cN(PN, e3) || tD(i2, e3);
        }), i2;
      }, ED = function(e2) {
        var t2 = e2 === KN, i2 = $N(t2 ? rD : fN(e2)), r2 = [];
        return jN(i2, function(e3) {
          !cN(iD, e3) || t2 && !cN(KN, e3) || tD(r2, iD[e3]);
        }), r2;
      };
      (sN || (NN(qN = (YN = function() {
        if (hN(qN, this))
          throw JN("Symbol is not a constructor");
        var e2 = arguments.length && void 0 !== arguments[0] ? gN(arguments[0]) : void 0, t2 = LN(e2), i2 = function(e3) {
          this === KN && rN(i2, rD, e3), cN(this, FN) && cN(this[FN], t2) && (this[FN][t2] = false), cD(this, t2, SN(1, e3));
        };
        return oN && aD && cD(KN, t2, { configurable: true, set: i2 }), dD(t2, e2);
      }).prototype, "toString", function() {
        return HN(this).tag;
      }), NN(YN, "withoutSetter", function(e2) {
        return dD(LN(e2), e2);
      }), bN.f = hD, AN.f = uD, ON.f = lD, CN.f = pD, RN.f = IN.f = _D, yN.f = ED, MN.f = function(e2) {
        return dD(kN(e2), e2);
      }, oN && ZN(qN, "description", { configurable: true, get: function() {
        return HN(this).description;
      } })), $w({ global: true, wrap: true, forced: !sN, sham: !sN }, { Symbol: YN }), jN(vN(sD), function(e2) {
        UN(e2);
      }), $w({ target: BN, stat: true, forced: !sN }, { for: function(e2) {
        var t2 = gN(e2);
        if (cN(nD, t2))
          return nD[t2];
        var i2 = YN(t2);
        return nD[t2] = i2, oD[i2] = t2, i2;
      }, keyFor: function(e2) {
        if (!pN(e2))
          throw JN(e2 + " is not a symbol");
        if (cN(oD, e2))
          return oD[e2];
      }, useSetter: function() {
        aD = true;
      }, useSimple: function() {
        aD = false;
      } }), $w({ target: "Object", stat: true, forced: !sN, sham: !oN }, { create: function(e2, t2) {
        return void 0 === t2 ? TN(e2) : lD(TN(e2), t2);
      }, defineProperty: uD, defineProperties: lD, getOwnPropertyDescriptor: pD }), $w({ target: "Object", stat: true, forced: !sN }, { getOwnPropertyNames: _D, getOwnPropertySymbols: ED }), $w({ target: "Object", stat: true, forced: aN(function() {
        yN.f(1);
      }) }, { getOwnPropertySymbols: function(e2) {
        return yN.f(EN(e2));
      } }), zN) && $w({ target: "JSON", stat: true, forced: !sN || aN(function() {
        var e2 = YN();
        return "[null]" != zN([e2]) || "{}" != zN({ a: e2 }) || "{}" != zN(Object(e2));
      }) }, { stringify: function(e2, t2, i2) {
        var r2 = wN(arguments), n2 = t2;
        if ((lN(t2) || void 0 !== e2) && !pN(e2))
          return dN(t2) || (t2 = function(e3, t3) {
            if (uN(n2) && (t3 = rN(n2, this, e3, t3)), !pN(t3))
              return t3;
          }), r2[1] = t2, iN(zN, null, r2);
      } });
      if (!qN[GN]) {
        var fD = qN.valueOf;
        NN(qN, GN, function(e2) {
          return rN(fD, this);
        });
      }
      xN(YN, BN), PN[FN] = true, Zw("asyncIterator"), Zw("hasInstance"), Zw("isConcatSpreadable"), Zw("iterator"), Zw("match"), Zw("matchAll"), Zw("replace"), Zw("search"), Zw("species"), Zw("split"), Zw("toPrimitive"), Zw("toStringTag"), Zw("unscopables"), na(h.JSON, "JSON", true);
      var mD = J.Symbol;
      Zw("asyncDispose"), Zw("dispose"), Zw("matcher"), Zw("metadata"), Zw("observable"), Zw("patternMatch"), Zw("replaceAll");
      var gD = mD, SD = Yw.f("asyncIterator"), TD = SD;
      function vD(e2) {
        this.wrapped = e2;
      }
      function RD(e2) {
        var t2, i2;
        function r2(t3, i3) {
          try {
            var o2 = e2[t3](i3), s2 = o2.value, a2 = s2 instanceof vD;
            vw.resolve(a2 ? s2.wrapped : s2).then(function(e3) {
              a2 ? r2("return" === t3 ? "return" : "next", e3) : n2(o2.done ? "return" : "normal", e3);
            }, function(e3) {
              r2("throw", e3);
            });
          } catch (e3) {
            n2("throw", e3);
          }
        }
        function n2(e3, n3) {
          switch (e3) {
            case "return":
              t2.resolve({ value: n3, done: true });
              break;
            case "throw":
              t2.reject(n3);
              break;
            default:
              t2.resolve({ value: n3, done: false });
          }
          (t2 = t2.next) ? r2(t2.key, t2.arg) : i2 = null;
        }
        this._invoke = function(e3, n3) {
          return new vw(function(o2, s2) {
            var a2 = { key: e3, arg: n3, resolve: o2, reject: s2, next: null };
            i2 ? i2 = i2.next = a2 : (t2 = i2 = a2, r2(e3, n3));
          });
        }, "function" != typeof e2.return && (this.return = void 0);
      }
      function ID(e2) {
        return function() {
          return new RD(e2.apply(this, arguments));
        };
      }
      function yD(e2) {
        return new vD(e2);
      }
      RD.prototype["function" == typeof gD && TD || "@@asyncIterator"] = function() {
        return this;
      }, RD.prototype.next = function(e2) {
        return this._invoke("next", e2);
      }, RD.prototype.throw = function(e2) {
        return this._invoke("throw", e2);
      }, RD.prototype.return = function(e2) {
        return this._invoke("return", e2);
      };
      var CD = Yw.f("iterator");
      function AD(e2, t2) {
        var i2 = {}, r2 = false;
        function n2(i3, n3) {
          return r2 = true, n3 = new vw(function(t3) {
            t3(e2[i3](n3));
          }), { done: false, value: t2(n3) };
        }
        return i2[void 0 !== gD && CD || "@@iterator"] = function() {
          return this;
        }, i2.next = function(e3) {
          return r2 ? (r2 = false, e3) : n2("next", e3);
        }, "function" == typeof e2.throw && (i2.throw = function(e3) {
          if (r2)
            throw r2 = false, e3;
          return n2("throw", e3);
        }), "function" == typeof e2.return && (i2.return = function(e3) {
          return r2 ? (r2 = false, e3) : n2("return", e3);
        }), i2;
      }
      var OD = SD, bD = { exports: {} };
      function wD(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function ND(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? wD(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : wD(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function DD(e2, t2, i2, r2, n2, o2, s2) {
        let a2 = [], c2 = [], d2 = [], u2 = [], l2 = false, h2 = false;
        if (bD.exports.parse(e2).mediaDescriptions.forEach((e3) => {
          s2 && s2 !== e3.attributes.direction || ("video" !== e3.media.mediaType || l2 || (c2 = e3.attributes.payloads, u2 = e3.attributes.extmaps, l2 = true), "audio" !== e3.media.mediaType || h2 || (a2 = e3.attributes.payloads, d2 = e3.attributes.extmaps, h2 = true));
        }), !u2 || 0 === c2.length)
          throw new Error("Cannot get video capabilities from SDP.");
        if (!d2 || 0 === a2.length)
          throw new Error("Cannot get audio capabilities from SDP.");
        return c2.forEach((e3) => {
          var t3;
          null !== (t3 = e3.rtpMap) && void 0 !== t3 && t3.clockRate && (e3.rtpMap.clockRate = parseInt(e3.rtpMap.clockRate));
        }), a2.forEach((e3) => {
          var t3;
          null !== (t3 = e3.rtpMap) && void 0 !== t3 && t3.clockRate && (e3.rtpMap.clockRate = parseInt(e3.rtpMap.clockRate));
        }), t2 && (a2 = a2.filter((e3) => {
          var t3;
          return "rtx" !== (null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase());
        }), c2 = c2.filter((e3) => {
          var t3;
          return "rtx" !== (null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase());
        })), i2 && (c2 = c2.filter((e3) => {
          var t3;
          return !/(red)|(ulpfec)|(flexfec)/i.test((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName) || "");
        })), r2 && (a2 = a2.filter((e3) => {
          var t3;
          return !/(red)|(ulpfec)|(flexfec)/i.test((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName) || "");
        })), n2 && (null == n2 ? void 0 : n2.length) > 0 && (a2 = a2.filter((e3) => {
          var t3;
          return n2.includes((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "");
        })), o2 && (null == o2 ? void 0 : o2.length) > 0 && (c2 = c2.filter((e3) => {
          var t3;
          return o2.includes((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "");
        })), { audioCodecs: a2, videoCodecs: c2, audioExtensions: d2, videoExtensions: u2 };
      }
      function PD(e2) {
        const t2 = bD.exports.parse(e2);
        let i2, r2;
        for (const e3 of t2.mediaDescriptions) {
          if (!i2) {
            const t3 = e3.attributes.iceUfrag, r3 = e3.attributes.icePwd;
            if (!t3 || !r3)
              throw new Error("Cannot get iceUfrag or icePwd from SDP.");
            i2 = { iceUfrag: t3, icePwd: r3 };
          }
          if (!r2) {
            const t3 = e3.attributes.fingerprints;
            t3.length > 0 && (r2 = { fingerprints: t3 });
          }
        }
        if (!r2 && t2.attributes.fingerprints.length > 0 && (r2 = { fingerprints: t2.attributes.fingerprints }), !r2 || !i2)
          throw new Error("Cannot get iceParameters or dtlsParameters from SDP.");
        return { iceParameters: i2, dtlsParameters: r2 };
      }
      function LD(e2, t2) {
        const i2 = [], r2 = e2.attributes.ssrcGroups.filter((e3) => "FID" === e3.semantic), n2 = e2.attributes.ssrcGroups.find((e3) => "SIM" === e3.semantic), o2 = e2.attributes.ssrcs;
        if (n2)
          n2.ssrcIds.forEach((e3) => {
            var n3;
            const o3 = null === (n3 = r2.find((t3) => t3.ssrcIds[0] === e3)) || void 0 === n3 ? void 0 : n3.ssrcIds[1];
            i2.push({ ssrcId: e3, rtx: t2 ? o3 : void 0 });
          });
        else if (r2.length > 0) {
          const e3 = r2[0].ssrcIds[0], n3 = r2[0].ssrcIds[1];
          i2.push({ ssrcId: e3, rtx: t2 ? n3 : void 0 });
        } else {
          if (0 === o2.length)
            throw new Error("No ssrcs found on local media description.");
          i2.push({ ssrcId: o2[0].ssrcId });
        }
        return i2;
      }
      function kD(e2, t2) {
        const { cname: i2 } = e2;
        let r2;
        t2 && t2.ip && "number" == typeof t2.port ? (r2 = [{ foundation: "udpcandidate", componentId: "1", transport: "udp", priority: "2103266323", connectionAddress: t2.ip, port: t2.port.toString(), type: "host", extension: {} }], NE.debug("Using remote candidate from AP ".concat(t2.ip, ":").concat(t2.port)), t2.ip6 && (r2.push({ foundation: "udpcandidate", componentId: "1", transport: "udp", priority: "2103266323", connectionAddress: t2.ip6, port: t2.port.toString(), type: "host", extension: {} }), NE.debug("Using IPV6 remote candidate from AP ".concat(t2.ip6, ":").concat(t2.port)))) : r2 = e2.iceParameters.candidates.map((e3) => ({ foundation: e3.foundation, componentId: "1", transport: e3.protocol, priority: e3.priority.toString(), connectionAddress: e3.ip, port: e3.port.toString(), type: e3.type, extension: {} }));
        const n2 = { fingerprints: e2.dtlsParameters.fingerprints.map((e3) => ({ hashFunction: e3.algorithm, fingerprint: e3.fingerprint })) }, o2 = { iceUfrag: e2.iceParameters.iceUfrag, icePwd: e2.iceParameters.icePwd };
        let s2;
        switch (e2.dtlsParameters.role) {
          case "server":
            s2 = "passive";
            break;
          case "client":
            s2 = "active";
            break;
          case "auto":
            s2 = "actpass";
        }
        return { dtlsParameters: n2, iceParameters: o2, candidates: r2, rtpCapabilities: HD(e2.rtpCapabilities), setup: s2, cname: i2 };
      }
      function MD(e2, t2, i2) {
        const r2 = [], n2 = [];
        return e2.forEach((e3) => {
          let { ssrcId: o2, rtx: s2 } = e3;
          const a2 = MR(8, "track-"), c2 = { ssrcId: o2, attributes: ND({ label: a2, mslabel: i2 = i2 || MR(10, ""), msid: "".concat(i2, " ").concat(a2) }, t2 && { cname: t2 }) };
          if (r2.push(c2), void 0 !== s2) {
            const e4 = { ssrcId: s2, attributes: ND({ label: a2, mslabel: i2, msid: "".concat(i2, " ").concat(a2) }, t2 && { cname: t2 }) };
            r2.push(e4), n2.push({ semantic: "FID", ssrcIds: [o2, s2] });
          }
        }), e2.length > 1 && n2.push({ semantic: "SIM", ssrcIds: e2.map((e3) => {
          let { ssrcId: t3 } = e3;
          return t3;
        }) }), { ssrcs: r2, ssrcGroups: n2 };
      }
      function UD(e2, t2) {
        t2 instanceof aR && e2.attributes.payloads.forEach((e3) => {
          var i2;
          const r2 = null === (i2 = e3.rtpMap) || void 0 === i2 ? void 0 : i2.encodingName.toLowerCase();
          if (!r2 || -1 === ["opus", "pcmu", "pcma", "g722"].indexOf(r2))
            return;
          e3.fmtp || (e3.fmtp = { parameters: {} }), e3.fmtp.parameters.minptime = "10", e3.fmtp.parameters.useinbandfec = "1";
          const n2 = t2._encoderConfig;
          n2 && "pcmu" !== r2 && "pcma" !== r2 && "g722" !== r2 && (n2.bitrate && !Qh() && (e3.fmtp.parameters.maxaveragebitrate = "".concat(Math.floor(1e3 * n2.bitrate))), n2.sampleRate && (e3.fmtp.parameters.maxplaybackrate = "".concat(n2.sampleRate), e3.fmtp.parameters["sprop-maxcapturerate"] = "".concat(n2.sampleRate)), n2.stereo && (e3.fmtp.parameters.stereo = "1", e3.fmtp.parameters["sprop-stereo"] = "1"));
        });
      }
      function xD(e2) {
        const t2 = e2.attributes.unrecognized.findIndex((e3) => "x-google-flag" === e3.attField && "conference" === e3.attValue);
        -1 !== t2 && e2.attributes.unrecognized.splice(t2, 1);
      }
      function VD(e2, t2) {
        if (!(t2 instanceof Ew && t2._encoderConfig && -1 === t2._hints.indexOf(lg.SCREEN_TRACK)))
          return;
        const i2 = t2._encoderConfig;
        jg().supportMinBitrate && i2.bitrateMin && e2.attributes.payloads.forEach((e3) => {
          var t3;
          ["h264", "vp8", "vp9", "av1"].includes((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "") && (e3.fmtp || (e3.fmtp = { parameters: {} }), e3.fmtp.parameters["x-google-min-bitrate"] = "".concat(i2.bitrateMin));
        }), jg().supportMinBitrate && !t2._hints.includes(lg.LOW_STREAM) && i2.bitrateMax && e2.attributes.payloads.forEach((e3) => {
          var t3;
          ["h264", "vp8", "vp9", "av1"].includes((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "") && (e3.fmtp || (e3.fmtp = { parameters: {} }), e3.fmtp.parameters["x-google-start-bitrate"] = "".concat(HE("X_GOOGLE_START_BITRATE") || Math.floor(i2.bitrateMax)));
        });
      }
      function jD(e2) {
        if ("video" !== e2.media.mediaType)
          return;
        const t2 = Bh();
        if (t2.name !== xh.SAFARI && t2.os !== Uh.IOS)
          return;
        const i2 = e2.attributes.extmaps.findIndex((e3) => /video-orientation/g.test(e3.extensionName));
        -1 !== i2 && e2.attributes.extmaps.splice(i2, 1);
      }
      function FD(e2, t2, i2) {
        if (!t2)
          return;
        let r2, n2;
        if ("video" === e2.media.mediaType ? (r2 = i2.videoExtensions, n2 = i2.videoCodecs) : (r2 = i2.audioExtensions, n2 = i2.audioCodecs), true === t2.tcc) {
          const t3 = r2.find((e3) => "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" === e3.extensionName);
          if (t3) {
            e2.attributes.extmaps.find((e3) => "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" === e3.extensionName) || e2.attributes.extmaps.push({ entry: t3.entry, extensionName: "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" });
            (function(e3, t4) {
              return t4.filter((t5) => !!e3.find((e4) => e4.payloadType === t5.payloadType && !!e4.rtcpFeedbacks.find((e5) => "transport-cc" === e5.type)));
            })(n2, e2.attributes.payloads).forEach((e3) => {
              e3.rtcpFeedbacks.find((e4) => "transport-cc" === e4.type) || e3.rtcpFeedbacks.push({ type: "transport-cc" });
            });
          }
        } else if (false === t2.tcc) {
          const t3 = e2.attributes.extmaps.findIndex((e3) => "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" === e3.extensionName);
          -1 !== t3 && e2.attributes.extmaps.splice(t3, 1), e2.attributes.payloads.forEach((e3) => {
            const t4 = e3.rtcpFeedbacks.findIndex((e4) => "transport-cc" === e4.type);
            -1 !== t4 && e3.rtcpFeedbacks.splice(t4, 1);
          });
        }
        if (true === t2.remb) {
          const t3 = r2.find((e3) => "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" === e3.extensionName);
          if (t3) {
            e2.attributes.extmaps.find((e3) => "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" === e3.extensionName) || e2.attributes.extmaps.push({ entry: t3.entry, extensionName: "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" });
            (function(e3, t4) {
              return t4.filter((t5) => !!e3.find((e4) => e4.payloadType === t5.payloadType && !!e4.rtcpFeedbacks.find((e5) => "goog-remb" === e5.type)));
            })(n2, e2.attributes.payloads).forEach((e3) => {
              e3.rtcpFeedbacks.find((e4) => "goog-remb" === e4.type) || e3.rtcpFeedbacks.push({ type: "goog-remb" });
            });
          }
        } else if (false === t2.remb) {
          const t3 = e2.attributes.extmaps.findIndex((e3) => "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" === e3.extensionName);
          -1 !== t3 && e2.attributes.extmaps.splice(t3, 1), e2.attributes.payloads.forEach((e3) => {
            const t4 = e3.rtcpFeedbacks.findIndex((e4) => "goog-remb" === e4.type);
            -1 !== t4 && e3.rtcpFeedbacks.splice(t4, 1);
          });
        }
      }
      function BD(e2, t2, i2) {
        if (Qh())
          return;
        if ("video" !== e2.media.mediaType)
          return;
        if (!(t2 instanceof Ew))
          return;
        if ("vp9" !== i2 && "vp8" !== i2)
          return;
        if ("vp8" === i2 && !HE("SIMULCAST"))
          return;
        if (void 0 === t2._scalabiltyMode || t2._scalabiltyMode.numSpatialLayers <= 1)
          return;
        const r2 = "vp8" === i2 ? 2 : t2._scalabiltyMode.numSpatialLayers, n2 = e2.attributes.ssrcs[0], o2 = e2.attributes.ssrcGroups.find((e3) => "FID" === e3.semantic && e3.ssrcIds[0] === n2.ssrcId), s2 = { semantic: "SIM", ssrcIds: [n2.ssrcId] };
        for (let t3 = 1; t3 < r2; t3++)
          e2.attributes.ssrcs.push({ ssrcId: n2.ssrcId + t3, attributes: qR(n2.attributes) }), s2.ssrcIds.push(n2.ssrcId + t3), o2 && (e2.attributes.ssrcs.push({ ssrcId: o2.ssrcIds[1] + t3, attributes: qR(n2.attributes) }), e2.attributes.ssrcGroups.push({ semantic: "FID", ssrcIds: [n2.ssrcId + t3, o2.ssrcIds[1] + t3] }));
        e2.attributes.ssrcGroups.unshift(s2);
      }
      async function GD(e2, t2, i2, r2, n2) {
        const o2 = new RTCPeerConnection();
        o2.addTransceiver("video", { direction: "sendonly" }), o2.addTransceiver("audio", { direction: "sendonly" }), o2.addTransceiver("video", { direction: "recvonly" }), o2.addTransceiver("audio", { direction: "recvonly" });
        const s2 = (await o2.createOffer()).sdp, a2 = DD(s2, e2, t2, i2, r2, n2, "sendonly"), c2 = DD(s2, e2, t2, i2, r2, n2, "recvonly"), d2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, u2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, l2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] };
        if (WD(a2, c2, "videoExtensions", d2, u2, l2), WD(a2, c2, "videoCodecs", d2, u2, l2), WD(a2, c2, "audioExtensions", d2, u2, l2), WD(a2, c2, "audioCodecs", d2, u2, l2), HE("RAISE_H264_BASELINE_PRIORITY")) {
          const e3 = l2.videoCodecs.findIndex((e4) => {
            var t3, i3;
            return "h264" === (null === (t3 = e4.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLocaleLowerCase()) && "42001f" === (null === (i3 = e4.fmtp) || void 0 === i3 ? void 0 : i3.parameters["profile-level-id"]);
          });
          if (-1 !== e3) {
            const t3 = l2.videoCodecs.findIndex((e4) => {
              var t4;
              return "h264" === (null === (t4 = e4.rtpMap) || void 0 === t4 ? void 0 : t4.encodingName.toLocaleLowerCase());
            });
            if (t3 < e3) {
              NE.debug("raising H264 baseline profile priority");
              const i3 = l2.videoCodecs[e3];
              l2.videoCodecs.splice(e3, 1), l2.videoCodecs.splice(t3, 0, i3);
            }
            -1 !== t3 && (u2.videoCodecs = u2.videoCodecs.filter((e4) => {
              var t4, i3;
              return !("h264" === (null === (t4 = e4.rtpMap) || void 0 === t4 ? void 0 : t4.encodingName.toLocaleLowerCase()) && "42001f" !== (null === (i3 = e4.fmtp) || void 0 === i3 ? void 0 : i3.parameters["profile-level-id"]));
            })), -1 !== t3 && HE("FILTER_SEND_H264_BASELINE") && (d2.videoCodecs = d2.videoCodecs.filter((e4) => {
              var t4, i3;
              return !("h264" === (null === (t4 = e4.rtpMap) || void 0 === t4 ? void 0 : t4.encodingName.toLocaleLowerCase()) && "42001f" !== (null === (i3 = e4.fmtp) || void 0 === i3 ? void 0 : i3.parameters["profile-level-id"]));
            }));
          }
        }
        try {
          o2.close();
        } catch (e3) {
        }
        return { send: d2, recv: u2, sendrecv: l2 };
      }
      function WD(e2, t2, i2, r2, n2, o2) {
        if ("videoExtensions" === i2 || "audioExtensions" === i2) {
          const s2 = [];
          return e2[i2].forEach((e3) => {
            t2[i2].some((t3, i3) => {
              if (e3.entry === t3.entry && e3.extensionName === t3.extensionName)
                return s2.push(i3), true;
            }) ? o2[i2].push(e3) : r2[i2].push(e3);
          }), void t2[i2].forEach((e3, t3) => {
            -1 === s2.indexOf(t3) && n2[i2].push(e3);
          });
        }
        if ("videoCodecs" === i2 || "audioCodecs" === i2) {
          const s2 = [];
          return e2[i2].forEach((e3) => {
            t2[i2].some((t3, i3) => {
              if (e3.payloadType === t3.payloadType && JSON.stringify(e3) === JSON.stringify(t3))
                return s2.push(i3), true;
            }) ? o2[i2].push(e3) : r2[i2].push(e3);
          }), void t2[i2].forEach((e3, t3) => {
            -1 === s2.indexOf(t3) && n2[i2].push(e3);
          });
        }
      }
      function HD(e2) {
        const { send: t2, recv: i2, sendrecv: r2 } = e2;
        if (!r2) {
          if (!t2 || !i2)
            throw new Error("cannot merge rtp capabilities because one of send or recv is empty!");
          return { send: t2, recv: i2 };
        }
        let n2, o2;
        return t2 ? (n2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, n2.audioCodecs = [...t2.audioCodecs, ...r2.audioCodecs], n2.videoCodecs = [...t2.videoCodecs, ...r2.videoCodecs], n2.audioExtensions = [...t2.audioExtensions, ...r2.audioExtensions], n2.videoExtensions = [...t2.videoExtensions, ...r2.videoExtensions]) : n2 = r2, i2 ? (o2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, o2.audioCodecs = [...i2.audioCodecs, ...r2.audioCodecs], o2.videoCodecs = [...i2.videoCodecs, ...r2.videoCodecs], o2.audioExtensions = [...i2.audioExtensions, ...r2.audioExtensions], o2.videoExtensions = [...i2.videoExtensions, ...r2.videoExtensions]) : o2 = r2, { send: n2, recv: o2 };
      }
      function KD(e2) {
        if ("audio" !== e2.media.mediaType)
          return;
        e2.attributes.payloads.filter((e3) => {
          var t2;
          return "opus" === (null === (t2 = e3.rtpMap) || void 0 === t2 ? void 0 : t2.encodingName.toLowerCase());
        }).forEach((e3) => {
          e3.fmtp || (e3.fmtp = { parameters: {} }), e3.fmtp.parameters.stereo = "1", e3.fmtp.parameters["sprop-stereo"] = "1";
        });
      }
      !function(e2, t2) {
        e2.exports = (() => {
          var e3 = { 8: (e4, t4, i3) => {
            i3.r(t4), i3.d(t4, { Parser: () => R2, Printer: () => O2, parse: () => D2, print: () => P2 });
            const r2 = "\n", n2 = "".concat("\r").concat(r2), o2 = " ";
            let s2;
            function a2(e5) {
              return e5 >= "0" && e5 <= "9";
            }
            function c2(e5) {
              return e5 >= "!" && e5 <= "~";
            }
            function d2(e5) {
              return c2(e5) || e5 >= "Â" && e5 <= "Ã¿";
            }
            function u2(e5) {
              return "!" === e5 || e5 >= "#" && e5 <= "'" || e5 >= "*" && e5 <= "+" || e5 >= "-" && e5 <= "." || e5 >= "0" && e5 <= "9" || e5 >= "A" && e5 <= "Z" || e5 >= "^" && e5 <= "~";
            }
            function l2(e5) {
              return e5 >= "1" && e5 <= "9";
            }
            function h2(e5) {
              return e5 >= "A" && e5 <= "Z" || e5 >= "a" && e5 <= "z";
            }
            function p2(e5) {
              return "d" === e5 || "h" === e5 || "m" === e5 || "s" === e5;
            }
            function _2(e5) {
              return e5 > "" && e5 < "	" || e5 > "\v" && e5 < "\f" || e5 > "" && e5 < "Ã¿";
            }
            function E2(e5) {
              return h2(e5) || a2(e5) || "+" === e5 || "/" === e5;
            }
            function f2(e5) {
              return a2(e5) || h2(e5) || "+" === e5 || "/" === e5 || "-" === e5 || "_" === e5;
            }
            function m2(e5) {
              return h2(e5) || a2(e5) || "+" === e5 || "/" === e5;
            }
            function g2(e5, t5) {
              var i4 = Object.keys(e5);
              if (Object.getOwnPropertySymbols) {
                var r3 = Object.getOwnPropertySymbols(e5);
                t5 && (r3 = r3.filter(function(t6) {
                  return Object.getOwnPropertyDescriptor(e5, t6).enumerable;
                })), i4.push.apply(i4, r3);
              }
              return i4;
            }
            function S2(e5) {
              for (var t5 = 1; t5 < arguments.length; t5++) {
                var i4 = null != arguments[t5] ? arguments[t5] : {};
                t5 % 2 ? g2(Object(i4), true).forEach(function(t6) {
                  T2(e5, t6, i4[t6]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e5, Object.getOwnPropertyDescriptors(i4)) : g2(Object(i4)).forEach(function(t6) {
                  Object.defineProperty(e5, t6, Object.getOwnPropertyDescriptor(i4, t6));
                });
              }
              return e5;
            }
            function T2(e5, t5, i4) {
              return t5 in e5 ? Object.defineProperty(e5, t5, { value: i4, enumerable: true, configurable: true, writable: true }) : e5[t5] = i4, e5;
            }
            !function(e5) {
              e5.VERSION = "v", e5.ORIGIN = "o", e5.SESSION_NAME = "s", e5.INFORMATION = "i", e5.URI = "u", e5.EMAIL = "e", e5.PHONE = "p", e5.CONNECTION = "c", e5.BANDWIDTH = "b", e5.TIME = "t", e5.REPEAT = "r", e5.ZONE_ADJUSTMENTS = "z", e5.KEY = "k", e5.ATTRIBUTE = "a", e5.MEDIA = "m";
            }(s2 || (s2 = {}));
            class v2 {
              consumeText(e5, t5) {
                let i4 = t5;
                for (; i4 < e5.length; ) {
                  const t6 = e5[i4];
                  if ("\0" === t6 || "\r" === t6 || t6 === r2)
                    break;
                  i4 += 1;
                }
                if (i4 - t5 == 0)
                  throw new Error("Invalid text, at ".concat(e5));
                return i4;
              }
              consumeUnicastAddress(e5, t5, i4) {
                return this.consumeTill(e5, t5, o2);
              }
              consumeOneOrMore(e5, t5, i4) {
                let r3 = t5;
                for (; i4(e5[r3]); )
                  r3++;
                if (r3 - t5 == 0)
                  throw new Error("Invalid rule at ".concat(t5, "."));
                return r3;
              }
              consumeSpace(e5, t5) {
                if (e5[t5] === o2)
                  return t5 + 1;
                throw new Error("Invalid space at ".concat(t5, "."));
              }
              consumeIP4Address(e5, t5) {
                let i4 = t5;
                for (let t6 = 0; t6 < 4; t6++)
                  if (i4 = this.consumeDecimalUChar(e5, i4), 3 !== t6) {
                    if ("." !== e5[i4])
                      throw new Error("Invalid IP4 address.");
                    i4++;
                  }
                return i4;
              }
              consumeDecimalUChar(e5, t5) {
                let i4 = t5;
                for (let t6 = 0; t6 < 3 && a2(e5[i4]); t6++, i4++)
                  ;
                if (i4 - t5 == 0)
                  throw new Error("Invalid decimal uchar.");
                const r3 = parseInt(e5.slice(t5, i4));
                if (r3 >= 0 && r3 <= 255)
                  return i4;
                throw new Error("Invalid decimal uchar");
              }
              consumeIP6Address(e5, t5) {
                let i4 = this.consumeHexpart(e5, t5);
                return ":" === e5[i4] ? (i4 += 1, i4 = this.consumeIP4Address(e5, i4), i4) : i4;
              }
              consumeHexpart(e5, t5) {
                let i4 = t5;
                if (":" === e5[i4] && ":" === e5[i4 + 1]) {
                  i4 += 2;
                  try {
                    i4 = this.consumeHexseq(e5, i4);
                  } catch (e6) {
                  }
                  return i4;
                }
                if (i4 = this.consumeHexseq(e5, i4), ":" === e5[i4] && ":" === e5[i4 + 1]) {
                  i4 += 2;
                  try {
                    i4 = this.consumeHexseq(e5, i4);
                  } catch (e6) {
                  }
                  return i4;
                }
                return i4;
              }
              consumeHexseq(e5, t5) {
                let i4 = t5;
                for (; i4 = this.consumeHex4(e5, i4), ":" === e5[i4] && ":" !== e5[i4 + 1]; )
                  i4 += 1;
                return i4;
              }
              consumeHex4(e5, t5) {
                let i4 = 0;
                for (; i4 < 4; i4++)
                  if (!((r3 = e5[t5 + i4]) >= "0" && r3 <= "9" || r3 >= "a" && r3 <= "f" || r3 >= "A" && r3 <= "F")) {
                    if (0 === i4)
                      throw new Error("Invalid hex 4");
                    break;
                  }
                var r3;
                return t5 + i4;
              }
              consumeFQDN(e5, t5) {
                let i4 = t5;
                for (; a2(e5[i4]) || h2(e5[i4]) || "-" === e5[i4] || "." === e5[i4]; )
                  i4 += 1;
                if (i4 - t5 < 4)
                  throw new Error("Invalid FQDN");
                return i4;
              }
              consumeExtnAddr(e5, t5) {
                return this.consumeOneOrMore(e5, t5, d2);
              }
              consumeMulticastAddress(e5, t5, i4) {
                switch (i4) {
                  case "IP4":
                  case "ip4":
                    return this.consumeIP4MulticastAddress(e5, t5);
                  case "IP6":
                  case "ip6":
                    return this.consumeIP6MulticastAddress(e5, t5);
                  default:
                    try {
                      return this.consumeFQDN(e5, t5);
                    } catch (i5) {
                      return this.consumeExtnAddr(e5, t5);
                    }
                }
              }
              consumeIP6MulticastAddress(e5, t5) {
                const i4 = this.consumeHexpart(e5, t5);
                return "/" === e5[i4] ? this.consumeInteger(e5, i4 + 1) : i4;
              }
              consumeIP4MulticastAddress(e5, t5) {
                let i4 = t5 + 3;
                const r3 = e5.slice(t5, i4), n3 = parseInt(r3);
                if (n3 < 224 || n3 > 239)
                  throw new Error("Invalid IP4 multicast address, IPv4 multicast addresses may be in the range 224.0.0.0 to 239.255.255.255.");
                for (let t6 = 0; t6 < 3; t6++) {
                  if ("." !== e5[i4])
                    throw new Error("Invalid IP4 multicast address.");
                  i4 += 1, i4 = this.consumeDecimalUChar(e5, i4);
                }
                return "/" === e5[i4] && (i4 += 1), i4 = this.consumeTTL(e5, i4), "/" === e5[i4] && (i4 = this.consumeInteger(e5, i4)), i4;
              }
              consumeInteger(e5, t5) {
                if (!l2(e5[t5]))
                  throw new Error("Invalid integer.");
                for (t5 += 1; a2(e5[t5]); )
                  t5 += 1;
                return t5;
              }
              consumeTTL(e5, t5) {
                if ("0" === e5[t5])
                  return t5 + 1;
                if (!l2(e5[t5]))
                  throw new Error("Invalid TTL.");
                t5 += 1;
                for (let i4 = 0; i4 < 2 && a2(e5[t5]); i4++)
                  t5 += 1;
                return t5;
              }
              consumeToken(e5, t5) {
                return this.consumeOneOrMore(e5, t5, u2);
              }
              consumeTime(e5, t5) {
                let i4 = t5;
                if ("0" === e5[i4])
                  return i4 + 1;
                for (l2(e5[i4]) && (i4 += 1); a2(e5[i4]); )
                  i4++;
                if (i4 - t5 < 10)
                  throw new Error("Invalid time");
                return i4;
              }
              consumeAddress(e5, t5) {
                return this.consumeTill(e5, t5, o2);
              }
              consumeTypedTime(e5, t5) {
                let i4 = t5;
                return i4 = this.consumeOneOrMore(e5, i4, a2), p2(e5[i4]) ? i4 + 1 : i4;
              }
              consumeRepeatInterval(e5, t5) {
                if (!l2(e5[t5]))
                  throw new Error("Invalid repeat interval");
                for (t5 += 1; a2(e5[t5]); )
                  t5 += 1;
                return p2(e5[t5]) && (t5 += 1), t5;
              }
              consumePort(e5, t5) {
                return this.consumeOneOrMore(e5, t5, a2);
              }
              consume(e5, t5, i4) {
                for (let r3 = 0; r3 < i4.length; r3++) {
                  if (t5 + r3 >= e5.length)
                    throw new Error("consume exceeding value length");
                  if (e5[t5 + r3] !== i4[r3])
                    throw new Error("consume ".concat(i4, " failed at ").concat(r3));
                }
                return t5 + i4.length;
              }
              consumeTill(e5, t5, i4) {
                let r3 = t5;
                for (; r3 < e5.length && ("string" != typeof i4 || e5[r3] !== i4) && ("function" != typeof i4 || !i4(e5[r3])); )
                  r3++;
                return r3;
              }
            }
            class R2 extends v2 {
              constructor() {
                super(), T2(this, "records", []), T2(this, "currentLine", 0);
              }
              parse(e5) {
                const t5 = this.probeEOL(e5);
                this.records = e5.split(t5).filter((e6) => !!e6.trim()).map(this.parseLine), this.currentLine = 0;
                const i4 = this.parseVersion(), r3 = this.parseOrigin(), n3 = this.parseSessionName(), o3 = this.parseInformation(), s3 = this.parseUri(), a3 = this.parseEmail(), c3 = this.parsePhone(), d3 = this.parseConnection(), u3 = this.parseBandWidth(), l3 = this.parseTimeFields(), h3 = this.parseKey(), p3 = this.parseSessionAttribute(), _3 = this.parseMediaDescription();
                if (this.currentLine !== this.records.length)
                  throw new Error("parsing failed, non exhaustive sdp lines.");
                return { version: i4, origin: r3, sessionName: n3, information: o3, uri: s3, emails: a3, phones: c3, connection: d3, bandwidths: u3, timeFields: l3, key: h3, attributes: p3, mediaDescriptions: _3 };
              }
              getCurrentRecord() {
                const e5 = this.records[this.currentLine];
                if (!e5)
                  throw new Error("Record doesn't exit.");
                return e5;
              }
              probeEOL(e5) {
                for (let t5 = 0; t5 < e5.length; t5++)
                  if (e5[t5] === r2)
                    return "\r" === e5[t5 - 1] ? n2 : r2;
                throw new Error("Invalid newline character.");
              }
              parseLine(e5, t5) {
                if (e5.length < 2)
                  throw new Error("Invalid sdp line, sdp line should be of form <type>=<value>.");
                const i4 = e5[0];
                if ("=" !== e5[1])
                  throw new Error('Invalid sdp line, <type> should be a single character followed by an "=" sign.');
                return { type: i4, value: e5.slice(2), line: t5, cur: 0 };
              }
              parseSessionAttribute() {
                const e5 = new y2();
                for (; this.currentLine < this.records.length; ) {
                  const t5 = this.getCurrentRecord();
                  if (t5.type !== s2.ATTRIBUTE)
                    break;
                  const i4 = { attField: this.extractOneOrMore(t5, (e6) => u2(e6) && ":" !== e6), _cur: 0 };
                  ":" === t5.value[t5.cur] && (t5.cur += 1, i4.attValue = this.extractOneOrMore(t5, _2)), e5.parse(i4), this.currentLine++;
                }
                return e5.digest();
              }
              parseMediaAttributes(e5) {
                const t5 = new C2(e5);
                for (; this.currentLine < this.records.length; ) {
                  const e6 = this.getCurrentRecord();
                  if (e6.type !== s2.ATTRIBUTE)
                    break;
                  const i4 = { attField: this.extractOneOrMore(e6, (e7) => u2(e7) && ":" !== e7), _cur: 0 };
                  ":" === e6.value[e6.cur] && (e6.cur += 1, i4.attValue = this.extractOneOrMore(e6, _2)), t5.parse(i4), this.currentLine++;
                }
                return t5.digest();
              }
              parseKey() {
                const e5 = this.getCurrentRecord();
                if (e5.type === s2.KEY) {
                  if ("prompt" === e5.value || "clear:" === e5.value || "base64:" === e5.value || "uri:" === e5.value)
                    return e5.value;
                  throw this.currentLine++, new Error("Invalid key.");
                }
              }
              parseZone() {
                const e5 = this.getCurrentRecord();
                if (e5.type === s2.ZONE_ADJUSTMENTS) {
                  const t5 = [];
                  for (; ; )
                    try {
                      const i4 = this.extract(e5, this.consumeTime);
                      this.consumeSpaceForRecord(e5);
                      let r3 = false;
                      "-" === e5.value[e5.cur] && (r3 = true, e5.cur += 1);
                      const n3 = this.extract(e5, this.consumeTypedTime);
                      t5.push({ time: i4, typedTime: n3, back: r3 });
                    } catch (e6) {
                      break;
                    }
                  if (0 === t5.length)
                    throw new Error("Invalid zone adjustments");
                  return this.currentLine++, t5;
                }
                return [];
              }
              parseRepeat() {
                const e5 = [];
                for (; ; ) {
                  const t5 = this.getCurrentRecord();
                  if (t5.type !== s2.REPEAT)
                    break;
                  {
                    const i4 = this.extract(t5, this.consumeRepeatInterval), r3 = this.parseTypedTime(t5);
                    e5.push({ repeatInterval: i4, typedTimes: r3 }), this.currentLine++;
                  }
                }
                return e5;
              }
              parseTypedTime(e5) {
                const t5 = [];
                for (; ; )
                  try {
                    this.consumeSpaceForRecord(e5), t5.push(this.extract(e5, this.consumeTypedTime));
                  } catch (e6) {
                    break;
                  }
                if (0 === t5.length)
                  throw new Error("Invalid typed time.");
                return t5;
              }
              parseTime() {
                const e5 = this.getCurrentRecord(), t5 = this.extract(e5, this.consumeTime);
                this.consumeSpaceForRecord(e5);
                const i4 = this.extract(e5, this.consumeTime);
                return this.currentLine++, { startTime: t5, stopTime: i4 };
              }
              parseBandWidth() {
                const e5 = [];
                for (; this.currentLine < this.records.length; ) {
                  const t5 = this.getCurrentRecord();
                  if (t5.type !== s2.BANDWIDTH)
                    break;
                  {
                    const i4 = this.extractOneOrMore(t5, u2);
                    if (":" !== t5.value[t5.cur])
                      throw new Error("Invalid bandwidth field.");
                    t5.cur++;
                    const r3 = this.extractOneOrMore(t5, a2);
                    e5.push({ bwtype: i4, bandwidth: r3 }), this.currentLine++;
                  }
                }
                return e5;
              }
              parseVersion() {
                const e5 = this.getCurrentRecord();
                if (e5.type !== s2.VERSION)
                  throw new Error("first sdp record must be version");
                const t5 = e5.value.slice(0, this.consumeOneOrMore(e5.value, 0, a2));
                if (t5.length !== e5.value.length)
                  throw new Error('invalid proto version, "v='.concat(e5.value, '"'));
                return this.currentLine++, t5;
              }
              parseOrigin() {
                const e5 = this.getCurrentRecord();
                if (e5.type !== s2.ORIGIN)
                  throw new Error("second line of sdp must be origin");
                const t5 = this.extractOneOrMore(e5, d2);
                this.consumeSpaceForRecord(e5);
                const i4 = this.extractOneOrMore(e5, a2);
                this.consumeSpaceForRecord(e5);
                const r3 = this.extractOneOrMore(e5, a2);
                this.consumeSpaceForRecord(e5);
                const n3 = this.extractOneOrMore(e5, u2);
                this.consumeSpaceForRecord(e5);
                const o3 = this.extractOneOrMore(e5, u2);
                this.consumeSpaceForRecord(e5);
                const c3 = this.extract(e5, this.consumeUnicastAddress);
                return this.currentLine++, { username: t5, sessId: i4, sessVersion: r3, nettype: n3, addrtype: o3, unicastAddress: c3 };
              }
              parseSessionName() {
                const e5 = this.getCurrentRecord();
                if (e5.type === s2.SESSION_NAME) {
                  const t5 = this.extract(e5, this.consumeText);
                  return this.currentLine++, t5;
                }
              }
              parseInformation() {
                const e5 = this.getCurrentRecord();
                if (e5.type !== s2.INFORMATION)
                  return;
                const t5 = this.extract(e5, this.consumeText);
                return this.currentLine++, t5;
              }
              parseUri() {
                const e5 = this.getCurrentRecord();
                if (e5.type === s2.URI)
                  return this.currentLine++, e5.value;
              }
              parseEmail() {
                const e5 = [];
                for (; ; ) {
                  const t5 = this.getCurrentRecord();
                  if (t5.type !== s2.EMAIL)
                    break;
                  e5.push(t5.value), this.currentLine++;
                }
                return e5;
              }
              parsePhone() {
                const e5 = [];
                for (; ; ) {
                  const t5 = this.getCurrentRecord();
                  if (t5.type !== s2.PHONE)
                    break;
                  e5.push(t5.value), this.currentLine++;
                }
                return e5;
              }
              parseConnection() {
                const e5 = this.getCurrentRecord();
                if (e5.type === s2.CONNECTION) {
                  const t5 = this.extractOneOrMore(e5, u2);
                  this.consumeSpaceForRecord(e5);
                  const i4 = this.extractOneOrMore(e5, u2);
                  this.consumeSpaceForRecord(e5);
                  const r3 = this.extract(e5, this.consumeAddress);
                  return this.currentLine++, { nettype: t5, addrtype: i4, address: r3 };
                }
              }
              parseMedia() {
                const e5 = this.getCurrentRecord(), t5 = this.extract(e5, this.consumeToken);
                this.consumeSpaceForRecord(e5);
                let i4 = this.extract(e5, this.consumePort);
                "/" === e5.value[e5.cur] && (e5.cur += 1, i4 += this.extract(e5, this.consumeInteger)), this.consumeSpaceForRecord(e5);
                const r3 = [];
                for (r3.push(this.extract(e5, this.consumeToken)); "/" === e5.value[e5.cur]; )
                  e5.cur += 1, r3.push(this.extract(e5, this.consumeToken));
                if (0 === r3.length)
                  throw new Error("Invalid proto");
                const n3 = this.parseFmt(e5);
                return this.currentLine++, { mediaType: t5, port: i4, protos: r3, fmts: n3 };
              }
              parseTimeFields() {
                const e5 = [];
                for (; this.getCurrentRecord().type === s2.TIME; ) {
                  const t5 = this.parseTime(), i4 = this.parseRepeat(), r3 = this.parseZone();
                  e5.push({ time: t5, repeats: i4, zones: r3 });
                }
                return e5;
              }
              parseMediaDescription() {
                const e5 = [];
                for (; this.currentLine < this.records.length && this.getCurrentRecord().type === s2.MEDIA; ) {
                  const t5 = this.parseMedia(), i4 = this.parseInformation(), r3 = this.parseConnections(), n3 = this.parseBandWidth(), o3 = this.parseKey(), s3 = this.parseMediaAttributes(t5);
                  e5.push({ media: t5, information: i4, connections: r3, bandwidths: n3, key: o3, attributes: s3 });
                }
                return e5;
              }
              parseConnections() {
                const e5 = [];
                for (; this.currentLine < this.records.length && this.getCurrentRecord().type === s2.CONNECTION; )
                  e5.push(this.parseConnection());
                return e5;
              }
              parseFmt(e5) {
                const t5 = [];
                for (; ; )
                  try {
                    this.consumeSpaceForRecord(e5), t5.push(this.extract(e5, this.consumeToken));
                  } catch (e6) {
                    break;
                  }
                if (0 === t5.length)
                  throw new Error("Invalid fmts");
                return t5;
              }
              extract(e5, t5, ...i4) {
                const r3 = t5.call(this, e5.value, e5.cur, ...i4), n3 = e5.value.slice(e5.cur, r3);
                return e5.cur = r3, n3;
              }
              extractOneOrMore(e5, t5) {
                const i4 = this.consumeOneOrMore(e5.value, e5.cur, t5), r3 = e5.value.slice(e5.cur, i4);
                return e5.cur = i4, r3;
              }
              consumeSpaceForRecord(e5) {
                if (e5.value[e5.cur] !== o2)
                  throw new Error("Invalid space at ".concat(e5.cur, "."));
                e5.cur += 1;
              }
            }
            class I2 extends v2 {
              constructor(...e5) {
                super(...e5), T2(this, "attributes", void 0), T2(this, "digested", false);
              }
              extractOneOrMore(e5, t5, i4) {
                const r3 = this.consumeOneOrMore(e5.attValue, e5._cur, t5), n3 = e5.attValue.slice(e5._cur, r3), [o3, s3] = i4 || [];
                if ("number" == typeof o3 && n3.length < o3)
                  throw new Error("error in length, should be more or equal than ".concat(o3, " characters."));
                if ("number" == typeof s3 && n3.length > s3)
                  throw new Error("error in length, should be less or equal than ".concat(s3, " characters."));
                return e5._cur = r3, n3;
              }
              consumeAttributeSpace(e5) {
                if (e5.attValue[e5._cur] !== o2)
                  throw new Error("Invalid space at ".concat(e5._cur, "."));
                e5._cur += 1;
              }
              extract(e5, t5, ...i4) {
                if (!e5.attValue)
                  throw new Error("Nothing to extract from attValue.");
                const r3 = t5.call(this, e5.attValue, e5._cur, ...i4), n3 = e5.attValue.slice(e5._cur, r3);
                return e5._cur = r3, n3;
              }
              atEnd(e5) {
                if (!e5.attValue)
                  throw new Error();
                return e5._cur >= e5.attValue.length;
              }
              peekChar(e5) {
                if (!e5.attValue)
                  throw new Error();
                return e5.attValue[e5._cur];
              }
              peek(e5, t5) {
                if (!e5.attValue)
                  throw new Error();
                for (let i4 = 0; i4 < t5.length; i4++)
                  if (t5[i4] !== e5.attValue[e5._cur + i4])
                    return false;
                return true;
              }
              parseIceUfrag(e5) {
                if (this.attributes.iceUfrag)
                  throw new Error("Invalid ice-ufrag, should be only a single line if 'a=ice-ufrag'");
                this.attributes.iceUfrag = this.extractOneOrMore(e5, E2, [4, 256]);
              }
              parseIcePwd(e5) {
                if (this.attributes.icePwd)
                  throw new Error("Invalid ice-pwd, should be only a single line if 'a=ice-pwd'");
                this.attributes.icePwd = this.extractOneOrMore(e5, E2, [22, 256]);
              }
              parseIceOptions(e5) {
                if (this.attributes.iceOptions)
                  throw new Error("Invalid ice-options, should be only one 'ice-options' line");
                const t5 = [];
                for (; !this.atEnd(e5); ) {
                  t5.push(this.extractOneOrMore(e5, E2));
                  try {
                    this.consumeAttributeSpace(e5);
                  } catch (t6) {
                    if (this.atEnd(e5))
                      break;
                    throw t6;
                  }
                }
                this.attributes.iceOptions = t5;
              }
              parseFingerprint(e5) {
                const t5 = this.extract(e5, this.consumeToken);
                this.consumeAttributeSpace(e5);
                const i4 = this.extract(e5, this.consumeTill);
                this.attributes.fingerprints.push({ hashFunction: t5, fingerprint: i4 });
              }
              parseExtmap(e5) {
                const t5 = this.extractOneOrMore(e5, a2);
                let i4;
                "/" === this.peekChar(e5) && (this.extract(e5, this.consume, "/"), i4 = this.extract(e5, this.consumeToken)), this.consumeAttributeSpace(e5);
                const r3 = this.extract(e5, this.consumeTill, o2), n3 = S2(S2({ entry: parseInt(t5, 10) }, i4 && { direction: i4 }), {}, { extensionName: r3 });
                this.peekChar(e5) === o2 && (this.consumeAttributeSpace(e5), n3.extensionAttributes = this.extract(e5, this.consumeTill)), this.attributes.extmaps.push(n3);
              }
              parseSetup(e5) {
                if (this.attributes.setup)
                  throw new Error("must only be one single 'a=setup' line.");
                const t5 = this.extract(e5, this.consumeTill);
                if ("active" !== t5 && "passive" !== t5 && "actpass" !== t5 && "holdconn" !== t5)
                  throw new Error("role must be one of 'active', 'passive', 'actpass', 'holdconn'.");
                this.attributes.setup = t5;
              }
            }
            class y2 extends I2 {
              constructor(...e5) {
                super(...e5), T2(this, "attributes", { unrecognized: [], groups: [], extmaps: [], fingerprints: [], identities: [] });
              }
              parse(e5) {
                if (this.digested)
                  throw new Error("already digested");
                try {
                  switch (e5.attField) {
                    case "group":
                      this.parseGroup(e5);
                      break;
                    case "ice-lite":
                      this.parseIceLite();
                      break;
                    case "ice-ufrag":
                      this.parseIceUfrag(e5);
                      break;
                    case "ice-pwd":
                      this.parseIcePwd(e5);
                      break;
                    case "ice-options":
                      this.parseIceOptions(e5);
                      break;
                    case "fingerprint":
                      this.parseFingerprint(e5);
                      break;
                    case "setup":
                      this.parseSetup(e5);
                      break;
                    case "tls-id":
                      this.parseTlsId(e5);
                      break;
                    case "identity":
                      this.parseIdentity(e5);
                      break;
                    case "extmap":
                      this.parseExtmap(e5);
                      break;
                    case "msid-semantic":
                      this.parseMsidSemantic(e5);
                      break;
                    default:
                      e5.ignored = true, this.attributes.unrecognized.push(e5);
                  }
                } catch (t5) {
                  throw console.error("parsing session attribute ".concat(e5.attField, ' error, "a=').concat(e5.attField, ":").concat(e5.attValue, '"')), t5;
                }
                if (!e5.ignored && e5.attValue && !this.atEnd(e5))
                  throw new Error("attribute parsing error");
              }
              digest() {
                return this.digested = true, this.attributes;
              }
              parseGroup(e5) {
                const t5 = this.extract(e5, this.consumeToken), i4 = [];
                for (; !this.atEnd(e5) && this.peekChar(e5) === o2; )
                  this.consumeAttributeSpace(e5), i4.push(this.extract(e5, this.consumeToken));
                this.attributes.groups.push({ semantic: t5, identificationTag: i4 });
              }
              parseIceLite() {
                if (this.attributes.iceLite)
                  throw new Error("Invalid ice-lite, should be only a single line of 'a=ice-lite'");
                this.attributes.iceLite = true;
              }
              parseTlsId(e5) {
                if (this.attributes.tlsId)
                  throw new Error("must be only one tld-id line");
                this.attributes.tlsId = this.extractOneOrMore(e5, f2);
              }
              parseIdentity(e5) {
                const t5 = this.extractOneOrMore(e5, m2), i4 = [];
                for (; !this.atEnd(e5) && this.peekChar(e5) === o2; ) {
                  this.consumeAttributeSpace(e5);
                  const t6 = this.extract(e5, this.consumeToken);
                  this.extract(e5, this.consume, "=");
                  const r3 = this.extractOneOrMore(e5, (e6) => e6 !== o2 && _2(e6));
                  i4.push({ name: t6, value: r3 });
                }
                this.attributes.identities.push({ assertionValue: t5, extensions: i4 });
              }
              parseMsidSemantic(e5) {
                this.peekChar(e5) === o2 && this.consumeAttributeSpace(e5);
                const t5 = { semantic: this.extract(e5, this.consumeToken), identifierList: [] };
                for (; ; ) {
                  try {
                    this.consumeAttributeSpace(e5);
                  } catch (e6) {
                    break;
                  }
                  if ("*" === this.peekChar(e5)) {
                    this.extract(e5, this.consume, "*"), t5.applyForAll = true;
                    break;
                  }
                  {
                    const i4 = this.extract(e5, this.consumeTill, o2);
                    t5.identifierList.push(i4);
                  }
                }
                this.attributes.msidSemantic = t5;
              }
            }
            class C2 extends I2 {
              constructor(e5) {
                super(), T2(this, "attributes", void 0), -1 !== e5.protos.indexOf("RTP") || e5.protos.indexOf("rtp"), this.attributes = { unrecognized: [], candidates: [], extmaps: [], fingerprints: [], imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: [], ssrcGroups: [], rtcpFeedbackWildcards: [], payloads: [] };
              }
              parse(e5) {
                if (this.digested)
                  throw new Error("already digested");
                try {
                  switch (e5.attField) {
                    case "extmap":
                      this.parseExtmap(e5);
                      break;
                    case "setup":
                      this.parseSetup(e5);
                      break;
                    case "ice-ufrag":
                      this.parseIceUfrag(e5);
                      break;
                    case "ice-pwd":
                      this.parseIcePwd(e5);
                      break;
                    case "ice-options":
                      this.parseIceOptions(e5);
                      break;
                    case "candidate":
                      this.parseCandidate(e5);
                      break;
                    case "remote-candidate":
                      this.parseRemoteCandidate(e5);
                      break;
                    case "end-of-candidates":
                      this.parseEndOfCandidates();
                      break;
                    case "fingerprint":
                      this.parseFingerprint(e5);
                      break;
                    case "rtpmap":
                      this.parseRtpmap(e5);
                      break;
                    case "ptime":
                      this.parsePtime(e5);
                      break;
                    case "maxptime":
                      this.parseMaxPtime(e5);
                      break;
                    case "sendrecv":
                    case "recvonly":
                    case "sendonly":
                    case "inactive":
                      this.parseDirection(e5);
                      break;
                    case "ssrc":
                      this.parseSSRC(e5);
                      break;
                    case "fmtp":
                      this.parseFmtp(e5);
                      break;
                    case "rtcp-fb":
                      this.parseRtcpFb(e5);
                      break;
                    case "rtcp-mux":
                      this.parseRTCPMux();
                      break;
                    case "rtcp-mux-only":
                      this.parseRTCPMuxOnly();
                      break;
                    case "rtcp-rsize":
                      this.parseRTCPRsize();
                      break;
                    case "rtcp":
                      this.parseRTCP(e5);
                      break;
                    case "mid":
                      this.parseMid(e5);
                      break;
                    case "msid":
                      this.parseMsid(e5);
                      break;
                    case "imageattr":
                      this.parseImageAttr(e5);
                      break;
                    case "rid":
                      this.parseRid(e5);
                      break;
                    case "simulcast":
                      this.parseSimulcast(e5);
                      break;
                    case "sctp-port":
                      this.parseSctpPort(e5);
                      break;
                    case "max-message-size":
                      this.parseMaxMessageSize(e5);
                      break;
                    case "ssrc-group":
                      this.parseSSRCGroup(e5);
                      break;
                    default:
                      e5.ignored = true, this.attributes.unrecognized.push(e5);
                  }
                } catch (t5) {
                  throw console.error("parsing media attribute ".concat(e5.attField, ' error, "a=').concat(e5.attField, ":").concat(e5.attValue, '"')), t5;
                }
                if (!e5.ignored && e5.attValue && !this.atEnd(e5))
                  throw new Error("attribute parsing error");
              }
              parseCandidate(e5) {
                const t5 = this.extractOneOrMore(e5, E2, [1, 32]);
                this.consumeAttributeSpace(e5);
                const i4 = this.extractOneOrMore(e5, a2, [1, 5]);
                this.consumeAttributeSpace(e5);
                const r3 = this.extract(e5, this.consumeToken);
                this.consumeAttributeSpace(e5);
                const n3 = this.extractOneOrMore(e5, a2, [1, 10]);
                this.consumeAttributeSpace(e5);
                const s3 = this.extract(e5, this.consumeAddress);
                this.consumeAttributeSpace(e5);
                const d3 = this.extract(e5, this.consumePort);
                this.consumeAttributeSpace(e5), this.extract(e5, this.consume, "typ"), this.consumeAttributeSpace(e5);
                const u3 = { foundation: t5, componentId: i4, transport: r3, priority: n3, connectionAddress: s3, port: d3, type: this.extract(e5, this.consumeToken), extension: {} };
                for (this.peek(e5, " raddr") && (this.extract(e5, this.consume, " raddr"), this.consumeAttributeSpace(e5), u3.relAddr = this.extract(e5, this.consumeAddress)), this.peek(e5, " rport") && (this.extract(e5, this.consume, " rport"), this.consumeAttributeSpace(e5), u3.relPort = this.extract(e5, this.consumePort)); this.peekChar(e5) === o2; ) {
                  this.consumeAttributeSpace(e5);
                  const t6 = this.extract(e5, this.consumeToken);
                  this.consumeAttributeSpace(e5), u3.extension[t6] = this.extractOneOrMore(e5, c2);
                }
                this.attributes.candidates.push(u3);
              }
              parseRemoteCandidate(e5) {
                const t5 = [];
                for (; ; ) {
                  const i4 = this.extractOneOrMore(e5, a2, [1, 5]);
                  this.consumeAttributeSpace(e5);
                  const r3 = this.extract(e5, this.consumeAddress);
                  this.consumeAttributeSpace(e5);
                  const n3 = this.extract(e5, this.consumePort);
                  t5.push({ componentId: i4, connectionAddress: r3, port: n3 });
                  try {
                    this.consumeAttributeSpace(e5);
                  } catch (e6) {
                    break;
                  }
                }
                this.attributes.remoteCandidatesList.push(t5);
              }
              parseEndOfCandidates() {
                if (this.attributes.endOfCandidates)
                  throw new Error("must be only one line of end-of-candidates");
                this.attributes.endOfCandidates = true;
              }
              parseRtpmap(e5) {
                const t5 = this.extract(e5, this.consumeToken);
                this.consumeAttributeSpace(e5);
                const i4 = this.extract(e5, this.consumeTill, "/");
                this.extract(e5, this.consume, "/");
                const r3 = { encodingName: i4, clockRate: this.extractOneOrMore(e5, a2) };
                this.atEnd(e5) || "/" !== this.peekChar(e5) || (this.extract(e5, this.consume, "/"), r3.encodingParameters = parseInt(this.extract(e5, this.consumeTill), 10));
                const n3 = this.attributes.payloads.find((e6) => e6.payloadType === parseInt(t5, 10));
                n3 ? n3.rtpMap = r3 : this.attributes.payloads.push({ payloadType: parseInt(t5, 10), rtpMap: r3, rtcpFeedbacks: [] });
              }
              parsePtime(e5) {
                if (this.attributes.ptime)
                  throw new Error("must be only one line of ptime");
                this.attributes.ptime = this.extract(e5, this.consumeTill);
              }
              parseMaxPtime(e5) {
                if (this.attributes.maxPtime)
                  throw new Error("must be only one line of ptime");
                this.attributes.maxPtime = this.extract(e5, this.consumeTill);
              }
              parseDirection(e5) {
                if (this.attributes.direction)
                  throw new Error("must be only one line of direction info");
                this.attributes.direction = e5.attField;
              }
              parseSSRC(e5) {
                const t5 = this.extractOneOrMore(e5, a2);
                this.consumeAttributeSpace(e5);
                const i4 = this.extract(e5, this.consumeTill, ":");
                let r3;
                ":" === this.peekChar(e5) && (this.extract(e5, this.consume, ":"), r3 = this.extract(e5, this.consumeTill));
                const n3 = this.attributes.ssrcs.find((e6) => e6.ssrcId === parseInt(t5, 10));
                n3 ? n3.attributes[i4] = r3 : this.attributes.ssrcs.push({ ssrcId: parseInt(t5, 10), attributes: { [i4]: r3 } });
              }
              parseFmtp(e5) {
                const t5 = this.extract(e5, this.consumeTill, o2);
                this.consumeAttributeSpace(e5);
                const i4 = this.extract(e5, this.consumeTill), r3 = {};
                i4.split(";").forEach((e6) => {
                  let [t6, i5] = e6.split("=");
                  t6 = t6.trim();
                  const n4 = "string" == typeof i5 ? i5.trim() : null;
                  "string" == typeof t6 && t6.length > 0 && (r3[t6] = n4);
                });
                const n3 = this.attributes.payloads.find((e6) => e6.payloadType === parseInt(t5, 10));
                n3 ? n3.fmtp = { parameters: r3 } : this.attributes.payloads.push({ payloadType: parseInt(t5, 10), rtcpFeedbacks: [], fmtp: { parameters: r3 } });
              }
              parseFmtParameters(e5) {
                const t5 = {}, i4 = this.extract(e5, this.consumeTill, "=");
                e5._cur++;
                const r3 = this.extract(e5, this.consumeTill, ";");
                for (t5[i4] = r3; ";" === e5.attValue[e5._cur]; ) {
                  const i5 = this.extract(e5, this.consumeTill, "=");
                  e5._cur++;
                  const r4 = this.extract(e5, this.consumeTill, ";");
                  t5[i5] = r4;
                }
                return t5;
              }
              parseRtcpFb(e5) {
                let t5 = "";
                t5 = "*" === this.peekChar(e5) ? this.extract(e5, this.consume, "*") : this.extract(e5, this.consumeTill, o2), this.consumeAttributeSpace(e5);
                const i4 = this.extract(e5, this.consumeTill, o2);
                let r3;
                switch (i4) {
                  case "trr-int":
                    r3 = { type: i4, interval: this.extract(e5, this.consumeTill) };
                    break;
                  case "ack":
                  case "nack":
                  default: {
                    const t6 = { type: i4 };
                    this.peekChar(e5) === o2 && (this.consumeAttributeSpace(e5), t6.parameter = this.extract(e5, this.consumeToken), this.peekChar(e5) === o2 && (t6.additional = this.extract(e5, this.consumeTill))), r3 = t6;
                  }
                }
                if ("*" === t5)
                  this.attributes.rtcpFeedbackWildcards.push(r3);
                else {
                  const e6 = this.attributes.payloads.find((e7) => e7.payloadType === parseInt(t5, 10));
                  e6 ? e6.rtcpFeedbacks.push(r3) : this.attributes.payloads.push({ payloadType: parseInt(t5, 10), rtcpFeedbacks: [r3] });
                }
              }
              parseRTCPMux() {
                if (this.attributes.rtcpMux)
                  throw new Error("must be single line of rtcp-mux");
                this.attributes.rtcpMux = true;
              }
              parseRTCPMuxOnly() {
                if (this.attributes.rtcpMuxOnly)
                  throw new Error("must be single line of rtcp-only");
                this.attributes.rtcpMuxOnly = true;
              }
              parseRTCPRsize() {
                if (this.attributes.rtcpRsize)
                  throw new Error("must be single line of rtcp-rsize");
                this.attributes.rtcpRsize = true;
              }
              parseRTCP(e5) {
                if (this.attributes.rtcp)
                  throw new Error("must be single line of rtcp");
                const t5 = { port: this.extract(e5, this.consumePort) };
                this.peekChar(e5) === o2 && (this.consumeAttributeSpace(e5), t5.netType = this.extractOneOrMore(e5, u2), this.consumeAttributeSpace(e5), t5.addressType = this.extractOneOrMore(e5, u2), this.consumeAttributeSpace(e5), t5.address = this.extract(e5, this.consumeAddress)), this.attributes.rtcp = t5;
              }
              parseMsid(e5) {
                const t5 = { id: this.extractOneOrMore(e5, u2, [1, 64]) };
                this.peekChar(e5) === o2 && (this.consumeAttributeSpace(e5), t5.appdata = this.extractOneOrMore(e5, u2, [1, 64])), this.attributes.msids.push(t5);
              }
              parseImageAttr(e5) {
                this.attributes.imageattr.push(e5.attValue);
              }
              parseRid(e5) {
                const t5 = this.extractOneOrMore(e5, (e6) => h2(e6) || a2(e6) || "_" === e6 || "-" === e6);
                this.consumeAttributeSpace(e5);
                const i4 = { id: t5, direction: this.extract(e5, this.consumeToken), params: [] };
                if (this.peekChar(e5) === o2) {
                  if (this.consumeAttributeSpace(e5), this.peek(e5, "pt=")) {
                    this.extract(e5, this.consume, "pt=");
                    const t6 = [];
                    for (; ; ) {
                      const i5 = this.extract(e5, this.consumeToken);
                      t6.push(i5);
                      try {
                        this.extract(e5, this.consume, ",");
                      } catch (e6) {
                        break;
                      }
                    }
                    i4.payloads = t6, this.peekChar(e5) === o2 && this.extract(e5, this.consume, o2);
                  }
                  for (; ; ) {
                    const t6 = this.extract(e5, this.consumeToken);
                    switch (t6) {
                      case "depend": {
                        const r3 = { type: t6, rids: this.extract(e5, this.consume, "=").split(",") };
                        i4.params.push(r3);
                        break;
                      }
                      case "max-width":
                      case "height-width":
                      case "max-fps":
                      case "max-fs":
                      case "max-br":
                      case "max-pps":
                      case "max-bpp":
                      default: {
                        const r3 = { type: t6 };
                        "=" === this.peekChar(e5) && (this.extract(e5, this.consume, "="), r3.val = this.extract(e5, this.consumeTill, ";")), i4.params.push(r3);
                      }
                    }
                    try {
                      this.extract(e5, this.consume, ";");
                    } catch (e6) {
                      break;
                    }
                  }
                }
                this.attributes.rids.push(i4);
              }
              parseSimulcast(e5) {
                if (this.attributes.simulcast)
                  throw new Error("must be single line of simulcast");
                this.attributes.simulcast = e5.attValue, this.extract(e5, this.consumeTill);
              }
              parseSctpPort(e5) {
                this.attributes.sctpPort = this.extractOneOrMore(e5, a2, [1, 5]);
              }
              parseMaxMessageSize(e5) {
                this.attributes.maxMessageSize = this.extractOneOrMore(e5, a2, [1, void 0]);
              }
              digest() {
                return this.digested = true, this.attributes;
              }
              parseMid(e5) {
                this.attributes.mid = this.extract(e5, this.consumeToken);
              }
              parseSSRCGroup(e5) {
                const t5 = this.extract(e5, this.consumeToken), i4 = [];
                for (; ; )
                  try {
                    this.consumeAttributeSpace(e5);
                    const t6 = this.extract(e5, this.consumeInteger);
                    i4.push(parseInt(t6, 10));
                  } catch (e6) {
                    break;
                  }
                this.attributes.ssrcGroups.push({ semantic: t5, ssrcIds: i4 });
              }
            }
            function A2(e5, t5, i4) {
              return t5 in e5 ? Object.defineProperty(e5, t5, { value: i4, enumerable: true, configurable: true, writable: true }) : e5[t5] = i4, e5;
            }
            class O2 {
              constructor() {
                A2(this, "eol", n2);
              }
              print(e5, t5) {
                let i4 = "";
                return t5 && (this.eol = t5), i4 += this.printVersion(e5.version), i4 += this.printOrigin(e5.origin), i4 += this.printSessionName(e5.sessionName), i4 += this.printInformation(e5.information), i4 += this.printUri(e5.uri), i4 += this.printEmail(e5.emails), i4 += this.printPhone(e5.phones), i4 += this.printConnection(e5.connection), i4 += this.printBandwidth(e5.bandwidths), i4 += this.printTimeFields(e5.timeFields), i4 += this.printKey(e5.key), i4 += this.printSessionAttributes(e5.attributes), i4 += this.printMediaDescription(e5.mediaDescriptions), i4;
              }
              printVersion(e5) {
                return "v=".concat(e5).concat(this.eol);
              }
              printOrigin(e5) {
                return "o=".concat(e5.username, " ").concat(e5.sessId, " ").concat(e5.sessVersion, " ").concat(e5.nettype, " ").concat(e5.addrtype, " ").concat(e5.unicastAddress).concat(this.eol);
              }
              printSessionName(e5) {
                return e5 ? "s=".concat(e5).concat(this.eol) : "";
              }
              printInformation(e5) {
                return e5 ? "i=".concat(e5).concat(this.eol) : "";
              }
              printUri(e5) {
                return e5 ? "u=".concat(e5).concat(this.eol) : "";
              }
              printEmail(e5) {
                let t5 = "";
                for (const i4 of e5)
                  t5 += "e=".concat(i4).concat(this.eol);
                return t5;
              }
              printPhone(e5) {
                let t5 = "";
                for (const i4 of e5)
                  t5 += "e=".concat(i4).concat(this.eol);
                return t5;
              }
              printConnection(e5) {
                return e5 ? "c=".concat(e5.nettype, " ").concat(e5.addrtype, " ").concat(e5.address).concat(this.eol) : "";
              }
              printBandwidth(e5) {
                let t5 = "";
                for (const i4 of e5)
                  t5 += "b=".concat(i4.bwtype, ":").concat(i4.bandwidth).concat(this.eol);
                return t5;
              }
              printTimeFields(e5) {
                let t5 = "";
                for (const i4 of e5) {
                  t5 += "t=".concat(i4.time.startTime, " ").concat(i4.time.startTime).concat(this.eol);
                  for (const e6 of i4.repeats)
                    t5 += "r=".concat(e6.repeatInterval, " ").concat(e6.typedTimes.join(" ")).concat(this.eol);
                  i4.zoneAdjustments && (t5 += "z=", t5 += "z=".concat(i4.zoneAdjustments.map((e6) => "".concat(e6.time, " ").concat(e6.back ? "-" : "", " ").concat(e6.typedTime)).join(" ")).concat(this.eol), t5 += this.eol);
                }
                return t5;
              }
              printKey(e5) {
                return e5 ? "k=".concat(e5).concat(this.eol) : "";
              }
              printAttributes(e5) {
                let t5 = "";
                for (const i4 of e5)
                  t5 += "a=".concat(i4.attField).concat(i4.attValue ? ":".concat(i4.attValue) : "").concat(this.eol);
                return t5;
              }
              printMediaDescription(e5) {
                let t5 = "";
                for (const i4 of e5)
                  t5 += this.printMedia(i4.media), t5 += this.printInformation(i4.information), t5 += this.printConnections(i4.connections), t5 += this.printBandwidth(i4.bandwidths), t5 += this.printKey(i4.key), t5 += this.printMediaAttributes(i4);
                return t5;
              }
              printConnections(e5) {
                let t5 = "";
                for (const i4 of e5)
                  t5 += this.printConnection(i4);
                return t5;
              }
              printMedia(e5) {
                return "m=".concat(e5.mediaType, " ").concat(e5.port, " ").concat(e5.protos.join("/"), " ").concat(e5.fmts.join(" ")).concat(this.eol);
              }
              printSessionAttributes(e5) {
                return new w2(this.eol).print(e5);
              }
              printMediaAttributes(e5) {
                return new N2(this.eol).print(e5);
              }
            }
            class b2 {
              constructor(e5) {
                A2(this, "eol", void 0), this.eol = e5;
              }
              printIceUfrag(e5) {
                return void 0 === e5 ? "" : "a=ice-ufrag:".concat(e5).concat(this.eol);
              }
              printIcePwd(e5) {
                return void 0 === e5 ? "" : "a=ice-pwd:".concat(e5).concat(this.eol);
              }
              printIceOptions(e5) {
                return void 0 === e5 ? "" : "a=ice-options:".concat(e5.join(o2)).concat(this.eol);
              }
              printFingerprints(e5) {
                return e5.length > 0 ? e5.map((e6) => "a=fingerprint:".concat(e6.hashFunction).concat(o2).concat(e6.fingerprint)).join(this.eol) + this.eol : "";
              }
              printExtmap(e5) {
                return e5.map((e6) => "a=extmap:".concat(e6.entry).concat(e6.direction ? "/".concat(e6.direction) : "").concat(o2).concat(e6.extensionName).concat(e6.extensionAttributes ? "".concat(o2).concat(e6.extensionAttributes) : "").concat(this.eol)).join("");
              }
              printSetup(e5) {
                return void 0 === e5 ? "" : "a=setup:".concat(e5).concat(this.eol);
              }
              printUnrecognized(e5) {
                return e5.map((e6) => "a=".concat(e6.attField).concat(e6.attValue ? ":".concat(e6.attValue) : "").concat(this.eol)).join("");
              }
            }
            class w2 extends b2 {
              print(e5) {
                let t5 = "";
                return t5 += this.printGroups(e5.groups), t5 += this.printMsidSemantic(e5.msidSemantic), t5 += this.printIceLite(e5.iceLite), t5 += this.printIceUfrag(e5.iceUfrag), t5 += this.printIcePwd(e5.icePwd), t5 += this.printIceOptions(e5.iceOptions), t5 += this.printFingerprints(e5.fingerprints), t5 += this.printSetup(e5.setup), t5 += this.printTlsId(e5.tlsId), t5 += this.printIdentity(e5.identities), t5 += this.printExtmap(e5.extmaps), t5 += this.printUnrecognized(e5.unrecognized), t5;
              }
              printGroups(e5) {
                let t5 = "";
                return e5.length > 0 && (t5 += e5.map((e6) => "a=group:".concat(e6.semantic).concat(e6.identificationTag.map((e7) => "".concat(o2).concat(e7)).join("")).concat(this.eol)).join("")), t5;
              }
              printIceLite(e5) {
                return void 0 === e5 ? "" : "a=ice-lite" + this.eol;
              }
              printTlsId(e5) {
                return e5 ? "a=tls-id:".concat(e5).concat(this.eol) : "";
              }
              printIdentity(e5) {
                return 0 === e5.length ? "" : e5.map((e6) => "a=identity:".concat(e6.assertionValue).concat(e6.extensions.map((e7) => "".concat(o2).concat(e7.name).concat(e7.value ? "=".concat(e7.value) : "")))).join(this.eol) + this.eol;
              }
              printMsidSemantic(e5) {
                if (!e5)
                  return "";
                let t5 = "a=msid-semantic:".concat(e5.semantic);
                return e5.applyForAll ? t5 += "".concat(o2, "*") : e5.identifierList.length > 0 && (t5 += e5.identifierList.map((e6) => "".concat(o2).concat(e6))), t5 + this.eol;
              }
            }
            class N2 extends b2 {
              print(e5) {
                const t5 = e5.attributes;
                let i4 = "";
                return i4 += this.printRTCP(t5.rtcp), i4 += this.printIceUfrag(t5.iceUfrag), i4 += this.printIcePwd(t5.icePwd), i4 += this.printIceOptions(t5.iceOptions), i4 += this.printCandidates(t5.candidates), i4 += this.printRemoteCandidatesList(t5.remoteCandidatesList), i4 += this.printEndOfCandidates(t5.endOfCandidates), i4 += this.printFingerprints(t5.fingerprints), i4 += this.printSetup(t5.setup), i4 += this.printMid(t5.mid), i4 += this.printExtmap(t5.extmaps), i4 += this.printRTPRelated(t5), i4 += this.printPtime(t5.ptime), i4 += this.printMaxPtime(t5.maxPtime), i4 += this.printDirection(t5.direction), i4 += this.printSSRCGroups(t5.ssrcGroups), i4 += this.printSSRC(t5.ssrcs), i4 += this.printRTCPMux(t5.rtcpMux), i4 += this.printRTCPMuxOnly(t5.rtcpMuxOnly), i4 += this.printRTCPRsize(t5.rtcpRsize), i4 += this.printMSId(t5.msids), i4 += this.printImageattr(t5.imageattr), i4 += this.printRid(t5.rids), i4 += this.printSimulcast(t5.simulcast), i4 += this.printSCTPPort(t5.sctpPort), i4 += this.printMaxMessageSize(t5.maxMessageSize), i4 += this.printUnrecognized(t5.unrecognized), i4;
              }
              printCandidates(e5) {
                return e5.map((e6) => "a=candidate:".concat(e6.foundation).concat(o2).concat(e6.componentId).concat(o2).concat(e6.transport).concat(o2).concat(e6.priority).concat(o2).concat(e6.connectionAddress).concat(o2).concat(e6.port).concat(o2, "typ").concat(o2).concat(e6.type).concat(e6.relAddr ? "".concat(o2, "raddr").concat(o2).concat(e6.relAddr) : "").concat(e6.relPort ? "".concat(o2, "rport").concat(o2).concat(e6.relPort) : "").concat(Object.keys(e6.extension).map((t5) => "".concat(o2).concat(t5).concat(o2).concat(e6.extension[t5])).join("")).concat(this.eol)).join("");
              }
              printRemoteCandidatesList(e5) {
                return e5.map((e6) => "a=remote-candidates:".concat(e6.join(o2)).concat(this.eol)).join("");
              }
              printEndOfCandidates(e5) {
                return void 0 === e5 ? "" : "a=end-of-candidates" + this.eol;
              }
              printRTPRelated(e5) {
                if (!e5.payloads)
                  return "";
                const t5 = e5.payloads;
                let i4 = "";
                i4 += e5.rtcpFeedbackWildcards.map((e6) => this.printRTCPFeedback("*", e6)).join("");
                for (const e6 of t5)
                  i4 += this.printRtpMap(e6.payloadType, e6.rtpMap), i4 += this.printFmtp(e6.payloadType, e6.fmtp), i4 += e6.rtcpFeedbacks.map((t6) => this.printRTCPFeedback(e6.payloadType, t6)).join("");
                return i4;
              }
              printFmtp(e5, t5) {
                if (!t5)
                  return "";
                const i4 = Object.keys(t5.parameters);
                return 1 === i4.length && null === t5.parameters[i4[0]] ? "a=fmtp:".concat(e5).concat(o2).concat(i4[0]).concat(this.eol) : "a=fmtp:".concat(e5).concat(o2).concat(Object.keys(t5.parameters).map((e6) => "".concat(e6, "=").concat(t5.parameters[e6])).join(";")).concat(this.eol);
              }
              printRtpMap(e5, t5) {
                return t5 ? "a=rtpmap:".concat(e5).concat(o2).concat(t5.encodingName, "/").concat(t5.clockRate).concat(t5.encodingParameters ? "/".concat(t5.encodingParameters) : "").concat(this.eol) : "";
              }
              printRTCPFeedback(e5, t5) {
                let i4 = "a=rtcp-fb:".concat(e5).concat(o2), r3 = t5;
                switch (r3.type) {
                  case "trr-int":
                    i4 += "ttr-int".concat(o2).concat(r3.interval);
                    break;
                  case "ack":
                  case "nack":
                  default:
                    r3 = r3, i4 += "".concat(r3.type), r3.parameter && (i4 += "".concat(o2).concat(r3.parameter), r3.additional && (i4 += "".concat(o2).concat(r3.additional)));
                }
                return i4 + this.eol;
              }
              printPtime(e5) {
                return void 0 === e5 ? "" : "a=ptime:".concat(e5).concat(this.eol);
              }
              printMaxPtime(e5) {
                return void 0 === e5 ? "" : "a=maxptime:".concat(e5).concat(this.eol);
              }
              printDirection(e5) {
                return void 0 === e5 ? "" : "a=".concat(e5).concat(this.eol);
              }
              printSSRC(e5) {
                return e5.map((e6) => Object.keys(e6.attributes).map((t5) => "a=ssrc:".concat(e6.ssrcId.toString(10)).concat(o2).concat(t5).concat(e6.attributes[t5] ? ":".concat(e6.attributes[t5]) : "").concat(this.eol)).join("")).join("");
              }
              printRTCPMux(e5) {
                return void 0 === e5 ? "" : "a=rtcp-mux".concat(this.eol);
              }
              printRTCPMuxOnly(e5) {
                return void 0 === e5 ? "" : "a=rtcp-mux-only".concat(this.eol);
              }
              printRTCPRsize(e5) {
                return void 0 === e5 ? "" : "a=rtcp-rsize".concat(this.eol);
              }
              printRTCP(e5) {
                if (void 0 === e5)
                  return "";
                let t5 = "a=rtcp:".concat(e5.port);
                return e5.netType && (t5 += "".concat(o2).concat(e5.netType)), e5.addressType && (t5 += "".concat(o2).concat(e5.addressType)), e5.address && (t5 += "".concat(o2).concat(e5.address)), t5 + this.eol;
              }
              printMSId(e5) {
                return e5.map((e6) => "a=msid:".concat(e6.id).concat(e6.appdata ? "".concat(o2).concat(e6.appdata) : "").concat(this.eol)).join("");
              }
              printImageattr(e5) {
                return e5.map((e6) => "a=imageattr:".concat(e6).concat(this.eol)).join("");
              }
              printRid(e5) {
                return e5.map((e6) => {
                  let t5 = "a=rid:".concat(e6.id).concat(o2).concat(e6.direction);
                  return e6.payloads && (t5 += "".concat(o2, "pt=").concat(e6.payloads.join(","))), e6.params.length > 0 && (t5 += "".concat(o2).concat(e6.params.map((e7) => "depend" === e7.type ? "depend=".concat(e7.rids.join(",")) : "".concat(e7.type, "=").concat(e7.val)).join(";"))), t5 + this.eol;
                }).join("");
              }
              printSimulcast(e5) {
                return void 0 === e5 ? "" : "a=simulcast:".concat(e5).concat(this.eol);
              }
              printSCTPPort(e5) {
                return void 0 === e5 ? "" : "a=sctp-port:".concat(e5).concat(this.eol);
              }
              printMaxMessageSize(e5) {
                return void 0 === e5 ? "" : "a=max-message-size:".concat(e5).concat(this.eol);
              }
              printMid(e5) {
                return void 0 === e5 ? "" : "a=mid:".concat(e5).concat(this.eol);
              }
              printSSRCGroups(e5) {
                return e5.map((e6) => "a=ssrc-group:".concat(e6.semantic).concat(e6.ssrcIds.map((e7) => "".concat(o2).concat(e7.toString(10))).join("")).concat(this.eol)).join("");
              }
            }
            function D2(e5) {
              return new R2().parse(e5);
            }
            function P2(e5, t5) {
              return new O2().print(e5, t5);
            }
          } }, t3 = {};
          function i2(r2) {
            if (t3[r2])
              return t3[r2].exports;
            var n2 = t3[r2] = { exports: {} };
            return e3[r2](n2, n2.exports, i2), n2.exports;
          }
          return i2.d = (e4, t4) => {
            for (var r2 in t4)
              i2.o(t4, r2) && !i2.o(e4, r2) && Object.defineProperty(e4, r2, { enumerable: true, get: t4[r2] });
          }, i2.o = (e4, t4) => Object.prototype.hasOwnProperty.call(e4, t4), i2.r = (e4) => {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e4, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e4, "__esModule", { value: true });
          }, i2(8);
        })();
      }(bD);
      class YD {
        constructor(e2) {
          mp(this, "sessionDesc", void 0), mp(this, "localCapabilities", void 0), mp(this, "rtpCapabilities", void 0), mp(this, "candidates", void 0), mp(this, "iceParameters", void 0), mp(this, "dtlsParameters", void 0), mp(this, "setup", void 0), mp(this, "currentMidIndex", void 0), mp(this, "cname", void 0), e2 = qR(e2);
          const { remoteIceParameters: t2, remoteDtlsParameters: i2, candidates: r2, remoteRTPCapabilities: n2, remoteSetup: o2, localCapabilities: s2, sdkCodec: a2, cname: c2 } = e2, d2 = bD.exports.parse("v=0\no=- 0 0 IN IP4 127.0.0.1\ns=AgoraGateway\nt=0 0\na=group:BUNDLE audio video\na=msid-semantic: WMS\na=ice-lite\nm=audio 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendrecv\na=rtcp-mux\na=rtcp-rsize\na=mid:audio\nm=video 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendrecv\na=rtcp-mux\na=rtcp-rsize\na=mid:video\n");
          this.rtpCapabilities = n2, this.candidates = r2, this.iceParameters = t2, this.dtlsParameters = i2, this.setup = o2, this.localCapabilities = s2, this.cname = c2;
          for (let e3 = 0; e3 < d2.mediaDescriptions.length; e3++) {
            const s3 = d2.mediaDescriptions[e3];
            if (s3.attributes.iceUfrag = t2.iceUfrag, s3.attributes.icePwd = t2.icePwd, s3.attributes.fingerprints = i2.fingerprints, s3.attributes.candidates = r2, s3.attributes.setup = o2, "video" === s3.media.mediaType) {
              s3.media.fmts = n2.videoCodecs.map((e5) => e5.payloadType.toString(10));
              const e4 = n2.videoCodecs.filter((e5) => {
                var t3;
                return null === (t3 = e5.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase().includes(a2);
              });
              if (0 === e4.length)
                throw new Error("Codec ".concat(a2, " not supported by remote SDP."));
              s3.attributes.payloads = e4, s3.attributes.extmaps = n2.videoExtensions;
            }
            "audio" === s3.media.mediaType && (s3.media.fmts = n2.audioCodecs.map((e4) => e4.payloadType.toString(10)), s3.attributes.payloads = n2.audioCodecs, s3.attributes.extmaps = n2.audioExtensions), d2.mediaDescriptions[e3] = this.mungMediaDesc(s3);
          }
          this.sessionDesc = d2, this.currentMidIndex = d2.mediaDescriptions.length - 1;
        }
        toString() {
          return bD.exports.print(this.sessionDesc);
        }
        send(e2, t2, i2) {
          const { ssrcs: r2, ssrcGroups: n2 } = MD(t2, this.cname), o2 = this.sessionDesc.mediaDescriptions.find((t3) => e2 === yg.VIDEO ? "video" === t3.media.mediaType : "audio" === t3.media.mediaType), s2 = r2[0].attributes.label, a2 = r2[0].attributes.mslabel;
          return o2.attributes.ssrcs = o2.attributes.ssrcs.concat(r2), o2.attributes.ssrcGroups = o2.attributes.ssrcGroups.concat(n2), { id: s2, mslabel: a2 };
        }
        batchSend(e2) {
          return e2.map((e3) => {
            let { kind: t2, ssrcMsg: i2 } = e3;
            return this.send(t2, i2, void 0);
          });
        }
        stopSending(e2) {
          this.sessionDesc.mediaDescriptions.forEach((t2) => {
            const i2 = [], r2 = [], n2 = [];
            t2.attributes.ssrcs.forEach((t3) => {
              e2.includes(t3.attributes.label || "") ? n2.push(t3) : i2.push(t3);
            }), t2.attributes.ssrcGroups.forEach((e3) => {
              n2.map((e4) => e4.ssrcId).includes(e3.ssrcIds[0]) || r2.push(e3);
            }), t2.attributes.ssrcs = i2, t2.attributes.ssrcGroups = r2;
          });
        }
        mute(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2);
          if (!t2)
            throw new Error("mediaDescription not found with ".concat(e2, " in remote SDP when calling RemoteSDP.mute."));
          t2.attributes.direction = "inactive";
        }
        unmute(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2);
          if (!t2)
            throw new Error("mediaDescription not found with ".concat(e2, " in remote SDP when calling RemoteSDP.unmute."));
          t2.attributes.direction = "sendonly";
        }
        receive(e2, t2, i2) {
          e2.forEach((e3, t3) => {
            const i3 = e3._mediaStreamTrack, r2 = this.sessionDesc.mediaDescriptions.findIndex((e4) => e4.attributes.mid === i3.kind), n2 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[r2], e3);
            this.sessionDesc.mediaDescriptions[r2] = n2;
          });
        }
        stopReceiving(e2) {
        }
        restartICE(e2) {
          e2 = qR(e2), this.iceParameters = e2, this.sessionDesc.mediaDescriptions.forEach((t2) => {
            t2.attributes.iceUfrag = e2.iceUfrag, t2.attributes.icePwd = e2.icePwd;
          });
        }
        predictReceivingMids(e2) {
          const t2 = [];
          for (let i2 = 0; i2 < e2; i2++)
            t2.push((this.currentMidIndex + i2 + 1).toString(10));
          return t2;
        }
        mungRecvMediaDsec(e2, t2) {
          const i2 = qR(e2);
          return UD(i2, t2), VD(i2, t2), i2;
        }
        updateRecvMedia(e2, t2) {
          const i2 = this.sessionDesc.mediaDescriptions.findIndex((t3) => t3.attributes.mid === e2);
          if (-1 !== i2) {
            const e3 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[i2], t2);
            this.sessionDesc.mediaDescriptions[i2] = e3;
          }
        }
        bumpMid(e2) {
          this.currentMidIndex += e2;
        }
        updateTrackLabel(e2, t2, i2) {
          const r2 = this.sessionDesc.mediaDescriptions.find((t3) => e2 === yg.VIDEO ? "video" === t3.attributes.mid : "audio" === t3.attributes.mid);
          if (r2) {
            const e3 = r2.attributes.ssrcs.find((e4) => e4.attributes.label === t2);
            var n2;
            if (e3)
              e3.attributes.label = i2, null === (n2 = e3.attributes.msid) || void 0 === n2 || n2.replace(t2, i2);
          }
        }
        mungMediaDesc(e2) {
          const t2 = qR(e2);
          return xD(t2), function(e3) {
            const t3 = e3.attributes.extmaps.find((e4) => "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" === e4.extensionName);
            t3 && e3.attributes.extmaps.splice(e3.attributes.extmaps.indexOf(t3), 1), e3.attributes.payloads.forEach((e4) => {
              const t4 = e4.rtcpFeedbacks.findIndex((e5) => "transport-cc" === e5.type);
              -1 !== t4 && e4.rtcpFeedbacks.splice(t4, 1);
            });
          }(t2), t2;
        }
        getSSRC(e2) {
          for (const t2 of this.sessionDesc.mediaDescriptions)
            for (const i2 of t2.attributes.ssrcs)
              if (i2.attributes.label === e2)
                return [i2];
        }
      }
      function qD(e2) {
        if (Array.isArray(e2))
          return e2.map(function(e3) {
            return e3;
          });
        if (!JD(e2))
          return e2;
        var t2 = {};
        for (var i2 in e2)
          JD(e2[i2]) || Array.isArray(e2[i2]) ? t2[i2] = qD(e2[i2]) : t2[i2] = e2[i2];
        return t2;
      }
      function JD(e2) {
        return !("object" != typeof e2 || Array.isArray(e2) || !e2);
      }
      var XD = function() {
        function e2(e3) {
          this.input = [], this.size = e3;
        }
        return e2.prototype.add = function(e3) {
          this.input.push(e3), this.input.length > this.size && this.input.splice(0, 1);
        }, e2.prototype.diffMean = function() {
          return 0 === this.input.length ? 0 : (this.input[this.input.length - 1] - this.input[0]) / this.input.length;
        }, e2;
      }(), zD = function(e2, t2) {
        return (zD = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
          e3.__proto__ = t3;
        } || function(e3, t3) {
          for (var i2 in t3)
            t3.hasOwnProperty(i2) && (e3[i2] = t3[i2]);
        })(e2, t2);
      };
      function QD(e2, t2) {
        function i2() {
          this.constructor = e2;
        }
        zD(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (i2.prototype = t2.prototype, new i2());
      }
      var ZD = function() {
        return (ZD = Object.assign || function(e2) {
          for (var t2, i2 = 1, r2 = arguments.length; i2 < r2; i2++)
            for (var n2 in t2 = arguments[i2])
              Object.prototype.hasOwnProperty.call(t2, n2) && (e2[n2] = t2[n2]);
          return e2;
        }).apply(this, arguments);
      };
      function $D(e2, t2, i2, r2) {
        return new (i2 || (i2 = Promise))(function(n2, o2) {
          function s2(e3) {
            try {
              c2(r2.next(e3));
            } catch (e4) {
              o2(e4);
            }
          }
          function a2(e3) {
            try {
              c2(r2.throw(e3));
            } catch (e4) {
              o2(e4);
            }
          }
          function c2(e3) {
            e3.done ? n2(e3.value) : new i2(function(t3) {
              t3(e3.value);
            }).then(s2, a2);
          }
          c2((r2 = r2.apply(e2, t2 || [])).next());
        });
      }
      function eP(e2, t2) {
        var i2, r2, n2, o2, s2 = { label: 0, sent: function() {
          if (1 & n2[0])
            throw n2[1];
          return n2[1];
        }, trys: [], ops: [] };
        return o2 = { next: a2(0), throw: a2(1), return: a2(2) }, "function" == typeof Symbol && (o2[Symbol.iterator] = function() {
          return this;
        }), o2;
        function a2(o3) {
          return function(a3) {
            return function(o4) {
              if (i2)
                throw new TypeError("Generator is already executing.");
              for (; s2; )
                try {
                  if (i2 = 1, r2 && (n2 = 2 & o4[0] ? r2.return : o4[0] ? r2.throw || ((n2 = r2.return) && n2.call(r2), 0) : r2.next) && !(n2 = n2.call(r2, o4[1])).done)
                    return n2;
                  switch (r2 = 0, n2 && (o4 = [2 & o4[0], n2.value]), o4[0]) {
                    case 0:
                    case 1:
                      n2 = o4;
                      break;
                    case 4:
                      return s2.label++, { value: o4[1], done: false };
                    case 5:
                      s2.label++, r2 = o4[1], o4 = [0];
                      continue;
                    case 7:
                      o4 = s2.ops.pop(), s2.trys.pop();
                      continue;
                    default:
                      if (!(n2 = s2.trys, (n2 = n2.length > 0 && n2[n2.length - 1]) || 6 !== o4[0] && 2 !== o4[0])) {
                        s2 = 0;
                        continue;
                      }
                      if (3 === o4[0] && (!n2 || o4[1] > n2[0] && o4[1] < n2[3])) {
                        s2.label = o4[1];
                        break;
                      }
                      if (6 === o4[0] && s2.label < n2[1]) {
                        s2.label = n2[1], n2 = o4;
                        break;
                      }
                      if (n2 && s2.label < n2[2]) {
                        s2.label = n2[2], s2.ops.push(o4);
                        break;
                      }
                      n2[2] && s2.ops.pop(), s2.trys.pop();
                      continue;
                  }
                  o4 = t2.call(e2, s2);
                } catch (e3) {
                  o4 = [6, e3], r2 = 0;
                } finally {
                  i2 = n2 = 0;
                }
              if (5 & o4[0])
                throw o4[1];
              return { value: o4[0] ? o4[1] : void 0, done: true };
            }([o3, a3]);
          };
        }
      }
      var tP, iP = { address: "unknown", candidateType: "unknown", id: "unknown", port: 0, priority: 0, protocol: "unknown", type: "unknown" }, rP = { timestamp: 0, bitrate: { actualEncoded: 0, transmit: 0 }, sendPacketLossRate: 0, recvPacketLossRate: 0, videoRecv: [], videoSend: [], audioRecv: [], audioSend: [], selectedCandidatePair: { id: "unknown", localCandidate: iP, remoteCandidate: iP } }, nP = { firsCount: 0, nacksCount: 0, plisCount: 0, framesDecodeCount: 0, framesDecodeInterval: 0, framesDecodeFreezeTime: 0, decodeFrameRate: 0, bytes: 0, packetsLost: 0, packetLostRate: 0, packets: 0, ssrc: 0, qpSumPerFrame: 0 }, oP = { firsCount: 0, nacksCount: 0, plisCount: 0, frameCount: 0, bytes: 0, packets: 0, packetsLost: 0, packetLostRate: 0, ssrc: 0, rttMs: 0, qpSumPerFrame: 0 }, sP = { bytes: 0, packets: 0, packetsLost: 0, packetLostRate: 0, ssrc: 0, rttMs: 0 }, aP = { jitterBufferMs: 0, jitterMs: 0, bytes: 0, packetsLost: 0, packetLostRate: 0, packets: 0, ssrc: 0, receivedFrames: 0, droppedFrames: 0, concealedSamples: 0 }, cP = function() {
        function e2(e3, t2) {
          var i2 = this;
          this.videoIsReady = false, this.videoIsReady2 = {}, this.stats = qD(rP), this.isFirstVideoReceived = {}, this.isFirstVideoDecoded = {}, this.isFirstAudioReceived = {}, this.isFirstAudioDecoded = {}, this.lossRateWindowStats = [], this.pc = e3, this.options = t2, this.intervalTimer = window.setInterval(function() {
            return $D(i2, void 0, void 0, function() {
              return eP(this, function(e4) {
                return this.updateStats(), [2];
              });
            });
          }, this.options.updateInterval);
        }
        return e2.prototype.getStats = function() {
          return this.stats;
        }, e2.prototype.setVideoIsReady = function(e3) {
          this.videoIsReady = e3;
        }, e2.prototype.setVideoIsReady2 = function(e3, t2) {
          this.videoIsReady2[e3] = t2;
        }, e2.prototype.getVideoIsReady = function(e3) {
          return this.videoIsReady2[e3] || false;
        }, e2.prototype.setIsFirstAudioDecoded = function(e3) {
        }, e2.prototype.destroy = function() {
          window.clearInterval(this.intervalTimer), this.pc = void 0;
        }, e2.prototype.calcLossRate = function(e3) {
          var t2 = this;
          this.lossRateWindowStats.push(e3), this.lossRateWindowStats.length > this.options.lossRateInterval && this.lossRateWindowStats.splice(0, 1);
          for (var i2 = this.lossRateWindowStats.length, r2 = 0, n2 = 0, o2 = 0, s2 = 0, a2 = function(a3) {
            e3[a3].forEach(function(e4, c3) {
              if (t2.lossRateWindowStats[i2 - 1][a3][c3] && t2.lossRateWindowStats[0][a3][c3]) {
                var d3 = t2.lossRateWindowStats[i2 - 1][a3][c3].packets - t2.lossRateWindowStats[0][a3][c3].packets, u2 = t2.lossRateWindowStats[i2 - 1][a3][c3].packetsLost - t2.lossRateWindowStats[0][a3][c3].packetsLost;
                "videoSend" === a3 || "audioSend" === a3 ? (r2 += d3, o2 += u2) : (n2 += d3, s2 += u2), Number.isNaN(d3) || Number.isNaN(d3) ? e4.packetLostRate = 0 : e4.packetLostRate = d3 <= 0 || u2 <= 0 ? 0 : u2 / (d3 + u2);
              }
            });
          }, c2 = 0, d2 = ["videoSend", "audioSend", "videoRecv", "audioRecv"]; c2 < d2.length; c2++) {
            a2(d2[c2]);
          }
          e3.sendPacketLossRate = r2 <= 0 || o2 <= 0 ? 0 : o2 / (r2 + o2), e3.recvPacketLossRate = n2 <= 0 || s2 <= 0 ? 0 : s2 / (n2 + s2);
        }, e2;
      }(), dP = function(e2) {
        function t2() {
          var t3 = null !== e2 && e2.apply(this, arguments) || this;
          return t3._stats = rP, t3.lastDecodeVideoReceiverStats = /* @__PURE__ */ new Map(), t3;
        }
        return QD(t2, e2), t2.prototype.updateStats = function() {
          return $D(this, void 0, void 0, function() {
            var e3, t3, i2, r2;
            return eP(this, function(n2) {
              switch (n2.label) {
                case 0:
                  return [4, this._getStats()];
                case 1:
                  return e3 = n2.sent(), t3 = this.statsResponsesToObjects(e3), this._stats = qD(rP), i2 = t3.filter(function(e4) {
                    return "ssrc" === e4.type;
                  }), this.processSSRCStats(i2), (r2 = t3.find(function(e4) {
                    return "VideoBwe" === e4.type;
                  })) && this.processBandwidthStats(r2), this._stats.timestamp = Date.now(), this.calcLossRate(this._stats), this.stats = this._stats, [2];
              }
            });
          });
        }, t2.prototype.processBandwidthStats = function(e3) {
          this._stats.bitrate = { actualEncoded: Number(e3.googActualEncBitrate), targetEncoded: Number(e3.googTargetEncBitrate), retransmit: Number(e3.googRetransmitBitrate), transmit: Number(e3.googTransmitBitrate) }, this._stats.sendBandwidth = Number(e3.googAvailableSendBandwidth);
        }, t2.prototype.processSSRCStats = function(e3) {
          var t3 = this;
          e3.forEach(function(e4) {
            var i2 = e4.id.includes("send");
            switch ("".concat(e4.mediaType, "_").concat(i2 ? "send" : "recv")) {
              case "video_send":
                var r2 = qD(oP);
                r2.codec = e4.googCodecName, r2.adaptionChangeReason = "none", e4.googCpuLimitedResolution && (r2.adaptionChangeReason = "cpu"), e4.googBandwidthLimitedResolution && (r2.adaptionChangeReason = "bandwidth"), r2.avgEncodeMs = Number(e4.googAvgEncodeMs), r2.inputFrame = { width: Number(e4.googFrameWidthInput) || Number(e4.googFrameWidthSent), height: Number(e4.googFrameHeightInput) || Number(e4.googFrameHeightSent), frameRate: Number(e4.googFrameRateInput) }, r2.sentFrame = { width: Number(e4.googFrameWidthSent), height: Number(e4.googFrameHeightSent), frameRate: Number(e4.googFrameRateInput) }, r2.firsCount = Number(e4.googFirReceived), r2.nacksCount = Number(e4.googNacksReceived), r2.plisCount = Number(e4.googPlisReceived), r2.frameCount = Number(e4.framesEncoded), r2.bytes = Number(e4.bytesSent), r2.packets = Number(e4.packetsSent), r2.packetsLost = Number(e4.packetsLost), r2.ssrc = Number(e4.ssrc), r2.rttMs = Number(e4.googRtt || 0), t3._stats.videoSend.push(r2), t3._stats.rtt = r2.rttMs;
                break;
              case "video_recv":
                var n2 = qD(nP), o2 = t3.lastDecodeVideoReceiverStats.get(Number(e4.ssrc));
                if (n2.codec = e4.googCodecName, n2.targetDelayMs = Number(e4.googTargetDelayMs), n2.renderDelayMs = Number(e4.googRenderDelayMs), n2.currentDelayMs = Number(e4.googCurrentDelayMs), n2.minPlayoutDelayMs = Number(e4.googMinPlayoutDelayMs), n2.decodeMs = Number(e4.googDecodeMs), n2.maxDecodeMs = Number(e4.googMaxDecodeMs), n2.receivedFrame = { width: Number(e4.googFrameWidthReceived), height: Number(e4.googFrameHeightReceived), frameRate: Number(e4.googFrameRateReceived) }, n2.decodedFrame = { width: Number(e4.googFrameWidthReceived), height: Number(e4.googFrameHeightReceived), frameRate: Number(e4.googFrameRateDecoded) }, n2.decodeFrameRate = Number(e4.googFrameRateDecoded), n2.outputFrame = { width: Number(e4.googFrameWidthReceived), height: Number(e4.googFrameHeightReceived), frameRate: Number(e4.googFrameRateOutput) }, n2.jitterBufferMs = Number(e4.googJitterBufferMs), n2.firsCount = Number(e4.googFirsSent), n2.nacksCount = Number(e4.googNacksSent), n2.plisCount = Number(e4.googPlisSent), n2.framesDecodeCount = Number(e4.framesDecoded), n2.bytes = Number(e4.bytesReceived), n2.packets = Number(e4.packetsReceived), n2.packetsLost = Number(e4.packetsLost), n2.ssrc = Number(e4.ssrc), n2.packets > 0 && !t3.isFirstVideoReceived[n2.ssrc] && (t3.onFirstVideoReceived && t3.onFirstVideoReceived(n2.ssrc), t3.isFirstVideoReceived[n2.ssrc] = true), n2.framesDecodeCount > 0 && !t3.isFirstVideoDecoded[n2.ssrc] && (t3.onFirstVideoDecoded && t3.onFirstVideoDecoded(n2.ssrc, n2.decodedFrame.width, n2.decodedFrame.height), t3.isFirstVideoDecoded[n2.ssrc] = true), o2) {
                  var s2 = o2.stats, a2 = Date.now() - o2.lts;
                  n2.framesDecodeFreezeTime = s2.framesDecodeFreezeTime, n2.framesDecodeInterval = s2.framesDecodeInterval, n2.framesDecodeCount > s2.framesDecodeCount && t3.isFirstVideoDecoded[n2.ssrc] ? (o2.lts = Date.now(), n2.framesDecodeInterval = a2, n2.framesDecodeInterval >= t3.options.freezeRateLimit && (t3.getVideoIsReady(parseInt(e4.ssrc, 10)) ? n2.framesDecodeFreezeTime += n2.framesDecodeInterval : t3.setVideoIsReady2(parseInt(e4.ssrc, 10), true))) : n2.framesDecodeCount < o2.stats.framesDecodeCount && (n2.framesDecodeInterval = 0);
                }
                t3.lastDecodeVideoReceiverStats.set(n2.ssrc, { stats: ZD({}, n2), lts: Date.now() }), t3._stats.videoRecv.push(n2);
                break;
              case "audio_recv":
                var c2 = qD(aP);
                c2.codec = e4.googCodecName, c2.outputLevel = Math.abs(Number(e4.audioOutputLevel)) / 32767, c2.decodingCNG = Number(e4.googDecodingCNG), c2.decodingCTN = Number(e4.googDecodingCTN), c2.decodingCTSG = Number(e4.googDecodingCTSG), c2.decodingNormal = Number(e4.googDecodingNormal), c2.decodingPLC = Number(e4.googDecodingPLC), c2.decodingPLCCNG = Number(e4.googDecodingPLCCNG), c2.expandRate = Number(e4.googExpandRate), c2.accelerateRate = Number(e4.googAccelerateRate), c2.preemptiveExpandRate = Number(e4.googPreemptiveExpandRate), c2.secondaryDecodedRate = Number(e4.googSecondaryDecodedRate), c2.speechExpandRate = Number(e4.googSpeechExpandRate), c2.preferredJitterBufferMs = Number(e4.googPreferredJitterBufferMs), c2.jitterBufferMs = Number(e4.googJitterBufferMs), c2.jitterMs = Number(e4.googJitterReceived), c2.bytes = Number(e4.bytesReceived), c2.packets = Number(e4.packetsReceived), c2.packetsLost = Number(e4.packetsLost), c2.ssrc = Number(e4.ssrc), c2.receivedFrames = Number(e4.googDecodingCTN) || Number(e4.packetsReceived), c2.droppedFrames = Number(e4.googDecodingPLC) + Number(e4.googDecodingPLCCNG) || Number(e4.packetsLost), c2.receivedFrames > 0 && !t3.isFirstAudioReceived[c2.ssrc] && (t3.onFirstAudioReceived && t3.onFirstAudioReceived(c2.ssrc), t3.isFirstAudioReceived[c2.ssrc] = true), c2.decodingNormal > 0 && !t3.isFirstAudioDecoded[c2.ssrc] && (t3.onFirstAudioDecoded && t3.onFirstAudioDecoded(c2.ssrc), t3.isFirstAudioDecoded[c2.ssrc] = true), t3._stats.audioRecv.push(c2);
                break;
              case "audio_send":
                var d2 = qD(sP);
                d2.codec = e4.googCodecName, d2.inputLevel = Math.abs(Number(e4.audioInputLevel)) / 32767, d2.aecReturnLoss = Number(e4.googEchoCancellationReturnLoss || 0), d2.aecReturnLossEnhancement = Number(e4.googEchoCancellationReturnLossEnhancement || 0), d2.residualEchoLikelihood = Number(e4.googResidualEchoLikelihood || 0), d2.residualEchoLikelihoodRecentMax = Number(e4.googResidualEchoLikelihoodRecentMax || 0), d2.bytes = Number(e4.bytesSent), d2.packets = Number(e4.packetsSent), d2.packetsLost = Number(e4.packetsLost), d2.ssrc = Number(e4.ssrc), d2.rttMs = Number(e4.googRtt || 0), t3._stats.rtt = d2.rttMs, t3._stats.audioSend.push(d2);
            }
          });
        }, t2.prototype._getStats = function() {
          var e3 = this;
          return new Promise(function(t3, i2) {
            e3.pc.getStats(t3, i2);
          });
        }, t2.prototype.statsResponsesToObjects = function(e3) {
          var t3 = [];
          return e3.result().forEach(function(e4) {
            var i2 = { id: e4.id, timestamp: e4.timestamp.valueOf().toString(), type: e4.type };
            e4.names().forEach(function(t4) {
              i2[t4] = e4.stat(t4);
            }), t3.push(i2);
          }), t3;
        }, t2;
      }(cP);
      !function(e2) {
        e2.CERTIFICATE = "certificate", e2.CODEC = "codec", e2.CANDIDATE_PAIR = "candidate-pair", e2.LOCAL_CANDIDATE = "local-candidate", e2.REMOTE_CANDIDATE = "remote-candidate", e2.INBOUND = "inbound-rtp", e2.TRACK = "track", e2.OUTBOUND = "outbound-rtp", e2.PC = "peer-connection", e2.REMOTE_INBOUND = "remote-inbound-rtp", e2.REMOTE_OUTBOUND = "remote-outbound-rtp", e2.TRANSPORT = "transport", e2.CSRC = "csrc", e2.DATA_CHANNEL = "data-channel", e2.STREAM = "stream", e2.SENDER = "sender", e2.RECEIVER = "receiver";
      }(tP || (tP = {}));
      var uP, lP = function(e2) {
        function t2() {
          var t3 = null !== e2 && e2.apply(this, arguments) || this;
          return t3._stats = rP, t3.lastDecodeVideoReceiverStats = /* @__PURE__ */ new Map(), t3.lastVideoFramesRecv = /* @__PURE__ */ new Map(), t3.lastVideoFramesSent = /* @__PURE__ */ new Map(), t3.lastVideoFramesDecode = /* @__PURE__ */ new Map(), t3.lastVideoJBDelay = /* @__PURE__ */ new Map(), t3.lastAudioJBDelay = /* @__PURE__ */ new Map(), t3.mediaBytesSent = /* @__PURE__ */ new Map(), t3.mediaBytesRetransmit = /* @__PURE__ */ new Map(), t3.mediaBytesTargetEncode = /* @__PURE__ */ new Map(), t3.lastEncoderMs = /* @__PURE__ */ new Map(), t3;
        }
        return QD(t2, e2), t2.prototype.updateStats = function() {
          return $D(this, void 0, void 0, function() {
            var e3, t3 = this;
            return eP(this, function(i2) {
              switch (i2.label) {
                case 0:
                  return e3 = this, [4, this.pc.getStats()];
                case 1:
                  return e3.report = i2.sent(), this._stats = qD(rP), this.report.forEach(function(e4) {
                    switch (e4.type) {
                      case tP.OUTBOUND:
                        "audio" === e4.mediaType ? t3.processAudioOutboundStats(e4) : "video" === e4.mediaType && t3.processVideoOutboundStats(e4);
                        break;
                      case tP.INBOUND:
                        "audio" === e4.mediaType ? t3.processAudioInboundStats(e4) : "video" === e4.mediaType && t3.processVideoInboundStats(e4);
                        break;
                      case tP.TRANSPORT:
                        var i3 = t3.report.get(e4.selectedCandidatePairId);
                        i3 && t3.processCandidatePairStats(i3);
                        break;
                      case tP.CANDIDATE_PAIR:
                        e4.selected && t3.processCandidatePairStats(e4);
                    }
                  }), this.updateSendBitrate(), this._stats.timestamp = Date.now(), this.calcLossRate(this._stats), this.stats = this._stats, [2];
              }
            });
          });
        }, t2.prototype.processCandidatePairStats = function(e3) {
          if (this._stats.sendBandwidth = e3.availableOutgoingBitrate || 0, e3.currentRoundTripTime && (this._stats.rtt = 1e3 * e3.currentRoundTripTime), this._stats.videoSend.forEach(function(t4) {
            !t4.rttMs && e3.currentRoundTripTime && (t4.rttMs = 1e3 * e3.currentRoundTripTime);
          }), this._stats.audioSend.forEach(function(t4) {
            !t4.rttMs && e3.currentRoundTripTime && (t4.rttMs = 1e3 * e3.currentRoundTripTime);
          }), this._stats.selectedCandidatePair.id = e3.id, e3.localCandidateId) {
            var t3 = this.report.get(e3.localCandidateId);
            t3 && this.processCandidateStats(t3);
          }
          if (e3.remoteCandidateId) {
            var i2 = this.report.get(e3.remoteCandidateId);
            i2 && this.processCandidateStats(i2);
          }
        }, t2.prototype.processCandidateStats = function(e3) {
          var t3;
          e3.type === tP.LOCAL_CANDIDATE && (t3 = this._stats.selectedCandidatePair.localCandidate), e3.type === tP.REMOTE_CANDIDATE && (t3 = this._stats.selectedCandidatePair.remoteCandidate), t3 && (t3.type = e3.type, t3.id = e3.id, e3.address && (t3.address = e3.address), e3.candidateType && (t3.candidateType = e3.candidateType), e3.port && (t3.port = e3.port), e3.priority && (t3.priority = e3.priority), e3.protocol && (t3.protocol = e3.protocol), e3.relayProtocol && (t3.relayProtocol = e3.relayProtocol), e3.type === tP.LOCAL_CANDIDATE && this.stats.selectedCandidatePair.localCandidate.id !== t3.id && this.onSelectedLocalCandidateChanged && this.onSelectedLocalCandidateChanged(ZD({}, t3), ZD({}, this.stats.selectedCandidatePair.localCandidate)), e3.type === tP.REMOTE_CANDIDATE && this.stats.selectedCandidatePair.remoteCandidate.id !== t3.id && this.onSelectedRemoteCandidateChanged && this.onSelectedRemoteCandidateChanged(ZD({}, t3), ZD({}, this.stats.selectedCandidatePair.remoteCandidate)));
        }, t2.prototype.processAudioInboundStats = function(e3) {
          var t3 = this._stats.audioRecv.find(function(t4) {
            return t4.ssrc === e3.ssrc;
          });
          t3 || (t3 = qD(aP), this._stats.audioRecv.push(t3)), t3.ssrc = e3.ssrc, t3.packets = e3.packetsReceived, t3.packetsLost = e3.packetsLost, t3.bytes = e3.bytesReceived, t3.jitterMs = 1e3 * e3.jitter, this.processAudioTrackReceiverStats(e3, e3.trackId, t3), e3.codecId && (t3.codec = this.getCodecFromCodecStats(e3.codecId)), t3.receivedFrames || (t3.receivedFrames = e3.packetsReceived), t3.droppedFrames || (t3.droppedFrames = e3.packetsLost), t3.receivedFrames > 0 && !this.isFirstAudioReceived[t3.ssrc] && (this.onFirstAudioReceived && this.onFirstAudioReceived(t3.ssrc), this.isFirstAudioReceived[t3.ssrc] = true), t3.outputLevel && t3.outputLevel > 0 && !this.isFirstAudioDecoded[t3.ssrc] && (this.onFirstAudioDecoded && this.onFirstAudioDecoded(t3.ssrc), this.isFirstAudioDecoded[t3.ssrc] = true), "number" == typeof e3.concealedSamples && (t3.concealedSamples = e3.concealedSamples);
        }, t2.prototype.processVideoInboundStats = function(e3) {
          var t3 = this._stats.videoRecv.find(function(t4) {
            return t4.ssrc === e3.ssrc;
          });
          t3 || (t3 = qD(nP), this._stats.videoRecv.push(t3)), t3.ssrc = e3.ssrc, t3.packets = e3.packetsReceived, t3.packetsLost = e3.packetsLost, t3.bytes = e3.bytesReceived, t3.firsCount = e3.firCount, t3.nacksCount = e3.nackCount, t3.plisCount = e3.pliCount, t3.framesDecodeCount = e3.framesDecoded, t3.totalInterFrameDelay = e3.totalInterFrameDelay, t3.totalSquaredInterFrameDelay = e3.totalSquaredInterFrameDelay;
          var i2 = this.lastDecodeVideoReceiverStats.get(t3.ssrc), r2 = this.lastVideoFramesDecode.get(t3.ssrc), n2 = Date.now();
          if (t3.framesDecodeCount > 0 && !this.isFirstVideoDecoded[t3.ssrc]) {
            var o2 = t3.decodedFrame ? t3.decodedFrame.width : 0, s2 = t3.decodedFrame ? t3.decodedFrame.height : 0;
            this.onFirstVideoDecoded && this.onFirstVideoDecoded(t3.ssrc, o2, s2), this.isFirstVideoDecoded[t3.ssrc] = true;
          }
          if (i2) {
            var a2 = i2.stats, c2 = n2 - i2.lts;
            t3.framesDecodeFreezeTime = a2.framesDecodeFreezeTime, t3.framesDecodeInterval = a2.framesDecodeInterval, !this.isFirstVideoDecoded[t3.ssrc] && c2 > this.options.firstVideoDecodedTimeout && this.onFirstVideoDecodedTimeout && this.onFirstVideoDecodedTimeout(t3.ssrc), t3.framesDecodeCount > a2.framesDecodeCount && this.isFirstVideoDecoded[t3.ssrc] ? (i2.lts = Date.now(), t3.framesDecodeInterval = c2, t3.framesDecodeInterval >= this.options.freezeRateLimit && (this.getVideoIsReady(parseInt(e3.ssrc)) ? t3.framesDecodeFreezeTime += t3.framesDecodeInterval : this.setVideoIsReady2(parseInt(e3.ssrc, 10), true))) : t3.framesDecodeCount < a2.framesDecodeCount && (t3.framesDecodeInterval = 0), e3.framesDecoded && e3.qpSum && (i2.stats.framesDecodeCount > e3.framesDecoded ? t3.qpSumPerFrame = e3.qpSum / e3.framesDecoded : t3.qpSumPerFrame = (e3.qpSum - i2.qpSum) / (e3.framesDecoded - i2.stats.framesDecodeCount));
          }
          r2 && n2 - r2.lts >= 800 ? (t3.decodeFrameRate = Math.round((t3.framesDecodeCount - r2.count) / ((n2 - r2.lts) / 1e3)), this.lastVideoFramesDecode.set(t3.ssrc, { count: t3.framesDecodeCount, lts: n2, rate: t3.decodeFrameRate })) : r2 ? t3.decodeFrameRate = r2.rate : this.lastVideoFramesDecode.set(t3.ssrc, { count: t3.framesDecodeCount, lts: n2, rate: 0 }), e3.totalDecodeTime && (t3.decodeMs = 1e3 * e3.totalDecodeTime), this.processVideoTrackReceiverStats(e3, e3.trackId, t3), e3.codecId && (t3.codec = this.getCodecFromCodecStats(e3.codecId)), e3.framerateMean && (t3.framesRateFirefox = e3.framerateMean), t3.packets > 0 && !this.isFirstVideoReceived[t3.ssrc] && (this.onFirstVideoReceived && this.onFirstVideoReceived(t3.ssrc), this.isFirstVideoReceived[t3.ssrc] = true), this.lastDecodeVideoReceiverStats.set(t3.ssrc, { stats: ZD({}, t3), lts: i2 ? i2.lts : Date.now(), qpSum: e3.qpSum });
        }, t2.prototype.processVideoOutboundStats = function(e3) {
          var t3 = this._stats.videoSend.find(function(t4) {
            return t4.ssrc === e3.ssrc;
          });
          t3 || (t3 = qD(oP), this._stats.videoSend.push(t3));
          var i2, r2 = this.mediaBytesSent.get(e3.ssrc);
          r2 ? r2.add(e3.bytesSent) : ((o2 = new XD(10)).add(e3.bytesSent), this.mediaBytesSent.set(e3.ssrc, o2));
          if (void 0 !== e3.retransmittedBytesSent) {
            var n2 = this.mediaBytesRetransmit.get(e3.ssrc);
            if (n2)
              n2.add(e3.retransmittedBytesSent);
            else
              (o2 = new XD(10)).add(e3.retransmittedBytesSent), this.mediaBytesRetransmit.set(e3.ssrc, o2);
          }
          if (e3.totalEncodedBytesTarget) {
            var o2, s2 = this.mediaBytesTargetEncode.get(e3.ssrc);
            if (s2)
              s2.add(e3.totalEncodedBytesTarget);
            else
              (o2 = new XD(10)).add(e3.totalEncodedBytesTarget), this.mediaBytesTargetEncode.set(e3.ssrc, o2);
          }
          if (t3.ssrc = e3.ssrc, t3.bytes = e3.bytesSent, t3.packets = e3.packetsSent, t3.firsCount = e3.firCount, t3.nacksCount = e3.nackCount, t3.plisCount = e3.pliCount, t3.frameCount = e3.framesEncoded, t3.adaptionChangeReason = e3.qualityLimitationReason, e3.totalEncodeTime && e3.framesEncoded)
            if (!(i2 = this.lastEncoderMs.get(e3.ssrc)) || i2.lastFrameCount > e3.framesEncoded)
              t3.avgEncodeMs = 1e3 * e3.totalEncodeTime / e3.framesEncoded;
            else {
              var a2 = e3.framesEncoded - i2.lastFrameCount, c2 = e3.totalEncodeTime - i2.lastEncoderTime;
              t3.avgEncodeMs = 1e3 * c2 / a2;
            }
          e3.framesEncoded && e3.qpSum && (!(i2 = this.lastEncoderMs.get(e3.ssrc)) || i2.lastFrameCount > e3.framesEncoded ? t3.qpSumPerFrame = e3.qpSum / e3.framesEncoded : t3.qpSumPerFrame = (e3.qpSum - i2.lastQpSum) / (e3.framesEncoded - i2.lastFrameCount));
          if (this.lastEncoderMs.set(e3.ssrc, { lastFrameCount: e3.framesEncoded, lastEncoderTime: e3.totalEncodeTime, lastQpSum: e3.qpSum, lts: Date.now() }), e3.codecId && (t3.codec = this.getCodecFromCodecStats(e3.codecId)), e3.mediaSourceId && this.processVideoMediaSource(e3.mediaSourceId, t3), this.processVideoTrackSenderStats(e3, e3.trackId, t3), e3.remoteId)
            this.processRemoteInboundStats(e3.remoteId, t3);
          else {
            var d2 = this.findRemoteStatsId(e3.ssrc, tP.REMOTE_INBOUND);
            d2 && this.processRemoteInboundStats(d2, t3);
          }
        }, t2.prototype.processAudioOutboundStats = function(e3) {
          var t3 = this._stats.audioSend.find(function(t4) {
            return t4.ssrc === e3.ssrc;
          });
          if (t3 || (t3 = qD(sP), this._stats.audioSend.push(t3)), t3.ssrc = e3.ssrc, t3.packets = e3.packetsSent, t3.bytes = e3.bytesSent, e3.mediaSourceId && this.processAudioMediaSource(e3.mediaSourceId, t3), e3.codecId && (t3.codec = this.getCodecFromCodecStats(e3.codecId)), this.processAudioTrackSenderStats(e3, e3.trackId, t3), e3.remoteId)
            this.processRemoteInboundStats(e3.remoteId, t3);
          else {
            var i2 = this.findRemoteStatsId(e3.ssrc, tP.REMOTE_INBOUND);
            i2 && this.processRemoteInboundStats(i2, t3);
          }
        }, t2.prototype.findRemoteStatsId = function(e3, t3) {
          var i2 = Array.from(this.report.values()).find(function(i3) {
            return i3.type === t3 && i3.ssrc === e3;
          });
          return i2 ? i2.id : null;
        }, t2.prototype.processVideoMediaSource = function(e3, t3) {
          var i2 = this.report.get(e3);
          i2 && i2.width && i2.height && i2.framesPerSecond && (t3.inputFrame = { width: i2.width, height: i2.height, frameRate: i2.framesPerSecond });
        }, t2.prototype.processAudioMediaSource = function(e3, t3) {
          var i2 = this.report.get(e3);
          i2 && (t3.inputLevel = i2.audioLevel);
        }, t2.prototype.processVideoTrackSenderStats = function(e3, t3, i2) {
          var r2, n2, o2, s2 = t3 ? this.report.get(t3) : void 0, a2 = null !== (r2 = null == s2 ? void 0 : s2.framesSent) && void 0 !== r2 ? r2 : e3.framesSent, c2 = null !== (n2 = null == s2 ? void 0 : s2.frameWidth) && void 0 !== n2 ? n2 : e3.frameWidth, d2 = null !== (o2 = null == s2 ? void 0 : s2.frameHeight) && void 0 !== o2 ? o2 : e3.frameHeight;
          if ("number" == typeof a2 && "number" == typeof c2 && "number" == typeof d2) {
            var u2 = 0, l2 = Date.now(), h2 = this.lastVideoFramesSent.get(i2.ssrc);
            h2 && l2 - h2.lts >= 800 ? (u2 = Math.round((a2 - h2.count) / ((l2 - h2.lts) / 1e3)), this.lastVideoFramesSent.set(i2.ssrc, { count: a2, lts: l2, rate: u2 })) : h2 ? u2 = h2.rate : this.lastVideoFramesSent.set(i2.ssrc, { count: a2, lts: l2, rate: 0 }), i2.sentFrame = { width: c2, height: d2, frameRate: u2 };
          }
        }, t2.prototype.processVideoTrackReceiverStats = function(e3, t3, i2) {
          var r2, n2, o2, s2, a2, c2 = t3 ? this.report.get(t3) : void 0, d2 = null !== (r2 = null == c2 ? void 0 : c2.framesReceived) && void 0 !== r2 ? r2 : e3.framesReceived, u2 = null !== (n2 = null == c2 ? void 0 : c2.frameWidth) && void 0 !== n2 ? n2 : e3.frameWidth, l2 = null !== (o2 = null == c2 ? void 0 : c2.frameHeight) && void 0 !== o2 ? o2 : e3.frameHeight, h2 = null !== (s2 = null == c2 ? void 0 : c2.jitterBufferDelay) && void 0 !== s2 ? s2 : e3.jitterBufferDelay, p2 = null !== (a2 = null == c2 ? void 0 : c2.jitterBufferEmittedCount) && void 0 !== a2 ? a2 : e3.jitterBufferEmittedCount;
          if ("number" == typeof d2) {
            var _2 = this.lastVideoFramesRecv.get(i2.ssrc), E2 = Date.now();
            i2.framesReceivedCount = d2;
            var f2 = 0;
            _2 && E2 - _2.lts >= 800 ? (f2 = Math.round((d2 - _2.count) / ((E2 - _2.lts) / 1e3)), this.lastVideoFramesRecv.set(i2.ssrc, { count: d2, lts: E2, rate: f2 })) : _2 ? f2 = _2.rate : this.lastVideoFramesRecv.set(i2.ssrc, { count: d2, lts: E2, rate: 0 }), i2.receivedFrame = { width: u2 || 0, height: l2 || 0, frameRate: f2 || 0 }, i2.decodedFrame = { width: u2 || 0, height: l2 || 0, frameRate: i2.decodeFrameRate || 0 }, i2.outputFrame = { width: u2 || 0, height: l2 || 0, frameRate: i2.decodeFrameRate || 0 };
          }
          if (h2 && p2) {
            var m2 = this.lastVideoJBDelay.get(i2.ssrc);
            this.lastVideoJBDelay.set(i2.ssrc, { jitterBufferDelay: h2, jitterBufferEmittedCount: p2 }), m2 || (m2 = { jitterBufferDelay: 0, jitterBufferEmittedCount: 0 });
            var g2 = 1e3 * (h2 - m2.jitterBufferDelay) / (p2 - m2.jitterBufferEmittedCount);
            i2.jitterBufferMs = g2, i2.currentDelayMs = Math.round(g2);
          }
        }, t2.prototype.processAudioTrackSenderStats = function(e3, t3, i2) {
          var r2, n2, o2, s2, a2 = t3 ? this.report.get(t3) : void 0, c2 = null !== (n2 = null !== (r2 = null == a2 ? void 0 : a2.echoReturnLoss) && void 0 !== r2 ? r2 : e3.echoReturnLoss) && void 0 !== n2 ? n2 : 0, d2 = null !== (s2 = null !== (o2 = null == a2 ? void 0 : a2.echoReturnLossEnhancement) && void 0 !== o2 ? o2 : e3.echoReturnLossEnhancement) && void 0 !== s2 ? s2 : 0;
          i2.aecReturnLoss = c2, i2.aecReturnLossEnhancement = d2;
        }, t2.prototype.processAudioTrackReceiverStats = function(e3, t3, i2) {
          var r2, n2, o2, s2, a2, c2, d2, u2 = t3 ? this.report.get(t3) : void 0, l2 = null !== (r2 = null == u2 ? void 0 : u2.removedSamplesForAcceleration) && void 0 !== r2 ? r2 : e3.removedSamplesForAcceleration, h2 = null !== (n2 = null == u2 ? void 0 : u2.totalSamplesReceived) && void 0 !== n2 ? n2 : e3.totalSamplesReceived, p2 = null !== (o2 = null == u2 ? void 0 : u2.jitterBufferDelay) && void 0 !== o2 ? o2 : e3.jitterBufferDelay, _2 = null !== (s2 = null == u2 ? void 0 : u2.jitterBufferEmittedCount) && void 0 !== s2 ? s2 : e3.jitterBufferEmittedCount, E2 = null !== (a2 = null == u2 ? void 0 : u2.audioLevel) && void 0 !== a2 ? a2 : null == e3 ? void 0 : e3.audioLevel, f2 = null !== (c2 = null == u2 ? void 0 : u2.totalSamplesDuration) && void 0 !== c2 ? c2 : null == e3 ? void 0 : e3.totalSamplesDuration, m2 = null !== (d2 = null == u2 ? void 0 : u2.concealedSamples) && void 0 !== d2 ? d2 : e3.concealedSamples;
          if (l2 && h2 && (i2.accelerateRate = l2 / h2), p2 && _2) {
            var g2 = this.lastAudioJBDelay.get(i2.ssrc);
            this.lastAudioJBDelay.set(i2.ssrc, { jitterBufferDelay: p2, jitterBufferEmittedCount: _2 }), g2 || (g2 = { jitterBufferDelay: 0, jitterBufferEmittedCount: 0 });
            var S2 = 1e3 * (p2 - g2.jitterBufferDelay) / (_2 - g2.jitterBufferEmittedCount);
            i2.jitterBufferMs = Math.round(S2);
          }
          i2.outputLevel = E2;
          var T2 = 1920;
          f2 && h2 && (T2 = h2 / f2 / 50, i2.receivedFrames = Math.round(h2 / T2)), m2 && (i2.droppedFrames = Math.round(m2 / T2));
        }, t2.prototype.processRemoteInboundStats = function(e3, t3) {
          var i2 = this.report.get(e3);
          i2 && (t3.packetsLost = i2.packetsLost, i2.roundTripTime && (t3.rttMs = 1e3 * i2.roundTripTime));
        }, t2.prototype.getCodecFromCodecStats = function(e3) {
          var t3 = this.report.get(e3);
          if (!t3)
            return "";
          var i2 = t3.mimeType.match(/\/(.*)$/);
          return i2 && i2[1] ? i2[1] : "";
        }, t2.prototype.updateSendBitrate = function() {
          var e3 = 0, t3 = null, i2 = null;
          this.mediaBytesSent.forEach(function(t4) {
            e3 += t4.diffMean();
          }), this.mediaBytesRetransmit.forEach(function(e4) {
            t3 = null === t3 ? e4.diffMean() : t3 + e4.diffMean();
          }), this.mediaBytesTargetEncode.forEach(function(e4) {
            i2 = null === i2 ? e4.diffMean() : i2 + e4.diffMean();
          });
          var r2 = null !== t3 ? e3 - t3 : e3;
          this._stats.bitrate = { actualEncoded: 8 * r2 / (this.options.updateInterval / 1e3), transmit: 8 * e3 / (this.options.updateInterval / 1e3) }, null !== t3 && (this._stats.bitrate.retransmit = 8 * t3 / (this.options.updateInterval / 1e3)), null !== i2 && (this._stats.bitrate.targetEncoded = 8 * i2 / (this.options.updateInterval / 1e3));
        }, t2;
      }(cP), hP = function(e2) {
        function t2() {
          return null !== e2 && e2.apply(this, arguments) || this;
        }
        return QD(t2, e2), t2.prototype.updateStats = function() {
          return Promise.resolve();
        }, t2;
      }(cP);
      function pP(e2, t2, i2, r2, n2) {
        void 0 === t2 && (t2 = 250), void 0 === i2 && (i2 = 8), void 0 === r2 && (r2 = 500), void 0 === n2 && (n2 = 1e4);
        var o2, s2 = (o2 = navigator.userAgent.toLocaleLowerCase().match(/chrome\/[\d]*/i)) && o2[0] ? Number(o2[0].split("/")[1]) : null;
        return s2 ? s2 < 76 ? new dP(e2, { updateInterval: t2, lossRateInterval: i2, freezeRateLimit: r2, firstVideoDecodedTimeout: n2 }) : new lP(e2, { updateInterval: t2, lossRateInterval: i2, freezeRateLimit: r2, firstVideoDecodedTimeout: n2 }) : function(e3) {
          return !!window.RTCStatsReport && e3.getStats() instanceof Promise;
        }(e2) ? new lP(e2, { updateInterval: t2, lossRateInterval: i2, freezeRateLimit: r2, firstVideoDecodedTimeout: n2 }) : new hP(e2, { updateInterval: t2, lossRateInterval: i2, freezeRateLimit: r2, firstVideoDecodedTimeout: n2 });
      }
      function _P(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function EP(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? _P(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : _P(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let fP = (ZS((uP = class e2 extends xg {
        get peerConnectionState() {
          return this.peerConnection.connectionState;
        }
        get iceConnectionState() {
          return this.peerConnection.iceConnectionState;
        }
        get currentLocalDescription() {
          return this.peerConnection.currentLocalDescription;
        }
        get currentRemoteDescription() {
          return this.peerConnection.currentRemoteDescription;
        }
        constructor(t2, i2) {
          super(t2, i2), mp(this, "store", void 0), mp(this, "peerConnection", void 0), mp(this, "remoteSDP", void 0), mp(this, "initialOffer", void 0), mp(this, "statsFilter", void 0), mp(this, "useRTX", false), mp(this, "localCapabilities", void 0), mp(this, "localCandidateCount", 0), mp(this, "allCandidatesReceived", false), mp(this, "mutex", new OT("P2PConnection-mutex")), this.store = i2, this.peerConnection = new RTCPeerConnection(e2.resolvePCConfiguration(t2), { optional: [{ googDscp: true }] }), this.statsFilter = pP(this.peerConnection, void 0, void 0, Qh() ? 1200 : void 0), this.bindPCEvents(), this.bindStatsEvents(), this.store.p2pId = this.store.p2pId + 1;
        }
        async establish() {
          try {
            const e3 = await this.peerConnection.createOffer({ offerToReceiveAudio: true, offerToReceiveVideo: true });
            if (!e3.sdp)
              throw new Error("Cannot get initialOffer.sdp when trying to establish PeerConnection.");
            const t2 = PD(e3.sdp), i2 = DD(e3.sdp, !this.useRTX, HE("FILTER_VIDEO_FEC"), HE("FILTER_AUDIO_FEC"), ["opus"]);
            return this.localCapabilities = i2, this.initialOffer = e3, EP(EP({}, t2), {}, { rtpCapabilities: { send: { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, recv: { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, sendrecv: i2 }, offerSDP: e3.sdp });
          } catch (e3) {
            throw new vE(TE.GET_LOCAL_CONNECTION_PARAMS_FAILED, e3.toString());
          }
        }
        async connect(e3, t2, i2, r2, n2, o2) {
          try {
            if (!this.initialOffer)
              throw new Error("Cannot establish P2PConnection without initial offer.");
            this.remoteSDP = new YD({ remoteIceParameters: e3, remoteDtlsParameters: t2, candidates: i2, remoteRTPCapabilities: r2.send, remoteSetup: n2, localCapabilities: this.localCapabilities, sdkCodec: this.store.codec, cname: o2 });
            const s2 = this.remoteSDP.toString();
            await this.peerConnection.setLocalDescription(this.initialOffer), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: s2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.connect failed; ".concat(e4.toString()));
          }
        }
        send(e3, t2) {
          var i2 = this;
          return ID(function* () {
            const r2 = yield yD(i2.mutex.lock());
            try {
              if (!i2.remoteSDP)
                throw new Error("Cannot call P2PConnection.send before remote SDP created");
              const n2 = e3.map((e4) => i2.peerConnection.addTrack(e4._mediaStreamTrack)), o2 = yield yD(i2.peerConnection.createOffer()), s2 = bD.exports.parse(o2.sdp), a2 = e3.map((e4) => {
                const t3 = e4._mediaStreamTrack, r3 = s2.mediaDescriptions.find((e5) => e5.attributes.mid === t3.kind);
                if (!r3)
                  throw new Error("Cannot extract ssrc from mediaDescription.");
                return function(e5, t4, i3) {
                  const r4 = e5.attributes.ssrcs.filter((e6) => e6.attributes.label === t4), n3 = e5.attributes.ssrcGroups;
                  if (0 === r4.length)
                    throw new Error("Cannot extract ssrc from plan-b SDP.");
                  if (n3 && r4.length > 1) {
                    const e6 = n3.find((e7) => -1 !== e7.ssrcIds.indexOf(r4[0].ssrcId));
                    return e6 ? [{ ssrcId: e6.ssrcIds[0], rtx: i3 ? e6.ssrcIds[1] : void 0 }] : [{ ssrcId: r4[0].ssrcId }];
                  }
                  return [{ ssrcId: r4[0].ssrcId }];
                }(r3, t3.id, i2.useRTX);
              });
              let c2;
              try {
                c2 = yield a2;
              } catch (e4) {
                throw n2.forEach((e5) => {
                  zh() && e5.replaceTrack(null), i2.peerConnection.removeTrack(e5);
                }), e4;
              }
              const d2 = i2.mungSendOfferSDP(o2.sdp, e3);
              i2.remoteSDP.receive(e3, t2, c2);
              const u2 = i2.remoteSDP.toString();
              return yield yD(i2.peerConnection.setLocalDescription({ type: "offer", sdp: d2 })), yield yD(i2.applySendEncodings(n2, e3)), yield yD(i2.peerConnection.setRemoteDescription({ type: "answer", sdp: u2 })), e3.map((e4, t3) => {
                const i3 = e4._mediaStreamTrack.id;
                return { localSSRC: a2[t3], id: i3 };
              });
            } catch (e4) {
              throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.send failed; ".concat(e4.toString()));
            } finally {
              r2();
            }
          })();
        }
        async stopSending(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.stopSending before remote SDP created");
            const t2 = this.peerConnection.getSenders().filter((t3) => {
              var i3;
              return -1 !== e3.indexOf((null === (i3 = t3.track) || void 0 === i3 ? void 0 : i3.id) || "");
            });
            if (t2.length !== e3.length)
              throw new Error("Transceivers' length doesn't match mids' length when trying to call P2PConnection.stopSending.");
            t2.map((e4) => {
              zh() && e4.replaceTrack(null), this.peerConnection.removeTrack(e4);
            });
            const i2 = await this.peerConnection.createOffer();
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.stopReceiving(e3);
            const r2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.stopSending failed; ".concat(e4.toString()));
          }
        }
        async receive(e3, t2, i2, r2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.receive ".concat(e3, " before remoteSDP created."));
            const { id: i3, mslabel: n2 } = this.remoteSDP.send(e3, t2, r2), o2 = new Cl((t3, r3) => {
              const o3 = setTimeout(() => {
                r3(new Error("Cannot receive track, id: ".concat(i3)));
              }, 1e4), s3 = (r4) => {
                const a3 = Bh();
                if (("Safari" === a3.name && 11 === Number(a3.version) || Zh()) && r4.track.id !== i3 && r4.streams[0].id === n2) {
                  var c2;
                  const n3 = r4.streams[0].getTracks()[0];
                  return null === (c2 = this.remoteSDP) || void 0 === c2 || c2.updateTrackLabel(e3, i3, r4.track.id), this.peerConnection.removeEventListener("track", s3), clearTimeout(o3), void t3(n3);
                }
                if (r4.track.id === i3)
                  return this.peerConnection.removeEventListener("track", s3), clearTimeout(o3), void t3(r4.track);
              };
              this.peerConnection.addEventListener("track", s3);
            }), s2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: s2 });
            const a2 = await this.peerConnection.createAnswer();
            await this.peerConnection.setLocalDescription(a2);
            return { track: await o2, id: i3 };
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async stopReceiving(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.stopReceiving before remote SDP created.");
            this.remoteSDP.stopSending(e3);
            const t2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const i2 = await this.peerConnection.createAnswer();
            await this.peerConnection.setLocalDescription(i2);
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection stopReceiving failed; ".concat(e4.toString()));
          }
        }
        async muteRemote(e3) {
        }
        async unmuteRemote(e3) {
        }
        async muteLocal(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.muteLocal before remote SDP created.");
            const t2 = this.peerConnection.getSenders().filter((t3) => {
              var i2;
              return -1 !== e3.indexOf((null === (i2 = t3.track) || void 0 === i2 ? void 0 : i2.id) || "");
            });
            if (t2.length !== e3.length)
              throw new Error("sender' length doesn't match mids' length.");
            t2.map((e4) => {
              if (zh() && e4.track)
                e4.track.enabled = false;
              else {
                const t3 = e4.getParameters();
                t3.encodings.forEach((e5) => e5.active = false), e4.setParameters(t3);
              }
            });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.muteLocal failed; ".concat(e4.toString()));
          }
        }
        async unmuteLocal(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.unmuteLocal before remote SDP created.");
            const t2 = this.peerConnection.getSenders().filter((t3) => {
              var i3;
              return -1 !== e3.indexOf((null === (i3 = t3.track) || void 0 === i3 ? void 0 : i3.id) || "");
            });
            if (t2.length !== e3.length)
              throw new Error("Senders' length doesn't match mids' length.");
            t2.map(async (e4) => {
              if (zh() && e4.track)
                e4.track.enabled = true;
              else {
                const t3 = e4.getParameters();
                t3.encodings.forEach((e5) => e5.active = true), await e4.setParameters(t3);
              }
            });
            const i2 = await this.peerConnection.createOffer();
            await this.peerConnection.setLocalDescription(i2);
            const r2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.unmuteLocal failed; ".concat(e4.toString()));
          }
        }
        restartICE() {
          var e3 = this;
          return ID(function* () {
            const t2 = yield yD(e3.mutex.lock("From P2PConnection.restartICE"));
            try {
              const i2 = yield yD(e3.peerConnection.createOffer({ iceRestart: true }));
              if (!i2.sdp)
                throw new Error("Cannot restartICE because restart offer SDP does not exist.");
              const r2 = PD(i2.sdp), { remoteIceParameters: n2 } = yield r2.iceParameters;
              if (!e3.remoteSDP)
                throw new Error("Cannot restartICE before remoteSDP created.");
              e3.remoteSDP.restartICE(n2);
              const o2 = e3.remoteSDP.toString();
              yield yD(e3.peerConnection.setLocalDescription(i2)), yield yD(e3.peerConnection.setRemoteDescription({ type: "answer", sdp: o2 }));
            } catch (e4) {
              NE.warning("restart ICE failed, abort operation", e4);
            } finally {
              t2();
            }
          })();
        }
        close() {
          var e3;
          this.peerConnection.close(), null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, "closed"), this.unbindPCEvents(), this.unbindStatsEvents(), this.removeAllListeners(), this.statsFilter.destroy();
        }
        getStats() {
          return this.statsFilter.getStats();
        }
        getRemoteVideoIsReady(e3) {
          return this.statsFilter.getVideoIsReady(e3);
        }
        async updateEncoderConfig(e3, t2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.updateEncoderConfig before remote SDP created.");
            const e4 = await this.peerConnection.createOffer(), i2 = this.mungSendOfferSDP(e4.sdp, [t2]);
            this.remoteSDP.updateRecvMedia(t2._mediaStreamTrack.kind, t2);
            const r2 = this.remoteSDP.toString();
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: i2 }), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, e4.toString());
          }
        }
        async updateSendParameters(e3, t2) {
          const i2 = this.peerConnection.getSenders().filter((t3) => {
            var i3;
            return (null === (i3 = t3.track) || void 0 === i3 ? void 0 : i3.id) === e3;
          });
          1 === i2.length && await this.applySendEncodings(i2, [t2]);
        }
        setStatsRemoteVideoIsReady(e3, t2) {
          this.statsFilter.setVideoIsReady2(e3, t2);
        }
        async replaceTrack(e3, t2) {
          const i2 = this.peerConnection.getSenders().find((e4) => {
            var i3;
            return (null === (i3 = e4.track) || void 0 === i3 ? void 0 : i3.id) === t2;
          });
          i2 && await i2.replaceTrack(e3._mediaStreamTrack);
        }
        bindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = () => {
            var e3;
            null === (e3 = this.onICEConnectionStateChange) || void 0 === e3 || e3.call(this, this.peerConnection.iceConnectionState);
          }, this.peerConnection.onconnectionstatechange = () => {
            var e3;
            null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, this.peerConnection.connectionState);
          }, this.peerConnection.onicecandidate = (e3) => {
            e3.candidate ? this.localCandidateCount += 1 : (this.peerConnection.onicecandidate = null, this.allCandidatesReceived = true, NE.debug("[pc-".concat(this.store.p2pId, "] local candidate count"), this.localCandidateCount));
          }, setTimeout(() => {
            this.allCandidatesReceived || (this.allCandidatesReceived = true, NE.debug("[pc-".concat(this.store.p2pId, "] onicecandidate timeout, local candidate count"), this.localCandidateCount));
          }, HE("CANDIDATE_TIMEOUT"));
        }
        unbindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = null, this.peerConnection.onconnectionstatechange = null, this.peerConnection.onsignalingstatechange = null, this.peerConnection.onicecandidateerror = null, this.peerConnection.onicecandidate = null, this.peerConnection.ontrack = null;
        }
        static resolvePCConfiguration(t2) {
          const i2 = { iceServers: [], sdpSemantics: "plan-b" };
          return t2.iceServers ? i2.iceServers = t2.iceServers : t2.turnServer && "off" !== t2.turnServer.mode && (xm(t2.turnServer.servers) ? i2.iceServers = t2.turnServer.servers : (i2.iceServers && i2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.servers)), HE("USE_TURN_SERVER_OF_GATEWAY") && i2.iceServers && t2.turnServer.serversFromGateway && i2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.serversFromGateway)), t2.turnServer.servers.concat(t2.turnServer.serversFromGateway || []).forEach((e3) => {
            e3.forceturn && (i2.iceTransportPolicy = "relay");
          }))), i2;
        }
        static turnServerConfigToIceServers(e3) {
          const t2 = [];
          return e3.forEach((e4) => {
            e4.security ? e4.tcpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turns:".concat(e4.turnServerURL, ":").concat(e4.tcpport, "?transport=tcp") }) : (e4.udpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turn:".concat(e4.turnServerURL, ":").concat(e4.udpport, "?transport=udp") }), e4.tcpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turn:".concat(e4.turnServerURL, ":").concat(e4.tcpport, "?transport=tcp") }));
          }), t2;
        }
        async applySendEncodings(e3, t2) {
          try {
            if (!jg().supportSetRtpSenderParameters)
              return;
            if (e3.length !== t2.length)
              return;
            for (let r2 = 0; r2 < e3.length; r2++) {
              var i2;
              const n2 = e3[r2], o2 = t2[r2];
              if (!o2)
                continue;
              const s2 = {}, a2 = {};
              if (o2 instanceof Ew)
                switch (o2._optimizationMode) {
                  case "motion":
                    s2.degradationPreference = "maintain-framerate";
                    break;
                  case "detail":
                    s2.degradationPreference = "maintain-resolution";
                    break;
                  default:
                    s2.degradationPreference = "balanced";
                }
              if (HE("DSCP_TYPE") && ap()) {
                const e4 = HE("DSCP_TYPE");
                ["very-low", "low", "medium", "high"].includes(e4) && (a2.networkPriority = e4);
              }
              const c2 = n2.getParameters(), d2 = null === (i2 = c2.encodings) || void 0 === i2 ? void 0 : i2[0];
              d2 && Object.assign(d2, a2), Object.assign(c2, s2), await n2.setParameters(c2);
            }
          } catch (e4) {
            NE.debug("Apply RTPSendEncodings failed.");
          }
        }
        mungSendOfferSDP(e3, t2) {
          const i2 = bD.exports.parse(e3);
          return t2.forEach((e4, t3) => {
            const r2 = e4._mediaStreamTrack, n2 = i2.mediaDescriptions.find((e5) => e5.attributes.mid === r2.kind);
            n2 && UD(n2, e4);
          }), bD.exports.print(i2);
        }
        bindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstVideoReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstAudioDecoded = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioDecoded) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoDecoded = (e3, t2, i2) => {
            var r2;
            null === (r2 = this.onFirstVideoDecoded) || void 0 === r2 || r2.call(this, e3, t2, i2);
          }, this.statsFilter.onSelectedLocalCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedLocalCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          }, this.statsFilter.onSelectedRemoteCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedRemoteCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          };
        }
        unbindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = void 0, this.statsFilter.onFirstVideoReceived = void 0, this.statsFilter.onFirstAudioDecoded = void 0, this.statsFilter.onFirstVideoDecoded = void 0, this.statsFilter.onSelectedLocalCandidateChanged = void 0, this.statsFilter.onSelectedRemoteCandidateChanged = void 0;
        }
        async batchReceive(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.batchReceive before remoteSDP created.");
            const t2 = this.remoteSDP.batchSend(e3).map((t3, i3) => {
              let { id: r3, mslabel: n2 } = t3;
              const { kind: o2 } = e3[i3];
              return new Cl((e4, t4) => {
                const i4 = setTimeout(() => {
                  t4(new Error("Cannot receive track, id: ".concat(r3)));
                }, 1e4), s2 = (t5) => {
                  const a2 = Bh();
                  if ("Safari" === a2.name && 11 === Number(a2.version) && t5.track.id !== r3 && t5.streams[0].id === n2) {
                    var c2;
                    const n3 = t5.streams[0].getTracks()[0];
                    return null === (c2 = this.remoteSDP) || void 0 === c2 || c2.updateTrackLabel(o2, r3, t5.track.id), this.peerConnection.removeEventListener("track", s2), clearTimeout(i4), void e4({ track: n3, id: r3 });
                  }
                  if (t5.track.id === r3)
                    return this.peerConnection.removeEventListener("track", s2), clearTimeout(i4), void e4({ track: t5.track, id: r3 });
                };
                this.peerConnection.addEventListener("track", s2);
              });
            }), i2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: i2 });
            const r2 = await this.peerConnection.createAnswer();
            return await this.peerConnection.setLocalDescription(r2), await Cl.all(t2);
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async getRemoteSSRC(e3) {
          if (!this.remoteSDP)
            return;
          const t2 = this.remoteSDP.getSSRC(e3);
          return null == t2 ? void 0 : t2[0].ssrcId;
        }
      }).prototype, "connect", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "connect"), uP.prototype), ZS(uP.prototype, "stopSending", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "stopSending"), uP.prototype), ZS(uP.prototype, "receive", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "receive"), uP.prototype), ZS(uP.prototype, "stopReceiving", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "stopReceiving"), uP.prototype), ZS(uP.prototype, "muteRemote", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "muteRemote"), uP.prototype), ZS(uP.prototype, "unmuteRemote", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "unmuteRemote"), uP.prototype), ZS(uP.prototype, "muteLocal", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "muteLocal"), uP.prototype), ZS(uP.prototype, "unmuteLocal", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "unmuteLocal"), uP.prototype), ZS(uP.prototype, "close", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "close"), uP.prototype), ZS(uP.prototype, "updateEncoderConfig", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "updateEncoderConfig"), uP.prototype), ZS(uP.prototype, "updateSendParameters", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "updateSendParameters"), uP.prototype), ZS(uP.prototype, "replaceTrack", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "replaceTrack"), uP.prototype), ZS(uP.prototype, "getRemoteSSRC", [mP], Object.getOwnPropertyDescriptor(uP.prototype, "getRemoteSSRC"), uP.prototype), uP);
      function mP(e2, t2, i2) {
        const r2 = e2[t2];
        if ("function" != typeof r2)
          throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("Locking from P2PConnection.".concat(t2));
          try {
            for (var n2 = arguments.length, o2 = new Array(n2), s2 = 0; s2 < n2; s2++)
              o2[s2] = arguments[s2];
            return await r2.apply(this, o2);
          } finally {
            i3();
          }
        }, i2;
      }
      const gP = "9", SP = 4e4;
      class TP {
        get localCapabilities() {
          return qR(this._localCapabilities);
        }
        get rtpCapabilities() {
          return qR(this._rtpCapabilities);
        }
        get candidates() {
          return qR(this._candidates);
        }
        get iceParameters() {
          return qR(this._iceParameters);
        }
        get dtlsParameters() {
          return qR(this._dtlsParameters);
        }
        constructor(e2) {
          mp(this, "sessionDesc", void 0), mp(this, "_localCapabilities", void 0), mp(this, "_rtpCapabilities", void 0), mp(this, "_candidates", void 0), mp(this, "_iceParameters", void 0), mp(this, "_dtlsParameters", void 0), mp(this, "setup", void 0), mp(this, "currentMidIndex", void 0), mp(this, "cname", void 0), mp(this, "firefoxSsrcMidMap", /* @__PURE__ */ new Map()), e2 = qR(e2);
          const { remoteIceParameters: t2, remoteDtlsParameters: i2, candidates: r2, remoteRTPCapabilities: n2, remoteSetup: o2, localCapabilities: s2, cname: a2 } = e2, c2 = bD.exports.parse("v=0\no=- 0 0 IN IP4 127.0.0.1\ns=AgoraGateway\nt=0 0\na=group:BUNDLE 0 1\na=msid-semantic: WMS\na=ice-lite\nm=video 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendonly\na=rtcp-mux\na=rtcp-rsize\na=mid:0\nm=audio 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendonly\na=rtcp-mux\na=rtcp-rsize\na=mid:1\n");
          this._rtpCapabilities = n2, this._candidates = r2, this._iceParameters = t2, this._dtlsParameters = i2, this._localCapabilities = s2, this.setup = o2, this.cname = a2;
          const d2 = this.rtpCapabilities.send;
          for (const e3 of c2.mediaDescriptions) {
            if (e3.attributes.iceUfrag = t2.iceUfrag, e3.attributes.icePwd = t2.icePwd, e3.attributes.fingerprints = i2.fingerprints, e3.attributes.candidates = r2, e3.attributes.setup = o2, "video" === e3.media.mediaType && (e3.media.fmts = d2.videoCodecs.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = d2.videoCodecs, e3.attributes.extmaps = d2.videoExtensions, HE("PRELOAD_MEDIA_COUNT") > 0)) {
              const { ssrcs: t3, ssrcGroups: i3 } = MD([{ ssrcId: SP, rtx: HE("USE_RTX") ? 40001 : void 0 }], this.cname);
              e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
            }
            if ("audio" === e3.media.mediaType && (e3.media.fmts = d2.audioCodecs.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = d2.audioCodecs, e3.attributes.extmaps = d2.audioExtensions, KD(e3), HE("PRELOAD_MEDIA_COUNT") > 0)) {
              const { ssrcs: t3, ssrcGroups: i3 } = MD([{ ssrcId: 2e4 }], this.cname);
              e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
            }
          }
          this.sessionDesc = c2, this.currentMidIndex = c2.mediaDescriptions.length - 1;
        }
        preloadRemoteMedia() {
          const e2 = HE("PRELOAD_MEDIA_COUNT");
          this.rtpCapabilities;
          const t2 = this.candidates, i2 = this.dtlsParameters, r2 = this.iceParameters, n2 = this.rtpCapabilities.send;
          for (let o2 = 1; o2 < e2; o2++) {
            const e3 = 2 * o2 + 2e4, s2 = 2 * o2 + SP, { ssrcs: a2, ssrcGroups: c2 } = MD([{ ssrcId: e3 }], this.cname), { ssrcs: d2, ssrcGroups: u2 } = MD([{ ssrcId: s2, rtx: HE("USE_RTX") ? s2 + 1 : void 0 }], this.cname);
            this.sessionDesc.mediaDescriptions.push({ media: { mediaType: "video", port: gP, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: n2.videoCodecs.map((e4) => e4.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: r2.iceUfrag, icePwd: r2.icePwd, unrecognized: [], candidates: t2, extmaps: n2.videoExtensions, fingerprints: i2.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: d2, ssrcGroups: u2, rtcpFeedbackWildcards: [], payloads: n2.videoCodecs, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: "sendonly", rtcpMux: true, rtcpRsize: true, mid: "".concat(2 * o2) } }), this.sessionDesc.mediaDescriptions.push({ media: { mediaType: "audio", port: gP, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: n2.audioCodecs.map((e4) => e4.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: r2.iceUfrag, icePwd: r2.icePwd, unrecognized: [], candidates: t2, extmaps: n2.audioExtensions, fingerprints: i2.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: a2, ssrcGroups: c2, rtcpFeedbackWildcards: [], payloads: n2.audioCodecs, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: "sendonly", rtcpMux: true, rtcpRsize: true, mid: "".concat(2 * o2 + 1) } }), this.currentMidIndex += 2;
          }
          this.updateBundleMids();
        }
        toString() {
          return bD.exports.print(this.sessionDesc);
        }
        send(e2, t2, i2, r2) {
          const { ssrcs: n2, ssrcGroups: o2 } = MD(t2, this.cname, i2), s2 = this.findPreloadMediaDesc(n2);
          if (s2) {
            if (Qh() && this.firefoxSsrcMidMap.set(n2[0].ssrcId, s2.attributes.mid), r2 && (r2.tcc || r2.remb)) {
              const e3 = this.sessionDesc.mediaDescriptions.indexOf(s2);
              return this.sessionDesc.mediaDescriptions[e3] = this.mungSendMediaDesc(s2, r2), { mid: s2.attributes.mid, needExchangeSDP: true };
            }
            return { mid: s2.attributes.mid, needExchangeSDP: false };
          }
          {
            const t3 = this.findAvailableMediaIndex(e2, n2);
            let i3;
            return -1 === t3 || zh() || Zh() || $h() ? (i3 = this.createOrRecycleSendMedia(e2, n2, o2, "sendonly", r2), this.updateBundleMids()) : (i3 = qR(this.sessionDesc.mediaDescriptions[t3]), i3.attributes.direction = "sendonly", i3.attributes.ssrcs = n2, i3.attributes.ssrcGroups = o2, this.sessionDesc.mediaDescriptions[t3] = this.mungSendMediaDesc(i3, r2)), Qh() && this.firefoxSsrcMidMap.set(n2[0].ssrcId, i3.attributes.mid), { mid: i3.attributes.mid, needExchangeSDP: true };
          }
        }
        batchSend(e2) {
          const t2 = e2.map((e3) => {
            let { kind: t3, ssrcMsg: i3, mslabel: r3 } = e3;
            return this.send(t3, i3, r3);
          }), i2 = [];
          let r2 = false;
          return t2.forEach((e3) => {
            let { mid: t3, needExchangeSDP: n2 } = e3;
            n2 && (r2 = true), i2.push(t3);
          }), { mids: i2, needExchangeSDP: r2 };
        }
        stopSending(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => t3.attributes.mid && -1 !== e2.indexOf(t3.attributes.mid));
          if (t2.length !== e2.length)
            throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.stopSending.");
          t2.forEach((e3) => {
            "0" === e3.attributes.mid || Qh() || zh() || Zh() ? e3.attributes.ssrcs = [] : (e3.attributes.ssrcs = [], e3.attributes.direction = "inactive", e3.media.port = "0");
          }), this.updateBundleMids();
        }
        mute(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2);
          if (!t2)
            throw new Error("mediaDescription not found with ".concat(e2, " in remote SDP when calling RemoteSDP.mute."));
          t2.attributes.direction = "inactive";
        }
        unmute(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2);
          if (!t2)
            throw new Error("mediaDescription not found with ".concat(e2, " in remote SDP when calling RemoteSDP.unmute."));
          t2.attributes.direction = "sendonly";
        }
        muteRemote(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => e2.includes(t3.attributes.mid || ""));
          if (t2.length !== e2.length)
            throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
          t2.forEach((e3) => {
            e3.attributes.direction = "inactive";
          });
        }
        unmuteRemote(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => e2.includes(t3.attributes.mid || ""));
          if (t2.length !== e2.length)
            throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
          t2.forEach((e3) => {
            e3.attributes.direction = "recvonly";
          });
        }
        receive(e2, t2, i2, r2) {
          e2.forEach((e3, n2) => {
            this.createOrRecycleRecvMedia(e3, [], "recvonly", t2, i2, r2[n2]);
          }), this.updateBundleMids();
        }
        stopReceiving(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => -1 !== e2.indexOf(t3.attributes.mid));
          if (t2.length !== e2.length)
            throw new Error("MediaDescriptions' length doesn't match mids's length when calling RemoteSDP.receive.");
          t2.forEach((e3) => {
            e3.media.port = "0", e3.attributes.direction = "inactive";
          }), this.updateBundleMids();
        }
        restartICE(e2) {
          e2 = qR(e2), this._iceParameters = e2, this.sessionDesc.mediaDescriptions.forEach((t2) => {
            t2.attributes.iceUfrag = e2.iceUfrag, t2.attributes.icePwd = e2.icePwd;
          });
        }
        predictReceivingMids(e2) {
          const t2 = [];
          for (let i2 = 0; i2 < e2; i2++)
            t2.push((this.currentMidIndex + i2 + 1).toString(10));
          return t2;
        }
        findAvailableMediaIndex(e2, t2) {
          return this.sessionDesc.mediaDescriptions.findIndex((i2) => {
            const r2 = i2.media.mediaType === e2 && "0" !== i2.media.port && ("sendonly" === i2.attributes.direction || "sendrecv" === i2.attributes.direction) && 0 === i2.attributes.ssrcs.length;
            if (Qh()) {
              if (r2) {
                const e3 = this.firefoxSsrcMidMap.get(t2[0].ssrcId);
                return !(e3 || "0" !== i2.attributes.mid && "1" !== i2.attributes.mid) || !(!e3 || e3 !== i2.attributes.mid);
              }
              return false;
            }
            return r2;
          });
        }
        createOrRecycleRecvMedia(e2, t2, i2, r2, n2, o2) {
          const s2 = e2._mediaStreamTrack.kind, a2 = this.rtpCapabilities.recv, c2 = this.localCapabilities.send;
          let d2 = [];
          if (s2 === yg.VIDEO) {
            var u2, l2;
            if (HE("H264_PROFILE_LEVEL_ID") && "h264" === r2 && (d2 = a2.videoCodecs.filter((e3) => {
              var t3, i3;
              return ((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "").includes(r2) && (null == e3 || null === (i3 = e3.fmtp) || void 0 === i3 ? void 0 : i3.parameters["profile-level-id"]) === HE("H264_PROFILE_LEVEL_ID");
            })), !d2 || 0 === (null === (u2 = d2) || void 0 === u2 ? void 0 : u2.length)) {
              const e3 = c2.videoCodecs.filter((e4) => {
                var t3;
                return ((null === (t3 = e4.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "").includes(r2);
              });
              0 !== e3.length && (d2 = a2.videoCodecs.filter((t3) => e3.some((e4) => e4.payloadType === t3.payloadType)));
            }
            if (HE("USE_RTX")) {
              const e3 = d2.map((e4) => e4.payloadType.toString()), t3 = a2.videoCodecs.filter((t4) => {
                var i3, r3;
                return "rtx" === (null === (i3 = t4.rtpMap) || void 0 === i3 ? void 0 : i3.encodingName) && e3.includes((null === (r3 = t4.fmtp) || void 0 === r3 ? void 0 : r3.parameters.apt) || "");
              });
              d2 = [...d2, ...t3];
            }
            if (0 === d2.length)
              NE.warning("codec ".concat(r2, " not included in rtpCapabilities, fallback to default payloads: ").concat(null === (l2 = a2.videoCodecs[0].rtpMap) || void 0 === l2 ? void 0 : l2.encodingName)), d2 = a2.videoCodecs;
          } else
            d2 = a2.audioCodecs.filter((e3) => {
              var t3;
              return ((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "").includes(n2);
            }), 0 === d2.length && (NE.warning("codec ".concat(n2, " not included in rtpCapabilities, fallback to opus")), d2 = a2.audioCodecs.filter((e3) => {
              var t3;
              return ((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "").includes("opus");
            }));
          const h2 = s2 === yg.VIDEO ? a2.videoExtensions : a2.audioExtensions;
          this.currentMidIndex += 1;
          const p2 = "".concat(this.currentMidIndex);
          let _2 = { media: { mediaType: s2, port: gP, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: d2.map((e3) => e3.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: this.candidates, extmaps: h2, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t2, ssrcGroups: [], rtcpFeedbackWildcards: [], payloads: d2, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: i2, rtcpMux: true, rtcpRsize: true, mid: "".concat(p2) } };
          _2 = this.mungRecvMediaDsec(_2, e2, o2);
          const E2 = this.findFirstClosedMedia(s2);
          if (E2) {
            const e3 = this.sessionDesc.mediaDescriptions.indexOf(E2);
            this.sessionDesc.mediaDescriptions[e3] = _2;
          } else
            this.sessionDesc.mediaDescriptions.push(_2);
          return _2;
        }
        createOrRecycleSendMedia(e2, t2, i2, r2, n2) {
          const o2 = this.rtpCapabilities.send, s2 = e2 === yg.VIDEO ? o2.videoCodecs : o2.audioCodecs, a2 = e2 === yg.VIDEO ? o2.videoExtensions : o2.audioExtensions;
          this.currentMidIndex += 1;
          const c2 = "".concat(this.currentMidIndex);
          let d2 = { media: { mediaType: e2, port: gP, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: s2.map((e3) => e3.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: this.candidates, extmaps: a2, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t2, ssrcGroups: i2, rtcpFeedbackWildcards: [], payloads: s2, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: r2, rtcpMux: true, rtcpRsize: true, mid: "".concat(c2) } };
          d2 = this.mungSendMediaDesc(d2, n2);
          const u2 = this.findFirstClosedMedia(e2);
          if (u2) {
            const e3 = this.sessionDesc.mediaDescriptions.indexOf(u2);
            this.sessionDesc.mediaDescriptions[e3] = d2;
          } else
            this.sessionDesc.mediaDescriptions.push(d2);
          return d2;
        }
        updateBundleMids() {
          this.sessionDesc.attributes.groups[0].identificationTag = this.sessionDesc.mediaDescriptions.filter((e2) => "0" !== e2.media.port).map((e2) => e2.attributes.mid);
        }
        mungRecvMediaDsec(e2, t2, i2) {
          const r2 = qR(e2);
          return xD(r2), UD(r2, t2), VD(r2, t2), jD(r2), FD(r2, i2, this.localCapabilities.send), r2;
        }
        mungSendMediaDesc(e2, t2) {
          const i2 = qR(e2);
          return FD(i2, t2, this.localCapabilities.recv), KD(i2), i2;
        }
        updateRecvMedia(e2, t2) {
          const i2 = this.sessionDesc.mediaDescriptions.findIndex((t3) => t3.attributes.mid === e2);
          if (-1 !== i2) {
            const e3 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[i2], t2);
            this.sessionDesc.mediaDescriptions[i2] = e3;
          }
        }
        bumpMid(e2) {
          this.currentMidIndex += e2;
        }
        findFirstClosedMedia(e2) {
          return this.sessionDesc.mediaDescriptions.find((t2) => Qh() ? "0" === t2.media.port && t2.media.mediaType === e2 : "0" === t2.media.port);
        }
        findPreloadMediaDesc(e2) {
          return this.sessionDesc.mediaDescriptions.find((t2) => {
            var i2, r2;
            return (null === (i2 = t2.attributes) || void 0 === i2 || null === (r2 = i2.ssrcs[0]) || void 0 === r2 ? void 0 : r2.ssrcId) === e2[0].ssrcId;
          });
        }
        getSSRC(e2) {
          var t2;
          return null === (t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2)) || void 0 === t2 ? void 0 : t2.attributes.ssrcs;
        }
      }
      var vP;
      function RP(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function IP(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? RP(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : RP(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let yP = (ZS((vP = class e2 extends xg {
        get currentLocalDescription() {
          return this.peerConnection.currentLocalDescription;
        }
        get currentRemoteDescription() {
          return this.peerConnection.currentRemoteDescription;
        }
        get peerConnectionState() {
          return this.peerConnection.connectionState;
        }
        get iceConnectionState() {
          return this.peerConnection.iceConnectionState;
        }
        constructor(t2, i2) {
          super(t2, i2), mp(this, "store", void 0), mp(this, "peerConnection", void 0), mp(this, "remoteSDP", void 0), mp(this, "initialOffer", void 0), mp(this, "transportEventReceiver", void 0), mp(this, "statsFilter", void 0), mp(this, "useRTX", HE("USE_RTX")), mp(this, "localCapabilities", void 0), mp(this, "localCandidateCount", 0), mp(this, "allCandidatesReceived", false), mp(this, "mutex", new OT("P2PConnection-mutex")), this.store = i2, this.peerConnection = new RTCPeerConnection(e2.resolvePCConfiguration(t2), { optional: [{ googDscp: true }] }), this.statsFilter = pP(this.peerConnection, void 0, void 0, Qh() ? 1200 : void 0), this.bindPCEvents(), this.bindStatsEvents(), this.store.p2pId = this.store.p2pId + 1;
        }
        async establish() {
          try {
            this.peerConnection.addTransceiver("video", { direction: "recvonly" }), this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
            const e3 = await this.peerConnection.createOffer();
            if (!e3.sdp)
              throw new Error("Cannot get initialOffer.sdp when trying to establish PeerConnection.");
            const t2 = PD(e3.sdp), i2 = await GD(!this.useRTX, HE("FILTER_VIDEO_FEC"), HE("FILTER_AUDIO_FEC"));
            return this.localCapabilities = HD(i2), this.initialOffer = e3, IP(IP({}, t2), {}, { rtpCapabilities: i2, offerSDP: e3.sdp });
          } catch (e3) {
            throw new vE(TE.GET_LOCAL_CONNECTION_PARAMS_FAILED, e3.toString());
          }
        }
        async connect(e3, t2, i2, r2, n2, o2) {
          try {
            if (!this.initialOffer)
              throw new Error("Cannot establish P2PConnection without initial offer.");
            this.remoteSDP = new TP({ remoteIceParameters: e3, remoteDtlsParameters: t2, candidates: i2, remoteRTPCapabilities: r2, remoteSetup: n2, localCapabilities: this.localCapabilities, cname: o2 });
            const s2 = this.remoteSDP.toString(), a2 = bD.exports.parse(this.initialOffer.sdp), c2 = a2.mediaDescriptions.find((e4) => "audio" === e4.media.mediaType);
            c2 && KD(c2);
            const d2 = bD.exports.print(a2), u2 = this.logSDPExchange(d2 || "", "offer", "local", "connect");
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: d2 }), null == u2 || u2(s2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: s2 });
            const l2 = this.peerConnection.getTransceivers()[0];
            if (null != l2 && l2.receiver && this.tryBindTransportEvents(l2.receiver), HE("PRELOAD_MEDIA_COUNT") > 0) {
              this.remoteSDP.preloadRemoteMedia();
              const e4 = this.remoteSDP.toString();
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: e4 });
              const t3 = await this.peerConnection.createAnswer();
              await this.peerConnection.setLocalDescription(t3);
            }
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.connect failed; ".concat(e4.toString()));
          }
        }
        send(e3, t2, i2) {
          var r2 = this;
          return ID(function* () {
            const n2 = yield yD(r2.mutex.lock("From P2PConnection.send"));
            try {
              if (!r2.remoteSDP)
                throw new Error("Cannot call P2PConnection.send before remote SDP created");
              const o2 = [];
              e3.forEach((e4) => {
                const t3 = r2.peerConnection.addTransceiver(e4._mediaStreamTrack, { direction: "sendonly" });
                o2.push(t3);
              }), Qh() && true === HE("SIMULCAST") && (yield yD(r2.applySimulcastForFirefox(o2, e3)));
              const s2 = yield yD(r2.peerConnection.createOffer()), a2 = r2.remoteSDP.predictReceivingMids(e3.length), c2 = r2.mungSendOfferSDP(s2.sdp, e3, a2), d2 = bD.exports.parse(c2), u2 = a2.map((e4) => {
                const t3 = d2.mediaDescriptions.find((t4) => t4.attributes.mid === e4);
                if (!t3)
                  throw new Error("Cannot extract ssrc from mediaDescription.");
                return LD(t3, r2.useRTX);
              });
              let l2;
              try {
                l2 = yield u2;
              } catch (n3) {
                l2 = [], r2.remoteSDP.receive(e3, t2, i2, l2);
                const o3 = r2.remoteSDP.toString();
                throw yield yD(r2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 })), yield yD(r2.peerConnection.setRemoteDescription({ type: "answer", sdp: o3 })), yield yD(r2.stopSending(a2, true)), n3;
              }
              r2.remoteSDP.receive(e3, t2, i2, l2);
              const h2 = r2.remoteSDP.toString(), p2 = r2.logSDPExchange(c2, "offer", "local", "send");
              return yield yD(r2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 })), yield yD(r2.applySimulcastEncodings(o2, e3)), yield yD(r2.applySendEncodings(o2, e3)), null == p2 || p2(h2), yield yD(r2.peerConnection.setRemoteDescription({ type: "answer", sdp: h2 })), o2.map((e4, t3) => {
                const i3 = a2[t3];
                return { localSSRC: u2[t3], id: i3, transceiver: e4 };
              });
            } catch (e4) {
              throw e4 instanceof vE ? e4 : new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.send failed; ".concat(e4.toString()));
            } finally {
              n2();
            }
          })();
        }
        async stopSending(e3, t2) {
          const i2 = t2 ? void 0 : await this.mutex.lock("From P2PConnection.stopSending");
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.stopSending before remote SDP created");
            const t3 = this.peerConnection.getTransceivers().filter((t4) => -1 !== e3.indexOf(t4.mid));
            if (t3.length !== e3.length)
              throw new Error("Transceivers' length doesn't match mids' length when trying to call P2PConnection.stopSending.");
            t3.map((e4) => {
              var t4;
              e4.direction = "inactive", null === (t4 = e4.stop) || void 0 === t4 || t4.call(e4);
            });
            const r2 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(r2.sdp || "", "offer", "local", "stopSending");
            await this.peerConnection.setLocalDescription(r2), this.remoteSDP.stopReceiving(e3);
            const o2 = this.remoteSDP.toString();
            null == n2 || n2(o2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: o2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.stopSending failed; ".concat(e4.toString()));
          } finally {
            i2 && i2();
          }
        }
        async receive(e3, t2, i2, r2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.receive ".concat(e3, " before remoteSDP created."));
            const { mid: n2, needExchangeSDP: o2 } = this.remoteSDP.send(e3, t2, i2, r2);
            if (o2) {
              const t3 = this.remoteSDP.toString(), i3 = this.logSDPExchange(t3, "offer", "remote", "receive");
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t3 });
              const r3 = await this.peerConnection.createAnswer(), o3 = this.mungReceiveAnswerSDP(r3.sdp, n2, e3);
              null == i3 || i3(o3 || ""), await this.peerConnection.setLocalDescription({ type: "answer", sdp: o3 }), NE.debug("[P2PConnection] receive ".concat(e3, " by exchanging SDP."));
            } else
              NE.debug("[P2PConnection] receive ".concat(e3, " no need to exchange SDP."));
            const s2 = this.peerConnection.getTransceivers().find((e4) => e4.mid === n2);
            if (!s2)
              throw new Error("Cannot get transceiver after setLocalDescription.");
            return { track: s2.receiver.track, id: n2 };
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async batchReceive(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.batchReceive before remoteSDP created.");
            const { mids: t2, needExchangeSDP: i2 } = this.remoteSDP.batchSend(e3);
            if (i2) {
              const e4 = this.remoteSDP.toString(), t3 = this.logSDPExchange(e4, "offer", "remote", "receive");
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: e4 });
              const i3 = await this.peerConnection.createAnswer();
              null == t3 || t3(i3.sdp || ""), await this.peerConnection.setLocalDescription(i3), NE.debug("[P2PConnection] batchReceive by exchanging SDP.");
            } else
              NE.debug("[P2PConnection] batchReceive no need to exchange SDP.");
            return t2.map((e4) => {
              const t3 = this.peerConnection.getTransceivers().find((t4) => t4.mid === e4);
              if (!t3)
                throw new Error("Cannot get transceiver after setLocalDescription.");
              return { track: t3.receiver.track, id: e4 };
            });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async stopReceiving(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.stopReceiving before remote SDP created.");
            this.remoteSDP.stopSending(e3);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "stopReceiving");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const r2 = await this.peerConnection.createAnswer();
            null == i2 || i2(r2.sdp || ""), await this.peerConnection.setLocalDescription(r2);
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection stopReceiving failed; ".concat(e4.toString()));
          }
        }
        async muteRemote(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.muteRemote mid=".concat(e3, " before remote SDP created."));
            this.remoteSDP.mute(e3);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "muteRemote");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const r2 = await this.peerConnection.createAnswer();
            null == i2 || i2(r2.sdp || ""), await this.peerConnection.setLocalDescription(r2);
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.muteRemote failed; ".concat(e4.toString()));
          }
        }
        async unmuteRemote(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.unmuteRemote mid=".concat(e3, " before remote SDP created."));
            this.remoteSDP.unmute(e3);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "unmuteRemote");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const r2 = await this.peerConnection.createAnswer();
            null == i2 || i2(r2.sdp || ""), await this.peerConnection.setLocalDescription(r2);
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.unmuteRemote failed; ".concat(e4.toString()));
          }
        }
        async muteLocal(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.muteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e3.indexOf(t3.mid));
            if (t2.length !== e3.length)
              throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map((e4) => {
              e4.direction = "inactive";
            });
            const i2 = await this.peerConnection.createOffer(), r2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "muteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.muteRemote(e3);
            const n2 = this.remoteSDP.toString();
            null == r2 || r2(n2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.muteLocal failed; ".concat(e4.toString()));
          }
        }
        async unmuteLocal(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.unmuteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e3.indexOf(t3.mid));
            if (t2.length !== e3.length)
              throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map(async (e4, t3) => {
              e4.direction = "sendonly";
            });
            const i2 = await this.peerConnection.createOffer(), r2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "unmuteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.unmuteRemote(e3);
            const n2 = this.remoteSDP.toString();
            null == r2 || r2(n2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "P2PConnection.unmuteLocal failed; ".concat(e4.toString()));
          }
        }
        restartICE() {
          var e3 = this;
          return ID(function* () {
            const t2 = yield yD(e3.mutex.lock("From P2PConnection.restartICE"));
            try {
              const i2 = yield yD(e3.peerConnection.createOffer({ iceRestart: true }));
              if (!i2.sdp)
                throw new Error("Cannot restartICE because restart offer SDP does not exist.");
              const r2 = PD(i2.sdp), { remoteIceParameters: n2 } = yield r2.iceParameters;
              if (!e3.remoteSDP)
                throw new Error("Cannot restartICE before remoteSDP created.");
              e3.remoteSDP.restartICE(n2);
              const o2 = e3.remoteSDP.toString(), s2 = e3.logSDPExchange(i2.sdp || "", "offer", "local", "restartICE");
              yield yD(e3.peerConnection.setLocalDescription(i2)), null == s2 || s2(o2), yield yD(e3.peerConnection.setRemoteDescription({ type: "answer", sdp: o2 }));
            } catch (e4) {
              NE.warning("restart ICE failed, abort operation", e4);
            } finally {
              t2();
            }
          })();
        }
        close() {
          var e3;
          this.peerConnection.close(), null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, "closed"), this.tryUnbindTransportEvents(), this.unbindPCEvents(), this.unbindStatsEvents(), this.removeAllListeners(), this.transportEventReceiver = void 0, this.statsFilter.destroy();
        }
        getStats() {
          return this.statsFilter.getStats();
        }
        getRemoteVideoIsReady(e3) {
          return this.statsFilter.getVideoIsReady(e3);
        }
        async updateEncoderConfig(e3, t2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.updateEncoderConfig before remote SDP created.");
            const i2 = await this.peerConnection.createOffer(), r2 = this.mungSendOfferSDP(i2.sdp, [t2], [e3]);
            this.remoteSDP.updateRecvMedia(e3, t2);
            const n2 = this.remoteSDP.toString(), o2 = this.logSDPExchange(r2, "offer", "local", "updateEncoderConfig");
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: r2 }), null == o2 || o2(n2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, e4.toString());
          }
        }
        async updateSendParameters(e3, t2) {
          const i2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid === e3);
          1 === i2.length && (this.isVP8Simulcast(t2) ? Qh() || await this.applySimulcastEncodings(i2, [t2]) : await this.applySendEncodings(i2, [t2]));
        }
        setStatsRemoteVideoIsReady(e3, t2) {
          this.statsFilter.setVideoIsReady2(e3, t2);
        }
        async replaceTrack(e3, t2) {
          const i2 = this.peerConnection.getTransceivers().find((e4) => e4.mid === t2);
          i2 && await i2.sender.replaceTrack(e3._mediaStreamTrack);
        }
        bindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = () => {
            var e3;
            null === (e3 = this.onICEConnectionStateChange) || void 0 === e3 || e3.call(this, this.peerConnection.iceConnectionState);
          }, this.peerConnection.onconnectionstatechange = () => {
            var e3;
            null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, this.peerConnection.connectionState);
          }, this.peerConnection.onicecandidate = (e3) => {
            e3.candidate ? this.localCandidateCount += 1 : (this.peerConnection.onicecandidate = null, this.allCandidatesReceived = true, NE.debug("[pc-".concat(this.store.p2pId, "] local candidate count"), this.localCandidateCount));
          }, setTimeout(() => {
            this.allCandidatesReceived || (this.allCandidatesReceived = true, NE.debug("[pc-".concat(this.store.p2pId, "] onicecandidate timeout, local candidate count"), this.localCandidateCount));
          }, HE("CANDIDATE_TIMEOUT"));
        }
        unbindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = null, this.peerConnection.onconnectionstatechange = null, this.peerConnection.onsignalingstatechange = null, this.peerConnection.onicecandidateerror = null, this.peerConnection.onicecandidate = null, this.peerConnection.ontrack = null;
        }
        static resolvePCConfiguration(t2) {
          const i2 = { iceServers: [] };
          return t2.iceServers ? i2.iceServers = t2.iceServers : t2.turnServer && "off" !== t2.turnServer.mode && (xm(t2.turnServer.servers) ? i2.iceServers = t2.turnServer.servers : (i2.iceServers && i2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.servers)), HE("USE_TURN_SERVER_OF_GATEWAY") && i2.iceServers && t2.turnServer.serversFromGateway && i2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.serversFromGateway)), HE("FORCE_TURN_TCP") ? i2.iceTransportPolicy = "relay" : t2.turnServer.servers.concat(t2.turnServer.serversFromGateway || []).forEach((e3) => {
            e3.forceturn && (i2.iceTransportPolicy = "relay");
          }))), i2;
        }
        static turnServerConfigToIceServers(e3) {
          const t2 = [];
          return e3.forEach((e4) => {
            e4.security ? e4.tcpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turns:".concat(TR(e4.turnServerURL), ":").concat(e4.tcpport, "?transport=tcp") }) : (e4.udpport && !HE("FORCE_TURN_TCP") && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turn:".concat(e4.turnServerURL, ":").concat(e4.udpport, "?transport=udp") }), e4.tcpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turn:".concat(e4.turnServerURL, ":").concat(e4.tcpport, "?transport=tcp") }));
          }), t2;
        }
        tryBindTransportEvents(e3) {
          e3.transport && (this.transportEventReceiver = e3, e3.transport.onstatechange = () => {
            var t2, i2;
            null !== (t2 = e3.transport) && void 0 !== t2 && t2.state && (null === (i2 = this.onDTLSTransportStateChange) || void 0 === i2 || i2.call(this, e3.transport.state));
          }, e3.transport.onerror = (e4) => {
            var t2;
            null === (t2 = this.onDTLSTransportError) || void 0 === t2 || t2.call(this, e4.error);
          }, e3.transport.iceTransport && (e3.transport.iceTransport.onstatechange = () => {
            var t2, i2, r2;
            null !== (t2 = e3.transport) && void 0 !== t2 && t2.iceTransport.state && (null === (i2 = this.onICETransportStateChange) || void 0 === i2 || i2.call(this, null === (r2 = e3.transport) || void 0 === r2 ? void 0 : r2.iceTransport.state));
          }));
        }
        tryUnbindTransportEvents() {
          this.transportEventReceiver && this.transportEventReceiver.transport && (this.transportEventReceiver.transport.onstatechange = null, this.transportEventReceiver.transport.onerror = null, this.transportEventReceiver.transport.iceTransport && (this.transportEventReceiver.transport.iceTransport.onstatechange = null));
        }
        async applySendEncodings(e3, t2) {
          try {
            if (!jg().supportSetRtpSenderParameters)
              return;
            if (e3.length !== t2.length)
              return;
            for (let c2 = 0; c2 < e3.length; c2++) {
              const d2 = e3[c2], u2 = t2[c2];
              if (u2 && u2 instanceof Ew) {
                var i2, r2;
                if (this.isVP8Simulcast(u2))
                  continue;
                const e4 = {}, t3 = {};
                switch (u2._optimizationMode) {
                  case "motion":
                    e4.degradationPreference = "maintain-framerate";
                    break;
                  case "detail":
                    e4.degradationPreference = "maintain-resolution";
                    break;
                  default:
                    e4.degradationPreference = "balanced";
                }
                var n2, o2, s2, a2;
                if (null !== (i2 = u2._encoderConfig) && void 0 !== i2 && i2.bitrateMax)
                  t3.maxBitrate = 1e3 * (null === (n2 = u2._encoderConfig) || void 0 === n2 ? void 0 : n2.bitrateMax);
                if (u2._hints.includes(lg.LOW_STREAM))
                  null !== (o2 = u2._encoderConfig) && void 0 !== o2 && o2.frameRate && (t3.maxFramerate = RR(u2._encoderConfig.frameRate)), null !== (s2 = u2._encoderConfig) && void 0 !== s2 && s2.scaleResolutionDownBy && (null === (a2 = u2._encoderConfig) || void 0 === a2 ? void 0 : a2.scaleResolutionDownBy) > 1 && (t3.scaleResolutionDownBy = u2._encoderConfig.scaleResolutionDownBy);
                if (HE("DSCP_TYPE") && ap()) {
                  const e5 = HE("DSCP_TYPE");
                  ["very-low", "low", "medium", "high"].includes(e5) && (t3.networkPriority = e5);
                }
                const c3 = d2.sender.getParameters(), l2 = null === (r2 = c3.encodings) || void 0 === r2 ? void 0 : r2[0];
                Qh() && !l2 && (e4.encodings = [t3]), l2 && Object.assign(l2, t3), Object.assign(c3, e4), await d2.sender.setParameters(c3);
              }
            }
          } catch (e4) {
            NE.debug("Apply RTPSendEncodings failed.");
          }
        }
        mungSendOfferSDP(e3, t2, i2) {
          const r2 = bD.exports.parse(e3);
          return t2.forEach((e4, t3) => {
            const n2 = i2[t3], o2 = r2.mediaDescriptions.find((e5) => e5.attributes.mid === n2);
            o2 && (UD(o2, e4), BD(o2, e4, this.store.codec));
          }), bD.exports.print(r2);
        }
        mungReceiveAnswerSDP(e3, t2, i2) {
          const r2 = bD.exports.parse(e3), n2 = r2.mediaDescriptions.find((e4) => e4.attributes.mid === t2);
          return n2 && i2 === yg.AUDIO && "audio" === n2.media.mediaType && KD(n2), bD.exports.print(r2);
        }
        bindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstVideoReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstAudioDecoded = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioDecoded) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoDecoded = (e3, t2, i2) => {
            var r2;
            null === (r2 = this.onFirstVideoDecoded) || void 0 === r2 || r2.call(this, e3, t2, i2);
          }, this.statsFilter.onSelectedLocalCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedLocalCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          }, this.statsFilter.onSelectedRemoteCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedRemoteCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          }, this.statsFilter.onFirstVideoDecodedTimeout = (e3) => {
            var t2;
            null === (t2 = this.onFirstVideoDecodedTimeout) || void 0 === t2 || t2.call(this, e3);
          };
        }
        unbindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = void 0, this.statsFilter.onFirstVideoReceived = void 0, this.statsFilter.onFirstAudioDecoded = void 0, this.statsFilter.onFirstVideoDecoded = void 0, this.statsFilter.onSelectedLocalCandidateChanged = void 0, this.statsFilter.onSelectedRemoteCandidateChanged = void 0, this.statsFilter.onFirstVideoDecodedTimeout = void 0;
        }
        async applySimulcastForFirefox(e3, t2) {
          if (e3.length === t2.length)
            for (let s2 = 0; s2 < e3.length; s2++) {
              var i2, r2, n2, o2;
              const a2 = e3[s2], c2 = t2[s2];
              if (c2 instanceof Ew && !c2._hints.includes(lg.LOW_STREAM) && null !== (i2 = c2._encoderConfig) && void 0 !== i2 && i2.bitrateMax && (null === (r2 = c2._encoderConfig) || void 0 === r2 ? void 0 : r2.bitrateMax) > 200 && null !== (n2 = c2._scalabiltyMode) && void 0 !== n2 && n2.numSpatialLayers && (null === (o2 = c2._scalabiltyMode) || void 0 === o2 ? void 0 : o2.numSpatialLayers) > 1 && "vp8" === this.store.codec) {
                const e4 = {}, t3 = { high: 1e3 * (c2._encoderConfig.bitrateMax - 50), medium: 5e4 };
                e4.encodings = [{ rid: "m", active: true, maxBitrate: t3.medium, scaleResolutionDownBy: 4 }, { rid: "h", active: true, maxBitrate: t3.high }];
                const i3 = a2.sender.getParameters();
                await a2.sender.setParameters(Object.assign(i3, e4));
              }
            }
        }
        async applySimulcastEncodings(e3, t2) {
          if (!Qh() && e3.length === t2.length)
            for (let i2 = 0; i2 < e3.length; i2++) {
              const r2 = t2[i2];
              if (r2 instanceof Ew && this.isVP8Simulcast(r2)) {
                const t3 = e3[i2], n2 = {}, o2 = { high: 1e3 * (r2._encoderConfig.bitrateMax - 50), medium: 5e4 };
                n2.encodings = [{ active: true, adaptivePtime: false, networkPriority: "high", priority: "high", maxBitrate: o2.high }, { active: true, adaptivePtime: false, networkPriority: "low", priority: "low", maxBitrate: o2.medium, scaleResolutionDownBy: 4 }];
                const s2 = t3.sender.getParameters();
                await t3.sender.setParameters(Object.assign(s2, n2));
              }
            }
        }
        isVP8Simulcast(e3) {
          var t2, i2, r2, n2;
          return !!(e3 instanceof Ew && HE("SIMULCAST") && "vp8" === this.store.codec && !e3._hints.includes(lg.LOW_STREAM) && null !== (t2 = e3._encoderConfig) && void 0 !== t2 && t2.bitrateMax && (null === (i2 = e3._encoderConfig) || void 0 === i2 ? void 0 : i2.bitrateMax) > 200 && null !== (r2 = e3._scalabiltyMode) && void 0 !== r2 && r2.numSpatialLayers && (null === (n2 = e3._scalabiltyMode) || void 0 === n2 ? void 0 : n2.numSpatialLayers) > 1);
        }
        logSDPExchange(e3, t2, i2, r2) {
          if (HE("SDP_LOGGING"))
            return NE.upload("exchanging ".concat(i2, " ").concat(t2, " SDP during P2PConnection.").concat(r2, "\n"), e3), "offer" === t2 ? (e4) => {
              this.logSDPExchange(e4, "answer", "local" === i2 ? "remote" : "local", r2);
            } : void 0;
        }
        async getRemoteSSRC(e3) {
          if (!this.remoteSDP)
            return;
          const t2 = this.remoteSDP.getSSRC(e3);
          return null == t2 ? void 0 : t2[0].ssrcId;
        }
      }).prototype, "connect", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "connect"), vP.prototype), ZS(vP.prototype, "receive", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "receive"), vP.prototype), ZS(vP.prototype, "batchReceive", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "batchReceive"), vP.prototype), ZS(vP.prototype, "stopReceiving", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "stopReceiving"), vP.prototype), ZS(vP.prototype, "muteRemote", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "muteRemote"), vP.prototype), ZS(vP.prototype, "unmuteRemote", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "unmuteRemote"), vP.prototype), ZS(vP.prototype, "muteLocal", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "muteLocal"), vP.prototype), ZS(vP.prototype, "unmuteLocal", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "unmuteLocal"), vP.prototype), ZS(vP.prototype, "close", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "close"), vP.prototype), ZS(vP.prototype, "updateEncoderConfig", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "updateEncoderConfig"), vP.prototype), ZS(vP.prototype, "updateSendParameters", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "updateSendParameters"), vP.prototype), ZS(vP.prototype, "replaceTrack", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "replaceTrack"), vP.prototype), ZS(vP.prototype, "getRemoteSSRC", [CP], Object.getOwnPropertyDescriptor(vP.prototype, "getRemoteSSRC"), vP.prototype), vP);
      function CP(e2, t2, i2) {
        const r2 = e2[t2];
        if ("function" != typeof r2)
          throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("From P2PConnection.".concat(t2));
          try {
            for (var n2 = arguments.length, o2 = new Array(n2), s2 = 0; s2 < n2; s2++)
              o2[s2] = arguments[s2];
            return await r2.apply(this, o2);
          } finally {
            i3();
          }
        }, i2;
      }
      function AP(e2, t2) {
        let i2 = document.createElement("video"), r2 = document.createElement("canvas");
        i2.setAttribute("style", "display:none"), r2.setAttribute("style", "display:none"), i2.setAttribute("muted", ""), i2.muted = true, i2.setAttribute("autoplay", ""), i2.autoplay = true, i2.setAttribute("playsinline", ""), r2.width = RR(t2.width), r2.height = RR(t2.height);
        const n2 = RR(t2.framerate || 15);
        document.body.append(i2), document.body.append(r2);
        let o2 = e2._mediaStreamTrack;
        i2.srcObject = new MediaStream([o2]), i2.play();
        const s2 = r2.getContext("2d");
        if (!s2)
          throw new vE(TE.UNEXPECTED_ERROR, "can not get canvas context");
        const a2 = jg(), c2 = r2.captureStream(a2.supportRequestFrame ? 0 : n2).getVideoTracks()[0], d2 = VT(() => (() => {
          if (i2.paused && i2.play(), i2.videoHeight > 2 && i2.videoWidth > 2) {
            const e3 = i2.videoWidth, t3 = i2.videoHeight / e3, n3 = r2.width * t3;
            Math.abs(n3 - r2.height) >= 2 && (NE.debug("adjust low stream resolution", "".concat(r2.width, "x").concat(r2.height, " -> ").concat(r2.width, "x").concat(n3)), r2.height = n3);
          }
          s2.drawImage(i2, 0, 0, r2.width, r2.height), c2.requestFrame && c2.requestFrame(), o2 !== e2._mediaStreamTrack && (o2 = e2._mediaStreamTrack, i2.srcObject = new MediaStream([o2]));
        })(), n2), u2 = c2.stop;
        return c2.stop = () => {
          u2.call(c2), d2(), i2 && (i2.remove(), i2 = null), r2 && (r2.width = 0, r2.remove(), r2 = null), NE.debug("clean low stream renderer");
        }, c2;
      }
      var OP, bP, wP, NP, DP, PP, LP, kP, MP, UP, xP, VP;
      function jP(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function FP(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? jP(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : jP(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class BP extends yT {
        getUserId() {
          return this._userId;
        }
        constructor(e2, t2, i2, r2) {
          super(e2, "track-".concat(e2.kind, "-").concat(t2, "-").concat(r2.clientId, "_").concat(MR(5, ""))), mp(this, "_userId", void 0), mp(this, "_uintId", void 0), mp(this, "_isDestroyed", false), mp(this, "store", void 0), mp(this, "processor", void 0), mp(this, "processorContext", void 0), this._userId = t2, this._uintId = i2, this.store = r2;
        }
        _updateOriginMediaStreamTrack(e2) {
          this._originMediaStreamTrack = e2, this._mediaStreamTrack = e2, this._updatePlayerSource(), this.processor && this.processor.updateInput({ track: this._originMediaStreamTrack, context: this.processorContext });
        }
        _destroy() {
          this._isDestroyed = true, NE.info("[".concat(this.getTrackId(), "] is destroyed")), this.stop(), super.close();
        }
        getProcessorStats() {
          return this.processorContext.gatherStats();
        }
        getProcessorUsage() {
          return this.processorContext.gatherUsage();
        }
      }
      let GP = (OP = RT({ argsMap: (e2, t2, i2) => [e2.getTrackId(), "string" == typeof t2 ? t2 : "HTMLElement", i2] }), bP = RT({ argsMap: (e2) => [e2.getTrackId()] }), wP = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2.name] }), NP = RT({ argsMap: (e2) => [e2.getTrackId()] }), ZS((DP = class extends BP {
        get isPlaying() {
          return !(!this._player || this._player.videoElementStatus !== am.PLAYING);
        }
        get __className__() {
          return "RemoteVideoTrack";
        }
        constructor(e2, t2, i2, r2) {
          super(e2, t2, i2, r2), mp(this, "_videoVisibleTimer", null), mp(this, "_previousVideoVisibleStatus", void 0), mp(this, "_clearPreviousVideoVisibleStatus", () => this._previousVideoVisibleStatus = void 0), mp(this, "trackMediaType", "video"), mp(this, "_videoWidth", void 0), mp(this, "_videoHeight", void 0), mp(this, "_player", void 0), mp(this, "processorDestination", void 0), mp(this, "processorContext", void 0), this.updateMediaStreamTrackResolution(), this.processorContext = new eR(this.getTrackId(), "remote"), this.processorDestination = new $v(this.processorContext), this.bindProcessorDestinationEvents();
        }
        getStats() {
          XR(() => {
            NE.warning("[deprecated] RemoteVideoTrack.getStats will be removed in the future, use AgoraRTCClient.getRemoteVideoStats instead");
          }, "remoteVideoTrackGetStatsWarning");
          return GR(this, ug.GET_STATS) || FP({}, Hm);
        }
        play(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          if ("string" == typeof e2) {
            const t3 = document.getElementById(e2);
            t3 ? e2 = t3 : (NE.warning("[".concat(this.getTrackId(), '] can not find "#').concat(e2, '" element, use document.body')), e2 = document.body);
          }
          NE.debug("[".concat(this.getTrackId(), "] start video playback"), JSON.stringify(t2));
          const i2 = FP(FP({ fit: "cover" }, t2), {}, { trackId: this.getTrackId(), element: e2 });
          this._player ? this._player.updateConfig(i2) : (this._player = new ob(i2), this._player.updateVideoTrack(this._mediaStreamTrack), this._player.onFirstVideoFrameDecoded = () => {
            this.store.subscribe(this.getUserId(), "video", void 0, void 0, Date.now()), this.emit(Eg.FIRST_FRAME_DECODED);
          }), this._player.play(this.store.sessionId || void 0), this._videoVisibleTimer && window.clearInterval(this._videoVisibleTimer), this._clearPreviousVideoVisibleStatus(), this._videoVisibleTimer = window.setInterval(() => {
            try {
              const e3 = this.getVideoElementVisibleStatus();
              this.emit(Eg.VIDEO_ELEMENT_VISIBLE_STATUS, e3);
            } catch (e3) {
            }
          }, HE("CHECK_VIDEO_VISIBLE_INTERVAL"));
        }
        stop() {
          this._player && (this._videoVisibleTimer && (window.clearInterval(this._videoVisibleTimer), this._videoVisibleTimer = null), this._clearPreviousVideoVisibleStatus(), this._player.destroy(), this._player = void 0, NE.debug("[".concat(this.getTrackId(), "] stop video playback")));
        }
        getCurrentFrameData() {
          return this._player ? this._player.getCurrentFrame() : new ImageData(2, 2);
        }
        updateMediaStreamTrackResolution() {
          VR(this._originMediaStreamTrack).then((e2) => {
            let [t2, i2] = e2;
            this._videoHeight = i2, this._videoWidth = t2;
          }).catch(xR);
        }
        _updatePlayerSource() {
          NE.debug("[".concat(this.getTrackId(), "] update player source track")), this._player && this._player.updateVideoTrack(this._mediaStreamTrack);
        }
        getVideoElementVisibleStatus() {
          try {
            var e2, t2;
            const i2 = null == this || null === (e2 = this._player) || void 0 === e2 ? void 0 : e2.getContainerElement(), r2 = { track: this, element: null == this || null === (t2 = this._player) || void 0 === t2 ? void 0 : t2.getVideoElement(), slot: null == i2 ? void 0 : i2.parentElement }, { element: n2, slot: o2 } = r2;
            if (this.isPlaying && n2 instanceof HTMLVideoElement && o2 instanceof HTMLElement) {
              const e3 = hw.checkOneElementVisible(n2), t3 = Object.assign({}, e3);
              if (t3.visible !== this._previousVideoVisibleStatus) {
                this._previousVideoVisibleStatus = t3.visible;
                const e4 = IT.reportApiInvoke(null, { tag: fm.TRACER, name: Em.REMOTE_VIDEO_TRACK_GET_VIDEO_VISIBLE, options: [this.getTrackId()] });
                t3.visible ? e4.onSuccess("Video is visible") : e4.onSuccess("Invisible because of ".concat(t3.reason));
              }
              return t3;
            }
            return;
          } catch (e3) {
            throw new vE(TE.GET_VIDEO_ELEMENT_VISIBLE_ERROR, e3.message);
          }
        }
        pipe(e2) {
          if (this.processor === e2)
            return e2;
          if (e2._source)
            throw new vE(TE.INVALID_OPERATION, "Processor ".concat(e2.name, " already piped, please call unpipe beforehand."));
          return this.unpipe(), this.processor = e2, this.processor._source = this, e2.updateInput({ track: this._originMediaStreamTrack, context: this.processorContext }), e2;
        }
        unpipe() {
          if (!this.processor)
            return;
          const e2 = this.processor;
          this.processor._source = void 0, this.processor = void 0, e2.reset();
        }
        bindProcessorDestinationEvents() {
          this.processorDestination.on(Ng.ON_TRACK, async (e2) => {
            e2 ? e2 !== this._mediaStreamTrack && (this._mediaStreamTrack = e2, this._updatePlayerSource()) : this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource());
          });
        }
        unbindProcessorDestinationEvents() {
          this.processorDestination.removeAllListeners(Ng.ON_TRACK);
        }
        _destroy() {
          super._destroy(), this.unbindProcessorDestinationEvents();
        }
      }).prototype, "play", [OP], Object.getOwnPropertyDescriptor(DP.prototype, "play"), DP.prototype), ZS(DP.prototype, "stop", [bP], Object.getOwnPropertyDescriptor(DP.prototype, "stop"), DP.prototype), ZS(DP.prototype, "pipe", [wP], Object.getOwnPropertyDescriptor(DP.prototype, "pipe"), DP.prototype), ZS(DP.prototype, "unpipe", [NP], Object.getOwnPropertyDescriptor(DP.prototype, "unpipe"), DP.prototype), DP), WP = (PP = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2], throttleTime: 300 }), LP = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), kP = RT({ argsMap: (e2) => [e2.getTrackId()] }), MP = RT({ argsMap: (e2) => [e2.getTrackId()] }), UP = RT({ argsMap: (e2, t2) => [e2.getTrackId(), t2.name] }), xP = RT({ argsMap: (e2) => [e2.getTrackId()] }), ZS((VP = class extends BP {
        get isPlaying() {
          return this._useAudioElement ? nv.isPlaying(this.getTrackId()) : this._source.isPlayed;
        }
        get __className__() {
          return "RemoteAudioTrack";
        }
        constructor(e2, t2, i2, r2) {
          super(e2, t2, i2, r2), mp(this, "trackMediaType", "audio"), mp(this, "_source", void 0), mp(this, "_useAudioElement", true), mp(this, "_volume", 100), mp(this, "processorContext", void 0), mp(this, "processorDestination", void 0), mp(this, "_played", false), mp(this, "_bypassWebAudio", false), HE("DISABLE_WEBAUDIO") ? (this._source = new rR(), this._bypassWebAudio = true, this._useAudioElement = true) : (this._source = new WT(e2, true), HE("REMOTE_AUDIO_TRACK_USES_WEB_AUDIO") && (this._useAudioElement = false)), this._source.once(km.RECEIVE_TRACK_BUFFER, () => {
            this.emit(Eg.FIRST_FRAME_DECODED);
          }), this.processorContext = new iR(this._source.context, this.getTrackId(), "remote"), this.processorDestination = new tR(this.processorContext), this.bindProcessorDestinationEvents(), this._source.on(km.UPDATE_SOURCE, () => {
            this.processor && this.processor.updateInput({ node: this._source.processSourceNode, context: this.processorContext });
          });
        }
        setAudioFrameCallback(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 4096;
          if (!e2)
            return this._source.removeAllListeners(km.ON_AUDIO_BUFFER), void this._source.stopGetAudioBuffer();
          this._source.startGetAudioBuffer(t2), this._source.removeAllListeners(km.ON_AUDIO_BUFFER), this._source.on(km.ON_AUDIO_BUFFER, (t3) => e2(t3));
        }
        setVolume(e2) {
          this._volume = e2, this._useAudioElement ? nv.setVolume(this.getTrackId(), e2) : this._source.setVolume(e2 / 100);
        }
        async setPlaybackDevice(e2) {
          if (!this._useAudioElement)
            throw new vE(TE.NOT_SUPPORTED, "your browser does not support setting the audio output device");
          await nv.setSinkID(this.getTrackId(), e2);
        }
        getVolumeLevel() {
          return this._source.getAccurateVolumeLevel();
        }
        getStats() {
          XR(() => {
            NE.warning("[deprecated] RemoteAudioTrack.getStats will be removed in the future, use AgoraRTCClient.getRemoteAudioStats instead");
          }, "remoteAudioTrackGetStatsWarning");
          return GR(this, ug.GET_STATS) || FP({}, Gm);
        }
        play() {
          NE.debug("[".concat(this.getTrackId(), "] start audio playback")), this._played = true, this._useAudioElement ? (NE.debug("[".concat(this.getTrackId(), "] use audio element to play")), nv.play(this._mediaStreamTrack, this.getTrackId(), this._volume, this.store.sessionId || void 0)) : this._source.play();
        }
        stop() {
          NE.debug("[".concat(this.getTrackId(), "] stop audio playback")), this._played = false, this._useAudioElement ? nv.stop(this.getTrackId()) : this._source.stop();
        }
        _destroy() {
          super._destroy(), this._played = false, this.unbindProcessorDestinationEvents(), this._source.destroy();
        }
        _isFreeze() {
          return this._source.isFreeze;
        }
        _updatePlayerSource() {
          let e2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
          NE.debug("[".concat(this.getTrackId(), "] update player source track")), e2 && this._source.updateTrack(this._mediaStreamTrack), this._useAudioElement && nv.updateTrack(this.getTrackId(), this._mediaStreamTrack);
        }
        pipe(e2) {
          if (this._bypassWebAudio)
            throw new vE(TE.NOT_SUPPORTED, "can not pipe extension when WebAudio disabled");
          if (this.processor === e2)
            return e2;
          if (e2._source)
            throw new vE(TE.INVALID_OPERATION, "Processor ".concat(e2.name, " already piped, please call unpipe beforehand."));
          return this.unpipe(), this.processor = e2, this.processor._source = this, e2.updateInput({ track: this._originMediaStreamTrack, node: this._source.processSourceNode, context: this.processorContext }), e2;
        }
        unpipe() {
          var e2;
          if (this._bypassWebAudio)
            throw new vE(TE.NOT_SUPPORTED, "can not unpipe extension when WebAudio disabled");
          if (!this.processor)
            return;
          const t2 = this.processor;
          null === (e2 = this._source.processSourceNode) || void 0 === e2 || e2.disconnect(), this.processor._source = false, this.processor = void 0, t2.reset();
        }
        bindProcessorDestinationEvents() {
          this.processorDestination.on(Ng.ON_TRACK, async (e2) => {
            e2 ? e2 !== this._mediaStreamTrack && (this._mediaStreamTrack = e2, this._updatePlayerSource(false), this._source.processedNode = this._source.createMediaStreamSourceNode(e2)) : this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource());
          }), this.processorDestination.on(Ng.ON_NODE, (e2) => {
            this._source.processedNode = e2;
            const t2 = !e2;
            this._useAudioElement !== t2 && (this._played ? (this.stop(), this._useAudioElement = t2, this.play()) : this._useAudioElement = t2);
          });
        }
        unbindProcessorDestinationEvents() {
          this.processorDestination.removeAllListeners(Ng.ON_TRACK), this.processorDestination.removeAllListeners(Ng.ON_NODE);
        }
      }).prototype, "setVolume", [PP], Object.getOwnPropertyDescriptor(VP.prototype, "setVolume"), VP.prototype), ZS(VP.prototype, "setPlaybackDevice", [LP], Object.getOwnPropertyDescriptor(VP.prototype, "setPlaybackDevice"), VP.prototype), ZS(VP.prototype, "play", [kP], Object.getOwnPropertyDescriptor(VP.prototype, "play"), VP.prototype), ZS(VP.prototype, "stop", [MP], Object.getOwnPropertyDescriptor(VP.prototype, "stop"), VP.prototype), ZS(VP.prototype, "pipe", [UP], Object.getOwnPropertyDescriptor(VP.prototype, "pipe"), VP.prototype), ZS(VP.prototype, "unpipe", [xP], Object.getOwnPropertyDescriptor(VP.prototype, "unpipe"), VP.prototype), VP);
      function HP(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function KP(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? HP(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : HP(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class YP extends gE {
        constructor() {
          super(), mp(this, "uplinkStatsUploadInterval", void 0), mp(this, "uplinkStatsUploadSlowInterval", void 0), mp(this, "uplinkRelatedStatsUploadInterval", void 0), mp(this, "uplinkDenoiserStatsUploadInterval", void 0), mp(this, "transportStatsUploadInterval", void 0), mp(this, "uplinkExtensionStatsUploadInterval", void 0), mp(this, "downlinkExtensionStatsUploadInterval", void 0), mp(this, "extensionUsageStatsUploadInterval", void 0), mp(this, "downlinkStatsUploadInterval", void 0), mp(this, "downlinkStatsUploadSlowInterval", void 0), mp(this, "downlinkRelatedStatsUploadInterval", void 0), mp(this, "lastStats", void 0), mp(this, "uploadUnplinkStarted", false), mp(this, "uploadDownlinkStarted", false), mp(this, "uploadTransportStarted", false), mp(this, "uploadExtensionUsageStarted", false), mp(this, "requestStats", void 0), mp(this, "requestLocalMedia", void 0), mp(this, "requestRemoteMedia", void 0), mp(this, "requestAllTracks", void 0), mp(this, "requestVideoIsReady", void 0), mp(this, "requestUpload", void 0);
        }
        startUploadTransportStats() {
          this.uploadTransportStarted || (this.uploadTransportStarted = true, this.transportStatsUploadInterval && window.clearInterval(this.transportStatsUploadInterval), this.transportStatsUploadInterval = window.setInterval(() => {
            var e2;
            const t2 = null === (e2 = this.requestStats) || void 0 === e2 ? void 0 : e2.call(this);
            t2 && this.uploadTransportStats(t2);
          }, 6e3));
        }
        startUploadExtensionUsageStats() {
          if (this.uploadExtensionUsageStarted)
            return;
          this.uploadExtensionUsageStarted = true, this.extensionUsageStatsUploadInterval && window.clearInterval(this.extensionUsageStatsUploadInterval);
          const e2 = /* @__PURE__ */ new Map();
          this.extensionUsageStatsUploadInterval = window.setInterval(async () => {
            var t2, i2, r2;
            const n2 = Date.now(), o2 = { connectionInterval: HE("EXTENSION_USAGE_UPLOAD_INTERVAL") / 1e3, details: [], lts: n2 };
            let s2 = [];
            const a2 = (null === (t2 = this.requestAllTracks) || void 0 === t2 ? void 0 : t2.call(this)) || [];
            for (const e3 of a2)
              !e3.muted && e3.enabled && (s2 = s2.concat(await e3.getProcessorUsage()));
            const c2 = (null === (i2 = this.requestRemoteMedia) || void 0 === i2 ? void 0 : i2.call(this)) || [];
            for (const [e3, t3] of c2)
              t3.has(yg.VIDEO) && e3.videoTrack && (s2 = s2.concat(await e3.videoTrack.getProcessorUsage())), t3.has(yg.AUDIO) && e3.audioTrack && (s2 = s2.concat(await e3.audioTrack.getProcessorUsage()));
            if (0 === s2.length)
              return;
            o2.details = function(e3, t3) {
              const i3 = {};
              for (const { id: s3, value: a3, level: c3, direction: d3 } of e3) {
                var r3;
                const e4 = null !== (r3 = t3.get(s3)) && void 0 !== r3 ? r3 : 0, u3 = 2 === a3 ? e4 + HE("EXTENSION_USAGE_UPLOAD_INTERVAL") / 1e3 : e4;
                var n3, o3;
                t3.set(s3, u3), i3[s3] ? (2 === a3 && (i3[s3].value = a3), c3 > i3[s3].level && (i3[s3].level = c3), "remote" === d3 && (i3[s3].remoteUidCount += 1), i3[s3].totalTs = null !== (n3 = t3.get(s3)) && void 0 !== n3 ? n3 : 0) : i3[s3] = { value: a3, level: c3, remoteUidCount: "local" === d3 ? 0 : 1, totalTs: null !== (o3 = t3.get(s3)) && void 0 !== o3 ? o3 : 0 };
              }
              return Object.keys(i3).map((e4) => {
                const { level: t4, value: r4, totalTs: n4 } = i3[e4];
                return { id: e4, level: t4, value: r4, totalTs: n4 };
              });
            }(s2, e2);
            const d2 = Date.now(), u2 = d2 > n2 ? d2 : n2 + 1;
            null === (r2 = this.requestUpload) || void 0 === r2 || r2.call(this, Dm.EXTENSION_USAGE_STATS, { usageStats: o2, sendTs: u2 });
          }, HE("EXTENSION_USAGE_UPLOAD_INTERVAL"));
        }
        startUploadUplinkStats() {
          this.uploadUnplinkStarted || (this.uploadUnplinkStarted = true, this.uplinkStatsUploadInterval && window.clearInterval(this.uplinkStatsUploadInterval), this.uplinkStatsUploadInterval = window.setInterval(() => {
            var e2;
            const t2 = null === (e2 = this.requestStats) || void 0 === e2 ? void 0 : e2.call(this);
            t2 && (this.uploadUplinkStats(t2, this.lastStats), this.lastStats = t2);
          }, 3e3), this.uplinkStatsUploadSlowInterval && window.clearInterval(this.uplinkStatsUploadSlowInterval), this.uplinkStatsUploadSlowInterval = window.setInterval(() => {
            var e2;
            const t2 = null === (e2 = this.requestStats) || void 0 === e2 ? void 0 : e2.call(this);
            t2 && this.uploadSlowUplinkStats(t2);
          }, 6e4), this.uplinkRelatedStatsUploadInterval && window.clearInterval(this.uplinkRelatedStatsUploadInterval), this.uplinkRelatedStatsUploadInterval = window.setInterval(() => {
            var e2;
            const t2 = null === (e2 = this.requestStats) || void 0 === e2 ? void 0 : e2.call(this);
            t2 && this.uploadRelatedUplinkStats(t2, this.lastStats), this.lastStats = t2;
          }, 1e3), this.uplinkDenoiserStatsUploadInterval && window.clearInterval(this.uplinkDenoiserStatsUploadInterval), this.uplinkDenoiserStatsUploadInterval = window.setInterval(() => {
            var e2;
            const t2 = null === (e2 = this.requestAllTracks) || void 0 === e2 ? void 0 : e2.call(this);
            t2 && this.uploadDenoiserStats(t2);
          }, 2e3), this.uplinkExtensionStatsUploadInterval && window.clearInterval(this.uplinkExtensionStatsUploadInterval), this.uplinkExtensionStatsUploadInterval = window.setInterval(() => {
            var e2;
            const t2 = null === (e2 = this.requestAllTracks) || void 0 === e2 ? void 0 : e2.call(this);
            t2 && this.uploadExtensionStats(t2);
          }, 2e3));
        }
        uploadTransportStats(e2) {
          YR(() => {
            var t2;
            null === (t2 = this.requestUpload) || void 0 === t2 || t2.call(this, Dm.TRANSPORT_STATS, function(e3) {
              const t3 = { connectionType: 100 };
              if ("relay" === e3.selectedCandidatePair.localCandidate.candidateType) {
                const i2 = e3.selectedCandidatePair.localCandidate.relayProtocol;
                "udp" === i2 && (t3.connectionType = 101), "tcp" === i2 && (t3.connectionType = 103), "tls" === i2 && (t3.connectionType = 104);
              }
              return t3;
            }(e2));
          });
        }
        uploadUplinkStats(e2, t2) {
          var i2;
          ((null === (i2 = this.requestLocalMedia) || void 0 === i2 ? void 0 : i2.call(this)) || []).forEach((i3) => {
            let [r2, { track: n2, ssrcs: o2 }] = i3;
            switch (r2) {
              case Cg.LocalVideoLowTrack:
              case Cg.LocalVideoTrack: {
                const i4 = function(e3, t3, i5) {
                  var r3;
                  const n3 = t3.videoSend.find((t4) => t4.ssrc === e3);
                  if (!n3)
                    return null;
                  const o3 = { id: MR(10, ""), timestamp: new Date(t3.timestamp).toISOString(), mediaType: "video", type: "ssrc", ssrc: n3.ssrc.toString() };
                  switch (o3.A_vstd = i5._originMediaStreamTrack && !i5._originMediaStreamTrack.enabled || i5._mediaStreamTrack && !i5._mediaStreamTrack.enabled ? "1" : "0", n3.sentFrame && (o3.A_fhs = n3.sentFrame.height.toString(), o3.A_frs = n3.sentFrame.frameRate.toString(), o3.A_fws = n3.sentFrame.width.toString()), n3.adaptionChangeReason) {
                    case "none":
                      o3.A_ac = "0";
                      break;
                    case "cpu":
                      o3.A_ac = "1";
                      break;
                    case "bandwidth":
                      o3.A_ac = "2";
                      break;
                    case "other":
                      o3.A_ac = "3";
                  }
                  return o3.A_lvps = cm[i5._player ? i5._player.videoElementStatus : "uninit"].toString(), o3.A_nr = null === (r3 = n3.nacksCount) || void 0 === r3 ? void 0 : r3.toString(), n3.avgEncodeMs && (o3.A_aem = n3.avgEncodeMs.toFixed(0).toString()), o3;
                }(o2[0].ssrcId, e2, n2), s2 = yR(o2[0].ssrcId, e2, t2);
                i4 && YR(() => {
                  var e3;
                  return null === (e3 = this.requestUpload) || void 0 === e3 ? void 0 : e3.call(this, Dm.PUBLISH_STATS, { stream_type: r2 === Cg.LocalVideoLowTrack ? "low" : "high", stats: KP(KP({}, i4), s2) });
                });
                const a2 = function(e3) {
                  const t3 = { id: "bweforvideo", timestamp: new Date(e3.timestamp).toISOString(), type: "VideoBwe" };
                  return e3.bitrate.retransmit && (t3.A_rb = e3.bitrate.retransmit.toString()), e3.bitrate.targetEncoded && (t3.A_teb = e3.bitrate.targetEncoded.toString()), t3.A_aeb = e3.bitrate.actualEncoded.toString(), t3.A_tb = e3.bitrate.transmit.toString(), void 0 !== e3.sendBandwidth && (t3.A_asb = e3.sendBandwidth.toString()), t3;
                }(e2);
                a2 && setTimeout(() => {
                  var e3;
                  return null === (e3 = this.requestUpload) || void 0 === e3 ? void 0 : e3.call(this, Dm.PUBLISH_STATS, { stream_type: r2 === Cg.LocalVideoLowTrack ? "low" : "high", stats: a2 });
                }, 1e3);
                break;
              }
              case Cg.LocalAudioTrack: {
                const t3 = function(e3, t4, i4) {
                  const r3 = t4.audioSend.find((t5) => t5.ssrc === e3);
                  if (!r3)
                    return null;
                  const n3 = { id: MR(10, ""), timestamp: new Date(t4.timestamp).toISOString(), mediaType: "audio", type: "ssrc", ssrc: r3.ssrc.toString() };
                  return n3.A_astd = i4._originMediaStreamTrack.enabled && i4._mediaStreamTrack.enabled ? "0" : "1", r3.inputLevel ? n3.A_ail = Math.round(100 * r3.inputLevel).toString() : n3.A_ail = Math.round(100 * i4._source.getAccurateVolumeLevel()).toString(), n3.A_apil = Math.round(100 * i4._source.getAccurateVolumeLevel()).toString(), r3.aecReturnLoss && (n3.A_ecrl = Math.round(r3.aecReturnLoss).toString()), r3.aecReturnLossEnhancement && (n3.A_ecrle = Math.round(r3.aecReturnLossEnhancement).toString()), n3;
                }(o2[0].ssrcId, e2, n2);
                t3 && YR(() => {
                  var e3;
                  return null === (e3 = this.requestUpload) || void 0 === e3 ? void 0 : e3.call(this, Dm.PUBLISH_STATS, { stream_type: "high", stats: t3 });
                });
                break;
              }
            }
          });
        }
        uploadSlowUplinkStats(e2) {
          var t2;
          ((null === (t2 = this.requestLocalMedia) || void 0 === t2 ? void 0 : t2.call(this)) || []).filter((e3) => {
            let [t3] = e3;
            return t3 === Cg.LocalVideoLowTrack || t3 === Cg.LocalVideoTrack;
          }).forEach((t3) => {
            let [i2, { ssrcs: r2 }] = t3;
            const n2 = yR(r2[0].ssrcId, e2);
            n2 && YR(() => {
              var e3;
              return null === (e3 = this.requestUpload) || void 0 === e3 ? void 0 : e3.call(this, Dm.PUBLISH_STATS, { stream_type: i2 === Cg.LocalVideoLowTrack ? "low" : "high", stats: n2 });
            });
          });
        }
        uploadRelatedUplinkStats(e2, t2) {
          var i2;
          ((null === (i2 = this.requestLocalMedia) || void 0 === i2 ? void 0 : i2.call(this)) || []).filter((e3) => {
            let [t3] = e3;
            return t3 === Cg.LocalVideoLowTrack || t3 === Cg.LocalVideoTrack;
          }).forEach((t3) => {
            let [i3, { ssrcs: r2 }] = t3;
            const n2 = function(e3, t4) {
              const i4 = t4.videoSend.find((t5) => t5.ssrc === e3);
              return i4 ? { mediaType: "video", isVideoMute: false, frameRateInput: i4.inputFrame && i4.inputFrame.frameRate.toString(), frameRateSent: i4.sentFrame && i4.sentFrame.frameRate.toString(), googRtt: i4.rttMs.toString(), qpSumPerFrame: Math.floor(i4.qpSumPerFrame).toString() } : null;
            }(r2[0].ssrcId, e2);
            n2 && YR(() => {
              var e3;
              null === (e3 = this.requestUpload) || void 0 === e3 || e3.call(this, Dm.PUBLISH_RELATED_STATS, { stream_type: i3 === Cg.LocalVideoLowTrack ? "low" : "high", stats: n2 });
            });
          });
        }
        uploadDenoiserStats(e2) {
          for (let n2 = 0; n2 < e2.length; n2++) {
            const o2 = e2[n2];
            if (o2 instanceof cR) {
              var t2, i2, r2;
              const e3 = null === (t2 = (i2 = o2._external).getDenoiserStats) || void 0 === t2 ? void 0 : t2.call(i2);
              return void (e3 && (null === (r2 = this.requestUpload) || void 0 === r2 || r2.call(this, Dm.DENOISER_STATS, e3)));
            }
          }
        }
        uploadExtensionStats(e2) {
          for (let t2 = 0; t2 < e2.length; t2++) {
            e2[t2].getProcessorStats().forEach((e3) => {
              var t3;
              null === (t3 = this.requestUpload) || void 0 === t3 || t3.call(this, e3.type, e3.stats);
            });
          }
        }
        stopUploadUplinkStats() {
          this.uploadUnplinkStarted && (this.uploadUnplinkStarted = false, this.uplinkStatsUploadInterval && window.clearInterval(this.uplinkStatsUploadInterval), this.uplinkRelatedStatsUploadInterval && window.clearInterval(this.uplinkRelatedStatsUploadInterval), this.uplinkDenoiserStatsUploadInterval && window.clearInterval(this.uplinkDenoiserStatsUploadInterval), this.uplinkStatsUploadInterval = void 0, this.uplinkRelatedStatsUploadInterval = void 0, this.uplinkDenoiserStatsUploadInterval = void 0);
        }
        startUploadDownlinkStats() {
          if (this.uploadDownlinkStarted)
            return;
          let e2;
          this.uploadDownlinkStarted = true, this.downlinkStatsUploadInterval && window.clearInterval(this.downlinkStatsUploadInterval);
          let t2 = false;
          this.downlinkStatsUploadInterval = window.setInterval(() => {
            var i2;
            const r2 = null === (i2 = this.requestStats) || void 0 === i2 ? void 0 : i2.call(this);
            r2 && (this.uploadDownlinkStats(r2, t2, e2), e2 = r2), t2 = !t2;
          }, 3e3), this.downlinkStatsUploadSlowInterval && window.clearInterval(this.downlinkStatsUploadSlowInterval), this.downlinkStatsUploadSlowInterval = window.setInterval(() => {
            var e3;
            const t3 = null === (e3 = this.requestStats) || void 0 === e3 ? void 0 : e3.call(this);
            t3 && this.uploadSlowDownlinkStats(t3);
          }, 6e4), this.downlinkRelatedStatsUploadInterval && window.clearInterval(this.downlinkRelatedStatsUploadInterval), this.downlinkRelatedStatsUploadInterval = window.setInterval(() => {
            var e3;
            const t3 = null === (e3 = this.requestStats) || void 0 === e3 ? void 0 : e3.call(this);
            t3 && (this.uploadRelatedDownlinkStats(t3, this.lastStats), this.lastStats = t3);
          }, 1e3), this.downlinkExtensionStatsUploadInterval && window.clearInterval(this.downlinkExtensionStatsUploadInterval), this.downlinkExtensionStatsUploadInterval = window.setInterval(() => {
            var e3;
            const t3 = null === (e3 = this.requestRemoteMedia) || void 0 === e3 ? void 0 : e3.call(this);
            t3 && this.uploadDownlinkExtensionStats(t3);
          }, 2e3);
        }
        uploadDownlinkStats(e2, t2, i2) {
          var r2;
          ((null === (r2 = this.requestRemoteMedia) || void 0 === r2 ? void 0 : r2.call(this)) || []).forEach((r3) => {
            let [n2, o2] = r3;
            if (o2.has(yg.VIDEO) && n2.videoTrack) {
              const r4 = n2.videoTrack ? function(e3, t3, i3, r5, n3) {
                const o3 = t3.videoRecv.find((t4) => t4.ssrc === e3);
                if (!o3)
                  return null;
                const s2 = { id: MR(10, ""), timestamp: new Date(t3.timestamp).toISOString(), mediaType: "video", type: "ssrc", ssrc: o3.ssrc.toString() };
                var a2, c2;
                if (s2.bytesReceived = o3.bytes.toString(), s2.packetsLost = o3.packetsLost.toString(), s2.packetsReceived = o3.packets.toString(), o3.framesRateFirefox && (s2.A_frr = o3.framesRateFirefox.toString()), o3.receivedFrame ? (s2.A_frr = o3.receivedFrame.frameRate.toString(), s2.A_fhr = o3.receivedFrame.height.toString(), s2.A_fwr = o3.receivedFrame.width.toString()) : (s2.A_fhr = null === (a2 = r5._videoHeight) || void 0 === a2 ? void 0 : a2.toString(), s2.A_fwr = null === (c2 = r5._videoWidth) || void 0 === c2 ? void 0 : c2.toString()), s2.A_frd = o3.decodeFrameRate.toString(), o3.outputFrame && (s2.A_fro = o3.outputFrame.frameRate.toString()), void 0 !== o3.jitterBufferMs && (s2.A_jbm = Math.floor(o3.jitterBufferMs).toString()), void 0 !== o3.currentDelayMs && (s2.A_cdm = Math.floor(o3.currentDelayMs).toString()), s2.A_fs = o3.firsCount.toString(), s2.A_ns = o3.nacksCount.toString(), s2.A_ps = o3.plisCount.toString(), r5 && (s2.A_vrtd = r5._originMediaStreamTrack.enabled && r5._mediaStreamTrack.enabled ? "0" : "1"), r5._player && r5._player.freezeTimeCounterList.length > 0 && (s2.A_vrft = Math.round(r5._player.freezeTimeCounterList.splice(0, 1)[0]).toString()), n3 && r5._player && "visible" === mR.visibility) {
                  const e4 = Math.min(6e3, r5._player.renderFreezeAccTime);
                  s2.A_vrrft = Math.round(e4).toString(), r5._player.renderFreezeAccTime = Math.max(0, r5._player.renderFreezeAccTime - e4);
                }
                if (s2.A_rvps = cm[r5._player ? r5._player.videoElementStatus : "uninit"].toString(), i3) {
                  const t4 = i3.videoRecv.find((t5) => t5.ssrc === e3);
                  if (t4 && void 0 !== o3.totalInterFrameDelay && void 0 !== o3.totalSquaredInterFrameDelay && void 0 !== t4.totalInterFrameDelay && void 0 !== t4.totalSquaredInterFrameDelay) {
                    const e4 = o3.totalInterFrameDelay - t4.totalInterFrameDelay, i4 = o3.totalSquaredInterFrameDelay - t4.totalSquaredInterFrameDelay, r6 = o3.framesDecodeCount - t4.framesDecodeCount, n4 = e4 / r6 * 1e3, a3 = Math.round(1e3 * Math.sqrt((i4 - Math.pow(e4, 2) / r6) / r6));
                    !isNaN(a3) && n4 + a3 > Math.max(3 * n4, n4 + 150) && (s2.A_ifdsd = a3.toString());
                  }
                }
                return s2;
              }(n2._videoSSRC, e2, i2, n2.videoTrack, t2) : void 0;
              r4 && YR(() => {
                var e3;
                return null === (e3 = this.requestUpload) || void 0 === e3 ? void 0 : e3.call(this, Dm.SUBSCRIBE_STATS, { stream_id: n2.uid, stats: r4 });
              });
            }
            if (o2.has(yg.AUDIO) && n2.audioTrack) {
              const t3 = n2.audioTrack ? function(e3, t4, i3, r4) {
                const n3 = t4.audioRecv.find((t5) => t5.ssrc === e3);
                if (!n3)
                  return null;
                const o3 = { id: MR(10, ""), timestamp: new Date(t4.timestamp).toISOString(), mediaType: "audio", type: "ssrc", ssrc: n3.ssrc.toString() };
                if (o3.bytesReceived = n3.bytes.toString(), o3.packetsLost = n3.packetsLost.toString(), o3.packetsReceived = n3.packets.toString(), n3.outputLevel ? o3.A_aol = Math.round(100 * n3.outputLevel).toString() : o3.A_aol = Math.round(100 * r4._source.getAccurateVolumeLevel()).toString(), o3.A_apol = Math.round(100 * r4._source.getAccurateVolumeLevel()).toString(), r4 && (o3.A_artd = r4._originMediaStreamTrack.enabled && r4._mediaStreamTrack.enabled ? "0" : "1"), o3.A_jr = n3.jitterMs.toString(), o3.A_jbm = Math.floor(n3.jitterBufferMs).toString(), o3.A_cdm = Math.floor(n3.jitterBufferMs).toString(), o3.A_raps = cm[nv.getPlayerState(r4.getTrackId())].toString(), i3) {
                  const t5 = i3.audioRecv.find((t6) => t6.ssrc === e3);
                  if (t5) {
                    const e4 = n3.concealedSamples - t5.concealedSamples;
                    e4 > 0 && (o3.A_cs = Math.round(e4).toString());
                  }
                }
                return o3;
              }(n2._audioSSRC, e2, i2, n2.audioTrack) : void 0;
              t3 && YR(() => {
                var e3;
                return null === (e3 = this.requestUpload) || void 0 === e3 ? void 0 : e3.call(this, Dm.SUBSCRIBE_STATS, { stream_id: n2.uid, stats: t3 });
              });
            }
          });
        }
        uploadSlowDownlinkStats(e2) {
        }
        uploadRelatedDownlinkStats(e2, t2) {
          var i2;
          ((null === (i2 = this.requestRemoteMedia) || void 0 === i2 ? void 0 : i2.call(this)) || []).forEach((i3) => {
            let [r2, n2] = i3;
            if (n2.has(yg.VIDEO) && r2.videoTrack) {
              var o2;
              const i4 = true === (r2._videoSSRC && (null === (o2 = this.requestVideoIsReady) || void 0 === o2 ? void 0 : o2.call(this, r2._videoSSRC)) || false), n3 = function(e3, t3, i5, r3, n4, o3) {
                const s2 = i5.videoRecv.find((t4) => t4.ssrc === e3), a2 = n4 ? n4.videoRecv.find((t4) => t4.ssrc === e3) : void 0;
                if (!s2)
                  return null;
                const c2 = fR.isRemoteVideoFreeze(o3, s2, a2) && t3, d2 = { mediaType: "video", isVideoMute: false, peerId: r3, frameRateReceived: s2.receivedFrame && s2.receivedFrame.frameRate.toString(), frameRateDecoded: s2.decodedFrame && s2.decodedFrame.frameRate.toString(), isFreeze: c2, bytesReceived: s2.bytes.toString(), packetsReceived: s2.packets.toString(), packetsLost: s2.packetsLost.toString(), qpSumPerFrame: Math.floor(s2.qpSumPerFrame).toString() };
                return s2.framesRateFirefox && (d2.frameRateDecoded = s2.framesRateFirefox.toString(), d2.frameRateReceived = s2.framesRateFirefox.toString()), d2;
              }(r2._videoSSRC, i4, e2, r2.uid, t2, r2.videoTrack);
              n3 && YR(() => {
                var e3;
                null === (e3 = this.requestUpload) || void 0 === e3 || e3.call(this, Dm.SUBSCRIBE_RELATED_STATS, { stream_id: r2.uid, stats: n3 });
              });
            }
            if (n2.has(yg.AUDIO) && r2.audioTrack) {
              const t3 = function(e3, t4, i4, r3) {
                const n3 = t4.audioRecv.find((t5) => t5.ssrc === e3);
                if (!n3)
                  return null;
                const o3 = fR.isRemoteAudioFreeze(r3);
                return { mediaType: "audio", isAudioMute: false, peerId: i4, googJitterReceived: n3.jitterMs.toString(), isFreeze: o3, bytesReceived: n3.bytes.toString(), packetsReceived: n3.packets.toString(), packetsLost: n3.packetsLost.toString(), frameReceived: n3.receivedFrames.toString(), frameDropped: n3.droppedFrames.toString() };
              }(r2._audioSSRC, e2, r2.uid, r2.audioTrack);
              t3 && YR(() => {
                var e3;
                null === (e3 = this.requestUpload) || void 0 === e3 || e3.call(this, Dm.SUBSCRIBE_RELATED_STATS, { stream_id: r2.uid, stats: t3 });
              });
            }
          });
        }
        stopUploadDownlinkStats() {
          this.uploadDownlinkStarted && (this.uploadDownlinkStarted = false, this.downlinkStatsUploadInterval && window.clearInterval(this.downlinkStatsUploadInterval), this.downlinkRelatedStatsUploadInterval && window.clearInterval(this.downlinkRelatedStatsUploadInterval), this.downlinkStatsUploadInterval = void 0, this.downlinkRelatedStatsUploadInterval = void 0);
        }
        stopUploadTransportStats() {
          this.uploadTransportStarted && (this.uploadTransportStarted = false, this.transportStatsUploadInterval && window.clearInterval(this.transportStatsUploadInterval), this.transportStatsUploadInterval = void 0);
        }
        stopUploadExtensionUsageStats() {
          this.uploadExtensionUsageStarted && (this.uploadExtensionUsageStarted = false, this.extensionUsageStatsUploadInterval && window.clearInterval(this.extensionUsageStatsUploadInterval), this.extensionUsageStatsUploadInterval = void 0);
        }
        uploadDownlinkExtensionStats(e2) {
          e2.forEach((e3) => {
            let [t2, i2] = e3;
            if (i2.has(yg.VIDEO) && t2.videoTrack) {
              t2.videoTrack.getProcessorStats().forEach((e4) => {
                var t3;
                null === (t3 = this.requestUpload) || void 0 === t3 || t3.call(this, e4.type, e4.stats);
              });
            }
            if (i2.has(yg.AUDIO) && t2.audioTrack) {
              t2.audioTrack.getProcessorStats().forEach((e4) => {
                var t3;
                null === (t3 = this.requestUpload) || void 0 === t3 || t3.call(this, e4.type, e4.stats);
              });
            }
          });
        }
      }
      const qP = "v=0\no=- 0 0 IN IP4 127.0.0.1\ns=AgoraGateway\nt=0 0\na=group:BUNDLE 0\na=msid-semantic: WMS\na=ice-lite\nm=application 9 UDP/DTLS/SCTP webrtc-datachannel\nc=IN IP4 127.0.0.1\na=mid:0\n", JP = "9", XP = 2e4, zP = 4e4;
      class QP {
        get localCapabilities() {
          return qR(this._localCapabilities);
        }
        get rtpCapabilities() {
          return qR(this._rtpCapabilities);
        }
        get candidates() {
          return qR(this._candidates);
        }
        get iceParameters() {
          return qR(this._iceParameters);
        }
        get dtlsParameters() {
          return qR(this._dtlsParameters);
        }
        constructor(e2) {
          mp(this, "sessionDesc", void 0), mp(this, "_localCapabilities", void 0), mp(this, "_rtpCapabilities", void 0), mp(this, "_candidates", void 0), mp(this, "_iceParameters", void 0), mp(this, "_dtlsParameters", void 0), mp(this, "setup", void 0), mp(this, "currentMidIndex", void 0), mp(this, "cname", void 0), mp(this, "firefoxSsrcMidMap", /* @__PURE__ */ new Map()), e2 = qR(e2);
          const { remoteIceParameters: t2, remoteDtlsParameters: i2, candidates: r2, remoteRTPCapabilities: n2, remoteSetup: o2, localCapabilities: s2, cname: a2 } = e2, c2 = bD.exports.parse(qP);
          this._rtpCapabilities = n2, this._candidates = r2, this._iceParameters = t2, this._dtlsParameters = i2, this._localCapabilities = s2, this.setup = o2, this.cname = a2;
          const d2 = this.rtpCapabilities.send;
          for (const e3 of c2.mediaDescriptions) {
            if (e3.attributes.iceUfrag = t2.iceUfrag, e3.attributes.icePwd = t2.icePwd, e3.attributes.fingerprints = i2.fingerprints, e3.attributes.candidates = r2, e3.attributes.setup = o2, "application" === e3.media.mediaType && (e3.attributes.sctpPort = "5000"), "video" === e3.media.mediaType && (e3.media.fmts = d2.videoCodecs.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = d2.videoCodecs, e3.attributes.extmaps = d2.videoExtensions, HE("PRELOAD_MEDIA_COUNT") > 0)) {
              const { ssrcs: t3, ssrcGroups: i3 } = MD([{ ssrcId: zP, rtx: HE("USE_RTX") ? 40001 : void 0 }], this.cname);
              e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
            }
            if ("audio" === e3.media.mediaType && (e3.media.fmts = d2.audioCodecs.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = d2.audioCodecs, e3.attributes.extmaps = d2.audioExtensions, KD(e3), HE("PRELOAD_MEDIA_COUNT") > 0)) {
              const { ssrcs: t3, ssrcGroups: i3 } = MD([{ ssrcId: XP }], this.cname);
              e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
            }
          }
          this.sessionDesc = c2, this.currentMidIndex = c2.mediaDescriptions.length - 1;
        }
        updateRemoteRTPCapabilities(e2) {
          const t2 = bD.exports.parse(qP);
          this._rtpCapabilities = e2;
          const i2 = this.rtpCapabilities.send;
          for (const e3 of t2.mediaDescriptions) {
            if (e3.attributes.iceUfrag = this._iceParameters.iceUfrag, e3.attributes.icePwd = this._iceParameters.icePwd, e3.attributes.fingerprints = this._dtlsParameters.fingerprints, e3.attributes.candidates = this._candidates, e3.attributes.setup = this.setup, "application" === e3.media.mediaType && (e3.attributes.sctpPort = "5000"), "video" === e3.media.mediaType && (e3.media.fmts = i2.videoCodecs.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = i2.videoCodecs, e3.attributes.extmaps = i2.videoExtensions, HE("PRELOAD_MEDIA_COUNT") > 0)) {
              const { ssrcs: t3, ssrcGroups: i3 } = MD([{ ssrcId: zP, rtx: HE("USE_RTX") ? 40001 : void 0 }], this.cname);
              e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
            }
            if ("audio" === e3.media.mediaType && (e3.media.fmts = i2.audioCodecs.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = i2.audioCodecs, e3.attributes.extmaps = i2.audioExtensions, HE("PRELOAD_MEDIA_COUNT") > 0)) {
              const { ssrcs: t3, ssrcGroups: i3 } = MD([{ ssrcId: XP }], this.cname);
              e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
            }
          }
          this.sessionDesc = t2, this.currentMidIndex = t2.mediaDescriptions.length - 1;
        }
        preloadRemoteMedia(e2) {
          this.rtpCapabilities;
          const t2 = this.candidates, i2 = this.dtlsParameters, r2 = this.iceParameters, n2 = this.rtpCapabilities.send;
          for (let o2 = 1; o2 < e2; o2++) {
            const e3 = 2 * o2 + XP, s2 = 2 * o2 + zP, { ssrcs: a2, ssrcGroups: c2 } = MD([{ ssrcId: e3 }], this.cname), { ssrcs: d2, ssrcGroups: u2 } = MD([{ ssrcId: s2, rtx: HE("USE_RTX") ? s2 + 1 : void 0 }], this.cname);
            this.sessionDesc.mediaDescriptions.push({ media: { mediaType: "video", port: JP, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: n2.videoCodecs.map((e4) => e4.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: r2.iceUfrag, icePwd: r2.icePwd, unrecognized: [], candidates: t2, extmaps: n2.videoExtensions, fingerprints: i2.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: d2, ssrcGroups: u2, rtcpFeedbackWildcards: [], payloads: n2.videoCodecs, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: "sendonly", rtcpMux: true, rtcpRsize: true, mid: "".concat(2 * o2 - 1) } }), this.sessionDesc.mediaDescriptions.push({ media: { mediaType: "audio", port: JP, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: n2.audioCodecs.map((e4) => e4.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: r2.iceUfrag, icePwd: r2.icePwd, unrecognized: [], candidates: t2, extmaps: n2.audioExtensions, fingerprints: i2.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: a2, ssrcGroups: c2, rtcpFeedbackWildcards: [], payloads: n2.audioCodecs, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: "sendonly", rtcpMux: true, rtcpRsize: true, mid: "".concat(2 * o2) } }), this.currentMidIndex += 2;
          }
          this.updateBundleMids();
        }
        toString() {
          return bD.exports.print(this.sessionDesc);
        }
        send(e2, t2, i2, r2) {
          const { ssrcs: n2, ssrcGroups: o2 } = MD(t2, this.cname, i2), s2 = this.findPreloadMediaDesc(n2);
          if (s2) {
            if (Qh() && this.firefoxSsrcMidMap.set(n2[0].ssrcId, s2.attributes.mid), r2 && (r2.tcc || r2.remb)) {
              const e3 = this.sessionDesc.mediaDescriptions.indexOf(s2);
              return this.sessionDesc.mediaDescriptions[e3] = this.mungSendMediaDesc(s2, r2), { mid: s2.attributes.mid, needExchangeSDP: true };
            }
            return { mid: s2.attributes.mid, needExchangeSDP: false };
          }
          {
            const t3 = this.findAvailableMediaIndex(e2, n2);
            let i3;
            return -1 === t3 || zh() || Zh() || $h() ? (i3 = this.createOrRecycleSendMedia(e2, n2, o2, "sendonly", r2), this.updateBundleMids()) : (i3 = qR(this.sessionDesc.mediaDescriptions[t3]), i3.attributes.direction = "sendonly", i3.attributes.ssrcs = n2, i3.attributes.ssrcGroups = o2, this.sessionDesc.mediaDescriptions[t3] = this.mungSendMediaDesc(i3, r2)), Qh() && this.firefoxSsrcMidMap.set(n2[0].ssrcId, i3.attributes.mid), { mid: i3.attributes.mid, needExchangeSDP: true };
          }
        }
        batchSend(e2) {
          const t2 = e2.map((e3) => {
            let { kind: t3, ssrcMsg: i3, mslabel: r3 } = e3;
            return this.send(t3, i3, r3);
          }), i2 = [];
          let r2 = false;
          return t2.forEach((e3) => {
            let { mid: t3, needExchangeSDP: n2 } = e3;
            n2 && (r2 = true), i2.push(t3);
          }), { mids: i2, needExchangeSDP: r2 };
        }
        stopSending(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => t3.attributes.mid && -1 !== e2.indexOf(t3.attributes.mid));
          if (t2.length !== e2.length)
            throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.stopSending.");
          t2.forEach((e3) => {
            "0" === e3.attributes.mid || Qh() || zh() || Zh() ? e3.attributes.ssrcs = [] : (e3.attributes.ssrcs = [], e3.attributes.direction = "inactive", e3.media.port = "0");
          }), this.updateBundleMids();
        }
        mute(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2);
          if (!t2)
            throw new Error("mediaDescription not found with ".concat(e2, " in remote SDP when calling RemoteSDP.mute."));
          t2.attributes.direction = "inactive";
        }
        unmute(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2);
          if (!t2)
            throw new Error("mediaDescription not found with ".concat(e2, " in remote SDP when calling RemoteSDP.unmute."));
          t2.attributes.direction = "sendonly";
        }
        muteRemote(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => e2.includes(t3.attributes.mid || ""));
          if (t2.length !== e2.length)
            throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
          t2.forEach((e3) => {
            e3.attributes.direction = "inactive";
          });
        }
        unmuteRemote(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => e2.includes(t3.attributes.mid || ""));
          if (t2.length !== e2.length)
            throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
          t2.forEach((e3) => {
            e3.attributes.direction = "recvonly";
          });
        }
        receive(e2, t2, i2, r2) {
          e2.forEach((e3, n2) => {
            this.createOrRecycleRecvMedia(e3, [], "recvonly", t2, i2, r2[n2]);
          }), this.updateBundleMids();
        }
        stopReceiving(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => -1 !== e2.indexOf(t3.attributes.mid));
          if (t2.length !== e2.length)
            throw new Error("MediaDescriptions' length doesn't match mids's length when calling RemoteSDP.receive.");
          t2.forEach((e3) => {
            e3.media.port = "0", e3.attributes.direction = "inactive";
          }), this.updateBundleMids();
        }
        restartICE(e2) {
          e2 = qR(e2), this._iceParameters = e2, this.sessionDesc.mediaDescriptions.forEach((t2) => {
            t2.attributes.iceUfrag = e2.iceUfrag, t2.attributes.icePwd = e2.icePwd;
          });
        }
        predictReceivingMids(e2) {
          const t2 = [];
          for (let i2 = 0; i2 < e2; i2++)
            t2.push((this.currentMidIndex + i2 + 1).toString(10));
          return t2;
        }
        findAvailableMediaIndex(e2, t2) {
          return this.sessionDesc.mediaDescriptions.findIndex((i2) => {
            const r2 = i2.media.mediaType === e2 && "0" !== i2.media.port && ("sendonly" === i2.attributes.direction || "sendrecv" === i2.attributes.direction) && 0 === i2.attributes.ssrcs.length;
            if (Qh()) {
              if (r2) {
                const e3 = this.firefoxSsrcMidMap.get(t2[0].ssrcId);
                return !(e3 || "0" !== i2.attributes.mid && "1" !== i2.attributes.mid) || !(!e3 || e3 !== i2.attributes.mid);
              }
              return false;
            }
            return r2;
          });
        }
        createOrRecycleRecvMedia(e2, t2, i2, r2, n2, o2) {
          const s2 = e2._mediaStreamTrack.kind, a2 = this.rtpCapabilities.recv, c2 = this.localCapabilities.send;
          let d2 = [];
          if (s2 === yg.VIDEO) {
            var u2, l2;
            if (HE("H264_PROFILE_LEVEL_ID") && "h264" === r2 && (d2 = a2.videoCodecs.filter((e3) => {
              var t3, i3;
              return ((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "").includes(r2) && (null == e3 || null === (i3 = e3.fmtp) || void 0 === i3 ? void 0 : i3.parameters["profile-level-id"]) === HE("H264_PROFILE_LEVEL_ID");
            })), !d2 || 0 === (null === (u2 = d2) || void 0 === u2 ? void 0 : u2.length)) {
              const e3 = c2.videoCodecs.filter((e4) => {
                var t3;
                return ((null === (t3 = e4.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "").includes(r2);
              });
              0 !== e3.length && (d2 = a2.videoCodecs.filter((t3) => e3.some((e4) => e4.payloadType === t3.payloadType)));
            }
            if (HE("USE_RTX")) {
              const e3 = d2.map((e4) => e4.payloadType.toString()), t3 = a2.videoCodecs.filter((t4) => {
                var i3, r3;
                return "rtx" === (null === (i3 = t4.rtpMap) || void 0 === i3 ? void 0 : i3.encodingName) && e3.includes((null === (r3 = t4.fmtp) || void 0 === r3 ? void 0 : r3.parameters.apt) || "");
              });
              d2 = [...d2, ...t3];
            }
            if (0 === d2.length)
              NE.warning("codec ".concat(r2, " not included in rtpCapabilities, fallback to default payloads: ").concat(null === (l2 = a2.videoCodecs[0].rtpMap) || void 0 === l2 ? void 0 : l2.encodingName)), d2 = a2.videoCodecs;
          } else
            d2 = a2.audioCodecs.filter((e3) => {
              var t3;
              return ((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "").includes(n2);
            }), 0 === d2.length && (NE.warning("codec ".concat(n2, " not included in rtpCapabilities, fallback to opus")), d2 = a2.audioCodecs.filter((e3) => {
              var t3;
              return ((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "").includes("opus");
            }));
          const h2 = s2 === yg.VIDEO ? a2.videoExtensions : a2.audioExtensions;
          this.currentMidIndex += 1;
          const p2 = "".concat(this.currentMidIndex);
          let _2 = { media: { mediaType: s2, port: JP, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: d2.map((e3) => e3.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: this.candidates, extmaps: h2, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t2, ssrcGroups: [], rtcpFeedbackWildcards: [], payloads: d2, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: i2, rtcpMux: true, rtcpRsize: true, mid: "".concat(p2) } };
          _2 = this.mungRecvMediaDsec(_2, e2, o2);
          const E2 = this.findFirstClosedMedia(s2);
          if (E2) {
            const e3 = this.sessionDesc.mediaDescriptions.indexOf(E2);
            this.sessionDesc.mediaDescriptions[e3] = _2;
          } else
            this.sessionDesc.mediaDescriptions.push(_2);
          return _2;
        }
        createOrRecycleSendMedia(e2, t2, i2, r2, n2) {
          const o2 = this.rtpCapabilities.send, s2 = e2 === yg.VIDEO ? o2.videoCodecs : o2.audioCodecs, a2 = e2 === yg.VIDEO ? o2.videoExtensions : o2.audioExtensions;
          this.currentMidIndex += 1;
          const c2 = "".concat(this.currentMidIndex);
          let d2 = { media: { mediaType: e2, port: JP, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: s2.map((e3) => e3.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: this.candidates, extmaps: a2, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t2, ssrcGroups: i2, rtcpFeedbackWildcards: [], payloads: s2, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: r2, rtcpMux: true, rtcpRsize: true, mid: "".concat(c2) } };
          d2 = this.mungSendMediaDesc(d2, n2);
          const u2 = this.findFirstClosedMedia(e2);
          if (u2) {
            const e3 = this.sessionDesc.mediaDescriptions.indexOf(u2);
            this.sessionDesc.mediaDescriptions[e3] = d2;
          } else
            this.sessionDesc.mediaDescriptions.push(d2);
          return d2;
        }
        updateBundleMids() {
          this.sessionDesc.attributes.groups[0].identificationTag = this.sessionDesc.mediaDescriptions.filter((e2) => "0" !== e2.media.port).map((e2) => e2.attributes.mid);
        }
        mungRecvMediaDsec(e2, t2, i2) {
          const r2 = qR(e2);
          return xD(r2), UD(r2, t2), VD(r2, t2), jD(r2), FD(r2, i2, this.localCapabilities.send), r2;
        }
        mungSendMediaDesc(e2, t2) {
          const i2 = qR(e2);
          return FD(i2, t2, this.localCapabilities.recv), KD(i2), i2;
        }
        updateRecvMedia(e2, t2) {
          const i2 = this.sessionDesc.mediaDescriptions.findIndex((t3) => t3.attributes.mid === e2);
          if (-1 !== i2) {
            const e3 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[i2], t2);
            this.sessionDesc.mediaDescriptions[i2] = e3;
          }
        }
        bumpMid(e2) {
          this.currentMidIndex += e2;
        }
        findFirstClosedMedia(e2) {
          return this.sessionDesc.mediaDescriptions.find((t2) => Qh() ? "0" === t2.media.port && t2.media.mediaType === e2 : "0" === t2.media.port);
        }
        findPreloadMediaDesc(e2) {
          return this.sessionDesc.mediaDescriptions.find((t2) => {
            var i2, r2;
            return (null === (i2 = t2.attributes) || void 0 === i2 || null === (r2 = i2.ssrcs[0]) || void 0 === r2 ? void 0 : r2.ssrcId) === e2[0].ssrcId;
          });
        }
        getSSRC(e2) {
          var t2;
          return null === (t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2)) || void 0 === t2 ? void 0 : t2.attributes.ssrcs;
        }
      }
      var ZP;
      function $P(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function eL(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? $P(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : $P(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let tL = (ZS((ZP = class e2 extends xg {
        get currentLocalDescription() {
          return this.peerConnection.currentLocalDescription;
        }
        get currentRemoteDescription() {
          return this.peerConnection.currentRemoteDescription;
        }
        get peerConnectionState() {
          return this.peerConnection.connectionState;
        }
        get iceConnectionState() {
          return this.peerConnection.iceConnectionState;
        }
        constructor(e3, t2, i2) {
          super(e3, t2), mp(this, "store", void 0), mp(this, "peerConnection", void 0), mp(this, "remoteSDP", void 0), mp(this, "initialOffer", void 0), mp(this, "transportEventReceiver", void 0), mp(this, "statsFilter", void 0), mp(this, "useRTX", HE("USE_RTX")), mp(this, "localCapabilities", void 0), mp(this, "localCandidateCount", 0), mp(this, "allCandidatesReceived", false), mp(this, "mutex", new OT("NVExtentionsConnection-mutex")), mp(this, "rtcMedia", void 0), this.store = t2, this.peerConnection = i2, this.statsFilter = pP(this.peerConnection, void 0, void 0, Qh() ? 1200 : void 0), this.bindPCEvents(), this.bindStatsEvents(), this.store.p2pId = this.store.p2pId + 1;
        }
        async establish(e3) {
          try {
            const e4 = await this.peerConnection.createOffer();
            if (!e4.sdp)
              throw new Error("Cannot get initialOffer.sdp when trying to establish PeerConnection.");
            const t2 = PD(e4.sdp), i2 = await GD(!this.useRTX, HE("FILTER_VIDEO_FEC"), HE("FILTER_AUDIO_FEC"));
            return this.localCapabilities = i2, this.initialOffer = e4, eL(eL({}, t2), {}, { rtpCapabilities: i2, offerSDP: e4.sdp });
          } catch (e4) {
            throw new vE(TE.GET_LOCAL_CONNECTION_PARAMS_FAILED, e4.toString());
          }
        }
        async connect(e3, t2, i2, r2, n2, o2) {
          try {
            if (!this.initialOffer)
              throw new Error("Cannot establish NVConnection without initial offer.");
            this.remoteSDP = new QP({ remoteIceParameters: e3, remoteDtlsParameters: t2, candidates: i2, remoteRTPCapabilities: r2, remoteSetup: n2, localCapabilities: HD(this.localCapabilities), cname: o2 });
            const s2 = this.remoteSDP.toString(), a2 = bD.exports.parse(this.initialOffer.sdp), c2 = a2.mediaDescriptions.find((e4) => "audio" === e4.media.mediaType);
            c2 && KD(c2);
            const d2 = bD.exports.print(a2), u2 = this.logSDPExchange(d2 || "", "offer", "local", "connect");
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: d2 }), null == u2 || u2(s2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: s2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "NV.connect failed; ".concat(e4.toString()));
          }
        }
        async updateRemoteConnect(e3) {
          var t2, i2, r2;
          null === (t2 = this.remoteSDP) || void 0 === t2 || t2.updateRemoteRTPCapabilities(e3), null === (i2 = this.remoteSDP) || void 0 === i2 || i2.preloadRemoteMedia(2);
          const n2 = null === (r2 = this.remoteSDP) || void 0 === r2 ? void 0 : r2.toString();
          await this.peerConnection.setRemoteDescription({ type: "offer", sdp: n2 });
          const o2 = await this.peerConnection.createAnswer();
          await this.peerConnection.setLocalDescription(o2), NE.debug("[NVExtentionsConnection] updateRemoteRTPCapabilities by exchanging SDP.");
        }
        send(e3, t2, i2) {
          var r2 = this;
          return ID(function* () {
            const n2 = yield yD(r2.mutex.lock("From NVExtentionsConnection.send"));
            try {
              if (!r2.remoteSDP)
                throw new Error("Cannot call NVExtentionsConnection.send before remote SDP created");
              const o2 = [];
              e3.forEach((e4) => {
                const t3 = r2.peerConnection.addTransceiver(e4._mediaStreamTrack, { direction: "sendonly" });
                o2.push(t3);
              }), Qh() && true === HE("SIMULCAST") && (yield yD(r2.applySimulcastForFirefox(o2, e3)));
              const s2 = yield yD(r2.peerConnection.createOffer()), a2 = r2.remoteSDP.predictReceivingMids(e3.length), c2 = r2.mungSendOfferSDP(s2.sdp, e3, a2), d2 = bD.exports.parse(c2), u2 = a2.map((e4) => {
                const t3 = d2.mediaDescriptions.find((t4) => t4.attributes.mid === e4);
                if (!t3)
                  throw new Error("Cannot extract ssrc from mediaDescription.");
                return LD(t3, r2.useRTX);
              });
              let l2;
              try {
                l2 = yield u2;
              } catch (n3) {
                l2 = [], r2.remoteSDP.receive(e3, t2, i2, l2);
                const o3 = r2.remoteSDP.toString();
                throw yield yD(r2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 })), yield yD(r2.peerConnection.setRemoteDescription({ type: "answer", sdp: o3 })), yield yD(r2.stopSending(a2, true)), n3;
              }
              r2.remoteSDP.receive(e3, t2, i2, l2);
              const h2 = r2.remoteSDP.toString(), p2 = r2.logSDPExchange(c2, "offer", "local", "send");
              return yield yD(r2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 })), yield yD(r2.applySimulcastEncodings(o2, e3)), yield yD(r2.applySendEncodings(o2, e3)), null == p2 || p2(h2), yield yD(r2.peerConnection.setRemoteDescription({ type: "answer", sdp: h2 })), o2.map((e4, t3) => {
                const i3 = a2[t3];
                return { localSSRC: u2[t3], id: i3, transceiver: e4 };
              });
            } catch (e4) {
              throw e4 instanceof vE ? e4 : new vE(TE.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.send failed; ".concat(e4.toString()));
            } finally {
              n2();
            }
          })();
        }
        async stopSending(e3, t2) {
          const i2 = t2 ? void 0 : await this.mutex.lock("From NVExtentionsConnection.stopSending");
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.stopSending before remote SDP created");
            const t3 = this.peerConnection.getTransceivers().filter((t4) => -1 !== e3.indexOf(t4.mid));
            if (t3.length !== e3.length)
              throw new Error("Transceivers' length doesn't match mids' length when trying to call NVExtentionsConnection.stopSending.");
            t3.map((e4) => {
              var t4;
              e4.direction = "inactive", null === (t4 = e4.stop) || void 0 === t4 || t4.call(e4);
            });
            const r2 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(r2.sdp || "", "offer", "local", "stopSending");
            await this.peerConnection.setLocalDescription(r2), this.remoteSDP.stopReceiving(e3);
            const o2 = this.remoteSDP.toString();
            null == n2 || n2(o2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: o2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.stopSending failed; ".concat(e4.toString()));
          } finally {
            i2 && i2();
          }
        }
        async receive(e3, t2, i2, r2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.receive ".concat(e3, " before remoteSDP created."));
            const { mid: n2, needExchangeSDP: o2 } = this.remoteSDP.send(e3, t2, i2, r2);
            if (o2) {
              const t3 = this.remoteSDP.toString(), i3 = this.logSDPExchange(t3, "offer", "remote", "receive");
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t3 });
              const r3 = await this.peerConnection.createAnswer(), o3 = this.mungReceiveAnswerSDP(r3.sdp, n2, e3);
              null == i3 || i3(o3 || ""), await this.peerConnection.setLocalDescription({ type: "answer", sdp: o3 }), NE.debug("[NVExtentionsConnection] receive ".concat(e3, " by exchanging SDP."));
            } else
              NE.debug("[NVExtentionsConnection] receive ".concat(e3, " no need to exchange SDP."));
            const s2 = this.peerConnection.getTransceivers().find((e4) => e4.mid === n2);
            if (!s2)
              throw new Error("Cannot get transceiver after setLocalDescription.");
            return { track: s2.receiver.track, id: n2 };
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async batchReceive(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.batchReceive before remoteSDP created.");
            const { mids: t2, needExchangeSDP: i2 } = this.remoteSDP.batchSend(e3);
            if (i2) {
              const e4 = this.remoteSDP.toString(), t3 = this.logSDPExchange(e4, "offer", "remote", "receive");
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: e4 });
              const i3 = await this.peerConnection.createAnswer();
              null == t3 || t3(i3.sdp || ""), await this.peerConnection.setLocalDescription(i3), NE.debug("[NVExtentionsConnection] batchReceive by exchanging SDP.");
            } else
              NE.debug("[NVExtentionsConnection] batchReceive no need to exchange SDP.");
            return t2.map((e4) => {
              const t3 = this.peerConnection.getTransceivers().find((t4) => t4.mid === e4);
              if (!t3)
                throw new Error("Cannot get transceiver after setLocalDescription.");
              return { track: t3.receiver.track, id: e4 };
            });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async stopReceiving(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.stopReceiving before remote SDP created.");
            this.remoteSDP.stopSending(e3);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "stopReceiving");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const r2 = await this.peerConnection.createAnswer();
            null == i2 || i2(r2.sdp || ""), await this.peerConnection.setLocalDescription(r2);
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "NVExtentionsConnection stopReceiving failed; ".concat(e4.toString()));
          }
        }
        async muteRemote(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.muteRemote mid=".concat(e3, " before remote SDP created."));
            this.remoteSDP.mute(e3);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "muteRemote");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const r2 = await this.peerConnection.createAnswer();
            null == i2 || i2(r2.sdp || ""), await this.peerConnection.setLocalDescription(r2);
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.muteRemote failed; ".concat(e4.toString()));
          }
        }
        async unmuteRemote(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.unmuteRemote mid=".concat(e3, " before remote SDP created."));
            this.remoteSDP.unmute(e3);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "unmuteRemote");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const r2 = await this.peerConnection.createAnswer();
            null == i2 || i2(r2.sdp || ""), await this.peerConnection.setLocalDescription(r2);
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.unmuteRemote failed; ".concat(e4.toString()));
          }
        }
        async muteLocal(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.muteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e3.indexOf(t3.mid));
            if (t2.length !== e3.length)
              throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map((e4) => {
              e4.direction = "inactive";
            });
            const i2 = await this.peerConnection.createOffer(), r2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "muteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.muteRemote(e3);
            const n2 = this.remoteSDP.toString();
            null == r2 || r2(n2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.muteLocal failed; ".concat(e4.toString()));
          }
        }
        async unmuteLocal(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.unmuteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e3.indexOf(t3.mid));
            if (t2.length !== e3.length)
              throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map(async (e4, t3) => {
              e4.direction = "sendonly";
            });
            const i2 = await this.peerConnection.createOffer(), r2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "unmuteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.unmuteRemote(e3);
            const n2 = this.remoteSDP.toString();
            null == r2 || r2(n2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.unmuteLocal failed; ".concat(e4.toString()));
          }
        }
        restartICE() {
          var e3 = this;
          return ID(function* () {
            const t2 = yield yD(e3.mutex.lock("From NVExtentionsConnection.restartICE"));
            try {
              const i2 = yield yD(e3.peerConnection.createOffer({ iceRestart: true }));
              if (!i2.sdp)
                throw new Error("Cannot restartICE because restart offer SDP does not exist.");
              const r2 = PD(i2.sdp), { remoteIceParameters: n2 } = yield r2.iceParameters;
              if (!e3.remoteSDP)
                throw new Error("Cannot restartICE before remoteSDP created.");
              e3.remoteSDP.restartICE(n2);
              const o2 = e3.remoteSDP.toString(), s2 = e3.logSDPExchange(i2.sdp || "", "offer", "local", "restartICE");
              yield yD(e3.peerConnection.setLocalDescription(i2)), null == s2 || s2(o2), yield yD(e3.peerConnection.setRemoteDescription({ type: "answer", sdp: o2 }));
            } catch (e4) {
              NE.warning("restart ICE failed, abort operation", e4);
            } finally {
              t2();
            }
          })();
        }
        close() {
          var e3;
          null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, "closed"), this.unbindPCEvents(), this.unbindStatsEvents(), this.removeAllListeners(), this.transportEventReceiver = void 0, this.statsFilter.destroy();
        }
        getStats() {
          return this.statsFilter.getStats();
        }
        getRemoteVideoIsReady(e3) {
          return this.statsFilter.getVideoIsReady(e3);
        }
        async updateEncoderConfig(e3, t2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.updateEncoderConfig before remote SDP created.");
            const i2 = await this.peerConnection.createOffer(), r2 = this.mungSendOfferSDP(i2.sdp, [t2], [e3]);
            this.remoteSDP.updateRecvMedia(e3, t2);
            const n2 = this.remoteSDP.toString(), o2 = this.logSDPExchange(r2, "offer", "local", "updateEncoderConfig");
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: r2 }), null == o2 || o2(n2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
          } catch (e4) {
            throw new vE(TE.EXCHANGE_SDP_FAILED, e4.toString());
          }
        }
        async updateSendParameters(e3, t2) {
          const i2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid === e3);
          1 === i2.length && (this.isVP8Simulcast(t2) ? Qh() || await this.applySimulcastEncodings(i2, [t2]) : await this.applySendEncodings(i2, [t2]));
        }
        setStatsRemoteVideoIsReady(e3, t2) {
          this.statsFilter.setVideoIsReady2(e3, t2);
        }
        async replaceTrack(e3, t2) {
          const i2 = this.peerConnection.getTransceivers().find((e4) => e4.mid === t2);
          i2 && await i2.sender.replaceTrack(e3._mediaStreamTrack);
        }
        getP2PConnectionParams() {
          var e3;
          if (null === (e3 = this.peerConnection.currentLocalDescription) || void 0 === e3 || !e3.sdp || !this.localCapabilities)
            throw new Error();
          return eL(eL({}, PD(this.peerConnection.currentLocalDescription.sdp)), {}, { rtpCapabilities: this.localCapabilities });
        }
        bindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = () => {
            var e3;
            null === (e3 = this.onICEConnectionStateChange) || void 0 === e3 || e3.call(this, this.peerConnection.iceConnectionState);
          }, this.peerConnection.onconnectionstatechange = () => {
            var e3;
            null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, this.peerConnection.connectionState);
          }, this.peerConnection.onicecandidate = (e3) => {
            e3.candidate ? this.localCandidateCount += 1 : (this.peerConnection.onicecandidate = null, this.allCandidatesReceived = true, NE.debug("[pc-".concat(this.store.p2pId, "] local candidate count"), this.localCandidateCount));
          }, setTimeout(() => {
            this.allCandidatesReceived || (this.allCandidatesReceived = true, NE.debug("[pc-".concat(this.store.p2pId, "] onicecandidate timeout, local candidate count"), this.localCandidateCount));
          }, HE("CANDIDATE_TIMEOUT"));
        }
        unbindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = null, this.peerConnection.onconnectionstatechange = null, this.peerConnection.onsignalingstatechange = null, this.peerConnection.onicecandidateerror = null, this.peerConnection.onicecandidate = null, this.peerConnection.ontrack = null;
        }
        static resolvePCConfiguration(t2) {
          const i2 = { iceServers: [] };
          return t2.iceServers ? i2.iceServers = t2.iceServers : t2.turnServer && "off" !== t2.turnServer.mode && (xm(t2.turnServer.servers) ? i2.iceServers = t2.turnServer.servers : (i2.iceServers && i2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.servers)), HE("USE_TURN_SERVER_OF_GATEWAY") && i2.iceServers && t2.turnServer.serversFromGateway && i2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.serversFromGateway)), HE("FORCE_TURN_TCP") ? i2.iceTransportPolicy = "relay" : t2.turnServer.servers.concat(t2.turnServer.serversFromGateway || []).forEach((e3) => {
            e3.forceturn && (i2.iceTransportPolicy = "relay");
          }))), i2;
        }
        static turnServerConfigToIceServers(e3) {
          const t2 = [];
          return e3.forEach((e4) => {
            e4.security ? e4.tcpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turns:".concat(TR(e4.turnServerURL), ":").concat(e4.tcpport, "?transport=tcp") }) : (e4.udpport && !HE("FORCE_TURN_TCP") && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turn:".concat(e4.turnServerURL, ":").concat(e4.udpport, "?transport=udp") }), e4.tcpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turn:".concat(e4.turnServerURL, ":").concat(e4.tcpport, "?transport=tcp") }));
          }), t2;
        }
        async applySendEncodings(e3, t2) {
          try {
            if (!jg().supportSetRtpSenderParameters)
              return;
            if (e3.length !== t2.length)
              return;
            for (let c2 = 0; c2 < e3.length; c2++) {
              const d2 = e3[c2], u2 = t2[c2];
              if (u2 && u2 instanceof Ew) {
                var i2, r2;
                if (this.isVP8Simulcast(u2))
                  continue;
                const e4 = {}, t3 = {};
                switch (u2._optimizationMode) {
                  case "motion":
                    e4.degradationPreference = "maintain-framerate";
                    break;
                  case "detail":
                    e4.degradationPreference = "maintain-resolution";
                    break;
                  default:
                    e4.degradationPreference = "balanced";
                }
                var n2, o2, s2, a2;
                if (null !== (i2 = u2._encoderConfig) && void 0 !== i2 && i2.bitrateMax)
                  t3.maxBitrate = 1e3 * (null === (n2 = u2._encoderConfig) || void 0 === n2 ? void 0 : n2.bitrateMax);
                if (u2._hints.includes(lg.LOW_STREAM))
                  null !== (o2 = u2._encoderConfig) && void 0 !== o2 && o2.frameRate && (t3.maxFramerate = RR(u2._encoderConfig.frameRate)), null !== (s2 = u2._encoderConfig) && void 0 !== s2 && s2.scaleResolutionDownBy && (null === (a2 = u2._encoderConfig) || void 0 === a2 ? void 0 : a2.scaleResolutionDownBy) > 1 && (t3.scaleResolutionDownBy = u2._encoderConfig.scaleResolutionDownBy);
                if (HE("DSCP_TYPE") && ap()) {
                  const e5 = HE("DSCP_TYPE");
                  ["very-low", "low", "medium", "high"].includes(e5) && (t3.networkPriority = e5);
                }
                const c3 = d2.sender.getParameters(), l2 = null === (r2 = c3.encodings) || void 0 === r2 ? void 0 : r2[0];
                Qh() && !l2 && (e4.encodings = [t3]), l2 && Object.assign(l2, t3), Object.assign(c3, e4), await d2.sender.setParameters(c3);
              }
            }
          } catch (e4) {
            NE.debug("Apply RTPSendEncodings failed.");
          }
        }
        mungSendOfferSDP(e3, t2, i2) {
          const r2 = bD.exports.parse(e3);
          return t2.forEach((e4, t3) => {
            const n2 = i2[t3], o2 = r2.mediaDescriptions.find((e5) => e5.attributes.mid === n2);
            o2 && (UD(o2, e4), BD(o2, e4, this.store.codec));
          }), bD.exports.print(r2);
        }
        mungReceiveAnswerSDP(e3, t2, i2) {
          const r2 = bD.exports.parse(e3), n2 = r2.mediaDescriptions.find((e4) => e4.attributes.mid === t2);
          return n2 && i2 === yg.AUDIO && "audio" === n2.media.mediaType && KD(n2), bD.exports.print(r2);
        }
        bindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstVideoReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstAudioDecoded = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioDecoded) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoDecoded = (e3, t2, i2) => {
            var r2;
            null === (r2 = this.onFirstVideoDecoded) || void 0 === r2 || r2.call(this, e3, t2, i2);
          }, this.statsFilter.onSelectedLocalCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedLocalCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          }, this.statsFilter.onSelectedRemoteCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedRemoteCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          }, this.statsFilter.onFirstVideoDecodedTimeout = (e3) => {
            var t2;
            null === (t2 = this.onFirstVideoDecodedTimeout) || void 0 === t2 || t2.call(this, e3);
          };
        }
        unbindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = void 0, this.statsFilter.onFirstVideoReceived = void 0, this.statsFilter.onFirstAudioDecoded = void 0, this.statsFilter.onFirstVideoDecoded = void 0, this.statsFilter.onSelectedLocalCandidateChanged = void 0, this.statsFilter.onSelectedRemoteCandidateChanged = void 0, this.statsFilter.onFirstVideoDecodedTimeout = void 0;
        }
        async applySimulcastForFirefox(e3, t2) {
          if (e3.length === t2.length)
            for (let s2 = 0; s2 < e3.length; s2++) {
              var i2, r2, n2, o2;
              const a2 = e3[s2], c2 = t2[s2];
              if (c2 instanceof Ew && !c2._hints.includes(lg.LOW_STREAM) && null !== (i2 = c2._encoderConfig) && void 0 !== i2 && i2.bitrateMax && (null === (r2 = c2._encoderConfig) || void 0 === r2 ? void 0 : r2.bitrateMax) > 200 && null !== (n2 = c2._scalabiltyMode) && void 0 !== n2 && n2.numSpatialLayers && (null === (o2 = c2._scalabiltyMode) || void 0 === o2 ? void 0 : o2.numSpatialLayers) > 1 && "vp8" === this.store.codec) {
                const e4 = {}, t3 = { high: 1e3 * (c2._encoderConfig.bitrateMax - 50), medium: 5e4 };
                e4.encodings = [{ rid: "m", active: true, maxBitrate: t3.medium, scaleResolutionDownBy: 4 }, { rid: "h", active: true, maxBitrate: t3.high }];
                const i3 = a2.sender.getParameters();
                await a2.sender.setParameters(Object.assign(i3, e4));
              }
            }
        }
        async applySimulcastEncodings(e3, t2) {
          if (!Qh() && e3.length === t2.length)
            for (let i2 = 0; i2 < e3.length; i2++) {
              const r2 = t2[i2];
              if (r2 instanceof Ew && this.isVP8Simulcast(r2)) {
                const t3 = e3[i2], n2 = {}, o2 = { high: 1e3 * (r2._encoderConfig.bitrateMax - 50), medium: 5e4 };
                n2.encodings = [{ active: true, adaptivePtime: false, networkPriority: "high", priority: "high", maxBitrate: o2.high }, { active: true, adaptivePtime: false, networkPriority: "low", priority: "low", maxBitrate: o2.medium, scaleResolutionDownBy: 4 }];
                const s2 = t3.sender.getParameters();
                await t3.sender.setParameters(Object.assign(s2, n2));
              }
            }
        }
        isVP8Simulcast(e3) {
          var t2, i2, r2, n2;
          return !!(e3 instanceof Ew && HE("SIMULCAST") && "vp8" === this.store.codec && !e3._hints.includes(lg.LOW_STREAM) && null !== (t2 = e3._encoderConfig) && void 0 !== t2 && t2.bitrateMax && (null === (i2 = e3._encoderConfig) || void 0 === i2 ? void 0 : i2.bitrateMax) > 200 && null !== (r2 = e3._scalabiltyMode) && void 0 !== r2 && r2.numSpatialLayers && (null === (n2 = e3._scalabiltyMode) || void 0 === n2 ? void 0 : n2.numSpatialLayers) > 1);
        }
        logSDPExchange(e3, t2, i2, r2) {
          if (HE("SDP_LOGGING"))
            return NE.upload("exchanging ".concat(i2, " ").concat(t2, " SDP during NVExtentionsConnection.").concat(r2, "\n"), e3), "offer" === t2 ? (e4) => {
              this.logSDPExchange(e4, "answer", "local" === i2 ? "remote" : "local", r2);
            } : void 0;
        }
        async getRemoteSSRC(e3) {
          if (!this.remoteSDP)
            return;
          const t2 = this.remoteSDP.getSSRC(e3);
          return null == t2 ? void 0 : t2[0].ssrcId;
        }
      }).prototype, "connect", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "connect"), ZP.prototype), ZS(ZP.prototype, "updateRemoteConnect", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "updateRemoteConnect"), ZP.prototype), ZS(ZP.prototype, "receive", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "receive"), ZP.prototype), ZS(ZP.prototype, "batchReceive", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "batchReceive"), ZP.prototype), ZS(ZP.prototype, "stopReceiving", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "stopReceiving"), ZP.prototype), ZS(ZP.prototype, "muteRemote", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "muteRemote"), ZP.prototype), ZS(ZP.prototype, "unmuteRemote", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "unmuteRemote"), ZP.prototype), ZS(ZP.prototype, "muteLocal", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "muteLocal"), ZP.prototype), ZS(ZP.prototype, "unmuteLocal", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "unmuteLocal"), ZP.prototype), ZS(ZP.prototype, "close", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "close"), ZP.prototype), ZS(ZP.prototype, "updateEncoderConfig", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "updateEncoderConfig"), ZP.prototype), ZS(ZP.prototype, "updateSendParameters", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "updateSendParameters"), ZP.prototype), ZS(ZP.prototype, "replaceTrack", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "replaceTrack"), ZP.prototype), ZS(ZP.prototype, "getRemoteSSRC", [iL], Object.getOwnPropertyDescriptor(ZP.prototype, "getRemoteSSRC"), ZP.prototype), ZP);
      function iL(e2, t2, i2) {
        const r2 = e2[t2];
        if ("function" != typeof r2)
          throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("From NVExtentionsConnection.".concat(t2));
          try {
            for (var n2 = arguments.length, o2 = new Array(n2), s2 = 0; s2 < n2; s2++)
              o2[s2] = arguments[s2];
            return await r2.apply(this, o2);
          } finally {
            i3();
          }
        }, i2;
      }
      var rL;
      function nL(e2) {
        var t2, i2, r2, n2 = 2;
        for ("undefined" != typeof Symbol && (i2 = OD, r2 = Symbol.iterator); n2--; ) {
          if (i2 && null != (t2 = e2[i2]))
            return t2.call(e2);
          if (r2 && null != (t2 = e2[r2]))
            return new oL(t2.call(e2));
          i2 = "@@asyncIterator", r2 = "@@iterator";
        }
        throw new TypeError("Object is not async iterable");
      }
      function oL(e2) {
        function t2(e3) {
          if (Object(e3) !== e3)
            return Cl.reject(new TypeError(e3 + " is not an object."));
          var t3 = e3.done;
          return Cl.resolve(e3.value).then(function(e4) {
            return { value: e4, done: t3 };
          });
        }
        return (oL = function(e3) {
          this.s = e3, this.n = e3.next;
        }).prototype = { s: null, n: null, next: function() {
          return t2(this.n.apply(this.s, arguments));
        }, return: function(e3) {
          var i2 = this.s.return;
          return void 0 === i2 ? Cl.resolve({ value: e3, done: true }) : t2(i2.apply(this.s, arguments));
        }, throw: function(e3) {
          var i2 = this.s.return;
          return void 0 === i2 ? Cl.reject(e3) : t2(i2.apply(this.s, arguments));
        } }, new oL(e2);
      }
      let sL = (ZS((rL = class e2 extends xg {
        get currentLocalDescription() {
          return this.peerConnection.currentLocalDescription;
        }
        get currentRemoteDescription() {
          return this.peerConnection.currentRemoteDescription;
        }
        get peerConnectionState() {
          return this.peerConnection.connectionState;
        }
        get iceConnectionState() {
          return this.peerConnection.iceConnectionState;
        }
        constructor(t2, i2) {
          super(t2, i2), mp(this, "store", void 0), mp(this, "peerConnection", void 0), mp(this, "cname", void 0), mp(this, "mutex", new OT("DataChannelConnection-mutex")), mp(this, "dataChannel", void 0), mp(this, "_p2pConnection", void 0), mp(this, "_nvMedia", void 0), this.store = i2, this.store.dcId = this.store.dcId + 1, this.peerConnection = new RTCPeerConnection(e2.resolvePCConfiguration(t2), { optional: [{ googDscp: true }] }), this.dataChannel = this.peerConnection.createDataChannel("agora-signal", { ordered: false, maxPacketLifeTime: 50 }), this.dataChannel.binaryType = "arraybuffer", this._p2pConnection = new tL(t2, i2, this.peerConnection), this.bindPCEvents();
        }
        async establish() {
          var e3;
          const t2 = null === (e3 = this._nvMedia) || void 0 === e3 ? void 0 : e3.getLocalRtpCapabilities();
          return await this._p2pConnection.establish(t2);
        }
        getP2PConnectionParams() {
          return this._p2pConnection.getP2PConnectionParams();
        }
        async connect(e3, t2, i2, r2, n2, o2) {
          return this.cname = o2, await this._p2pConnection.connect(e3, t2, i2, r2, n2, o2), await new Cl((e4, t3) => {
            const r3 = setTimeout(() => {
              this.closeSignal(), t3(new vE(TE.DATACHANNEL_CONNECTION_TIMEOUT, "Datachannel connection timed out, candidates: ".concat(JSON.stringify(i2))));
            }, 2e3);
            this.dataChannel.onopen = () => {
              if ("open" === this.dataChannel.readyState)
                return clearTimeout(r3), void e4();
            }, this.dataChannel.onerror = (e5) => {
              this.closeSignal(), t3(e5);
            };
          }), { transmitter: this.dataChannel, close: this.closeSignal.bind(this) };
        }
        send(e3, t2, i2) {
          var r2 = this;
          return ID(function* () {
            const n2 = yield yD(r2.mutex.lock("From DataChannelConnection.send"));
            try {
              return yield* AD(nL(r2._p2pConnection.send(e3, t2, i2)), yD);
            } finally {
              n2();
            }
          })();
        }
        async stopSending(e3, t2) {
          return this._p2pConnection.stopSending(e3, t2);
        }
        async receive(e3, t2, i2, r2) {
          return this._nvMedia ? (NE.debug("[DataChannelConnection] receive ".concat(e3, " by DataChannel.")), await this._nvMedia.reveiveByRTCMedia(e3, t2, this.cname)) : (NE.debug("[DataChannelConnection] receive ".concat(e3, " by WebRTC.")), await this._p2pConnection.receive(e3, t2, i2, r2));
        }
        async batchReceive(e3) {
          return [...await this._p2pConnection.batchReceive(e3)];
        }
        async stopReceiving(e3) {
          return await this._p2pConnection.stopReceiving(e3);
        }
        async muteRemote(e3) {
          return await this._p2pConnection.muteRemote(e3);
        }
        async unmuteRemote(e3) {
          return await this._p2pConnection.unmuteRemote(e3);
        }
        async muteLocal(e3) {
          return await this._p2pConnection.muteLocal(e3);
        }
        async unmuteLocal(e3) {
          return await this._p2pConnection.unmuteLocal(e3);
        }
        restartICE() {
          var e3 = this;
          return ID(function* () {
            return yield* AD(nL(e3._p2pConnection.restartICE()), yD);
          })();
        }
        close() {
          var e3;
          null === (e3 = this._nvMedia) || void 0 === e3 || e3.close(), this._p2pConnection.close(), this.unbindConnectionEvents(this._p2pConnection);
        }
        getStats() {
          return this._p2pConnection.getStats();
        }
        getRemoteVideoIsReady(e3) {
          return this._p2pConnection.getRemoteVideoIsReady(e3);
        }
        updateRemoteConnect(e3) {
          var t2;
          null === (t2 = this._nvMedia) || void 0 === t2 || t2.setRemoteRtpCapabilities(e3), this._p2pConnection.updateRemoteConnect(e3);
        }
        async updateEncoderConfig(e3, t2) {
          return await this._p2pConnection.updateEncoderConfig(e3, t2);
        }
        async updateSendParameters(e3, t2) {
          return await this._p2pConnection.updateSendParameters(e3, t2);
        }
        setStatsRemoteVideoIsReady(e3, t2) {
          this._p2pConnection.setStatsRemoteVideoIsReady(e3, t2);
        }
        async replaceTrack(e3, t2) {
          return await this._p2pConnection.replaceTrack(e3, t2);
        }
        async getRemoteSSRC(e3) {
          return this._p2pConnection.getRemoteSSRC(e3);
        }
        logSDPExchange(e3, t2, i2, r2) {
          if (HE("SDP_LOGGING"))
            return NE.upload("exchanging ".concat(i2, " ").concat(t2, " SDP during DataChannelConnection.").concat(r2, "\n"), e3), "offer" === t2 ? (e4) => {
              this.logSDPExchange(e4, "answer", "local" === i2 ? "remote" : "local", r2);
            } : void 0;
        }
        static resolvePCConfiguration(t2) {
          const i2 = { iceServers: [] };
          return t2.iceServers ? i2.iceServers = t2.iceServers : t2.turnServer && "off" !== t2.turnServer.mode && (xm(t2.turnServer.servers) ? i2.iceServers = t2.turnServer.servers : (i2.iceServers && i2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.servers)), HE("USE_TURN_SERVER_OF_GATEWAY") && i2.iceServers && t2.turnServer.serversFromGateway && i2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.serversFromGateway)), HE("FORCE_TURN_TCP") ? i2.iceTransportPolicy = "relay" : t2.turnServer.servers.concat(t2.turnServer.serversFromGateway || []).forEach((e3) => {
            e3.forceturn && (i2.iceTransportPolicy = "relay");
          }))), i2;
        }
        static turnServerConfigToIceServers(e3) {
          const t2 = [];
          return e3.forEach((e4) => {
            e4.security ? e4.tcpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turns:".concat(TR(e4.turnServerURL), ":").concat(e4.tcpport, "?transport=tcp") }) : (e4.udpport && !HE("FORCE_TURN_TCP") && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turn:".concat(e4.turnServerURL, ":").concat(e4.udpport, "?transport=udp") }), e4.tcpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turn:".concat(e4.turnServerURL, ":").concat(e4.tcpport, "?transport=tcp") }));
          }), t2;
        }
        bindPCEvents() {
          this._p2pConnection.onICEConnectionStateChange = (e3) => {
            var t2;
            return null === (t2 = this.onICEConnectionStateChange) || void 0 === t2 ? void 0 : t2.call(this, e3);
          }, this._p2pConnection.onConnectionStateChange = (e3) => {
            var t2;
            return null === (t2 = this.onConnectionStateChange) || void 0 === t2 ? void 0 : t2.call(this, e3);
          }, this._p2pConnection.onDTLSTransportStateChange = (e3) => {
            var t2;
            return null === (t2 = this.onDTLSTransportStateChange) || void 0 === t2 ? void 0 : t2.call(this, e3);
          }, this._p2pConnection.onDTLSTransportError = (e3) => {
            var t2;
            return null === (t2 = this.onDTLSTransportError) || void 0 === t2 ? void 0 : t2.call(this, e3);
          }, this._p2pConnection.onICETransportStateChange = (e3) => {
            var t2;
            return null === (t2 = this.onICETransportStateChange) || void 0 === t2 ? void 0 : t2.call(this, e3);
          }, this._p2pConnection.onFirstAudioReceived = (e3) => {
            var t2;
            return null === (t2 = this.onFirstAudioReceived) || void 0 === t2 ? void 0 : t2.call(this, e3);
          }, this._p2pConnection.onFirstVideoReceived = (e3) => {
            var t2;
            return null === (t2 = this.onFirstVideoReceived) || void 0 === t2 ? void 0 : t2.call(this, e3);
          }, this._p2pConnection.onFirstAudioDecoded = (e3) => {
            var t2;
            return null === (t2 = this.onFirstAudioDecoded) || void 0 === t2 ? void 0 : t2.call(this, e3);
          }, this._p2pConnection.onFirstVideoDecoded = (e3, t2, i2) => {
            var r2;
            return null === (r2 = this.onFirstVideoDecoded) || void 0 === r2 ? void 0 : r2.call(this, e3, t2, i2);
          }, this._p2pConnection.onFirstVideoDecodedTimeout = (e3) => {
            var t2;
            return null === (t2 = this.onFirstVideoDecodedTimeout) || void 0 === t2 ? void 0 : t2.call(this, e3);
          }, this._p2pConnection.onSelectedLocalCandidateChanged = (e3, t2) => {
            var i2;
            return null === (i2 = this.onSelectedLocalCandidateChanged) || void 0 === i2 ? void 0 : i2.call(this, e3, t2);
          }, this._p2pConnection.onSelectedRemoteCandidateChanged = (e3, t2) => {
            var i2;
            return null === (i2 = this.onSelectedRemoteCandidateChanged) || void 0 === i2 ? void 0 : i2.call(this, e3, t2);
          };
        }
        closeSignal() {
          this.dataChannel.close(), this.peerConnection.close();
        }
        unbindConnectionEvents(e3) {
          e3.onConnectionStateChange = void 0, e3.onICEConnectionStateChange = void 0, e3.onICETransportStateChange = void 0, e3.onDTLSTransportStateChange = void 0, e3.onDTLSTransportError = void 0, e3.onFirstAudioDecoded = void 0, e3.onFirstAudioReceived = void 0, e3.onFirstVideoDecoded = void 0, e3.onFirstVideoReceived = void 0, e3.onSelectedLocalCandidateChanged = void 0, e3.onSelectedRemoteCandidateChanged = void 0, e3.onFirstVideoDecodedTimeout = void 0;
        }
      }).prototype, "connect", [aL], Object.getOwnPropertyDescriptor(rL.prototype, "connect"), rL.prototype), ZS(rL.prototype, "receive", [aL], Object.getOwnPropertyDescriptor(rL.prototype, "receive"), rL.prototype), ZS(rL.prototype, "stopReceiving", [aL], Object.getOwnPropertyDescriptor(rL.prototype, "stopReceiving"), rL.prototype), ZS(rL.prototype, "muteRemote", [aL], Object.getOwnPropertyDescriptor(rL.prototype, "muteRemote"), rL.prototype), ZS(rL.prototype, "unmuteRemote", [aL], Object.getOwnPropertyDescriptor(rL.prototype, "unmuteRemote"), rL.prototype), ZS(rL.prototype, "muteLocal", [aL], Object.getOwnPropertyDescriptor(rL.prototype, "muteLocal"), rL.prototype), ZS(rL.prototype, "unmuteLocal", [aL], Object.getOwnPropertyDescriptor(rL.prototype, "unmuteLocal"), rL.prototype), ZS(rL.prototype, "close", [aL], Object.getOwnPropertyDescriptor(rL.prototype, "close"), rL.prototype), ZS(rL.prototype, "updateEncoderConfig", [aL], Object.getOwnPropertyDescriptor(rL.prototype, "updateEncoderConfig"), rL.prototype), ZS(rL.prototype, "updateSendParameters", [aL], Object.getOwnPropertyDescriptor(rL.prototype, "updateSendParameters"), rL.prototype), ZS(rL.prototype, "replaceTrack", [aL], Object.getOwnPropertyDescriptor(rL.prototype, "replaceTrack"), rL.prototype), ZS(rL.prototype, "getRemoteSSRC", [aL], Object.getOwnPropertyDescriptor(rL.prototype, "getRemoteSSRC"), rL.prototype), rL);
      function aL(e2, t2, i2) {
        const r2 = e2[t2];
        if ("function" != typeof r2)
          throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("From DataChannelConnection.".concat(t2));
          try {
            for (var n2 = arguments.length, o2 = new Array(n2), s2 = 0; s2 < n2; s2++)
              o2[s2] = arguments[s2];
            return await r2.apply(this, o2);
          } finally {
            i3();
          }
        }, i2;
      }
      var cL;
      function dL(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function uL(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? dL(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : dL(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function lL(e2) {
        var t2, i2, r2, n2 = 2;
        for ("undefined" != typeof Symbol && (i2 = OD, r2 = Symbol.iterator); n2--; ) {
          if (i2 && null != (t2 = e2[i2]))
            return t2.call(e2);
          if (r2 && null != (t2 = e2[r2]))
            return new hL(t2.call(e2));
          i2 = "@@asyncIterator", r2 = "@@iterator";
        }
        throw new TypeError("Object is not async iterable");
      }
      function hL(e2) {
        function t2(e3) {
          if (Object(e3) !== e3)
            return Cl.reject(new TypeError(e3 + " is not an object."));
          var t3 = e3.done;
          return Cl.resolve(e3.value).then(function(e4) {
            return { value: e4, done: t3 };
          });
        }
        return (hL = function(e3) {
          this.s = e3, this.n = e3.next;
        }).prototype = { s: null, n: null, next: function() {
          return t2(this.n.apply(this.s, arguments));
        }, return: function(e3) {
          var i2 = this.s.return;
          return void 0 === i2 ? Cl.resolve({ value: e3, done: true }) : t2(i2.apply(this.s, arguments));
        }, throw: function(e3) {
          var i2 = this.s.return;
          return void 0 === i2 ? Cl.reject(e3) : t2(i2.apply(this.s, arguments));
        } }, new hL(e2);
      }
      let pL = (ZS((cL = class extends gE {
        get state() {
          return this._state;
        }
        set state(e2) {
          const t2 = this._state;
          this._state = e2, this.emit(Og.StateChange, t2, this._state);
        }
        constructor(e2, t2) {
          super(), mp(this, "store", void 0), mp(this, "statsUploader", void 0), mp(this, "connection", void 0), mp(this, "localTrackMap", /* @__PURE__ */ new Map()), mp(this, "remoteUserMap", /* @__PURE__ */ new Map()), mp(this, "pendingLocalTracks", []), mp(this, "pendingRemoteTracks", []), mp(this, "statsCollector", void 0), mp(this, "isPlanB", false), mp(this, "iceFailedCount", 0), mp(this, "dtlsFailedCount", 0), mp(this, "mutex", new OT("P2PChannel-mutex")), mp(this, "_state", Ag.Disconnected), mp(this, "handleMuteLocalTrack", async (e3, t3, i2) => {
            const r2 = await this.mutex.lock("Locking from P2PChannel.handleMuteLocalTrack");
            try {
              if (!this.connection || this.state !== Ag.Connected)
                return void i2(new vE(TE.INVALID_OPERATION, "Cannot call P2PChannel.handleMuteLocalTrack before connection established."));
              const n2 = this.filterTobeMutedTracks(e3);
              if (0 === n2.length)
                return void t3();
              const o2 = n2.find((e4) => "videoLowTrack" === e4[0]);
              if (o2) {
                o2[1].track._originMediaStreamTrack.stop();
              }
              await this.connection.muteLocal(n2.map((e4) => {
                let [, { id: t4 }] = e4;
                return t4;
              }));
              const s2 = this.createMuteMessage(n2);
              await BR(this, Og.RequestMuteLocal, s2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              r2();
            }
          }), mp(this, "handleUnmuteLocalTrack", async (e3, t3, i2) => {
            const r2 = await this.mutex.lock("Locking from P2PChannel.handleUnmuteLocalTrack");
            try {
              if (!this.connection || this.state !== Ag.Connected)
                return void i2(new vE(TE.INVALID_OPERATION, "Cannot call P2PChannel.handleUnmuteLocalTrack before connection established."));
              const n2 = this.filterTobeUnmutedTracks(e3);
              if (0 === n2.length)
                return void t3();
              const o2 = n2.find((e4) => "videoLowTrack" === e4[0]);
              if (o2) {
                const t4 = o2[1];
                if (t4.track._originMediaStreamTrack.stop(), jg().supportDualStreamEncoding) {
                  const i3 = e3._mediaStreamTrack.clone();
                  t4.track._mediaStreamTrack = i3, t4.track._originMediaStreamTrack = i3;
                } else {
                  const i3 = AP(e3, WR(this, Og.RequestLowStreamParameter));
                  t4.track._mediaStreamTrack = i3, t4.track._originMediaStreamTrack = i3;
                }
                await new Cl((e4, i3) => {
                  this.handleReplaceTrack(t4.track, e4, i3, true);
                });
              }
              await this.connection.unmuteLocal(n2.map((e4) => {
                let [, { id: t4 }] = e4;
                return t4;
              }));
              const s2 = this.createUnmuteMessage(n2);
              await BR(this, Og.RequestUnmuteLocal, s2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              r2();
            }
          }), mp(this, "handleUpdateVideoEncoder", async (e3, t3, i2) => {
            const r2 = await this.mutex.lock("Locking from P2PChannel.handleSetVideoEncoder");
            try {
              const i3 = this.localTrackMap.get(Cg.LocalVideoTrack);
              if (!this.connection || !i3 || i3.track !== e3 || this.state !== Ag.Connected)
                return void t3();
              const { id: n2, track: o2 } = i3;
              await this.connection.updateSendParameters(n2, o2), await this.connection.updateEncoderConfig(n2, o2), this.emit(Og.UpdateVideoEncoder, o2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              r2();
            }
          }), mp(this, "handleSetOptimizationMode", async (e3, t3, i2) => {
            const r2 = await this.mutex.lock("Locking from P2PChannel.handleSetOptimizationMode");
            try {
              const i3 = this.localTrackMap.get(Cg.LocalVideoTrack);
              if (!this.connection || !i3 || i3.track !== e3 || this.state !== Ag.Connected)
                return;
              const { id: n2, track: o2 } = i3;
              await this.connection.updateSendParameters(n2, o2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              r2();
            }
          }), mp(this, "handleReplaceTrack", async (e3, t3, i2, r2) => {
            let n2;
            NE.debug("P2PChannel handleReplaceTrack for [track-id-".concat(e3.getTrackId(), "]")), "boolean" == typeof r2 && r2 || (n2 = await this.mutex.lock("From P2PChannel.handleReplaceTrack"));
            try {
              var o2;
              const i3 = Array.from(this.localTrackMap.entries()).find((t4) => {
                let [, { track: i4 }] = t4;
                return e3 === i4;
              });
              if (!this.connection || !i3 || this.state !== Ag.Connected)
                return void t3();
              if (await (null === (o2 = this.connection) || void 0 === o2 ? void 0 : o2.replaceTrack(e3, i3[1].id)), this.isPlanB) {
                const t4 = i3[1];
                t4.id = e3._mediaStreamTrack.id, this.localTrackMap.set(i3[0], t4);
              }
              if (i3[0] === Cg.LocalVideoTrack && jg().supportDualStreamEncoding) {
                const t4 = this.localTrackMap.get(Cg.LocalVideoLowTrack);
                if (t4) {
                  const i4 = e3._mediaStreamTrack.clone();
                  t4.track._originMediaStreamTrack.stop(), t4.track._mediaStreamTrack = i4, t4.track._originMediaStreamTrack = i4, await new Cl((e4, i5) => {
                    this.handleReplaceTrack(t4.track, e4, i5, true);
                  });
                }
              }
              t3();
            } catch (e4) {
              i2(e4);
            } finally {
              var s2;
              null === (s2 = n2) || void 0 === s2 || s2();
            }
          }), mp(this, "handleGetLocalVideoStats", (e3) => {
            e3(this.statsCollector.getLocalVideoTrackStats());
          }), mp(this, "handleGetLocalAudioStats", (e3) => {
            e3(this.statsCollector.getLocalAudioTrackStats());
          }), mp(this, "handleGetRemoteVideoStats", (e3) => this.statsCollector.getRemoteVideoTrackStats(e3.uid)[e3.uid]), mp(this, "handleGetRemoteAudioStats", (e3) => this.statsCollector.getRemoteAudioTrackStats(e3.uid)[e3.uid]), this.store = e2, this.statsCollector = t2, this.statsCollector.addP2PChannel(this), this.statsUploader = new YP(), this.bindStatsUploaderEvents(), this.isPlanB = !jg().supportUnifiedPlan || HE("CHROME_FORCE_PLAN_B") && ap();
        }
        async startP2PConnection(e2, t2) {
          return this.state = Ag.New, this.connection = t2 ? new sL(e2, this.store) : this.isPlanB ? new fP(e2, this.store) : new yP(e2, this.store), this.bindConnectionEvents(this.connection), this.connection.establish();
        }
        async connect(e2, t2, i2, r2, n2, o2) {
          if (!this.connection)
            throw new vE(TE.UNEXPECTED_ERROR, "Cannot P2PChannel.connect before P2PChannel.startP2PConnection .");
          this.connection instanceof sL ? this.connection.updateRemoteConnect(r2) : (this.store.peerConnectionStart(), await this.connection.connect(e2, t2, i2, r2, n2, o2), this.statsUploader.startUploadTransportStats(), this.statsUploader.startUploadExtensionUsageStats(), this.state = Ag.Connected);
        }
        async preConnect(e2, t2, i2, r2, n2, o2) {
          if (!this.connection)
            throw new vE(TE.UNEXPECTED_ERROR, "Cannot P2PChannel.connect before P2PChannel.startP2PConnection .");
          this.store.peerConnectionStart();
          const s2 = await this.connection.connect(e2, t2, i2, r2, n2, o2);
          return this.statsUploader.startUploadTransportStats(), this.statsUploader.startUploadExtensionUsageStats(), this.state = Ag.Connected, s2;
        }
        getEstablishParams() {
          if (this.connection instanceof sL)
            return this.connection.getP2PConnectionParams();
          throw new Error("Only DataChannelConnection needs to obtain establishParams");
        }
        publish(e2, t2, i2) {
          var r2 = this;
          return ID(function* () {
            const n2 = yield yD(r2.mutex.lock("From P2PChannel.publish"));
            try {
              if (!r2.connection || r2.state !== Ag.Connected) {
                if (r2.state === Ag.Disconnected)
                  throw new vE(TE.UNEXPECTED_ERROR, "PeerConnection already disconnected.");
                r2.throwIfTrackTypeNotMatch(e2);
                const t3 = e2.filter((e3) => -1 === r2.pendingLocalTracks.indexOf(e3));
                return void (r2.pendingLocalTracks = r2.pendingLocalTracks.concat(t3));
              }
              r2.store.pubId = r2.store.pubId + 1, pR.markPublishStart(r2.store.clientId, r2.store.pubId);
              const o2 = r2.filterTobePublishedTracks(e2, t2, i2);
              if (0 === o2.length)
                return void (yield yD(r2.tryToUnmuteAudio(e2)));
              yield* AD(lL(r2.doPublish(r2.connection, o2)), yD);
            } finally {
              n2();
            }
          })();
        }
        doPublish(e2, t2) {
          var i2 = this;
          return ID(function* () {
            t2.forEach((e3) => {
              let { track: t3, type: r3 } = e3;
              const n3 = Date.now();
              i2.store.publish(t3.getTrackId(), r3 === Cg.LocalAudioTrack ? "audio" : "video", n3);
            }), i2.bindLocalTrackEvents(t2);
            const r2 = yield yD(e2.send(t2.map((e3) => {
              let { track: t3 } = e3;
              return t3;
            }), i2.store.codec, i2.store.audioCodec)), n2 = (yield yD(r2.next())).value, o2 = i2.createGatewayPublishMessage(t2, n2);
            let s2;
            try {
              s2 = yield o2;
            } catch (e3) {
              throw r2.throw(e3), (null == e3 ? void 0 : e3.code) === TE.WS_ABORT && t2.forEach((e4) => {
                let { track: t3 } = e4;
                -1 === i2.pendingLocalTracks.indexOf(t3) && i2.pendingLocalTracks.push(t3);
              }), i2.unbindLocalTrackEvents(t2), e3;
            }
            const a2 = i2.mapPubResToRemoteConfig(o2, s2), c2 = (yield yD(r2.next(a2))).value;
            t2.forEach((e3) => {
              let { type: t3 } = e3;
              i2.statsCollector.addLocalStats(t3);
            }), i2.assignLocalTracks(t2, c2), i2.statsUploader.startUploadUplinkStats(), t2.forEach((e3) => {
              let { track: t3, type: r3 } = e3;
              const n3 = Date.now();
              i2.store.publish(t3.getTrackId(), r3 === Cg.LocalAudioTrack ? "audio" : "video", void 0, n3);
            });
          })();
        }
        publishLowStream(e2) {
          var t2 = this;
          return ID(function* () {
            if (!t2.connection || t2.state !== Ag.Connected)
              return;
            const i2 = yield yD(t2.mutex.lock("Locking from P2PChannel.publishLowStream"));
            try {
              const n2 = t2.localTrackMap.get(Cg.LocalVideoTrack);
              if (!n2)
                throw new vE(TE.UNEXPECTED_ERROR, "Could not find high stream");
              if (t2.localTrackMap.has(Cg.LocalVideoLowTrack))
                throw new vE(TE.UNEXPECTED_ERROR, "[".concat(t2.store.clientId, "] Can't publish low stream when stream already publish"));
              const o2 = [{ track: t2.getLowVideoTrack(n2.track, e2), type: Cg.LocalVideoLowTrack }];
              if (yield* AD(lL(t2.doPublish(t2.connection, o2)), yD), n2.track.muted || !n2.track.enabled) {
                var r2;
                const e3 = null === (r2 = t2.localTrackMap.get(Cg.LocalVideoLowTrack)) || void 0 === r2 ? void 0 : r2.id;
                void 0 !== e3 && (yield yD(t2.connection.muteLocal([e3])));
              }
            } finally {
              i2();
            }
          })();
        }
        async republish() {
          this.pendingLocalTracks.length > 0 && (NE.debug("Emit P2PChannelEvents.RequestRePublish to republish tracks."), await FR(this, Og.RequestRePublish, this.pendingLocalTracks), this.emit(Og.MediaReconnectEnd, this.store.uid), this.pendingLocalTracks = []);
        }
        async reSubscribe(e2) {
          for (let e3 = this.pendingRemoteTracks.length - 1; e3 >= 0; e3--) {
            const { user: t2, kind: i2 } = this.pendingRemoteTracks[e3];
            (i2 !== yg.AUDIO || t2._audio_added_ && t2._audioSSRC) && (i2 !== yg.VIDEO || t2._video_added_ && t2._videoSSRC) || this.pendingRemoteTracks.splice(e3, 1);
          }
          if (e2)
            await FR(this, Og.RequestReSubscribe, this.pendingRemoteTracks);
          else
            for (const { user: e3, kind: t2 } of this.pendingRemoteTracks)
              await this.subscribe(e3, t2, t2 === yg.VIDEO ? e3._videoSSRC : e3._audioSSRC);
          this.pendingRemoteTracks.forEach((e3) => {
            let { user: t2 } = e3;
            this.emit(Og.MediaReconnectEnd, t2.uid);
          }), this.pendingRemoteTracks = [];
        }
        async unpublish(e2) {
          if (!this.connection || this.state !== Ag.Connected)
            return void e2.forEach((e3) => {
              const t3 = this.pendingLocalTracks.indexOf(e3);
              -1 !== t3 && this.pendingLocalTracks.splice(t3, 1);
            });
          const t2 = this.filterTobeUnpublishedTracks(e2);
          if (0 === t2.length)
            return;
          const i2 = t2.find((e3) => "videoLowTrack" === e3[0]);
          if (i2) {
            i2[1].track.close();
          }
          return this.doUnpublish(this.connection, t2);
        }
        async unpublishLowStream() {
          if (!this.connection || this.state !== Ag.Connected)
            return;
          const e2 = this.localTrackMap.get(Cg.LocalVideoLowTrack);
          if (!e2)
            return;
          e2.track.close();
          const t2 = [[Cg.LocalVideoLowTrack, e2]];
          return this.doUnpublish(this.connection, t2);
        }
        async doUnpublish(e2, t2) {
          const i2 = this.createGatewayUnpublishMessage(t2);
          return await e2.stopSending(t2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          })), this.withdrawLocalTracks(t2), this.unbindLocalTrackEvents(t2.map((e3) => {
            let [t3, { track: i3 }] = e3;
            return { type: t3, track: i3 };
          })), t2.forEach((e3) => {
            let [t3] = e3;
            this.statsCollector.removeLocalStats(t3);
          }), 0 === this.localTrackMap.size && this.statsUploader.stopUploadUplinkStats(), i2;
        }
        async subscribe(e2, t2, i2, r2, n2) {
          var o2;
          if (!this.connection || this.state !== Ag.Connected)
            throw new vE(TE.INVALID_OPERATION, "Cannot subscribe remote user when peerConnection disconnected.");
          if (null !== (o2 = this.remoteUserMap.get(e2)) && void 0 !== o2 && o2.has(t2))
            return;
          let s2, a2;
          if (n2) {
            const i3 = n2.find((e3) => {
              let { stream_type: i4 } = e3;
              return i4 === t2;
            });
            if (!i3)
              throw new vE(TE.UNEXPECTED_ERROR, "Cannot subscribe to remote ".concat(t2, " for user: ").concat(e2.uid, " because subscribe answer from gateway does not contain stream_type: ").concat(t2, "."));
            const r3 = await this.connection.receive(t2, i3.ssrcs, String(e2._uintid), i3.attributes);
            s2 = r3.track, a2 = r3.id;
          } else {
            const n3 = await this.connection.receive(t2, [{ ssrcId: i2, rtx: r2 }], String(e2._uintid), void 0);
            s2 = n3.track, a2 = n3.id;
          }
          t2 === yg.AUDIO ? (e2._audioTrack ? e2._audioTrack._updateOriginMediaStreamTrack(s2) : (e2._audioTrack = new WP(s2, e2.uid, e2._uintid, this.store), NE.info("[".concat(this.store.p2pId, "] create remote audio track: ").concat(e2._audioTrack.getTrackId()))), this.bindRemoteTrackEvents(e2, e2._audioTrack)) : (e2._videoTrack ? e2._videoTrack._updateOriginMediaStreamTrack(s2) : (e2._videoTrack = new GP(s2, e2.uid, e2._uintid, this.store), NE.info("[".concat(this.store.p2pId, "] create remote video track: ").concat(e2._videoTrack.getTrackId()))), this.bindRemoteTrackEvents(e2, e2._videoTrack));
          const c2 = this.remoteUserMap.get(e2);
          c2 ? c2.set(t2, a2) : this.remoteUserMap.set(e2, /* @__PURE__ */ new Map([[t2, a2]])), this.statsCollector.addRemoteStats(e2.uid), this.statsUploader.startUploadDownlinkStats();
          const d2 = this.pendingRemoteTracks.findIndex((i3) => {
            let { user: r3, kind: n3 } = i3;
            return r3.uid === e2.uid && t2 === n3;
          });
          -1 !== d2 && (this.pendingRemoteTracks.splice(d2, 1), this.emit(Og.MediaReconnectEnd, e2.uid));
        }
        async massSubscribe(e2) {
          return this.massSubscribeNoLock(e2);
        }
        async massSubscribeNoLock(e2) {
          if (!this.connection || this.state !== Ag.Connected)
            throw new vE(TE.INVALID_OPERATION, "Cannot subscribeAll remote users when peerConnection disconnected.");
          e2 = e2.filter((e3) => {
            var t3;
            let { user: i2, mediaType: r2 } = e3;
            return !(null !== (t3 = this.remoteUserMap.get(i2)) && void 0 !== t3 && t3.has(r2));
          });
          const t2 = await this.connection.batchReceive(e2.map((e3) => {
            let { user: t3, mediaType: i2, ssrcId: r2, rtxSsrcId: n2 } = e3;
            return { kind: i2, ssrcMsg: [{ ssrcId: r2, rtx: n2 }], mslabel: String(t3._uintid) };
          }));
          e2.forEach((e3, i2) => {
            let { user: r2, mediaType: n2 } = e3;
            const { track: o2, id: s2 } = t2[i2];
            n2 === yg.AUDIO ? (r2._audioTrack ? r2._audioTrack._updateOriginMediaStreamTrack(o2) : (r2._audioTrack = new WP(o2, r2.uid, r2._uintid, this.store), NE.info("[".concat(this.store.p2pId, "] create remote audio track: ").concat(r2._audioTrack.getTrackId()))), this.bindRemoteTrackEvents(r2, r2._audioTrack)) : (r2._videoTrack ? r2._videoTrack._updateOriginMediaStreamTrack(o2) : (r2._videoTrack = new GP(o2, r2.uid, r2._uintid, this.store), NE.info("[".concat(this.store.p2pId, "] create remote video track: ").concat(r2._videoTrack.getTrackId()))), this.bindRemoteTrackEvents(r2, r2._videoTrack));
            const a2 = this.remoteUserMap.get(r2);
            a2 ? a2.set(n2, s2) : this.remoteUserMap.set(r2, /* @__PURE__ */ new Map([[n2, s2]])), this.statsCollector.addRemoteStats(r2.uid), this.statsUploader.startUploadDownlinkStats();
            const c2 = this.pendingRemoteTracks.findIndex((e4) => {
              let { user: t3, kind: i3 } = e4;
              return t3.uid === r2.uid && n2 === i3;
            });
            -1 !== c2 && (this.pendingRemoteTracks.splice(c2, 1), this.emit(Og.MediaReconnectEnd, r2.uid));
          });
        }
        async unsubscribe(e2, t2, i2) {
          const r2 = this.pendingRemoteTracks.filter((i3) => {
            let { user: r3, kind: n3 } = i3;
            return void 0 !== t2 ? r3.uid === e2.uid && t2 === n3 : r3.uid === e2.uid;
          });
          if (r2.forEach((e3) => {
            const t3 = this.pendingRemoteTracks.indexOf(e3);
            this.pendingRemoteTracks.splice(t3, 1);
          }), this.connection || i2 || r2.forEach((t3) => {
            let { kind: i3 } = t3;
            var r3;
            if (i3 === yg.AUDIO)
              null === (r3 = e2._audioTrack) || void 0 === r3 || r3._destroy(), e2._audioTrack = void 0;
            else if (i3 === yg.VIDEO) {
              var n3;
              null === (n3 = e2._videoTrack) || void 0 === n3 || n3._destroy(), e2._videoTrack = void 0;
            }
          }), !this.connection)
            return;
          const n2 = this.filterTobeUnSubscribedTracks(e2, t2);
          if (0 === n2.length)
            return;
          await this.connection.stopReceiving(n2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          }));
          const o2 = this.createUnsubscribeMessage(n2);
          return this.withdrawRemoteTracks(n2), 0 === this.remoteUserMap.size && this.statsUploader.stopUploadDownlinkStats(), n2.forEach((e3) => {
            let [t3, { kind: r3 }] = e3;
            var n3, o3;
            r3 === yg.VIDEO && t3._videoSSRC && (null === (n3 = this.connection) || void 0 === n3 || n3.setStatsRemoteVideoIsReady(t3._videoSSRC, false));
            if (r3 === yg.VIDEO)
              this.unbindRemoteTrackEvents(t3._videoTrack), i2 || (null === (o3 = t3._videoTrack) || void 0 === o3 || o3._destroy(), t3._videoTrack = void 0);
            else if (r3 === yg.AUDIO) {
              var s2;
              if (this.unbindRemoteTrackEvents(t3._audioTrack), !i2)
                null === (s2 = t3._audioTrack) || void 0 === s2 || s2._destroy(), t3._audioTrack = void 0;
            }
          }), o2;
        }
        async massUnsubscribe(e2) {
          return this.massUnsubscribeNoLock(e2);
        }
        async massUnsubscribeNoLock(e2) {
          let t2 = [];
          for (const { user: i3, mediaType: r3 } of e2) {
            const e3 = this.pendingRemoteTracks.filter((e4) => {
              let { user: t3, kind: n2 } = e4;
              return void 0 !== r3 ? t3.uid === i3.uid && r3 === n2 : t3.uid === i3.uid;
            });
            e3.forEach((e4) => {
              const t3 = this.pendingRemoteTracks.indexOf(e4);
              this.pendingRemoteTracks.splice(t3, 1);
            }), t2 = t2.concat(e3);
          }
          if (!this.connection)
            return void t2.forEach((e3) => {
              let { user: t3, kind: i3 } = e3;
              var r3;
              if (i3 === yg.AUDIO)
                null === (r3 = t3._audioTrack) || void 0 === r3 || r3._destroy(), t3._audioTrack = void 0;
              else if (i3 === yg.VIDEO) {
                var n2;
                null === (n2 = t3._videoTrack) || void 0 === n2 || n2._destroy(), t3._videoTrack = void 0;
              }
            });
          const i2 = zi(e2).call(e2, (e3, t3) => {
            let { user: i3, mediaType: r3 } = t3;
            const n2 = this.filterTobeUnSubscribedTracks(i3, r3);
            return e3.concat(n2);
          }, []);
          if (0 === i2.length)
            return;
          await this.connection.stopReceiving(i2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          }));
          const r2 = this.createUnsubscribeAllMessage(i2);
          return this.withdrawRemoteTracks(i2), 0 === this.remoteUserMap.size && this.statsUploader.stopUploadDownlinkStats(), i2.forEach((e3) => {
            let [t3, { kind: i3 }] = e3;
            var r3, n2;
            i3 === yg.VIDEO && t3._videoSSRC && (null === (r3 = this.connection) || void 0 === r3 || r3.setStatsRemoteVideoIsReady(t3._videoSSRC, false));
            if (i3 === yg.VIDEO)
              this.unbindRemoteTrackEvents(t3._videoTrack), null === (n2 = t3._videoTrack) || void 0 === n2 || n2._destroy(), t3._videoTrack = void 0;
            else if (i3 === yg.AUDIO) {
              var o2;
              this.unbindRemoteTrackEvents(t3._audioTrack), null === (o2 = t3._audioTrack) || void 0 === o2 || o2._destroy(), t3._audioTrack = void 0;
            }
          }), r2;
        }
        async muteRemote(e2, t2) {
          if (!this.connection)
            return;
          const i2 = this.remoteUserMap.get(e2);
          if (!i2)
            return void NE.warning("P2PChannel.muteRemote has no remote user ".concat(e2.uid, "."));
          if (!i2.get(t2))
            return void NE.warning("P2PChannel.muteRemote has no remote user ".concat(e2.uid, " media type ").concat(t2, "."));
          const r2 = t2 === yg.VIDEO ? e2._videoSSRC : e2._audioSSRC;
          void 0 !== r2 && this.connection.setStatsRemoteVideoIsReady(r2, false);
        }
        async unmuteRemote(e2, t2) {
          return this.unmuteRemoteNoLock(e2, t2);
        }
        async unmuteRemoteNoLock(e2, t2) {
          if (!this.connection)
            return;
          const i2 = this.remoteUserMap.get(e2);
          if (!i2)
            return void NE.warning("P2PChannel.unmuteRemote has no remote user ".concat(e2.uid, "."));
          i2.get(t2) || NE.warning("P2PChannel.unmuteRemote has no remote user ".concat(e2.uid, " media type ").concat(t2, "."));
        }
        getAllTracks(e2) {
          const t2 = this.localTrackMap.get(Cg.LocalAudioTrack);
          if ((null == t2 ? void 0 : t2.track) instanceof uR) {
            const i2 = t2.track;
            return Array.from(this.localTrackMap.entries()).filter((e3) => {
              let [t3] = e3;
              return t3 !== Cg.LocalAudioTrack;
            }).filter((t3) => {
              let [i3] = t3;
              return !(e2 && i3 === Cg.LocalVideoLowTrack);
            }).map((e3) => {
              let [, { track: t3 }] = e3;
              return t3;
            }).concat(i2.trackList);
          }
          return Array.from(this.localTrackMap.entries()).filter((t3) => {
            let [i2] = t3;
            return !(e2 && i2 === Cg.LocalVideoLowTrack);
          }).map((e3) => {
            let [, { track: t3 }] = e3;
            return t3;
          });
        }
        reportPublishEvent(e2, t2, i2, r2, n2) {
          if (e2) {
            const i3 = this.localTrackMap.get(Cg.LocalAudioTrack), o3 = r2 ? this.localTrackMap.get(Cg.LocalVideoLowTrack) : this.localTrackMap.get(Cg.LocalVideoTrack);
            IT.publish(this.store.sessionId, { eventElapse: pR.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: e2, ec: t2, audioName: null == i3 ? void 0 : i3.track.getTrackLabel(), videoName: null == o3 ? void 0 : o3.track.getTrackLabel(), screenshare: -1 !== (null == o3 ? void 0 : o3.track._hints.indexOf(lg.SCREEN_TRACK)), audio: !!i3, video: !!o3, p2pid: this.store.p2pId, publishRequestid: this.store.pubId, extend: n2 });
          } else {
            var o2;
            i2 || (i2 = []);
            const s2 = i2.find((e3) => e3 instanceof aR), a2 = r2 ? null === (o2 = this.localTrackMap.get(Cg.LocalVideoTrack)) || void 0 === o2 ? void 0 : o2.track : i2.find((e3) => e3 instanceof Ew);
            IT.publish(this.store.sessionId, { eventElapse: pR.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: e2, ec: t2, audioName: null == s2 ? void 0 : s2.getTrackLabel(), videoName: null == a2 ? void 0 : a2.getTrackLabel(), screenshare: -1 !== (null == a2 ? void 0 : a2._hints.indexOf(lg.SCREEN_TRACK)), audio: !!s2, video: !!a2, p2pid: this.store.p2pId, publishRequestid: this.store.pubId, extend: n2 });
          }
        }
        reportSubscribeEvent(e2, t2, i2, r2) {
          const n2 = r2 === yg.VIDEO ? i2._videoSSRC : i2._audioSSRC;
          n2 && IT.subscribe(this.store.sessionId, { succ: e2, ec: t2, video: r2 === yg.VIDEO, audio: r2 === yg.AUDIO, peerid: i2.uid, subscribeRequestid: r2 === yg.VIDEO ? i2._videoSSRC : i2._audioSSRC, p2pid: this.store.p2pId, eventElapse: pR.measureFromSubscribeStart(this.store.clientId, n2) });
        }
        reset() {
          NE.debug("P2PChannel.reset"), this.mutex = new OT("P2PChannel-mutex"), this.connection && (this.connection.close(), this.unbindConnectionEvents(this.connection), this.connection = void 0), this.statsUploader.stopUploadUplinkStats(), this.statsUploader.stopUploadDownlinkStats(), this.statsUploader.stopUploadTransportStats(), this.statsUploader.stopUploadExtensionUsageStats(), this.unbindLocalTrackEvents(), this.unbindAllRemoteTrackEvents(), this.localTrackMap.clear(), this.remoteUserMap.clear(), this.statsCollector.removeRemoteStats(), this.statsCollector.removeLocalStats(), this.iceFailedCount = 0, this.dtlsFailedCount = 0, this.pendingLocalTracks = [], this.pendingRemoteTracks = [], this.state = Ag.Disconnected;
        }
        getStats() {
          var e2;
          return null === (e2 = this.connection) || void 0 === e2 ? void 0 : e2.getStats();
        }
        getRemoteVideoIsReady(e2) {
          var t2;
          return (null === (t2 = this.connection) || void 0 === t2 ? void 0 : t2.getRemoteVideoIsReady(e2)) || false;
        }
        getLocalAudioVolume() {
          const e2 = this.localTrackMap.get(Cg.LocalAudioTrack);
          if (e2)
            return e2.track.getVolumeLevel();
        }
        getLocalVideoSize() {
          const e2 = this.localTrackMap.get(Cg.LocalVideoTrack);
          if (e2)
            return { width: e2.track._videoWidth || 0, height: e2.track._videoHeight || 0 };
        }
        getEncoderConfig(e2) {
          const t2 = this.localTrackMap.get(e2);
          return t2 && t2.track instanceof Ew || t2 && t2.track instanceof aR ? t2.track._encoderConfig : void 0;
        }
        getLocalMedia(e2) {
          return this.localTrackMap.get(e2);
        }
        hasLocalMedia() {
          return this.localTrackMap.size > 0;
        }
        hasRemoteMedia(e2, t2) {
          if (!e2)
            return this.remoteUserMap.size > 0;
          const i2 = this.remoteUserMap.get(e2);
          return !!i2 && (!t2 || i2.has(t2));
        }
        async hasRemoteMediaWithLock(e2, t2) {
          if (!e2)
            return this.remoteUserMap.size > 0;
          const i2 = this.remoteUserMap.get(e2);
          return !!i2 && (!t2 || i2.has(t2));
        }
        getRemoteMedia(e2) {
          var t2;
          const i2 = Array.from(sT(t2 = this.remoteUserMap).call(t2)).find((t3) => t3.uid === e2);
          return i2 ? { audioTrack: i2.audioTrack, audioSSRC: i2._audioSSRC, videoTrack: i2.videoTrack, videoSSRC: i2._videoSSRC } : {};
        }
        getAudioLevels() {
          let e2 = Array.from(this.remoteUserMap.entries()).map((e3) => {
            let [t3] = e3;
            return { uid: t3.uid, level: t3.audioTrack ? 100 * t3.audioTrack._source.getAccurateVolumeLevel() : 0 };
          });
          const t2 = this.localTrackMap.get(Cg.LocalAudioTrack);
          return t2 && e2.push({ level: 100 * t2.track._source.getAccurateVolumeLevel(), uid: this.store.uid }), e2 = Yf(e2).call(e2, (e3, t3) => e3.level - t3.level), e2;
        }
        async disconnectForReconnect() {
          this.connection && (NE.debug("P2PChannel.disconnectForReconnect closing P2PConnection"), this.state = Ag.Reconnecting, this.connection.close(), this.unbindConnectionEvents(this.connection), this.connection = void 0, 0 !== this.localTrackMap.size && (Array.from(this.localTrackMap.entries()).forEach((e2) => {
            let [t2, { track: i2 }] = e2;
            switch (t2) {
              case Cg.LocalVideoTrack:
                i2._hints.includes(lg.LOW_STREAM) ? i2.close() : this.pendingLocalTracks.push(i2);
                break;
              case Cg.LocalAudioTrack:
                i2 instanceof uR ? this.pendingLocalTracks = this.pendingLocalTracks.concat(i2.trackList) : this.pendingLocalTracks.push(i2);
                break;
              case Cg.LocalVideoLowTrack:
            }
          }), this.emit(Og.MediaReconnectStart, this.store.uid)), this.unbindLocalTrackEvents(), this.localTrackMap.clear(), 0 !== this.remoteUserMap.size && Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            Array.from(sT(i2).call(i2)).forEach((e3) => {
              this.setPendingRemoteMedia(t2, e3);
            }), this.emit(Og.MediaReconnectStart, t2.uid);
          }), this.unbindAllRemoteTrackEvents(), this.remoteUserMap.clear(), this.statsUploader.stopUploadUplinkStats(), this.statsUploader.stopUploadDownlinkStats(), this.statsUploader.stopUploadTransportStats(), NE.debug("P2PChannel disconnected, waiting to reconnect."));
        }
        hasPendingRemoteMedia(e2, t2) {
          for (const i2 of this.pendingRemoteTracks) {
            const { user: r2, kind: n2 } = i2;
            if ((e2 instanceof mw ? e2.uid : e2) === r2.uid && t2 === n2)
              return true;
          }
          return false;
        }
        setPendingRemoteMedia(e2, t2) {
          this.hasPendingRemoteMedia(e2, t2) || this.pendingRemoteTracks.push({ user: e2, kind: t2 });
        }
        restartICE() {
          var e2 = this;
          return ID(function* () {
            if (!e2.connection)
              throw new Error();
            const t2 = yield yD(e2.mutex.lock("From P2PChannel.restartICE"));
            try {
              yield* AD(lL(e2.connection.restartICE()), yD);
            } finally {
              t2();
            }
          })();
        }
        getUplinkNetworkQuality() {
          if (!this.connection)
            return 0;
          const e2 = this.connection.getStats(), t2 = this.localTrackMap.get(Cg.LocalVideoTrack), i2 = this.localTrackMap.get(Cg.LocalAudioTrack), r2 = e2.videoSend.find((e3) => e3.ssrc === (null == t2 ? void 0 : t2.ssrcs[0].ssrcId)), n2 = e2.audioSend.find((e3) => e3.ssrc === (null == i2 ? void 0 : i2.ssrcs[0].ssrcId));
          if (!r2 || !n2)
            return 1;
          const o2 = GR(this, Og.NeedSignalRTT), s2 = r2 ? r2.rttMs : void 0, a2 = n2 ? n2.rttMs : void 0, c2 = s2 && a2 ? (s2 + a2) / 2 : s2 || a2, d2 = (c2 && o2 ? (c2 + o2) / 2 : c2 || o2) || 0, u2 = 100 * e2.sendPacketLossRate * 0.7 / 50 + 0.3 * d2 / 1500, l2 = u2 < 0.17 ? 1 : u2 < 0.36 ? 2 : u2 < 0.59 ? 3 : u2 < 0.1 ? 4 : 5, h2 = null == t2 ? void 0 : t2.track;
          if (h2 && h2._encoderConfig && -1 === h2._hints.indexOf(lg.SCREEN_TRACK)) {
            const t3 = h2._encoderConfig.bitrateMax, i3 = e2.bitrate.actualEncoded;
            if (t3 && i3) {
              const e3 = (1e3 * t3 - i3) / (1e3 * t3);
              return QE[e3 < 0.15 ? 0 : e3 < 0.3 ? 1 : e3 < 0.45 ? 2 : e3 < 0.6 ? 3 : 4][l2];
            }
          }
          return l2;
        }
        getDownlinkNetworkQuality() {
          if (!this.connection)
            return 0;
          const e2 = this.connection.getStats();
          let t2 = 0;
          return Array.from(this.remoteUserMap.entries()).forEach((i2) => {
            let [r2] = i2;
            const n2 = r2._audioSSRC, o2 = r2._videoSSRC, s2 = e2.audioRecv.find((e3) => e3.ssrc === n2), a2 = e2.videoRecv.find((e3) => e3.ssrc === o2);
            if (!s2 && !a2)
              return void (t2 += 1);
            const c2 = GR(this, Og.NeedSignalRTT), d2 = e2.rtt, u2 = (d2 && c2 ? (d2 + c2) / 2 : d2 || c2) || 0, l2 = s2 ? s2.jitterMs : void 0, h2 = e2.recvPacketLossRate;
            let p2 = 0.7 * h2 * 100 / 50 + 0.3 * u2 / 1500;
            l2 && (p2 = 0.6 * h2 * 100 / 50 + 0.2 * u2 / 1500 + 0.2 * l2 / 400);
            t2 += p2 < 0.1 ? 1 : p2 < 0.17 ? 2 : p2 < 0.36 ? 3 : p2 < 0.59 ? 4 : 5;
          }), this.remoteUserMap.size > 0 ? Math.round(t2 / this.remoteUserMap.size) : t2;
        }
        async muteLocalTrack(e2) {
          return new Cl((t2, i2) => {
            this.handleMuteLocalTrack(e2, t2, i2);
          });
        }
        filterTobePublishedTracks(e2, t2, i2) {
          const r2 = [], n2 = jg(), o2 = this.getAllTracks();
          e2 = KR(e2 = e2.filter((e3) => -1 === o2.indexOf(e3)));
          let s2 = false, a2 = false;
          for (const o3 of e2) {
            if (o3 instanceof Ew && (this.localTrackMap.has(Cg.LocalVideoTrack) || s2 ? new vE(TE.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS).throw() : (r2.push({ track: o3, type: Cg.LocalVideoTrack }), s2 = true), t2)) {
              const e3 = this.getLowVideoTrack(o3, i2);
              r2.push({ track: e3, type: Cg.LocalVideoLowTrack });
            }
            if (o3 instanceof aR) {
              const e3 = this.localTrackMap.get(Cg.LocalAudioTrack);
              if (e3) {
                if (!(e3.track instanceof uR))
                  throw new vE(TE.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser does not support audio mixing");
                if (o3._bypassWebAudio)
                  throw new vE(TE.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio");
                e3.track.addAudioTrack(o3), this.bindLocalAudioTrackEvents(o3, true);
              } else if (a2) {
                const e4 = r2.find((e5) => {
                  let { type: t3 } = e5;
                  return t3 === Cg.LocalAudioTrack;
                });
                if (!(e4.track instanceof uR))
                  throw new vE(TE.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser does not support audio mixing");
                if (o3._bypassWebAudio)
                  throw new vE(TE.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio");
                e4.track.addAudioTrack(o3);
              } else {
                if (!n2.webAudioMediaStreamDest || o3 instanceof uR || o3._bypassWebAudio)
                  r2.push({ track: o3, type: Cg.LocalAudioTrack });
                else {
                  const e4 = new uR();
                  e4.addAudioTrack(o3), r2.push({ track: e4, type: Cg.LocalAudioTrack });
                }
                a2 = true;
              }
            }
          }
          return r2;
        }
        filterTobeUnpublishedTracks(e2) {
          const t2 = [], i2 = this.getAllTracks();
          e2 = KR(e2 = e2.filter((e3) => -1 !== i2.indexOf(e3)));
          for (const i3 of e2) {
            if (i3 instanceof aR) {
              const e3 = this.localTrackMap.get(Cg.LocalAudioTrack);
              if (!e3)
                continue;
              e3.track instanceof uR ? (e3.track.removeAudioTrack(i3), this.unbindLocalAudioTrackEvents(i3), 0 === e3.track.trackList.length && (t2.push([Cg.LocalAudioTrack, e3]), e3.track.close())) : t2.push([Cg.LocalAudioTrack, e3]);
            }
            if (i3 instanceof Ew) {
              const e3 = this.localTrackMap.get(Cg.LocalVideoTrack);
              if (!e3)
                continue;
              t2.push([Cg.LocalVideoTrack, e3]);
              const i4 = this.localTrackMap.get(Cg.LocalVideoLowTrack);
              i4 && t2.push([Cg.LocalVideoLowTrack, i4]);
            }
          }
          return t2;
        }
        bindLocalTrackEvents(e2) {
          e2.forEach((e3) => {
            let { track: t2, type: i2 } = e3;
            switch (i2) {
              case Cg.LocalVideoTrack:
                t2.addListener(ug.GET_STATS, this.handleGetLocalVideoStats), t2.addListener(ug.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), t2.addListener(ug.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), t2.addListener(ug.NEED_UPDATE_VIDEO_ENCODER, this.handleUpdateVideoEncoder), t2.addListener(ug.SET_OPTIMIZATION_MODE, this.handleSetOptimizationMode), t2.addListener(ug.NEED_REPLACE_TRACK, this.handleReplaceTrack), t2.addListener(ug.NEED_MUTE_TRACK, this.handleMuteLocalTrack), t2.addListener(ug.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
                break;
              case Cg.LocalAudioTrack:
                this.bindLocalAudioTrackEvents(t2);
                break;
              case Cg.LocalVideoLowTrack:
            }
          });
        }
        bindLocalAudioTrackEvents(e2, t2) {
          e2 instanceof uR ? e2.trackList.forEach((e3) => {
            e3.addListener(ug.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e3.addListener(ug.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e3.addListener(ug.GET_STATS, this.handleGetLocalAudioStats), e3.addListener(ug.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e3.addListener(ug.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
          }) : (e2.addListener(ug.GET_STATS, this.handleGetLocalAudioStats), e2.addListener(ug.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e2.addListener(ug.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e2.addListener(ug.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e2.addListener(ug.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack), t2 || e2.addListener(ug.NEED_REPLACE_TRACK, this.handleReplaceTrack));
        }
        unbindLocalTrackEvents(e2) {
          e2 || (e2 = Array.from(this.localTrackMap.entries()).map((e3) => {
            let [t2, { track: i2 }] = e3;
            return { track: i2, type: t2 };
          })), e2.forEach((e3) => {
            let { track: t2, type: i2 } = e3;
            switch (i2) {
              case Cg.LocalVideoTrack:
                t2.off(ug.GET_STATS, this.handleGetLocalVideoStats), t2.off(ug.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), t2.off(ug.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), t2.off(ug.NEED_UPDATE_VIDEO_ENCODER, this.handleUpdateVideoEncoder), t2.off(ug.SET_OPTIMIZATION_MODE, this.handleSetOptimizationMode), t2.off(ug.NEED_REPLACE_TRACK, this.handleReplaceTrack), t2.off(ug.NEED_MUTE_TRACK, this.handleMuteLocalTrack), t2.off(ug.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
                break;
              case Cg.LocalAudioTrack:
                this.unbindLocalAudioTrackEvents(t2);
                break;
              case Cg.LocalVideoLowTrack:
            }
          });
        }
        unbindLocalAudioTrackEvents(e2) {
          e2 instanceof uR ? e2.trackList.forEach((e3) => {
            e3.off(ug.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e3.off(ug.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e3.off(ug.GET_STATS, this.handleGetLocalAudioStats), e3.off(ug.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e3.off(ug.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
          }) : (e2.off(ug.GET_STATS, this.handleGetLocalAudioStats), e2.off(ug.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e2.off(ug.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e2.off(ug.NEED_REPLACE_TRACK, this.handleReplaceTrack), e2.off(ug.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e2.off(ug.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack));
        }
        bindRemoteTrackEvents(e2, t2) {
          t2 instanceof GP && t2.addListener(ug.GET_STATS, (t3) => {
            t3(this.handleGetRemoteVideoStats(e2));
          }), t2 instanceof WP && t2.addListener(ug.GET_STATS, (t3) => {
            t3(this.handleGetRemoteAudioStats(e2));
          });
        }
        unbindRemoteTrackEvents(e2) {
          e2 && e2.removeAllListeners(ug.GET_STATS);
        }
        unbindAllRemoteTrackEvents() {
          Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            i2.has(yg.AUDIO) && this.unbindRemoteTrackEvents(t2._audioTrack), i2.has(yg.VIDEO) && this.unbindRemoteTrackEvents(t2._videoTrack);
          });
        }
        createGatewayPublishMessage(e2, t2) {
          return e2.map((e3, i2) => {
            let r2, n2, { track: o2, type: s2 } = e3;
            switch (s2) {
              case Cg.LocalAudioTrack:
                r2 = ag.Audio, n2 = { dtx: o2 instanceof cR && o2._config.DTX, hq: false, lq: false, stereo: false, speech: false };
                break;
              case Cg.LocalVideoTrack:
                r2 = o2._hints.includes(lg.SCREEN_TRACK) ? ag.Screen : ag.High, n2 = uL(uL({}, IR(o2)), {}, { codec: this.store.codec });
                break;
              case Cg.LocalVideoLowTrack:
                r2 = ag.Low, n2 = uL(uL({}, IR(o2)), {}, { codec: this.store.codec });
            }
            return { stream_type: r2, attributes: n2, ssrcs: t2[i2] };
          });
        }
        createGatewayUnpublishMessage(e2) {
          return e2.map((e3) => {
            let t2, [i2, { track: r2, ssrcs: n2, id: o2 }] = e3;
            switch (i2) {
              case Cg.LocalVideoTrack:
                t2 = r2._hints.includes(lg.SCREEN_TRACK) ? ag.Screen : ag.High;
                break;
              case Cg.LocalAudioTrack:
                t2 = ag.Audio;
                break;
              case Cg.LocalVideoLowTrack:
                t2 = ag.Low;
            }
            return { stream_type: t2, ssrcs: n2, mid: o2 };
          });
        }
        assignLocalTracks(e2, t2) {
          e2.forEach((e3, i2) => {
            let { track: r2, type: n2 } = e3;
            this.localTrackMap.set(n2, { track: r2, id: t2[i2].id, ssrcs: t2[i2].localSSRC });
          });
        }
        withdrawLocalTracks(e2) {
          e2.forEach((e3) => {
            let [t2] = e3;
            this.localTrackMap.delete(t2);
          });
        }
        bindConnectionEvents(e2) {
          e2.onConnectionStateChange = async (t2) => {
            if (NE.info("[p2pId: ".concat(this.store.p2pId, "]: P2PConnection.onConnectionStateChange(").concat(t2, ")")), this.emit(Og.PeerConnectionStateChange, t2), "connected" !== t2 || this.store.keyMetrics.peerConnectionEnd || this.store.peerConnectionEnd(), "disconnected" === t2 && "disconnected" === e2.iceConnectionState)
              return setTimeout(() => {
                if ("disconnected" === e2.iceConnectionState && HE("ICE_RESTART")) {
                  "CONNECTED" === GR(this, Og.QueryClientConnectionState) && this.emit(Og.RequestRestartICE);
                }
              }, 800), void setTimeout(() => {
                "disconnected" === e2.peerConnectionState && (NE.debug("P2PConnection disconnected timeout 4000ms, force reconnect"), setTimeout(() => this.emit(Og.P2PLost), 0), this.iceFailedCount += 1, this.requestReconnect());
              }, 4e3);
            "failed" === t2 && (NE.debug("P2PConnection state failed, force reconnect"), setTimeout(() => this.emit(Og.P2PLost), 0), this.iceFailedCount += 1, await this.requestReconnect());
          }, e2.onICEConnectionStateChange = (e3) => {
            "connected" !== e3 || this.store.keyMetrics.iceConnectionEnd || this.store.iceConnectionEnd(), NE.info("[p2pId: ".concat(this.store.p2pId, "]: P2PConnection.onICEConnectionStateChange(").concat(e3, ")")), IT.reportApiInvoke(this.store.sessionId, { name: "ICEConnectionStateChange", options: e3, tag: fm.TRACER }).onSuccess(), this.emit(Og.IceConnectionStateChange, e3);
          }, e2.onICETransportStateChange = (e3) => {
            NE.info("[p2pId: ".concat(this.store.p2pId, "]: P2PConnection.onICETransportStateChange(").concat(e3, ")"));
          }, e2.onDTLSTransportStateChange = (e3) => {
            NE.info("[p2pId: ".concat(this.store.p2pId, "]: P2PConnection.onDTLSTransportStateChange(").concat(e3, ")"));
          }, e2.onDTLSTransportError = (e3) => {
            NE.info("[p2pId: ".concat(this.store.p2pId, "]: P2PConnection.onDTLSTransportError(").concat(e3, ")"));
          }, e2.onFirstAudioDecoded = (e3) => {
            var t2;
            const i2 = Array.from(sT(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._audioSSRC === e3);
            var r2;
            i2 && (this.store.subscribe(i2.uid, "audio", void 0, void 0, void 0, Date.now()), null === (r2 = i2.audioTrack) || void 0 === r2 || r2.emit(Eg.FIRST_FRAME_DECODED), IT.firstRemoteFrame(this.store.sessionId, lm.FIRST_AUDIO_DECODE, hm.FIRST_AUDIO_DECODE, { peer: i2._uintid, subscribeElapse: pR.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId }));
          }, e2.onFirstAudioReceived = (e3) => {
            var t2;
            const i2 = Array.from(sT(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._audioSSRC === e3);
            i2 && IT.firstRemoteFrame(this.store.sessionId, lm.FIRST_AUDIO_RECEIVED, hm.FIRST_AUDIO_RECEIVED, { peer: i2._uintid, subscribeElapse: pR.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId });
          }, e2.onFirstVideoDecoded = (e3, t2, i2) => {
            this.reportVideoFirstFrameDecoded(e3, t2, i2);
          }, e2.onFirstVideoReceived = (e3) => {
            var t2;
            const i2 = Array.from(sT(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._videoSSRC === e3);
            i2 && IT.firstRemoteFrame(this.store.sessionId, lm.FIRST_VIDEO_RECEIVED, hm.FIRST_VIDEO_RECEIVED, { peer: i2._uintid, subscribeElapse: pR.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId });
          }, e2.onSelectedLocalCandidateChanged = (e3, t2) => {
            const i2 = "relay" === e3.candidateType, r2 = "relay" === t2.candidateType;
            "unknown" !== t2.candidateType && i2 === r2 || this.emit(Og.ConnectionTypeChange, i2), NE.info("[p2pId: ".concat(this.store.p2pId, "]: P2PConnection.SelectedLocalCandidateChanged(").concat(JSON.stringify(wR(t2)), " -> ").concat(JSON.stringify(wR(e3)), ")"));
          }, e2.onSelectedRemoteCandidateChanged = (e3, t2) => {
            NE.info("[p2pId: ".concat(this.store.p2pId, "]: P2PConnection.SelectedRemoteCandidateChanged(").concat(JSON.stringify(wR(t2)), " -> ").concat(JSON.stringify(wR(e3)), ")"));
          }, e2.onFirstVideoDecodedTimeout = (e3) => {
            this.reportVideoFirstFrameDecoded(e3, void 0, void 0, true);
          };
        }
        unbindConnectionEvents(e2) {
          e2.onConnectionStateChange = void 0, e2.onICEConnectionStateChange = void 0, e2.onICETransportStateChange = void 0, e2.onDTLSTransportStateChange = void 0, e2.onDTLSTransportError = void 0, e2.onFirstAudioDecoded = void 0, e2.onFirstAudioReceived = void 0, e2.onFirstVideoDecoded = void 0, e2.onFirstVideoReceived = void 0, e2.onSelectedLocalCandidateChanged = void 0, e2.onSelectedRemoteCandidateChanged = void 0, e2.onFirstVideoDecodedTimeout = void 0;
        }
        filterTobeMutedTracks(e2) {
          const t2 = [];
          if (-1 === this.getAllTracks().indexOf(e2))
            return t2;
          const i2 = this.localTrackMap.get(Cg.LocalAudioTrack);
          if (e2 instanceof aR && (null == i2 ? void 0 : i2.track) instanceof uR)
            return i2.track.isActive || t2.push([Cg.LocalAudioTrack, i2]), t2;
          const r2 = Array.from(this.localTrackMap.entries()).find((t3) => {
            let [, { track: i3 }] = t3;
            return e2 === i3;
          });
          if (r2 && (t2.push(r2), r2[0] === Cg.LocalVideoTrack)) {
            const e3 = this.localTrackMap.get(Cg.LocalVideoLowTrack);
            e3 && t2.push([Cg.LocalVideoLowTrack, e3]);
          }
          return t2;
        }
        filterTobeUnmutedTracks(e2) {
          const t2 = [], i2 = this.localTrackMap.get(Cg.LocalAudioTrack);
          if (e2 instanceof aR && (null == i2 ? void 0 : i2.track) instanceof uR)
            return i2.track.isActive && t2.push([Cg.LocalAudioTrack, i2]), t2;
          const r2 = Array.from(this.localTrackMap.entries()).find((t3) => {
            let [, { track: i3 }] = t3;
            return e2 === i3;
          });
          if (r2)
            if (r2[0] === Cg.LocalVideoTrack) {
              t2.push(r2);
              const e3 = this.localTrackMap.get(Cg.LocalVideoLowTrack);
              e3 && t2.push([Cg.LocalVideoLowTrack, e3]);
            } else
              t2.push(r2);
          return t2;
        }
        createMuteMessage(e2) {
          return e2.map((e3) => {
            let t2, [i2, { track: r2, ssrcs: n2, id: o2 }] = e3;
            switch (i2) {
              case Cg.LocalAudioTrack:
                t2 = ag.Audio;
                break;
              case Cg.LocalVideoTrack:
                t2 = r2._hints.includes(lg.SCREEN_TRACK) ? ag.Screen : ag.High;
                break;
              case Cg.LocalVideoLowTrack:
                t2 = ag.Low;
            }
            return { stream_type: t2, ssrcs: n2, mid: o2 };
          });
        }
        createUnmuteMessage(e2) {
          return e2.map((e3) => {
            let t2, [i2, { track: r2, ssrcs: n2, id: o2 }] = e3;
            switch (i2) {
              case Cg.LocalAudioTrack:
                t2 = ag.Audio;
                break;
              case Cg.LocalVideoTrack:
                t2 = r2._hints.includes(lg.SCREEN_TRACK) ? ag.Screen : ag.High;
                break;
              case Cg.LocalVideoLowTrack:
                t2 = ag.Low;
            }
            return { stream_type: t2, ssrcs: n2, mid: o2 };
          });
        }
        filterTobeUnSubscribedTracks(e2, t2) {
          const i2 = [], r2 = this.remoteUserMap.get(e2);
          if (!r2)
            return i2;
          if (t2) {
            const n2 = r2.get(t2);
            if (!n2)
              return i2;
            i2.push([e2, { kind: t2, id: n2 }]);
          } else
            Array.from(r2.entries()).forEach((t3) => {
              let [r3, n2] = t3;
              i2.push([e2, { kind: r3, id: n2 }]);
            });
          return i2;
        }
        createUnsubscribeMessage(e2) {
          const t2 = [];
          return e2.forEach((e3) => {
            let [i2, { kind: r2, id: n2 }] = e3;
            switch (r2) {
              case yg.VIDEO:
                return void (i2._videoSSRC && t2.push({ stream_type: yg.VIDEO, ssrcId: i2._videoSSRC }));
              case yg.AUDIO:
                return void (i2._audioSSRC && t2.push({ stream_type: yg.AUDIO, ssrcId: i2._audioSSRC }));
            }
          }), t2;
        }
        createUnsubscribeAllMessage(e2) {
          const t2 = /* @__PURE__ */ new Map();
          return e2.forEach((e3) => {
            let [i2, { kind: r2 }] = e3;
            if (t2.has(i2)) {
              let e4 = t2.get(i2);
              r2 === yg.VIDEO ? e4 |= dg.Video : e4 |= dg.Audio, t2.set(i2, e4);
            } else
              r2 === yg.VIDEO ? t2.set(i2, dg.Video) : t2.set(i2, dg.Audio);
          }), { users: Array.from(t2.entries()).map((e3) => {
            let [t3, i2] = e3;
            return { stream_id: t3.uid, stream_type: i2 };
          }) };
        }
        withdrawRemoteTracks(e2) {
          e2.forEach((e3) => {
            let [t2, { kind: i2 }] = e3;
            const r2 = this.remoteUserMap.get(t2);
            r2 && (r2.delete(i2), 0 === Array.from(r2.entries()).length && this.remoteUserMap.delete(t2));
          });
        }
        async updateBitrateLimit(e2) {
          const t2 = this.localTrackMap.get(Cg.LocalVideoTrack), i2 = this.localTrackMap.get(Cg.LocalVideoLowTrack);
          t2 && await t2.track.setBitrateLimit(e2.uplink), i2 && e2.low_stream_uplink && await i2.track.setBitrateLimit({ max_bitrate: e2.low_stream_uplink.bitrate, min_bitrate: e2.low_stream_uplink.bitrate || 0 });
        }
        isP2PDisconnected() {
          if (this.connection) {
            return "connected" !== this.connection.peerConnectionState;
          }
          return true;
        }
        mapPubResToRemoteConfig(e2, t2) {
          return e2.map((e3, i2) => {
            var r2;
            let { stream_type: n2 } = e3;
            return null === (r2 = t2.find((e4) => {
              let { stream_type: t3 } = e4;
              return n2 === t3;
            })) || void 0 === r2 ? void 0 : r2.attributes;
          });
        }
        async tryToUnmuteAudio(e2) {
          for (let i2 = 0; i2 < e2.length; i2++)
            if (e2[i2] instanceof aR) {
              var t2;
              const r2 = this.filterTobeUnmutedTracks(e2[i2]);
              if (0 === r2.length)
                continue;
              await (null === (t2 = this.connection) || void 0 === t2 ? void 0 : t2.unmuteLocal(r2.map((e3) => {
                let [, { id: t3 }] = e3;
                return t3;
              })));
              const n2 = this.createUnmuteMessage(r2);
              return void await BR(this, Og.RequestUnmuteLocal, n2);
            }
        }
        bindStatsUploaderEvents() {
          this.statsUploader.requestStats = () => this.getStats(), this.statsUploader.requestLocalMedia = () => Array.from(this.localTrackMap.entries()), this.statsUploader.requestRemoteMedia = () => Array.from(this.remoteUserMap.entries()), this.statsUploader.requestVideoIsReady = (e2) => {
            var t2;
            return !(null === (t2 = this.connection) || void 0 === t2 || !t2.getRemoteVideoIsReady(e2));
          }, this.statsUploader.requestUpload = (e2, t2) => this.emit(Og.RequestUploadStats, e2, t2), this.statsUploader.requestAllTracks = () => this.getAllTracks();
        }
        unbindStatsUploaderEvents() {
          this.statsUploader.requestStats = void 0, this.statsUploader.requestLocalMedia = void 0, this.statsUploader.requestRemoteMedia = void 0, this.statsUploader.requestVideoIsReady = void 0;
        }
        async requestReconnect() {
          this.dtlsFailedCount += 1, await LR(IE(this.dtlsFailedCount, RE)), this.emit(Og.RequestReconnect);
        }
        async reconnectP2P() {
          const e2 = Array.from(this.localTrackMap.entries()), t2 = this.createGatewayUnpublishMessage(e2);
          Array.from(this.remoteUserMap.entries()), t2.length > 0 && await FR(this, Og.RequestUnpublishForReconnectPC, t2), this.disconnectForReconnect(), this.emit(Og.RequestReconnectPC);
        }
        canPublishLowStream() {
          return this.localTrackMap.has(Cg.LocalVideoTrack) || this.pendingLocalTracks.some((e2) => e2 instanceof Ew);
        }
        throwIfTrackTypeNotMatch(e2) {
          if (e2.filter((e3) => e3 instanceof Ew).length > 1)
            throw new vE(TE.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS);
          if (e2.filter((e3) => e3 instanceof aR).length > 1 && (e2.some((e3) => e3 instanceof aR && e3._bypassWebAudio) || !jg().webAudioMediaStreamDest))
            throw new vE(TE.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser doesn't support MediaStreamDestNode");
          for (const t2 of e2) {
            if (t2 instanceof Ew && this.pendingLocalTracks.some((e3) => e3 instanceof Ew))
              throw new vE(TE.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS);
            if (t2 instanceof aR && this.pendingLocalTracks.some((e3) => e3 instanceof aR) && (!jg().webAudioMediaStreamDest || t2._bypassWebAudio || this.pendingLocalTracks.some((e3) => e3 instanceof aR && e3._bypassWebAudio)))
              throw new vE(TE.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser doesn't support MediaStreamDestNode");
          }
        }
        getLowVideoTrack(e2, t2) {
          const i2 = jg().supportDualStreamEncoding, r2 = uL(uL({}, { width: 160, height: 120, framerate: 15, bitrate: 50 }), t2);
          let n2;
          n2 = i2 ? e2._mediaStreamTrack.clone() : AP(e2, r2);
          const o2 = MR(8, "track-low-"), s2 = new Ew(n2, uL(uL({}, i2 && { scaleResolutionDownBy: bR(r2, e2) }), {}, { frameRate: r2.framerate, bitrateMax: r2.bitrate, bitrateMin: r2.bitrate }), void 0, void 0, o2);
          return s2._hints.push(lg.LOW_STREAM), e2.addListener(ug.NEED_CLOSE, () => {
            s2.close();
          }), s2;
        }
        async globalLock() {
          return this.mutex.lock("From P2PChannel.globalLock");
        }
        reportVideoFirstFrameDecoded(e2, t2, i2, r2) {
          var n2;
          const o2 = Array.from(sT(n2 = this.remoteUserMap).call(n2)).find((t3) => t3._videoSSRC === e2);
          if (o2) {
            r2 || this.store.subscribe(o2.uid, "video", void 0, void 0, void 0, void 0, Date.now());
            const n3 = this.store.keyMetrics, s2 = n3.subscribe.find((e3) => e3.userId === o2.uid && "video" === e3.type);
            IT.firstRemoteVideoDecode(this.store.sessionId, lm.FIRST_VIDEO_DECODE, hm.FIRST_VIDEO_DECODE, { peer: o2._uintid, videowidth: t2, videoheight: i2, subscribeElapse: pR.measureFromSubscribeStart(this.store.clientId, e2), subscribeRequestid: e2, p2pid: this.store.p2pId, apEnd: n3.requestAPEnd || 0, apStart: n3.requestAPStart || 0, joinGwEnd: n3.joinGatewayEnd || 0, joinGwStart: n3.joinGatewayStart || 0, pcEnd: n3.peerConnectionEnd || 0, pcStart: n3.peerConnectionStart || 0, subscriberEnd: (null == s2 ? void 0 : s2.subscribeEnd) || 0, subscriberStart: (null == s2 ? void 0 : s2.subscribeStart) || 0, videoAddNotify: (null == s2 ? void 0 : s2.streamAdded) || 0, state: r2 ? 1 : 0 });
          }
        }
        async remoteMediaSsrcChanged(e2, t2, i2) {
          if (!this.connection)
            return false;
          const r2 = this.remoteUserMap.get(e2);
          if (!r2)
            return false;
          const n2 = r2.get(t2);
          if (!n2)
            return false;
          const o2 = await this.connection.getRemoteSSRC(n2);
          return void 0 !== o2 && o2 !== i2;
        }
      }).prototype, "startP2PConnection", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "startP2PConnection"), cL.prototype), ZS(cL.prototype, "connect", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "connect"), cL.prototype), ZS(cL.prototype, "preConnect", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "preConnect"), cL.prototype), ZS(cL.prototype, "unpublish", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "unpublish"), cL.prototype), ZS(cL.prototype, "unpublishLowStream", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "unpublishLowStream"), cL.prototype), ZS(cL.prototype, "subscribe", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "subscribe"), cL.prototype), ZS(cL.prototype, "massSubscribe", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "massSubscribe"), cL.prototype), ZS(cL.prototype, "unsubscribe", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "unsubscribe"), cL.prototype), ZS(cL.prototype, "massUnsubscribe", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "massUnsubscribe"), cL.prototype), ZS(cL.prototype, "muteRemote", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "muteRemote"), cL.prototype), ZS(cL.prototype, "unmuteRemote", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "unmuteRemote"), cL.prototype), ZS(cL.prototype, "hasRemoteMediaWithLock", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "hasRemoteMediaWithLock"), cL.prototype), ZS(cL.prototype, "disconnectForReconnect", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "disconnectForReconnect"), cL.prototype), ZS(cL.prototype, "updateBitrateLimit", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "updateBitrateLimit"), cL.prototype), ZS(cL.prototype, "remoteMediaSsrcChanged", [_L], Object.getOwnPropertyDescriptor(cL.prototype, "remoteMediaSsrcChanged"), cL.prototype), cL);
      function _L(e2, t2, i2) {
        const r2 = e2[t2];
        if ("function" != typeof r2)
          throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("From P2PChannel.".concat(t2));
          try {
            for (var n2 = arguments.length, o2 = new Array(n2), s2 = 0; s2 < n2; s2++)
              o2[s2] = arguments[s2];
            return await r2.apply(this, o2);
          } finally {
            i3();
          }
        }, i2;
      }
      function EL(e2) {
        return "Minified Redux error #" + e2 + "; visit https://redux.js.org/Errors?code=" + e2 + " for the full message or use the non-minified dev environment for full errors. ";
      }
      var fL, mL = "function" == typeof Symbol && Symbol.observable || "@@observable", gL = function() {
        return Math.random().toString(36).substring(7).split("").join(".");
      }, SL = { INIT: "@@redux/INIT" + gL(), REPLACE: "@@redux/REPLACE" + gL(), PROBE_UNKNOWN_ACTION: function() {
        return "@@redux/PROBE_UNKNOWN_ACTION" + gL();
      } };
      function TL(e2) {
        if ("object" != typeof e2 || null === e2)
          return false;
        for (var t2 = e2; null !== Object.getPrototypeOf(t2); )
          t2 = Object.getPrototypeOf(t2);
        return Object.getPrototypeOf(e2) === t2;
      }
      function vL(e2, t2, i2) {
        var r2;
        if ("function" == typeof t2 && "function" == typeof i2 || "function" == typeof i2 && "function" == typeof arguments[3])
          throw new Error(EL(0));
        if ("function" == typeof t2 && void 0 === i2 && (i2 = t2, t2 = void 0), void 0 !== i2) {
          if ("function" != typeof i2)
            throw new Error(EL(1));
          return i2(vL)(e2, t2);
        }
        if ("function" != typeof e2)
          throw new Error(EL(2));
        var n2 = e2, o2 = t2, s2 = [], a2 = s2, c2 = false;
        function d2() {
          a2 === s2 && (a2 = s2.slice());
        }
        function u2() {
          if (c2)
            throw new Error(EL(3));
          return o2;
        }
        function l2(e3) {
          if ("function" != typeof e3)
            throw new Error(EL(4));
          if (c2)
            throw new Error(EL(5));
          var t3 = true;
          return d2(), a2.push(e3), function() {
            if (t3) {
              if (c2)
                throw new Error(EL(6));
              t3 = false, d2();
              var i3 = a2.indexOf(e3);
              a2.splice(i3, 1), s2 = null;
            }
          };
        }
        function h2(e3) {
          if (!TL(e3))
            throw new Error(EL(7));
          if (void 0 === e3.type)
            throw new Error(EL(8));
          if (c2)
            throw new Error(EL(9));
          try {
            c2 = true, o2 = n2(o2, e3);
          } finally {
            c2 = false;
          }
          for (var t3 = s2 = a2, i3 = 0; i3 < t3.length; i3++) {
            (0, t3[i3])();
          }
          return e3;
        }
        function p2(e3) {
          if ("function" != typeof e3)
            throw new Error(EL(10));
          n2 = e3, h2({ type: SL.REPLACE });
        }
        function _2() {
          var e3, t3 = l2;
          return (e3 = { subscribe: function(e4) {
            if ("object" != typeof e4 || null === e4)
              throw new Error(EL(11));
            function i3() {
              e4.next && e4.next(u2());
            }
            return i3(), { unsubscribe: t3(i3) };
          } })[mL] = function() {
            return this;
          }, e3;
        }
        return h2({ type: SL.INIT }), (r2 = { dispatch: h2, subscribe: l2, getState: u2, replaceReducer: p2 })[mL] = _2, r2;
      }
      function RL(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function IL(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? RL(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : RL(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      !function(e2) {
        e2.SET_SESSION_ID = "SET_SESSION_ID", e2.SET_P2P_ID = "SET_P2P_id", e2.SET_DC_ID = "SET_DC_id", e2.SET_UID = "SET_UID", e2.SET_PUB_ID = "SET_PUB_ID", e2.SET_CLOUD_PROXY_SERVER_MODE = "SET_CLOUD_PROXY_SERVER_MODE", e2.KEY_METRIC_CLIENT_CREATED = "KEY_METRIC_CLIENT_CREATED", e2.KEY_METRIC_JOIN_START = "KEY_METRIC_JOIN_START", e2.AVOID_JOIN_START = "AVOID_JOIN_START", e2.KEY_METRIC_JOIN_END = "KEY_METRIC_JOIN_END", e2.KEY_METRIC_REQUEST_AP_START = "KEY_METRIC_REQUEST_AP_START", e2.KEY_METRIC_REQUEST_AP_END = "KEY_METRIC_REQUEST_AP_END", e2.KEY_METRIC_JOIN_GATEWAY_START = "KEY_METRIC_JOIN_GATEWAY_START", e2.KEY_METRIC_JOIN_GATEWAY_END = "KEY_METRIC_JOIN_GATEWAY_END", e2.KEY_METRIC_PEER_CONNECTION_START = "KEY_METRIC_PEER_CONNECTION_START", e2.KEY_METRIC_PEER_CONNECTION_END = "KEY_METRIC_PEER_CONNECTION_END", e2.KEY_METRIC_ICE_CONNECTION_END = "KEY_METRIC_ICE_CONNECTION_END", e2.KEY_METRIC_SIGNAL_CHANNEL_OPEN = "KEY_METRIC_SIGNAL_CHANNEL_OPEN", e2.KEY_METRIC_PUBLISH = "KEY_METRIC_PUBLISH", e2.KEY_METRIC_SUBSCRIBE = "KEY_METRIC_SUBSCRIBE", e2.RECORD_JOIN_CHANNEL_SERVICE = "RECORD_JOIN_CHANNEL_SERVICE", e2.RESET_JOIN_CHANNEL_SERVICE_RECORDS = "RESET_JOIN_CHANNEL_SERVICE_RECORDS", e2.RESET_KEY_METRICS = "RESET_KEY_METRICS";
      }(fL || (fL = {}));
      class yL {
        constructor(e2, t2, i2, r2) {
          mp(this, "store", void 0), mp(this, "reducer", void 0);
          const n2 = { codec: e2, audioCodec: t2, mode: i2, clientId: r2, sessionId: null, p2pId: 0, dcId: 0, pubId: 0, subId: 0, avoidJoinStart: 0, keyMetrics: { publish: [], subscribe: [] }, joinChannelServiceRecords: [], cloudProxyServerMode: "disabled" };
          this.reducer = function() {
            let e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : n2, t3 = arguments.length > 1 ? arguments[1] : void 0;
            switch (t3.type) {
              case fL.SET_SESSION_ID:
                return IL(IL({}, e3), {}, { sessionId: t3.sessionId });
              case fL.SET_P2P_ID:
                return IL(IL({}, e3), {}, { p2pId: t3.p2pId });
              case fL.SET_UID:
                return IL(IL({}, e3), {}, { uid: t3.uid });
              case fL.SET_PUB_ID:
                return IL(IL({}, e3), {}, { pubId: t3.pubId });
              case fL.KEY_METRIC_CLIENT_CREATED:
                return IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { clientCreated: t3.metric }) });
              case fL.KEY_METRIC_JOIN_START:
                return IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { joinStart: t3.metric }) });
              case fL.AVOID_JOIN_START:
                return IL(IL({}, e3), {}, { avoidJoinStart: t3.avoidJoinStart });
              case fL.KEY_METRIC_JOIN_END:
                return IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { joinEnd: t3.metric }) });
              case fL.KEY_METRIC_REQUEST_AP_START:
                return IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { requestAPStart: t3.metric }) });
              case fL.KEY_METRIC_REQUEST_AP_END:
                return IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { requestAPEnd: t3.metric }) });
              case fL.KEY_METRIC_JOIN_GATEWAY_START:
                return IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { joinGatewayStart: t3.metric }) });
              case fL.KEY_METRIC_JOIN_GATEWAY_END:
                return IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { joinGatewayEnd: t3.metric }) });
              case fL.KEY_METRIC_PEER_CONNECTION_START:
                return IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { peerConnectionStart: t3.metric }) });
              case fL.KEY_METRIC_PEER_CONNECTION_END:
                return IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { peerConnectionEnd: t3.metric }) });
              case fL.KEY_METRIC_SIGNAL_CHANNEL_OPEN:
                return IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { signalChannelOpen: t3.metric }) });
              case fL.KEY_METRIC_ICE_CONNECTION_END:
                return IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { iceConnectionEnd: t3.metric }) });
              case fL.KEY_METRIC_PUBLISH: {
                const i3 = e3.keyMetrics.publish, r3 = i3.findIndex((e4) => e4.trackId === t3.metric.trackId);
                return -1 !== r3 ? (i3[r3] = IL(IL({}, i3[r3]), t3.metric), IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { publish: [...i3] }) })) : IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { publish: [...e3.keyMetrics.publish, t3.metric] }) });
              }
              case fL.KEY_METRIC_SUBSCRIBE: {
                const i3 = e3.keyMetrics.subscribe, r3 = i3.findIndex((e4) => e4.userId === t3.metric.userId && e4.type === t3.metric.type);
                return -1 !== r3 ? (i3[r3] = IL(IL({}, i3[r3]), t3.metric), IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { subscribe: [...i3] }) })) : IL(IL({}, e3), {}, { keyMetrics: IL(IL({}, e3.keyMetrics), {}, { subscribe: [...e3.keyMetrics.subscribe, t3.metric] }) });
              }
              case fL.SET_CLOUD_PROXY_SERVER_MODE:
                return e3.cloudProxyServerMode = t3.mode, e3;
              case fL.RECORD_JOIN_CHANNEL_SERVICE:
                return "number" != typeof t3.index ? e3.joinChannelServiceRecords = [...e3.joinChannelServiceRecords, t3.record] : (e3.joinChannelServiceRecords[t3.index] = IL(IL({}, e3.joinChannelServiceRecords[t3.index]), t3.record), e3.joinChannelServiceRecords = [...e3.joinChannelServiceRecords]), e3;
              case fL.RESET_JOIN_CHANNEL_SERVICE_RECORDS:
                return e3.joinChannelServiceRecords = [], e3;
              case fL.RESET_KEY_METRICS:
                return e3.keyMetrics = { publish: [], subscribe: [] }, e3;
              default:
                return e3;
            }
          }, this.store = vL(this.reducer);
        }
        set sessionId(e2) {
          this.store.dispatch({ type: fL.SET_SESSION_ID, sessionId: e2 });
        }
        get sessionId() {
          return this.store.getState().sessionId;
        }
        get codec() {
          return this.store.getState().codec;
        }
        get audioCodec() {
          return this.store.getState().audioCodec;
        }
        get clientId() {
          return this.store.getState().clientId;
        }
        set p2pId(e2) {
          this.store.dispatch({ type: fL.SET_P2P_ID, p2pId: e2 });
        }
        get p2pId() {
          return this.store.getState().p2pId;
        }
        set dcId(e2) {
          this.store.dispatch({ type: fL.SET_DC_ID, dcId: e2 });
        }
        get dcId() {
          return this.store.getState().dcId;
        }
        set uid(e2) {
          this.store.dispatch({ type: fL.SET_UID, uid: e2 });
        }
        get uid() {
          return this.store.getState().uid;
        }
        set pubId(e2) {
          this.store.dispatch({ type: fL.SET_PUB_ID, pubId: e2 });
        }
        get pubId() {
          return this.store.getState().pubId;
        }
        set cloudProxyServerMode(e2) {
          this.store.dispatch({ type: fL.SET_CLOUD_PROXY_SERVER_MODE, mode: e2 });
        }
        get cloudProxyServerMode() {
          return this.store.getState().cloudProxyServerMode;
        }
        clientCreated() {
          this.store.dispatch({ type: fL.KEY_METRIC_CLIENT_CREATED, metric: Date.now() });
        }
        joinStart() {
          this.store.dispatch({ type: fL.KEY_METRIC_JOIN_START, metric: Date.now() });
        }
        joinEnd() {
          this.store.dispatch({ type: fL.KEY_METRIC_JOIN_END, metric: Date.now() });
        }
        requestAPStart() {
          this.store.dispatch({ type: fL.KEY_METRIC_REQUEST_AP_START, metric: Date.now() });
        }
        requestAPEnd() {
          this.store.dispatch({ type: fL.KEY_METRIC_REQUEST_AP_END, metric: Date.now() });
        }
        joinGatewayStart() {
          this.store.dispatch({ type: fL.KEY_METRIC_JOIN_GATEWAY_START, metric: Date.now() });
        }
        joinGatewayEnd() {
          this.store.dispatch({ type: fL.KEY_METRIC_JOIN_GATEWAY_END, metric: Date.now() });
        }
        peerConnectionStart() {
          this.store.dispatch({ type: fL.KEY_METRIC_PEER_CONNECTION_START, metric: Date.now() });
        }
        peerConnectionEnd() {
          this.store.dispatch({ type: fL.KEY_METRIC_PEER_CONNECTION_END, metric: Date.now() });
        }
        signalChannelOpen() {
          this.store.dispatch({ type: fL.KEY_METRIC_SIGNAL_CHANNEL_OPEN, metric: Date.now() });
        }
        iceConnectionEnd() {
          this.store.dispatch({ type: fL.KEY_METRIC_ICE_CONNECTION_END, metric: Date.now() });
        }
        publish(e2, t2, i2, r2) {
          this.store.dispatch({ type: fL.KEY_METRIC_PUBLISH, metric: IL(IL({ trackId: e2, type: t2 }, i2 && { publishStart: i2 }), r2 && { publishEnd: r2 }) });
        }
        subscribe(e2, t2, i2, r2, n2, o2, s2) {
          this.store.dispatch({ type: fL.KEY_METRIC_SUBSCRIBE, metric: IL(IL(IL(IL(IL({ userId: e2, type: t2 }, i2 && { subscribeStart: i2 }), r2 && { subscribeEnd: r2 }), n2 && { firstFrame: n2 }), o2 && { streamAdded: o2 }), s2 && { firstDecoded: s2 }) });
        }
        massSubscribe(e2, t2, i2, r2) {
          e2.forEach((e3) => {
            this.store.dispatch({ type: fL.KEY_METRIC_SUBSCRIBE, metric: IL(IL(IL({ userId: e3.userId, type: e3.type }, t2 && { subscribeStart: t2 }), i2 && { subscribeEnd: i2 }), r2 && { firstFrame: r2 }) });
          });
        }
        get keyMetrics() {
          return this.store.getState().keyMetrics;
        }
        recordJoinChannelService(e2, t2) {
          "gateway" === e2.service && Array.isArray(e2.urls) && (e2.urls = e2.urls.map((e3) => e3.replace(/(\d+)-\d+-\d+-(\d+)/, "$1-*-*-$2")));
          try {
            return "number" != typeof t2 ? (this.store.dispatch({ type: fL.RECORD_JOIN_CHANNEL_SERVICE, record: IL(IL({}, e2), {}, { sessionId: this.sessionId, cloudProxyMode: this.cloudProxyServerMode, uid: this.uid }) }), this.store.getState().joinChannelServiceRecords.length - 1) : (t2 < 0 || t2 >= this.store.getState().joinChannelServiceRecords.length || this.store.dispatch({ type: fL.RECORD_JOIN_CHANNEL_SERVICE, record: e2, index: t2 }), t2);
          } catch (e3) {
            return 0;
          }
        }
        resetJoinChannelServiceRecords() {
          this.store.dispatch({ type: fL.RESET_JOIN_CHANNEL_SERVICE_RECORDS });
        }
        resetKeyMetrics() {
          this.store.dispatch({ type: fL.RESET_KEY_METRICS });
        }
        get joinChannelServiceRecords() {
          try {
            return this.store.getState().joinChannelServiceRecords;
          } catch (e2) {
            return [];
          }
        }
        get avoidJoinStart() {
          return this.store.getState().avoidJoinStart;
        }
        set avoidJoinStart(e2) {
          this.store.dispatch({ type: fL.AVOID_JOIN_START, avoidJoinStart: e2 });
        }
      }
      let CL;
      const AL = () => "HTTPS" === (CL || CL || (CL = (window.location.protocol.split(":")[0] || "").toUpperCase(), CL)), OL = () => void 0 !== window.isSecureContext;
      function bL(e2) {
        let t2 = jL();
        return function(e3, t3) {
          let i2 = e3.appId;
          void 0 !== i2 && ($L(t3, 10), YL(t3, i2));
          let r2 = e3.cid;
          void 0 !== r2 && ($L(t3, 16), $L(t3, r2));
          let n2 = e3.cname;
          void 0 !== n2 && ($L(t3, 26), YL(t3, n2));
          let o2 = e3.deviceId;
          void 0 !== o2 && ($L(t3, 34), YL(t3, o2));
          let s2 = e3.elapse;
          void 0 !== s2 && ($L(t3, 40), ek(t3, s2));
          let a2 = e3.fileSize;
          void 0 !== a2 && ($L(t3, 48), ek(t3, xL(a2)));
          let c2 = e3.height;
          void 0 !== c2 && ($L(t3, 56), ek(t3, xL(c2)));
          let d2 = e3.jpg;
          void 0 !== d2 && ($L(t3, 66), $L(t3, d2.length), function(e4, t4) {
            let i3 = WL(e4, t4.length);
            e4.bytes.set(t4, i3);
          }(t3, d2));
          let u2 = e3.networkType;
          void 0 !== u2 && ($L(t3, 72), ek(t3, xL(u2)));
          let l2 = e3.osType;
          void 0 !== l2 && ($L(t3, 80), ek(t3, xL(l2)));
          let h2 = e3.requestId;
          void 0 !== h2 && ($L(t3, 90), YL(t3, h2));
          let p2 = e3.sdkVersion;
          void 0 !== p2 && ($L(t3, 98), YL(t3, p2));
          let _2 = e3.sequence;
          void 0 !== _2 && ($L(t3, 104), ek(t3, xL(_2)));
          let E2 = e3.sid;
          void 0 !== E2 && ($L(t3, 114), YL(t3, E2));
          let f2 = e3.timestamp;
          void 0 !== f2 && ($L(t3, 120), ek(t3, f2));
          let m2 = e3.uid;
          void 0 !== m2 && ($L(t3, 128), $L(t3, m2));
          let g2 = e3.vid;
          void 0 !== g2 && ($L(t3, 136), $L(t3, g2));
          let S2 = e3.width;
          void 0 !== S2 && ($L(t3, 144), ek(t3, xL(S2)));
          let T2 = e3.service;
          void 0 !== T2 && ($L(t3, 152), $L(t3, T2));
          let v2 = e3.callbackData;
          void 0 !== v2 && ($L(t3, 162), YL(t3, v2));
          let R2 = e3.jpgEncryption;
          void 0 !== R2 && ($L(t3, 168), $L(t3, R2));
          let I2 = e3.requestType;
          void 0 !== I2 && ($L(t3, 176), $L(t3, I2));
          let y2 = e3.scorePorn;
          void 0 !== y2 && ($L(t3, 185), QL(t3, y2));
          let C2 = e3.scoreSexy;
          void 0 !== C2 && ($L(t3, 193), QL(t3, C2));
          let A2 = e3.scoreNeutral;
          void 0 !== A2 && ($L(t3, 201), QL(t3, A2));
          let O2 = e3.scene;
          void 0 !== O2 && ($L(t3, 208), $L(t3, O2));
          let b2 = e3.ossFilePrefix;
          void 0 !== b2 && ($L(t3, 218), YL(t3, b2));
          let w2 = e3.serviceVendor;
          if (void 0 !== w2)
            for (let e4 of w2) {
              $L(t3, 226);
              let i3 = jL();
              DL(e4, i3), $L(t3, i3.limit), qL(t3, i3), FL(i3);
            }
        }(e2, t2), function(e3) {
          let t3 = e3.bytes, i2 = e3.limit;
          return t3.length === i2 ? t3 : t3.subarray(0, i2);
        }(t2);
      }
      function wL(e2) {
        return function(e3) {
          let t3 = {};
          e:
            for (; !GL(e3); ) {
              let i2 = ZL(e3);
              switch (i2 >>> 3) {
                case 0:
                  break e;
                case 1:
                  t3.code = ZL(e3);
                  break;
                case 2:
                  t3.msg = KL(e3, ZL(e3));
                  break;
                case 3: {
                  let i3 = PL(e3);
                  t3.data = NL(e3), e3.limit = i3;
                  break;
                }
                default:
                  LL(e3, 7 & i2);
              }
            }
          return t3;
        }({ bytes: t2 = e2, offset: 0, limit: t2.length });
        var t2;
      }
      function NL(e2) {
        let t2 = {};
        e:
          for (; !GL(e2); ) {
            let i2 = ZL(e2);
            switch (i2 >>> 3) {
              case 0:
                break e;
              case 1:
                t2.requestId = KL(e2, ZL(e2));
                break;
              case 2:
                t2.requestType = ZL(e2) >>> 0;
                break;
              case 3:
                t2.scorePorn = zL(e2);
                break;
              case 4:
                t2.scoreSexy = zL(e2);
                break;
              case 5:
                t2.scoreNeutral = zL(e2);
                break;
              case 6:
                t2.requestScene = ZL(e2) >>> 0;
                break;
              case 7:
                t2.scene = ZL(e2) >>> 0;
                break;
              default:
                LL(e2, 7 & i2);
            }
          }
        return t2;
      }
      function DL(e2, t2) {
        let i2 = e2.service;
        void 0 !== i2 && ($L(t2, 8), $L(t2, i2));
        let r2 = e2.vendor;
        void 0 !== r2 && ($L(t2, 16), $L(t2, r2));
        let n2 = e2.token;
        void 0 !== n2 && ($L(t2, 26), YL(t2, n2));
        let o2 = e2.callbackUrl;
        void 0 !== o2 && ($L(t2, 34), YL(t2, o2));
      }
      function PL(e2) {
        let t2 = ZL(e2), i2 = e2.limit;
        return e2.limit = e2.offset + t2, i2;
      }
      function LL(e2, t2) {
        switch (t2) {
          case 0:
            for (; 128 & JL(e2); )
              ;
            break;
          case 2:
            BL(e2, ZL(e2));
            break;
          case 5:
            BL(e2, 4);
            break;
          case 1:
            BL(e2, 8);
            break;
          default:
            throw new Error("Unimplemented type: " + t2);
        }
      }
      let kL = new Float32Array(1);
      new Uint8Array(kL.buffer);
      let ML = new Float64Array(1), UL = new Uint8Array(ML.buffer);
      function xL(e2) {
        return { low: e2 |= 0, high: e2 >> 31, unsigned: e2 >= 0 };
      }
      let VL = [];
      function jL() {
        const e2 = VL.pop();
        return e2 ? (e2.offset = e2.limit = 0, e2) : { bytes: new Uint8Array(64), offset: 0, limit: 0 };
      }
      function FL(e2) {
        VL.push(e2);
      }
      function BL(e2, t2) {
        if (e2.offset + t2 > e2.limit)
          throw new Error("Skip past limit");
        e2.offset += t2;
      }
      function GL(e2) {
        return e2.offset >= e2.limit;
      }
      function WL(e2, t2) {
        let i2 = e2.bytes, r2 = e2.offset, n2 = e2.limit, o2 = r2 + t2;
        if (o2 > i2.length) {
          let t3 = new Uint8Array(2 * o2);
          t3.set(i2), e2.bytes = t3;
        }
        return e2.offset = o2, o2 > n2 && (e2.limit = o2), r2;
      }
      function HL(e2, t2) {
        let i2 = e2.offset;
        if (i2 + t2 > e2.limit)
          throw new Error("Read past limit");
        return e2.offset += t2, i2;
      }
      function KL(e2, t2) {
        let i2 = HL(e2, t2), r2 = String.fromCharCode, n2 = e2.bytes, o2 = "ï¿½", s2 = "";
        for (let e3 = 0; e3 < t2; e3++) {
          let a2, c2, d2, u2, l2 = n2[e3 + i2];
          0 == (128 & l2) ? s2 += r2(l2) : 192 == (224 & l2) ? e3 + 1 >= t2 ? s2 += o2 : (a2 = n2[e3 + i2 + 1], 128 != (192 & a2) ? s2 += o2 : (u2 = (31 & l2) << 6 | 63 & a2, u2 < 128 ? s2 += o2 : (s2 += r2(u2), e3++))) : 224 == (240 & l2) ? e3 + 2 >= t2 ? s2 += o2 : (a2 = n2[e3 + i2 + 1], c2 = n2[e3 + i2 + 2], 32896 != (49344 & (a2 | c2 << 8)) ? s2 += o2 : (u2 = (15 & l2) << 12 | (63 & a2) << 6 | 63 & c2, u2 < 2048 || u2 >= 55296 && u2 <= 57343 ? s2 += o2 : (s2 += r2(u2), e3 += 2))) : 240 == (248 & l2) ? e3 + 3 >= t2 ? s2 += o2 : (a2 = n2[e3 + i2 + 1], c2 = n2[e3 + i2 + 2], d2 = n2[e3 + i2 + 3], 8421504 != (12632256 & (a2 | c2 << 8 | d2 << 16)) ? s2 += o2 : (u2 = (7 & l2) << 18 | (63 & a2) << 12 | (63 & c2) << 6 | 63 & d2, u2 < 65536 || u2 > 1114111 ? s2 += o2 : (u2 -= 65536, s2 += r2(55296 + (u2 >> 10), 56320 + (1023 & u2)), e3 += 3))) : s2 += o2;
        }
        return s2;
      }
      function YL(e2, t2) {
        let i2 = t2.length, r2 = 0;
        for (let e3 = 0; e3 < i2; e3++) {
          let n3 = t2.charCodeAt(e3);
          n3 >= 55296 && n3 <= 56319 && e3 + 1 < i2 && (n3 = (n3 << 10) + t2.charCodeAt(++e3) - 56613888), r2 += n3 < 128 ? 1 : n3 < 2048 ? 2 : n3 < 65536 ? 3 : 4;
        }
        $L(e2, r2);
        let n2 = WL(e2, r2), o2 = e2.bytes;
        for (let e3 = 0; e3 < i2; e3++) {
          let r3 = t2.charCodeAt(e3);
          r3 >= 55296 && r3 <= 56319 && e3 + 1 < i2 && (r3 = (r3 << 10) + t2.charCodeAt(++e3) - 56613888), r3 < 128 ? o2[n2++] = r3 : (r3 < 2048 ? o2[n2++] = r3 >> 6 & 31 | 192 : (r3 < 65536 ? o2[n2++] = r3 >> 12 & 15 | 224 : (o2[n2++] = r3 >> 18 & 7 | 240, o2[n2++] = r3 >> 12 & 63 | 128), o2[n2++] = r3 >> 6 & 63 | 128), o2[n2++] = 63 & r3 | 128);
        }
      }
      function qL(e2, t2) {
        let i2 = WL(e2, t2.limit), r2 = e2.bytes, n2 = t2.bytes;
        for (let e3 = 0, o2 = t2.limit; e3 < o2; e3++)
          r2[e3 + i2] = n2[e3];
      }
      function JL(e2) {
        return e2.bytes[HL(e2, 1)];
      }
      function XL(e2, t2) {
        let i2 = WL(e2, 1);
        e2.bytes[i2] = t2;
      }
      function zL(e2) {
        let t2 = HL(e2, 8), i2 = e2.bytes;
        return UL[0] = i2[t2++], UL[1] = i2[t2++], UL[2] = i2[t2++], UL[3] = i2[t2++], UL[4] = i2[t2++], UL[5] = i2[t2++], UL[6] = i2[t2++], UL[7] = i2[t2++], ML[0];
      }
      function QL(e2, t2) {
        let i2 = WL(e2, 8), r2 = e2.bytes;
        ML[0] = t2, r2[i2++] = UL[0], r2[i2++] = UL[1], r2[i2++] = UL[2], r2[i2++] = UL[3], r2[i2++] = UL[4], r2[i2++] = UL[5], r2[i2++] = UL[6], r2[i2++] = UL[7];
      }
      function ZL(e2) {
        let t2, i2 = 0, r2 = 0;
        do {
          t2 = JL(e2), i2 < 32 && (r2 |= (127 & t2) << i2), i2 += 7;
        } while (128 & t2);
        return r2;
      }
      function $L(e2, t2) {
        for (t2 >>>= 0; t2 >= 128; )
          XL(e2, 127 & t2 | 128), t2 >>>= 7;
        XL(e2, t2);
      }
      function ek(e2, t2) {
        let i2 = t2.low >>> 0, r2 = (t2.low >>> 28 | t2.high << 4) >>> 0, n2 = t2.high >>> 24, o2 = 0 === n2 ? 0 === r2 ? i2 < 16384 ? i2 < 128 ? 1 : 2 : i2 < 1 << 21 ? 3 : 4 : r2 < 16384 ? r2 < 128 ? 5 : 6 : r2 < 1 << 21 ? 7 : 8 : n2 < 128 ? 9 : 10, s2 = WL(e2, o2), a2 = e2.bytes;
        switch (o2) {
          case 10:
            a2[s2 + 9] = n2 >>> 7 & 1;
          case 9:
            a2[s2 + 8] = 9 !== o2 ? 128 | n2 : 127 & n2;
          case 8:
            a2[s2 + 7] = 8 !== o2 ? r2 >>> 21 | 128 : r2 >>> 21 & 127;
          case 7:
            a2[s2 + 6] = 7 !== o2 ? r2 >>> 14 | 128 : r2 >>> 14 & 127;
          case 6:
            a2[s2 + 5] = 6 !== o2 ? r2 >>> 7 | 128 : r2 >>> 7 & 127;
          case 5:
            a2[s2 + 4] = 5 !== o2 ? 128 | r2 : 127 & r2;
          case 4:
            a2[s2 + 3] = 4 !== o2 ? i2 >>> 21 | 128 : i2 >>> 21 & 127;
          case 3:
            a2[s2 + 2] = 3 !== o2 ? i2 >>> 14 | 128 : i2 >>> 14 & 127;
          case 2:
            a2[s2 + 1] = 2 !== o2 ? i2 >>> 7 | 128 : i2 >>> 7 & 127;
          case 1:
            a2[s2] = 1 !== o2 ? 128 | i2 : 127 & i2;
        }
      }
      var tk = {};
      Object.defineProperty(tk, "__esModule", { value: true });
      var ik = function() {
        function e2() {
          this._dataLength = 0, this._bufferLength = 0, this._state = new Int32Array(4), this._buffer = new ArrayBuffer(68), this._buffer8 = new Uint8Array(this._buffer, 0, 68), this._buffer32 = new Uint32Array(this._buffer, 0, 17), this.start();
        }
        return e2.hashStr = function(e3, t2) {
          return void 0 === t2 && (t2 = false), this.onePassHasher.start().appendStr(e3).end(t2);
        }, e2.hashAsciiStr = function(e3, t2) {
          return void 0 === t2 && (t2 = false), this.onePassHasher.start().appendAsciiStr(e3).end(t2);
        }, e2._hex = function(t2) {
          var i2, r2, n2, o2, s2 = e2.hexChars, a2 = e2.hexOut;
          for (o2 = 0; o2 < 4; o2 += 1)
            for (r2 = 8 * o2, i2 = t2[o2], n2 = 0; n2 < 8; n2 += 2)
              a2[r2 + 1 + n2] = s2.charAt(15 & i2), i2 >>>= 4, a2[r2 + 0 + n2] = s2.charAt(15 & i2), i2 >>>= 4;
          return a2.join("");
        }, e2._md5cycle = function(e3, t2) {
          var i2 = e3[0], r2 = e3[1], n2 = e3[2], o2 = e3[3];
          r2 = ((r2 += ((n2 = ((n2 += ((o2 = ((o2 += ((i2 = ((i2 += (r2 & n2 | ~r2 & o2) + t2[0] - 680876936 | 0) << 7 | i2 >>> 25) + r2 | 0) & r2 | ~i2 & n2) + t2[1] - 389564586 | 0) << 12 | o2 >>> 20) + i2 | 0) & i2 | ~o2 & r2) + t2[2] + 606105819 | 0) << 17 | n2 >>> 15) + o2 | 0) & o2 | ~n2 & i2) + t2[3] - 1044525330 | 0) << 22 | r2 >>> 10) + n2 | 0, r2 = ((r2 += ((n2 = ((n2 += ((o2 = ((o2 += ((i2 = ((i2 += (r2 & n2 | ~r2 & o2) + t2[4] - 176418897 | 0) << 7 | i2 >>> 25) + r2 | 0) & r2 | ~i2 & n2) + t2[5] + 1200080426 | 0) << 12 | o2 >>> 20) + i2 | 0) & i2 | ~o2 & r2) + t2[6] - 1473231341 | 0) << 17 | n2 >>> 15) + o2 | 0) & o2 | ~n2 & i2) + t2[7] - 45705983 | 0) << 22 | r2 >>> 10) + n2 | 0, r2 = ((r2 += ((n2 = ((n2 += ((o2 = ((o2 += ((i2 = ((i2 += (r2 & n2 | ~r2 & o2) + t2[8] + 1770035416 | 0) << 7 | i2 >>> 25) + r2 | 0) & r2 | ~i2 & n2) + t2[9] - 1958414417 | 0) << 12 | o2 >>> 20) + i2 | 0) & i2 | ~o2 & r2) + t2[10] - 42063 | 0) << 17 | n2 >>> 15) + o2 | 0) & o2 | ~n2 & i2) + t2[11] - 1990404162 | 0) << 22 | r2 >>> 10) + n2 | 0, r2 = ((r2 += ((n2 = ((n2 += ((o2 = ((o2 += ((i2 = ((i2 += (r2 & n2 | ~r2 & o2) + t2[12] + 1804603682 | 0) << 7 | i2 >>> 25) + r2 | 0) & r2 | ~i2 & n2) + t2[13] - 40341101 | 0) << 12 | o2 >>> 20) + i2 | 0) & i2 | ~o2 & r2) + t2[14] - 1502002290 | 0) << 17 | n2 >>> 15) + o2 | 0) & o2 | ~n2 & i2) + t2[15] + 1236535329 | 0) << 22 | r2 >>> 10) + n2 | 0, r2 = ((r2 += ((n2 = ((n2 += ((o2 = ((o2 += ((i2 = ((i2 += (r2 & o2 | n2 & ~o2) + t2[1] - 165796510 | 0) << 5 | i2 >>> 27) + r2 | 0) & n2 | r2 & ~n2) + t2[6] - 1069501632 | 0) << 9 | o2 >>> 23) + i2 | 0) & r2 | i2 & ~r2) + t2[11] + 643717713 | 0) << 14 | n2 >>> 18) + o2 | 0) & i2 | o2 & ~i2) + t2[0] - 373897302 | 0) << 20 | r2 >>> 12) + n2 | 0, r2 = ((r2 += ((n2 = ((n2 += ((o2 = ((o2 += ((i2 = ((i2 += (r2 & o2 | n2 & ~o2) + t2[5] - 701558691 | 0) << 5 | i2 >>> 27) + r2 | 0) & n2 | r2 & ~n2) + t2[10] + 38016083 | 0) << 9 | o2 >>> 23) + i2 | 0) & r2 | i2 & ~r2) + t2[15] - 660478335 | 0) << 14 | n2 >>> 18) + o2 | 0) & i2 | o2 & ~i2) + t2[4] - 405537848 | 0) << 20 | r2 >>> 12) + n2 | 0, r2 = ((r2 += ((n2 = ((n2 += ((o2 = ((o2 += ((i2 = ((i2 += (r2 & o2 | n2 & ~o2) + t2[9] + 568446438 | 0) << 5 | i2 >>> 27) + r2 | 0) & n2 | r2 & ~n2) + t2[14] - 1019803690 | 0) << 9 | o2 >>> 23) + i2 | 0) & r2 | i2 & ~r2) + t2[3] - 187363961 | 0) << 14 | n2 >>> 18) + o2 | 0) & i2 | o2 & ~i2) + t2[8] + 1163531501 | 0) << 20 | r2 >>> 12) + n2 | 0, r2 = ((r2 += ((n2 = ((n2 += ((o2 = ((o2 += ((i2 = ((i2 += (r2 & o2 | n2 & ~o2) + t2[13] - 1444681467 | 0) << 5 | i2 >>> 27) + r2 | 0) & n2 | r2 & ~n2) + t2[2] - 51403784 | 0) << 9 | o2 >>> 23) + i2 | 0) & r2 | i2 & ~r2) + t2[7] + 1735328473 | 0) << 14 | n2 >>> 18) + o2 | 0) & i2 | o2 & ~i2) + t2[12] - 1926607734 | 0) << 20 | r2 >>> 12) + n2 | 0, r2 = ((r2 += ((n2 = ((n2 += ((o2 = ((o2 += ((i2 = ((i2 += (r2 ^ n2 ^ o2) + t2[5] - 378558 | 0) << 4 | i2 >>> 28) + r2 | 0) ^ r2 ^ n2) + t2[8] - 2022574463 | 0) << 11 | o2 >>> 21) + i2 | 0) ^ i2 ^ r2) + t2[11] + 1839030562 | 0) << 16 | n2 >>> 16) + o2 | 0) ^ o2 ^ i2) + t2[14] - 35309556 | 0) << 23 | r2 >>> 9) + n2 | 0, r2 = ((r2 += ((n2 = ((n2 += ((o2 = ((o2 += ((i2 = ((i2 += (r2 ^ n2 ^ o2) + t2[1] - 1530992060 | 0) << 4 | i2 >>> 28) + r2 | 0) ^ r2 ^ n2) + t2[4] + 1272893353 | 0) << 11 | o2 >>> 21) + i2 | 0) ^ i2 ^ r2) + t2[7] - 155497632 | 0) << 16 | n2 >>> 16) + o2 | 0) ^ o2 ^ i2) + t2[10] - 1094730640 | 0) << 23 | r2 >>> 9) + n2 | 0, r2 = ((r2 += ((n2 = ((n2 += ((o2 = ((o2 += ((i2 = ((i2 += (r2 ^ n2 ^ o2) + t2[13] + 681279174 | 0) << 4 | i2 >>> 28) + r2 | 0) ^ r2 ^ n2) + t2[0] - 358537222 | 0) << 11 | o2 >>> 21) + i2 | 0) ^ i2 ^ r2) + t2[3] - 722521979 | 0) << 16 | n2 >>> 16) + o2 | 0) ^ o2 ^ i2) + t2[6] + 76029189 | 0) << 23 | r2 >>> 9) + n2 | 0, r2 = ((r2 += ((n2 = ((n2 += ((o2 = ((o2 += ((i2 = ((i2 += (r2 ^ n2 ^ o2) + t2[9] - 640364487 | 0) << 4 | i2 >>> 28) + r2 | 0) ^ r2 ^ n2) + t2[12] - 421815835 | 0) << 11 | o2 >>> 21) + i2 | 0) ^ i2 ^ r2) + t2[15] + 530742520 | 0) << 16 | n2 >>> 16) + o2 | 0) ^ o2 ^ i2) + t2[2] - 995338651 | 0) << 23 | r2 >>> 9) + n2 | 0, r2 = ((r2 += ((o2 = ((o2 += (r2 ^ ((i2 = ((i2 += (n2 ^ (r2 | ~o2)) + t2[0] - 198630844 | 0) << 6 | i2 >>> 26) + r2 | 0) | ~n2)) + t2[7] + 1126891415 | 0) << 10 | o2 >>> 22) + i2 | 0) ^ ((n2 = ((n2 += (i2 ^ (o2 | ~r2)) + t2[14] - 1416354905 | 0) << 15 | n2 >>> 17) + o2 | 0) | ~i2)) + t2[5] - 57434055 | 0) << 21 | r2 >>> 11) + n2 | 0, r2 = ((r2 += ((o2 = ((o2 += (r2 ^ ((i2 = ((i2 += (n2 ^ (r2 | ~o2)) + t2[12] + 1700485571 | 0) << 6 | i2 >>> 26) + r2 | 0) | ~n2)) + t2[3] - 1894986606 | 0) << 10 | o2 >>> 22) + i2 | 0) ^ ((n2 = ((n2 += (i2 ^ (o2 | ~r2)) + t2[10] - 1051523 | 0) << 15 | n2 >>> 17) + o2 | 0) | ~i2)) + t2[1] - 2054922799 | 0) << 21 | r2 >>> 11) + n2 | 0, r2 = ((r2 += ((o2 = ((o2 += (r2 ^ ((i2 = ((i2 += (n2 ^ (r2 | ~o2)) + t2[8] + 1873313359 | 0) << 6 | i2 >>> 26) + r2 | 0) | ~n2)) + t2[15] - 30611744 | 0) << 10 | o2 >>> 22) + i2 | 0) ^ ((n2 = ((n2 += (i2 ^ (o2 | ~r2)) + t2[6] - 1560198380 | 0) << 15 | n2 >>> 17) + o2 | 0) | ~i2)) + t2[13] + 1309151649 | 0) << 21 | r2 >>> 11) + n2 | 0, r2 = ((r2 += ((o2 = ((o2 += (r2 ^ ((i2 = ((i2 += (n2 ^ (r2 | ~o2)) + t2[4] - 145523070 | 0) << 6 | i2 >>> 26) + r2 | 0) | ~n2)) + t2[11] - 1120210379 | 0) << 10 | o2 >>> 22) + i2 | 0) ^ ((n2 = ((n2 += (i2 ^ (o2 | ~r2)) + t2[2] + 718787259 | 0) << 15 | n2 >>> 17) + o2 | 0) | ~i2)) + t2[9] - 343485551 | 0) << 21 | r2 >>> 11) + n2 | 0, e3[0] = i2 + e3[0] | 0, e3[1] = r2 + e3[1] | 0, e3[2] = n2 + e3[2] | 0, e3[3] = o2 + e3[3] | 0;
        }, e2.prototype.start = function() {
          return this._dataLength = 0, this._bufferLength = 0, this._state.set(e2.stateIdentity), this;
        }, e2.prototype.appendStr = function(t2) {
          var i2, r2, n2 = this._buffer8, o2 = this._buffer32, s2 = this._bufferLength;
          for (r2 = 0; r2 < t2.length; r2 += 1) {
            if ((i2 = t2.charCodeAt(r2)) < 128)
              n2[s2++] = i2;
            else if (i2 < 2048)
              n2[s2++] = 192 + (i2 >>> 6), n2[s2++] = 63 & i2 | 128;
            else if (i2 < 55296 || i2 > 56319)
              n2[s2++] = 224 + (i2 >>> 12), n2[s2++] = i2 >>> 6 & 63 | 128, n2[s2++] = 63 & i2 | 128;
            else {
              if ((i2 = 1024 * (i2 - 55296) + (t2.charCodeAt(++r2) - 56320) + 65536) > 1114111)
                throw new Error("Unicode standard supports code points up to U+10FFFF");
              n2[s2++] = 240 + (i2 >>> 18), n2[s2++] = i2 >>> 12 & 63 | 128, n2[s2++] = i2 >>> 6 & 63 | 128, n2[s2++] = 63 & i2 | 128;
            }
            s2 >= 64 && (this._dataLength += 64, e2._md5cycle(this._state, o2), s2 -= 64, o2[0] = o2[16]);
          }
          return this._bufferLength = s2, this;
        }, e2.prototype.appendAsciiStr = function(t2) {
          for (var i2, r2 = this._buffer8, n2 = this._buffer32, o2 = this._bufferLength, s2 = 0; ; ) {
            for (i2 = Math.min(t2.length - s2, 64 - o2); i2--; )
              r2[o2++] = t2.charCodeAt(s2++);
            if (o2 < 64)
              break;
            this._dataLength += 64, e2._md5cycle(this._state, n2), o2 = 0;
          }
          return this._bufferLength = o2, this;
        }, e2.prototype.appendByteArray = function(t2) {
          for (var i2, r2 = this._buffer8, n2 = this._buffer32, o2 = this._bufferLength, s2 = 0; ; ) {
            for (i2 = Math.min(t2.length - s2, 64 - o2); i2--; )
              r2[o2++] = t2[s2++];
            if (o2 < 64)
              break;
            this._dataLength += 64, e2._md5cycle(this._state, n2), o2 = 0;
          }
          return this._bufferLength = o2, this;
        }, e2.prototype.getState = function() {
          var e3 = this._state;
          return { buffer: String.fromCharCode.apply(null, Array.from(this._buffer8)), buflen: this._bufferLength, length: this._dataLength, state: [e3[0], e3[1], e3[2], e3[3]] };
        }, e2.prototype.setState = function(e3) {
          var t2, i2 = e3.buffer, r2 = e3.state, n2 = this._state;
          for (this._dataLength = e3.length, this._bufferLength = e3.buflen, n2[0] = r2[0], n2[1] = r2[1], n2[2] = r2[2], n2[3] = r2[3], t2 = 0; t2 < i2.length; t2 += 1)
            this._buffer8[t2] = i2.charCodeAt(t2);
        }, e2.prototype.end = function(t2) {
          void 0 === t2 && (t2 = false);
          var i2 = this._bufferLength, r2 = this._buffer8, n2 = this._buffer32, o2 = 1 + (i2 >> 2);
          this._dataLength += i2;
          var s2 = 8 * this._dataLength;
          if (r2[i2] = 128, r2[i2 + 1] = r2[i2 + 2] = r2[i2 + 3] = 0, n2.set(e2.buffer32Identity.subarray(o2), o2), i2 > 55 && (e2._md5cycle(this._state, n2), n2.set(e2.buffer32Identity)), s2 <= 4294967295)
            n2[14] = s2;
          else {
            var a2 = s2.toString(16).match(/(.*?)(.{0,8})$/);
            if (null === a2)
              return;
            var c2 = parseInt(a2[2], 16), d2 = parseInt(a2[1], 16) || 0;
            n2[14] = c2, n2[15] = d2;
          }
          return e2._md5cycle(this._state, n2), t2 ? this._state : e2._hex(this._state);
        }, e2.stateIdentity = new Int32Array([1732584193, -271733879, -1732584194, 271733878]), e2.buffer32Identity = new Int32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), e2.hexChars = "0123456789abcdef", e2.hexOut = [], e2.onePassHasher = new e2(), e2;
      }(), rk = tk.Md5 = ik;
      if ("5d41402abc4b2a76b9719d911017c592" !== ik.hashStr("hello"))
        throw new Error("Md5 self test failed.");
      const nk = async (e2, t2, i2) => await (async (e3, t3, i3) => {
        const r2 = "" + t3 + i3, n2 = new Uint8Array(rk.hashStr(r2, true).buffer).slice(0, 16), o2 = n2.slice(0, 12), s2 = await window.crypto.subtle.importKey("raw", n2, "AES-GCM", true, ["encrypt"]);
        return new Uint8Array(await window.crypto.subtle.encrypt({ name: "AES-GCM", iv: o2 }, s2, e3));
      })(e2.buffer, t2, i2);
      function ok(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      const sk = /* @__PURE__ */ new Map([["moderation", 1], ["supervise", 2]]);
      class ak extends gE {
        get connectionState() {
          return this._connectionState;
        }
        set connectionState(e2) {
          if (this._connectionState === e2)
            return;
          const t2 = this._connectionState;
          this._connectionState = e2, this.emit(kg.CONNECTION_STATE_CHANGE, t2, e2);
        }
        get inspectType() {
          return this._inspectType;
        }
        set inspectType(e2) {
          var t2;
          this._inspectMode = zi(t2 = e2.map((e3) => sk.get(e3) || 0)).call(t2, (e3, t3) => e3 + t3), this._inspectType = e2;
        }
        get quality() {
          return this._quality;
        }
        set quality(e2) {
          this._quality = e2 > 1 ? 1 : e2 < 0.1 ? 0.1 : e2, this.qualityTimer && (window.clearTimeout(this.qualityTimer), this.qualityTimer = null), this._quality >= 1 || (this.qualityTimer = window.setTimeout(() => {
            this.quality = this._quality / this.qualityRatio;
          }, 6e4));
        }
        constructor(e2) {
          super(), mp(this, "name", "AgoraRTCVideoContentInspect"), mp(this, "_connectionState", Pg.CONNECTING), mp(this, "_innerConnectionState", void 0), mp(this, "sequence", 0), mp(this, "inspectStartTime", void 0), mp(this, "workerManagerConnection", void 0), mp(this, "workerConnection", void 0), mp(this, "workerMessageLengthLimit", void 0), mp(this, "inspectIntervalMinimum", void 0), mp(this, "qualityRatio", void 0), mp(this, "_connectInfo", void 0), mp(this, "_cancelTokenSource", fE.CancelToken.source()), mp(this, "_retryConfig", void 0), mp(this, "wmSequence", 0), mp(this, "inspectInterval", void 0), mp(this, "inspectTimer", null), mp(this, "ossFilePrefix", void 0), mp(this, "extraInfo", void 0), mp(this, "_inspectType", void 0), mp(this, "_inspectMode", void 0), mp(this, "_quality", 1), mp(this, "qualityTimer", null), mp(this, "_inspectId", void 0), mp(this, "_needWorkUrlOnly", false), mp(this, "inspectImage", () => {
            if (this.connectionState !== Pg.CONNECTED)
              throw new vE(TE.OPERATION_ABORTED, "content inspect service connection status is ".concat(this.connectionState));
            this.inspectTimer && (window.clearInterval(this.inspectTimer), this.inspectTimer = null), this.inspectTimer = window.setInterval(() => {
              this.connectionState === Pg.CONNECTED ? this.requestToInspectImage() : NE.debug("[".concat(this._inspectId, "] Inspect State is not connected , "), this.connectionState);
            }, this.inspectInterval < this.inspectIntervalMinimum ? this.inspectIntervalMinimum : this.inspectInterval), this.requestToInspectImage();
          }), this._inspectId = MR(5, "inspect-"), this.workerMessageLengthLimit = HE("VIDEO_INSPECT_WORKER_MESSAGE_LENGTH_LIMIT"), this.inspectIntervalMinimum = HE("VIDEO_INSPECT_INTERVAL_MINIMUM"), this.qualityRatio = HE("VIDEO_INSPECT_QUALITY_RATIO"), this.inspectInterval = e2.interval, this.ossFilePrefix = e2.ossFilePrefix, this.extraInfo = e2.extraInfo, this.inspectType = e2.inspectType, this.inspectStartTime = Number(Date.now()), this.workerManagerConnection = new $A("worker-manager-" + this._inspectId, RE), this.on(kg.STATE_CHANGE, (e3, t2) => {
            this._innerConnectionState = e3, NE.debug("[".concat(this._inspectId, "] Inspect operation :").concat(Lg[e3], " ").concat(t2 || ""));
          }), this.handleWorkerManagerEvents(), this.workerConnection = new $A("worker-" + this._inspectId, RE), this.handleWorkerEvents();
        }
        async init(e2, t2) {
          this.emit(kg.STATE_CHANGE, Lg.CONNECT_AP), this._connectInfo = e2;
          const i2 = this._cancelTokenSource.token;
          return this._retryConfig = t2, new Cl((r2, n2) => {
            this.on(kg.CONNECTION_STATE_CHANGE, (e3, t3) => {
              t3 === Pg.CONNECTED && r2();
            }), this.requestAP(e2, i2, t2).then((e3) => {
              this.connectWorkerManager(e3);
            }).catch((e3) => {
              n2(e3);
            });
          });
        }
        async requestAP(e2, t2, i2) {
          const r2 = HE("WEBCS_DOMAIN").map((e3) => "https://".concat(e3, "/api/v1")), n2 = await function(e3, t3, i3, r3) {
            let { appId: n3, areaCode: o3, cname: s2, sid: a2, token: c2, uid: d2 } = t3;
            OO++;
            const u2 = "image_moderation_api", l2 = { service_name: u2, json_body: JSON.stringify({ appId: n3, areaCode: o3, cname: s2, command: "allocateEdge", requestId: OO, seq: OO, sid: a2, token: c2, ts: Date.now(), uid: d2 + "" }) };
            let h2, p2, _2 = e3[0];
            return yE(async () => {
              h2 = Date.now();
              const e4 = await lT(_2, { data: l2, cancelToken: i3, headers: { "X-Packet-Service-Type": "0", "X-Packet-URI": "61" }, params: { action: "wrtc_gateway" } });
              if (p2 = Date.now() - h2, 0 !== e4.code) {
                const t5 = new vE(TE.UNEXPECTED_RESPONSE, "image inspect ap error, code" + e4.code, { retry: true, responseTime: p2 });
                throw NE.error(t5.toString()), t5;
              }
              const t4 = JSON.parse(e4.json_body);
              if (200 !== t4.code) {
                const e5 = new vE(TE.UNEXPECTED_RESPONSE, "image inspect ap error, code: ".concat(t4.code, ", reason: ").concat(t4.reason), { code: t4.code, responseTime: p2 });
                throw NE.error(e5.toString()), e5;
              }
              if (!t4.servers || !Array.isArray(t4.servers) || 0 === t4.servers.length) {
                const e5 = new vE(TE.UNEXPECTED_RESPONSE, "image inspect ap empty server", { code: t4.code, responseTime: p2 });
                throw NE.error(e5.toString()), e5;
              }
              const r4 = HE("VIDEO_INSPECT_WORKER_MANAGER_HOST"), n4 = HE("VIDEO_INSPECT_WORKER_MANAGER_PORT");
              return { addressList: t4.servers.map((e5) => {
                let { address: t5, wss: i4 } = e5;
                if (t5 && i4)
                  return "wss://".concat(t5.replace(/\./g, "-"), ".").concat(r4, ":").concat(n4 || i4);
              }).filter((e5) => !!e5), workerToken: t4.workerToken, vid: t4.vid, responseTime: p2 };
            }, (t4, i4) => (IT.apworkerEvent(a2, { success: true, sc: 200, serviceName: u2, responseDetail: JSON.stringify(t4.addressList), firstSuccess: 0 === i4, responseTime: p2, serverIp: e3[i4 % e3.length] }), false), (t4, i4) => (IT.apworkerEvent(a2, { success: false, sc: t4.data && t4.data.code || 200, serviceName: u2, responseTime: p2, serverIp: e3[i4 % e3.length] }), !!(t4.code !== TE.OPERATION_ABORTED && t4.code !== TE.UNEXPECTED_RESPONSE || t4.data && t4.data.retry) && (_2 = e3[(i4 + 1) % e3.length], true)), r3);
          }(r2, e2, t2, i2);
          this.emit(kg.STATE_CHANGE, Lg.AP_CONNECTED);
          const { addressList: o2 } = n2;
          return this.wmSequence++, o2;
        }
        async connectWorkerManager(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          this._needWorkUrlOnly = t2, this.emit(kg.STATE_CHANGE, Lg.CONNECT_WORKER_MANAGER), await this.workerManagerConnection.init(e2, 1e4);
        }
        async connectWorker(e2) {
          await this.workerConnection.init([e2]);
        }
        handleWorkerManagerEvents() {
          this.workerManagerConnection.on(Km.CONNECTED, async () => {
            this.emit(kg.STATE_CHANGE, Lg.WORKER_MANAGER_CONNECTED, this.workerManagerConnection.url), this.workerManagerConnection.sendMessage({ appId: this._connectInfo.appId, cname: this._connectInfo.cname, uid: this._connectInfo.uid + "", sdkVersion: "4.16.1", sid: this._connectInfo.sid, seq: this.wmSequence, ts: Number(Date.now()), requestId: Math.floor(1e12 * Math.random()), allocate: true, clientRequest: { command: "join" } }, true);
          }), this.workerManagerConnection.on(Km.CLOSED, () => {
            this._innerConnectionState < Lg.GET_WORKER_MANAGER_RESPONSE && NE.debug("[".concat(this._inspectId, "] Inspect worker manager is closed before connecting worker"));
          }), this.workerManagerConnection.on(Km.FAILED, () => {
            this._innerConnectionState < Lg.GET_WORKER_MANAGER_RESPONSE && NE.debug("[".concat(this._inspectId, "] Connecting inspect worker manager is failed before connecting worker"));
          }), this.workerManagerConnection.on(Km.RECONNECTING, () => {
            this._innerConnectionState < Lg.GET_WORKER_MANAGER_RESPONSE && NE.debug("[".concat(this._inspectId, "] Inspect worker manager is reconnecting before connecting worker"));
          }), this.workerManagerConnection.on(Km.ON_MESSAGE, async (e2) => {
            this.emit(kg.STATE_CHANGE, Lg.GET_WORKER_MANAGER_RESPONSE);
            const t2 = this.workerManagerConnection.url;
            this.workerManagerConnection.close();
            const i2 = JSON.parse(e2.data);
            if (200 !== i2.code)
              throw NE.error("[".concat(this._inspectId, "] Unexpected code ").concat(i2.code, " from worker manager")), new vE(TE.UNEXPECTED_RESPONSE, "response code of worker is unexpected", i2);
            if (!(i2.serverResponse && i2.serverResponse.portWss && t2))
              throw NE.error("[".concat(this._inspectId, "] Unexpected content from worker manager : ").concat(JSON.stringify(i2))), new vE(TE.UNEXPECTED_RESPONSE, "response content of worker is unexpected", i2);
            {
              const e3 = HE("VIDEO_INSPECT_WORKER_PORT") || i2.serverResponse.portWss, r2 = t2.replace(/:\d+\/?$/, ":".concat(e3));
              this.emit(kg.STATE_CHANGE, Lg.CONNECT_WORKER, r2), this._needWorkUrlOnly ? this.emit(kg.REQUEST_NEW_WORKER_URL, r2) : await this.connectWorker(r2);
            }
          }), this.workerManagerConnection.on(Km.WILL_RECONNECT, (e2, t2) => {
            t2(e2);
          }), this.workerManagerConnection.on(Km.REQUEST_NEW_URLS, (e2, t2) => {
            this.requestAP(this._connectInfo, this._cancelTokenSource.token, this._retryConfig).then(e2).catch(t2);
          });
        }
        handleWorkerEvents() {
          this.workerConnection.on(Km.CONNECTED, async () => {
            this.emit(kg.STATE_CHANGE, Lg.WORKER_CONNECTED, this.workerConnection.url), this.connectionState = Pg.CONNECTED;
          }), this.workerConnection.on(Km.ON_MESSAGE, async (e2) => {
            if (e2.data instanceof ArrayBuffer) {
              const i2 = wL(new Uint8Array(e2.data));
              if (HE("SHOW_VIDEO_INSPECT_WORKER_MESSAGE") && NE.debug("[".concat(this._inspectId, "] Response message for worker of inspect content "), JSON.stringify(i2)), 200 === i2.code) {
                if (Array.isArray(this.inspectType) && 1 === this.inspectType.length && "supervise" === this.inspectType[0])
                  return void this.emit(kg.INSPECT_RESULT, void 0, void 0);
                if (i2.data && i2.data.scorePorn && i2.data.scoreSexy && i2.data.scoreNeutral) {
                  var t2;
                  const e3 = { porn: i2.data.scorePorn, sexy: i2.data.scoreSexy, neutral: i2.data.scoreNeutral }, r2 = zi(t2 = Object.keys(e3)).call(t2, (t3, i3) => e3[t3] > e3[i3] ? t3 : i3, "porn"), n2 = Object.keys(e3).find((e4) => e4 === r2);
                  this.emit(kg.INSPECT_RESULT, n2);
                } else
                  this.emit(kg.INSPECT_RESULT, void 0, new vE(TE.UNEXPECTED_RESPONSE, i2.code + "", "There is an unexpected data on message"));
              } else
                this.emit(kg.INSPECT_RESULT, void 0, new vE(TE.UNEXPECTED_RESPONSE, i2.code + "", i2.msg));
            } else
              NE.error("[".concat(this._inspectId, "] Unexpected message type from worker")), this.emit(kg.INSPECT_RESULT, void 0, new vE(TE.UNEXPECTED_RESPONSE, "invalid worker message type"));
          }), this.workerConnection.on(Km.CLOSED, () => {
            this.connectionState = Pg.CLOSED;
          }), this.workerConnection.on(Km.FAILED, () => {
            this.connectionState = Pg.CLOSED;
          }), this.workerConnection.on(Km.RECONNECTING, () => {
            this.connectionState = this.connectionState === Pg.CONNECTED ? Pg.RECONNECTING : Pg.CONNECTING;
          }), this.workerConnection.on(Km.WILL_RECONNECT, (e2, t2) => {
            "recover" === e2 && t2(e2), t2("tryNext");
          }), this.workerConnection.on(Km.REQUEST_NEW_URLS, (e2, t2) => {
            this.workerManagerConnection.close(), this.once(kg.REQUEST_NEW_WORKER_URL, (t3) => {
              e2([t3]);
            }), this.requestAP(this._connectInfo, this._cancelTokenSource.token, this._retryConfig).then((e3) => {
              this.connectWorkerManager(e3, true);
            }).catch((e3) => {
              t2(e3);
            });
          });
        }
        static intToLong(e2) {
          return { low: e2 |= 0, high: e2 >> 31, unsigned: e2 >= 0 };
        }
        async requestToInspectImage() {
          this.sequence++;
          const e2 = GR(this, kg.CLIENT_LOCAL_VIDEO_TRACK), t2 = { appId: this._connectInfo.appId, cname: this._connectInfo.cname, cid: this._connectInfo.cid, sid: this._connectInfo.sid, uid: this._connectInfo.uid, vid: this._connectInfo.vid };
          if (e2) {
            if (!e2.isPlaying)
              return void this.emit(kg.INSPECT_RESULT, void 0, new vE(TE.INVALID_OPERATION, "Only the track being played can be inspected"));
            const i2 = await this.generateRequestData(e2, t2);
            this.workerConnection.sendMessage(i2, true, true);
          } else
            this.emit(kg.INSPECT_RESULT, void 0, new vE(TE.INVALID_OPERATION, "Only the track being published can be inspected"));
        }
        async generateRequestData(e2, t2) {
          let { appId: i2, cname: r2, cid: n2, vid: o2, sid: s2, uid: a2 } = t2;
          const c2 = Date.now(), d2 = await e2.getCurrentFrameImage("image/jpeg", this.quality), u2 = await nk(d2, i2, r2), l2 = this.sequence + "-" + n2 + "-" + a2 + "-" + c2 + "-" + MR(12, ""), h2 = { appId: i2, cid: n2, cname: r2, deviceId: "", elapse: ak.intToLong(Number(c2 - this.inspectStartTime)), fileSize: u2.byteLength, jpgEncryption: 2, height: d2.height, width: d2.width, jpg: u2, networkType: 6, osType: 7, requestId: l2, sdkVersion: "4.16.1", sequence: this.sequence, sid: s2, timestamp: ak.intToLong(c2), uid: a2, vid: o2, service: this._inspectMode, callbackData: this.extraInfo, ossFilePrefix: this.ossFilePrefix };
          void 0 === this.extraInfo && delete h2.callbackData, void 0 === this.ossFilePrefix && delete h2.ossFilePrefix;
          const p2 = bL(h2);
          if (p2.byteLength < this.workerMessageLengthLimit) {
            if (HE("SHOW_VIDEO_INSPECT_WORKER_MESSAGE")) {
              const e3 = function(e4) {
                for (var t3 = 1; t3 < arguments.length; t3++) {
                  var i3 = null != arguments[t3] ? arguments[t3] : {};
                  t3 % 2 ? ok(Object(i3), true).forEach(function(t4) {
                    mp(e4, t4, i3[t4]);
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(i3)) : ok(Object(i3)).forEach(function(t4) {
                    Object.defineProperty(e4, t4, Object.getOwnPropertyDescriptor(i3, t4));
                  });
                }
                return e4;
              }({}, h2);
              delete e3.jpg, NE.debug("[".concat(this._inspectId, "] Request message for worker of inspect content "), JSON.stringify(e3));
            }
            return p2;
          }
          {
            const t3 = this.quality * this.qualityRatio;
            return this.quality = t3, await this.generateRequestData(e2, { appId: i2, cname: r2, cid: n2, vid: o2, sid: s2, uid: a2 });
          }
        }
        close() {
          this._cancelTokenSource.cancel(), this._cancelTokenSource = fE.CancelToken.source(), this.workerManagerConnection && this.workerManagerConnection.close(), this.workerConnection && this.workerConnection.close(), this.inspectTimer && window.clearInterval(this.inspectTimer), this.inspectTimer = null, this.connectionState = Pg.CLOSED, this.emit(kg.STATE_CHANGE, Lg.CLOSED);
        }
      }
      var ck, dk, uk, lk, hk, pk, _k, Ek, fk, mk, gk, Sk, Tk, vk, Rk, Ik, yk, Ck, Ak, Ok, bk, wk, Nk, Dk, Pk, Lk, kk, Mk, Uk, xk, Vk, jk, Fk, Bk, Gk, Wk, Hk, Kk, Yk;
      function qk(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function Jk(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? qk(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : qk(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let Xk = (ck = RT(), dk = RT({ argsMap: (e2, t2) => (Array.isArray(t2) || (t2 = [t2]), t2.map((e3) => e3 ? Object(e3).toString() : "null")) }), uk = RT({ argsMap: (e2, t2) => (t2 || (t2 = []), Array.isArray(t2) || (t2 = [t2]), t2.map((e3) => e3.getTrackId())) }), lk = RT({ argsMap: (e2, t2, i2) => [t2.uid, i2] }), hk = RT({ argsMap: (e2, t2) => t2.map((e3) => {
        let { user: t3, mediaType: i2 } = e3;
        return [null == t3 ? void 0 : t3.uid, i2];
      }) }), pk = RT({ argsMap: (e2, t2, i2) => [t2.uid, i2] }), _k = RT({ argsMap: (e2, t2) => t2.map((e3) => {
        let { user: t3, mediaType: i2 } = e3;
        return { uid: null == t3 ? void 0 : t3.uid, mediaType: i2 };
      }) }), Ek = RT(), fk = RT(), mk = RT(), gk = RT(), Sk = RT(), Tk = RT(), vk = RT(), Rk = RT(), Ik = RT(), yk = RT(), Ck = RT(), Ak = RT(), Ok = RT(), bk = RT(), wk = RT({ argsMap: (e2, t2) => [t2] }), Nk = RT(), Dk = RT(), Pk = RT(), Lk = RT(), kk = RT(), Mk = RT(), Uk = RT(), xk = RT(), Vk = RT(), jk = RT(), Fk = RT({ argsMap: (e2, t2) => (Array.isArray(t2) || (t2 = [t2]), [JSON.stringify(t2)]) }), Bk = RT(), Gk = RT(), Wk = RT(), Hk = RT({ reportResult: true }), Kk = RT(), ZS((Yk = class extends gE {
        get connectionState() {
          return this._gateway.state;
        }
        get remoteUsers() {
          return this._users;
        }
        get localTracks() {
          return this._p2pChannel.getAllTracks(true);
        }
        get uid() {
          return this._uid;
        }
        get channelName() {
          return this._channelName;
        }
        get isStringUID() {
          return !!this._joinInfo && !!this._joinInfo.stringUid;
        }
        get __className__() {
          return "Client";
        }
        constructor(e2) {
          let t2;
          if (super(), mp(this, "store", void 0), mp(this, "_uid", void 0), mp(this, "_channelName", void 0), mp(this, "_uintUid", void 0), mp(this, "_users", []), mp(this, "_codec", void 0), mp(this, "_mode", void 0), mp(this, "_config", void 0), mp(this, "_clientId", void 0), mp(this, "_appId", void 0), mp(this, "_sessionId", null), mp(this, "_key", void 0), mp(this, "_joinInfo", void 0), mp(this, "_gateway", void 0), mp(this, "_statsCollector", void 0), mp(this, "_configDistribute", void 0), mp(this, "_leaveMutex", new OT("client-leave")), mp(this, "_publishMutex", new OT("client-publish")), mp(this, "_renewTokenMutex", new OT("client-renewtoken")), mp(this, "_subscribeMutex", new OT("client-subscribe")), mp(this, "_encryptionMode", "none"), mp(this, "_encryptionSecret", null), mp(this, "_encryptionSalt", null), mp(this, "_proxyServer", void 0), mp(this, "_turnServer", { servers: [], mode: "auto" }), mp(this, "_cloudProxyServerMode", "disabled"), mp(this, "_isDualStreamEnabled", false), mp(this, "_defaultStreamFallbackType", void 0), mp(this, "_lowStreamParameter", void 0), mp(this, "_streamFallbackTypeCacheMap", /* @__PURE__ */ new Map()), mp(this, "_remoteStreamTypeCacheMap", /* @__PURE__ */ new Map()), mp(this, "_axiosCancelSource", fE.CancelToken.source()), mp(this, "_audioVolumeIndicationInterval", void 0), mp(this, "_networkQualityInterval", void 0), mp(this, "_userOfflineTimeout", void 0), mp(this, "_streamRemovedTimeout", void 0), mp(this, "_injectStreamingClient", void 0), mp(this, "_liveTranscodeStreamingClient", void 0), mp(this, "_liveRawStreamingClient", void 0), mp(this, "_channelMediaRelayClient", void 0), mp(this, "_networkQualitySensitivity", "normal"), mp(this, "_p2pChannel", void 0), mp(this, "_useLocalAccessPoint", false), mp(this, "_setLocalAPVersion", void 0), mp(this, "_joinAndNotLeaveYet", false), mp(this, "_numberOfJoinCount", 0), mp(this, "_remoteDefaultVideoStreamType", void 0), mp(this, "_inspect", void 0), mp(this, "_license", void 0), mp(this, "_handleLocalTrackEnable", (e3, t3, i2) => {
            this.publish(e3, false).then(t3).catch(i2);
          }), mp(this, "_handleLocalTrackDisable", (e3, t3, i2) => {
            this.unpublish(e3).then(t3).catch(i2);
          }), mp(this, "_handleUserOnline", (e3) => {
            this.isStringUID && "string" != typeof e3.uid && NE.error("[".concat(this._clientId, "] StringUID is Mixed with UintUID"));
            const t3 = this._users.find((t4) => t4.uid === e3.uid);
            if (t3)
              t3._trust_in_room_ = true;
            else {
              const t4 = new mw(e3.uid, e3.uint_id || e3.uid);
              this._users.push(t4), NE.debug("[".concat(this._clientId, "] user online"), e3.uid), this.emit(Am.USER_JOINED, t4);
            }
          }), mp(this, "_handleUserOffline", (e3) => {
            const t3 = this._users.find((t4) => t4.uid === e3.uid);
            t3 && (this._handleRemoveStream(e3), HR(this._users, t3), this._remoteStreamTypeCacheMap.delete(t3.uid), this._streamFallbackTypeCacheMap.delete(t3.uid), NE.debug("[".concat(this._clientId, "] user offline"), e3.uid, "reason:", e3.reason), this.emit(Am.USER_LEAVED, t3, e3.reason));
          }), mp(this, "_handleAddAudioOrVideoStream", (e3, t3, i2, r2, n2, o2, s2) => {
            const a2 = this._users.find((e4) => e4.uid === t3);
            if (!a2)
              return void NE.error("[".concat(this._clientId, "] can not find target user!(on_add_stream)"));
            NE.debug("[".concat(this._clientId, "] stream added with uid ").concat(t3, ", type ").concat(e3)), this.store.subscribe(a2.uid, e3, void 0, void 0, void 0, Date.now());
            const c2 = "audio" === e3 ? a2.hasAudio : a2.hasVideo;
            a2._uintid || (a2._uintid = n2 || t3), "audio" === e3 ? a2._trust_audio_stream_added_state_ = true : a2._trust_video_stream_added_state_ = true, "audio" === e3 ? (a2._audio_added_ = true, void 0 !== i2 && (a2._audioSSRC = i2), void 0 !== r2 && (a2._cname = r2), o2 && (a2._audioOrtc = o2)) : (a2._video_added_ = true, void 0 !== i2 && (a2._videoSSRC = i2), void 0 !== r2 && (a2._cname = r2), void 0 !== s2 && (a2._rtxSsrcId = s2), o2 && (a2._videoOrtc = o2)), ("audio" === e3 ? a2.hasAudio : a2.hasVideo) && !c2 && (NE.info("[".concat(this._clientId, "] remote user ").concat(a2.uid, " published ").concat(e3)), this.emit(Am.USER_PUBLISHED, a2, e3)), "video" === e3 ? IT.onGatewayStream(this._sessionId, lm.ON_ADD_VIDEO_STREAM, hm.ON_ADD_VIDEO_STREAM, { peer: n2 || t3 }) : IT.onGatewayStream(this._sessionId, lm.ON_ADD_AUDIO_STREAM, hm.ON_ADD_AUDIO_STREAM, { peer: n2 || t3 }), this._p2pChannel.remoteMediaSsrcChanged(a2, e3, i2).then((t4) => {
              if (t4)
                return NE.debug("[".concat(this._clientId, "] resubscribe ").concat(e3, " for user ").concat(a2.uid, " after rejoin because SSRC id changed.")), this._p2pChannel.unsubscribe(a2, e3, true).then(() => this._subscribe(a2, e3, true).catch((e4) => {
                  NE.error("[".concat(this._clientId, "] resubscribe error"), e4.toString());
                }));
            }), this._p2pChannel.hasPendingRemoteMedia(a2, e3) && (NE.debug("[".concat(this._clientId, "] resubscribe ").concat(e3, " for user ").concat(a2.uid, " after reconnect.")), this._subscribe(a2, e3, true).catch((e4) => {
              NE.error("[".concat(this._clientId, "] resubscribe error"), e4.toString());
            }));
          }), mp(this, "_handleRemoveStream", (e3) => {
            const t3 = this._users.find((t4) => t4.uid === e3.uid);
            if (!t3)
              return void NE.warning("[".concat(this._clientId, "] can not find target user!(on_remove_stream)"));
            NE.debug("[".concat(this._clientId, "] stream removed with uid ").concat(e3.uid));
            let i2 = () => {
            };
            t3.hasAudio && t3.hasVideo ? i2 = () => {
              NE.info("[".concat(this._clientId, "] remote user ").concat(t3.uid, " unpublished audio track")), this.emit(Am.USER_UNPUBLISHED, t3, "audio"), NE.info("[".concat(this._clientId, "] remote user ").concat(t3.uid, " unpublished video track")), this.emit(Am.USER_UNPUBLISHED, t3, "video");
            } : t3.hasVideo ? i2 = () => {
              NE.info("[".concat(this._clientId, "] remote user ").concat(t3.uid, " unpublished video track")), this.emit(Am.USER_UNPUBLISHED, t3, "video");
            } : t3.hasAudio && (i2 = () => {
              NE.info("[".concat(this._clientId, "] remote user ").concat(t3.uid, " unpublished audio track")), this.emit(Am.USER_UNPUBLISHED, t3, "audio");
            }), t3._trust_audio_stream_added_state_ = true, t3._trust_video_stream_added_state_ = true, t3._audio_added_ = false, t3._video_added_ = false, this._p2pChannel.unsubscribe(t3).then((e4) => {
              if (e4)
                return this._gateway.unsubscribe(e4, t3.uid);
            }), t3._audioSSRC = void 0, t3._videoSSRC = void 0, t3._audioOrtc = void 0, t3._videoOrtc = void 0, t3._rtxSsrcId = void 0, IT.onGatewayStream(this._sessionId, lm.ON_REMOVE_STREAM, hm.ON_REMOVE_STREAM, { peer: e3.uint_id || e3.uid }), i2();
          }), mp(this, "_handleSetStreamLocalEnable", (e3, t3, i2) => {
            const r2 = this._users.find((e4) => e4.uid === t3);
            if (!r2)
              return void NE.error("[".concat(this._clientId, "] can not find target user!(disable_local)"));
            NE.debug("[".concat(this._clientId, "] local ").concat(e3, " ").concat(i2 ? "enabled" : "disabled", " with uid ").concat(t3));
            const n2 = "audio" === e3 ? r2.hasAudio : r2.hasVideo;
            if ("audio" === e3) {
              r2._trust_audio_enabled_state_ = true;
              const e4 = r2._audio_enabled_;
              if (r2._audio_enabled_ = i2, r2._audio_enabled_ === e4)
                return;
              {
                const e5 = r2._audio_enabled_ ? "enable-local-audio" : "disable-local-audio";
                NE.debug("[".concat(this._clientId, "] user-info-updated, uid: ").concat(t3, ", msg: ").concat(e5)), this.emit(Am.USER_INFO_UPDATED, t3, e5);
              }
            } else {
              r2._trust_video_enabled_state_ = true;
              const e4 = r2._video_enabled_;
              if (r2._video_enabled_ = i2, r2._video_enabled_ === e4)
                return;
              {
                const e5 = r2._video_enabled_ ? "enable-local-video" : "disable-local-video";
                NE.debug("[".concat(this._clientId, "] user-info-update, uid: ").concat(t3, ", msg: ").concat(e5)), this.emit(Am.USER_INFO_UPDATED, t3, e5);
              }
            }
            const o2 = "audio" === e3 ? r2.hasAudio : r2.hasVideo;
            return n2 !== o2 ? !n2 && o2 ? (NE.info("[".concat(this._clientId, "] remote user ").concat(t3, " published ").concat(e3)), void this.emit(Am.USER_PUBLISHED, r2, e3)) : ("video" === e3 && r2._videoTrack && r2._videoTrack._destroy(), "audio" === e3 && r2._audioTrack, this._p2pChannel.muteRemote(r2, e3), NE.info("[".concat(this._clientId, "] remote user ").concat(t3, " unpublished ").concat(e3)), void this.emit(Am.USER_UNPUBLISHED, r2, e3)) : void 0;
          }), mp(this, "_handleMuteStream", (e3, t3, i2) => {
            NE.debug("[".concat(this._clientId, "] receive mute message"), e3, t3, i2);
            const r2 = this._users.find((t4) => t4.uid === e3);
            if (!r2)
              return void NE.warning("[".concat(this._clientId, "] can not find remote user, ignore mute event, uid: ").concat(e3));
            const n2 = "audio" === t3 ? r2.hasAudio : r2.hasVideo;
            if ("audio" === t3) {
              r2._trust_audio_mute_state_ = true;
              const t4 = r2._audio_muted_;
              if (r2._audio_muted_ = i2, r2._audio_muted_ === t4)
                return;
              {
                const t5 = r2._audio_muted_ ? "mute-audio" : "unmute-audio";
                NE.debug("[".concat(this._clientId, "] user-info-update, uid: ").concat(e3, ", msg: ").concat(t5)), this.emit(Am.USER_INFO_UPDATED, e3, t5);
              }
            } else {
              r2._trust_video_mute_state_ = true;
              const t4 = r2._video_muted_;
              if (r2._video_muted_ = i2, r2._video_muted_ === t4)
                return;
              {
                const t5 = r2._video_muted_ ? "mute-video" : "unmute-video";
                NE.debug("[".concat(this._clientId, "] user-info-update, uid: ").concat(e3, ", msg: ").concat(t5)), this.emit(Am.USER_INFO_UPDATED, e3, t5);
              }
            }
            const o2 = "audio" === t3 ? r2.hasAudio : r2.hasVideo;
            if (n2 !== o2) {
              if (!n2 && o2) {
                return ("audio" === t3 ? r2._audioSSRC : r2._videoSSRC) ? (NE.info("[".concat(this._clientId, "] remote user ").concat(e3, " published ").concat(t3)), void this.emit(Am.USER_PUBLISHED, r2, t3)) : void NE.warning("[".concat(this._clientId, "] remote user ").concat(e3, " receive ").concat(t3, " unmute message  before add stream message, ").concat(t3, " SSRC doesn't exist yet."));
              }
              "video" === t3 && r2._videoTrack && r2._videoTrack._destroy(), "audio" === t3 && r2._audioTrack, this._p2pChannel.muteRemote(r2, t3), NE.info("[".concat(this._clientId, "] remote user ").concat(e3, " unpublished ").concat(t3)), this.emit(Am.USER_UNPUBLISHED, r2, t3);
            }
          }), mp(this, "_handleP2PLost", async (e3) => {
            NE.debug("[".concat(this._clientId, "] receive p2p lost"), e3), parseInt(e3.p2pid, 10) === this.store.p2pId ? await this._p2pChannel.requestReconnect() : NE.warning("P2PLost stream not found", e3);
          }), mp(this, "_handleTokenWillExpire", () => {
            NE.debug("[".concat(this._clientId, "] received message onTokenPrivilegeWillExpire")), this.emit(Am.ON_TOKEN_PRIVILEGE_WILL_EXPIRE);
          }), mp(this, "_handleBeforeUnload", (e3) => {
            "beforeunload" === e3.type && void 0 !== e3.returnValue && "" !== e3.returnValue || (this.leave(), NE.info("[".concat(this._clientId, "] auto leave onbeforeunload or pagehide")));
          }), mp(this, "_handleUpdateNetworkQuality", () => {
            if ("normal" === this._networkQualitySensitivity)
              return;
            if (navigator && void 0 !== navigator.onLine && !navigator.onLine)
              return void this.emit(Am.NETWORK_QUALITY, { downlinkNetworkQuality: 6, uplinkNetworkQuality: 6 });
            const e3 = { downlinkNetworkQuality: 0, uplinkNetworkQuality: 0 };
            e3.uplinkNetworkQuality = this._p2pChannel.getUplinkNetworkQuality(), e3.downlinkNetworkQuality = this._p2pChannel.getDownlinkNetworkQuality(), this.emit(Am.NETWORK_QUALITY, e3);
          }), this._codec = e2.codec, this._mode = e2.mode, this._clientId = MR(5, "client-"), this.store = new yL(e2.codec, e2.audioCodec, e2.mode, this._clientId), this.store.clientCreated(), e2.proxyServer && this.setProxyServer(e2.proxyServer, true), e2.turnServer && this.setTurnServer(e2.turnServer, true), NE.info("[".concat(this._clientId, "] Initializing AgoraRTC client v").concat(PE, " build: ").concat(DE, ", mode: ").concat(this._mode, ", codec: ").concat(this._codec)), e2.clientRoleOptions)
            try {
              jm(e2.clientRoleOptions), t2 = Object.assign({}, e2.clientRoleOptions);
            } catch (e3) {
              NE.warning("[".concat(this._clientId, "] ").concat(e3.toString()));
            }
          this._statsCollector = new fR(this.store), this._statsCollector.onStatsException = (e3, t3, i2) => {
            NE.debug("[".concat(this._clientId, "] receive exception msg, code: ").concat(e3, ", msg: ").concat(t3, ", uid: ").concat(i2)), this.emit(Am.EXCEPTION, { code: e3, msg: t3, uid: i2 });
          }, this._statsCollector.onUploadPublishDuration = (e3, t3, i2, r2) => {
            const n2 = this._users.find((t4) => t4.uid === e3);
            n2 && IT.peerPublishStatus(this._sessionId, { subscribeElapse: r2, audioPublishDuration: t3, videoPublishDuration: i2, peer: n2._uintid });
          }, this._gateway = new _O(this.store, { clientId: this._clientId, mode: this._mode, codec: this._codec, websocketRetryConfig: e2.websocketRetryConfig || RE, httpRetryConfig: e2.httpRetryConfig || RE, forceWaitGatewayResponse: void 0 === e2.forceWaitGatewayResponse || e2.forceWaitGatewayResponse, statsCollector: this._statsCollector, role: e2.role, clientRoleOptions: t2 }), this._config = e2, this._configDistribute = new HO(), this._p2pChannel = new pL(this.store, this._statsCollector), this._handleP2PChannelEvents(), this._handleGatewayEvents(), this._handleGatewaySignalEvents();
        }
        async join(e2, t2, i2, r2, n2) {
          const o2 = ++this._numberOfJoinCount;
          this.store.joinStart(), r2 && (this.store.uid = r2);
          const s2 = AL(), a2 = OL() ? window.isSecureContext : "Browser Not Support";
          if (!OL() && !s2 || !window.isSecureContext) {
            const e3 = "The website must be running in a secure context (About secure context: https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts ), otherwise the media collection will be restricted by the browser";
            NE.warning(e3);
          }
          const c2 = UR();
          "DISCONNECTED" === this.connectionState && (this.store.avoidJoinStart = Math.round(Date.now()), NE.debug("[".concat(this._clientId, "] set avoidJoinStart to ").concat(this.store.avoidJoinStart)));
          const d2 = IT.reportApiInvoke(c2, { name: Em.JOIN, options: [e2, t2, i2, r2], states: { isHttps: s2, isSecureContext: a2 }, tag: fm.TRACER });
          IT.setAppId(e2);
          try {
            if (!i2 && null !== i2)
              throw new vE(TE.INVALID_PARAMS, "Invalid token: ".concat(i2, ". If you don not use token, set it to null"));
            i2 && Qf(i2, "token", 1, 2047), Qf(e2, "appid", 1, 2047), $f(t2), r2 && em(r2), n2 && Qf(n2, "optionalInfo", 1, 2047);
          } catch (e3) {
            throw d2.onError(e3), e3;
          }
          if (NE.info("[".concat(this._clientId, "] start join channel ").concat(t2, ", join number: ").concat(o2)), this._leaveMutex.isLocked) {
            NE.debug("[".concat(this._clientId, "] join: waiting leave operation"));
            (await this._leaveMutex.lock())(), NE.debug("[".concat(this._clientId, "] join: continue"));
          }
          if (this._joinAndNotLeaveYet = true, "DISCONNECTED" !== this.connectionState) {
            const e3 = new vE(TE.INVALID_OPERATION, "[".concat(this._clientId, "] Client already in connecting/connected state"));
            throw d2.onError(e3), e3;
          }
          this._sessionId || (this._sessionId = c2, this.store.sessionId = this._sessionId), this._gateway.state = "CONNECTING";
          const u2 = Jk({ clientId: this._clientId, appId: e2, sid: this._sessionId, cname: t2, uid: "string" != typeof r2 ? r2 : null, turnServer: this._turnServer, proxyServer: this._proxyServer, token: i2 || e2, cloudProxyServer: this._cloudProxyServerMode, optionalInfo: n2, license: this._license, useLocalAccessPoint: this._useLocalAccessPoint }, void 0 !== this._remoteDefaultVideoStreamType && { defaultVideoStream: this._remoteDefaultVideoStreamType });
          if (this._useLocalAccessPoint && (u2.setLocalAPVersion = this._setLocalAPVersion), "string" == typeof r2 && (u2.stringUid = r2, this._uintUid ? (u2.uid = this._uintUid, this._uintUid = void 0) : u2.uid = 0), "none" !== this._encryptionMode && this._encryptionSecret) {
            if (u2.aesmode = this._encryptionMode, u2.aespassword = await (async (e3) => {
              const t3 = zR("MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCMnXAHkKIGAM+x4N22gCI+Wyu\nSTM9ztkT3uYslTT2PuKmZfPzhH6kVdO7PTjGCOZnAsyb3oTtWat0KcxQ4jxvqQV+\nHvYl3iI1Yd4vl2c3qRMJPLtRDfNxa2Mcxgq7e9aEUibzdd0st+OJAy3tOj/Y0aVy\nxQiYDz3vqa6bP29adwIDAQAB"), i3 = await window.crypto.subtle.importKey("spki", t3, { name: "RSA-OAEP", hash: "SHA-256" }, true, ["encrypt"]), r3 = mT(e3), n3 = await window.crypto.subtle.encrypt({ name: "RSA-OAEP" }, i3, r3);
              return QR(new Uint8Array(n3));
            })(this._encryptionSecret), !this._joinAndNotLeaveYet)
              throw new vE(TE.INVALID_OPERATION, "[".concat(this._clientId, "] Client already left"));
            this._encryptionSalt && (u2.aessalt = this._encryptionSalt);
          }
          this._startSession(this._sessionId, { channel: t2, appId: e2 });
          const l2 = this._sessionId;
          setTimeout(() => {
            "CONNECTING" === this.connectionState && l2 === this._sessionId && IT.joinChannelTimeout(this._sessionId, 5);
          }, 5e3);
          try {
            let r3;
            const n3 = u2.cloudProxyServer;
            if (["proxy3", "proxy4", "proxy5"].includes(n3)) {
              const e3 = HE("PROXY_SERVER_TYPE3");
              Array.isArray(e3) ? u2.proxyServer = e3[0] : u2.proxyServer = e3;
            }
            if (IT.setProxyServer(u2.proxyServer), NE.setProxyServer(u2.proxyServer), this.store.requestAPStart(), u2.stringUid && !u2.uid) {
              const e3 = await UO(u2.stringUid, u2, this._axiosCancelSource.token, this._config.httpRetryConfig || RE, this.store);
              NE.debug("getUserAccount Success ".concat(u2.stringUid, " => ").concat(e3)), u2.uid = e3, r3 = await MO(u2, this._axiosCancelSource.token, this._config.httpRetryConfig || RE, true, this.store);
            } else
              r3 = await MO(u2, this._axiosCancelSource.token, this._config.httpRetryConfig || RE, true, this.store);
            if (!this._joinAndNotLeaveYet)
              throw new vE(TE.INVALID_OPERATION, "[".concat(this._clientId, "] Client already left"));
            this.store.requestAPEnd(), setTimeout(() => {
              this._configDistribute.startGetConfigDistribute(u2, this._axiosCancelSource.token), this._configDistribute.on(Rg.UPDATE_BITRATE_LIMIT, (e3) => {
                this._p2pChannel.updateBitrateLimit(e3);
              });
            }, 0), this._key = i2 || e2;
            const o3 = r3.gatewayInfo;
            this._joinInfo = Jk(Jk({}, u2), {}, { cid: o3.cid, uid: u2.uid ? u2.uid : o3.uid, vid: o3.vid, apResponse: o3.res, uni_lbs_ip: o3.uni_lbs_ip, gatewayAddrs: o3.gatewayAddrs });
            const s3 = await this._joinGateway();
            if (!this._joinAndNotLeaveYet)
              throw new vE(TE.INVALID_OPERATION, "[".concat(this._clientId, "] Client already left"));
            d2.onSuccess(s3), this._appId = e2, this._channelName = u2.cname, this._uid = s3, this.store.uid = s3, setTimeout(() => {
              this._networkQualityInterval && window.clearInterval(this._networkQualityInterval), this._networkQualityInterval = window.setInterval(this._handleUpdateNetworkQuality, 2e3), window.addEventListener(zh() ? "beforeunload" : "pagehide", this._handleBeforeUnload);
            }, 0);
            const a3 = u2.stringUid ? "string uid: ".concat(u2.stringUid, ",uid: ").concat(u2.uid) : "uid: ".concat(this._uid);
            return NE.info("[".concat(this._clientId, "] Joining channel success: channel: ").concat(t2, ",").concat(a3)), setTimeout(() => {
              NE.startUpload();
            }, 5e3), this.store.joinEnd(), h2 = this, ZE.includes(h2) || ZE.push(h2), s3;
          } catch (e3) {
            const t3 = Array.isArray(e3) ? e3[0] : e3;
            throw NE.error("[".concat(this._clientId, "] join number: ").concat(o2, ", Joining channel failed, rollback"), t3), t3.code !== TE.OPERATION_ABORTED && this._numberOfJoinCount === o2 && (this._gateway.state = "DISCONNECTED", this._reset()), d2.onError(t3), t3;
          }
          var h2;
        }
        _joinGateway() {
          if (!this._joinInfo || !this._key)
            throw new vE(TE.INVALID_OPERATION);
          return this._gateway.join(this._joinInfo, this._key, !("disabled" !== this._joinInfo.cloudProxyServer || this._joinInfo.proxyServer || !HE("JOIN_WITH_FALLBACK_SIGNAL_PROXY"))).then((e2) => e2).catch((e2) => {
            if (e2.code === TE.INIT_WEBSOCKET_TIMEOUT)
              return this._gateway.leave(true, Cm.FALLBACK), e2;
            if (e2.code === TE.INIT_DATACHANNEL_TIMEOUT)
              return this._gateway.leave(true, Cm.FALLBACK), e2;
            throw e2;
          }).then((e2) => {
            if (e2 instanceof vE) {
              if (e2.code === TE.INIT_WEBSOCKET_TIMEOUT) {
                if (NE.info("[".concat(this._clientId, "] join timeout, fallback to proxy")), !this._joinInfo || !this._key)
                  throw new vE(TE.INVALID_OPERATION);
                this._joinInfo.cloudProxyServer = "fallback", this._cloudProxyServerMode = "fallback", this.store.cloudProxyServerMode = "fallback";
                const e3 = HE("PROXY_SERVER_TYPE3");
                if (Array.isArray(e3))
                  if (this._joinInfo.apUrl) {
                    const t3 = new YA(this._joinInfo.apUrl).host.split("."), i2 = t3.slice(t3.length - 2).join(".");
                    e3.forEach((e4) => {
                      this._joinInfo && e4.includes(i2) && (this._joinInfo.proxyServer = e4);
                    }), this._joinInfo.proxyServer || (this._joinInfo.proxyServer = e3[0]);
                  } else
                    this._joinInfo.proxyServer = e3[0];
                else
                  this._joinInfo.proxyServer = e3;
                const t2 = HE("LOG_UPLOAD_SERVER").match(/.+:(\d{1,5})$/);
                t2 && t2[1] && "443" !== t2[1] && NE.setProxyServer(this._joinInfo.proxyServer), "443" !== HE("STATS_COLLECTOR_PORT").toString() && IT.setProxyServer(this._joinInfo.proxyServer);
                return IT.reportApiInvoke(this._sessionId, { name: Em.JOIN_FALLBACK_TO_PROXY, options: [this._joinInfo.proxyServer], tag: fm.TRACER }).onSuccess(), this.emit(Am.JOIN_FALLBACK_TO_PROXY, this._joinInfo.proxyServer), this._gateway.join(this._joinInfo, this._key);
              }
              if (NE.info("[".concat(this._clientId, "] join by datachannel timeout, fallback to websocket")), !this._joinInfo || !this._key)
                throw new vE(TE.INVALID_OPERATION);
              return IT.reportApiInvoke(this._sessionId, { name: Em.DATACHANNEL_FAILBACK, options: [this.store.clientId], tag: fm.TRACER }).onSuccess(), this._joinGateway();
            }
            return e2;
          }).then((e2) => e2);
        }
        async leave() {
          NE.info("[".concat(this._clientId, "] Leaving channel")), window.removeEventListener(zh() ? "beforeunload" : "pagehide", this._handleBeforeUnload), this._reset(), function(e3) {
            const t2 = ZE.indexOf(e3);
            -1 !== t2 && ZE.splice(t2, 1);
          }(this);
          const e2 = await this._leaveMutex.lock();
          if ("DISCONNECTED" === this.connectionState)
            return NE.info("[".concat(this._clientId, "] Leaving channel repeated, success")), void e2();
          await this._gateway.leave("CONNECTED" !== this.connectionState), NE.info("[".concat(this._clientId, "] Leaving channel success")), this._joinAndNotLeaveYet = false, this.store.resetJoinChannelServiceRecords(), e2();
        }
        async publish(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (Array.isArray(e2) || (e2 = [e2]), 0 === e2.length)
            throw new vE(TE.INVALID_PARAMS, "track list is empty");
          if ("audience" === this._gateway.role)
            throw new vE(TE.INVALID_OPERATION, "audience can not publish stream");
          for (const i3 of e2) {
            if (!(i3 instanceof wT))
              throw new vE(TE.INVALID_PARAMS, "parameter is not local track");
            if (!i3._enabled && t2)
              throw new vE(TE.TRACK_IS_DISABLED, "can not publish a disabled track: ".concat(i3.getTrackId()));
          }
          NE.info("[".concat(this._clientId, "] Publishing tracks, id ").concat(e2.map((e3) => "".concat(e3.getTrackId(), " ")))), await this._configDistribute.awaitConfigDistributeComplete(), t2 && e2.forEach((e3) => {
            const t3 = this._configDistribute.getBitrateLimit();
            e3 instanceof Ew && t3 && e3.setBitrateLimit(t3.uplink);
          });
          const i2 = await this._publishMutex.lock();
          try {
            await this._publishHighStream(e2), NE.info("[".concat(this._clientId, "] Publish success, id ").concat(e2.map((e3) => "".concat(e3.getTrackId(), " "))));
          } catch (e3) {
            throw NE.error("[".concat(this._clientId, "] publish error"), e3.toString()), e3;
          } finally {
            i2();
          }
        }
        async unpublish(e2) {
          if (!this._joinInfo || void 0 === this._uid)
            throw new vE(TE.INVALID_OPERATION, "Can't unpublish stream, haven't joined yet!");
          e2 ? Array.isArray(e2) || (e2 = [e2]) : e2 = this._p2pChannel.getAllTracks(true), NE.info("[".concat(this._clientId, "] Unpublish tracks, tracks ").concat(e2.map((e3) => "".concat(e3.getTrackId(), " ")), " "));
          const t2 = await this._publishMutex.lock();
          try {
            const i2 = await this._p2pChannel.unpublish(e2);
            i2 && await this._gateway.unpublish(i2, this._uid), NE.info("[".concat(this._clientId, "] Unpublish success,tracks ").concat(e2.map((e3) => "".concat(e3.getTrackId()))));
          } catch (e3) {
            throw NE.error("[".concat(this._clientId, "] unpublish error"), e3.toString()), e3;
          } finally {
            t2 && t2();
          }
        }
        async subscribe(e2, t2) {
          return this._subscribe(e2, t2);
        }
        async _subscribe(e2, t2, i2) {
          if (Jf(t2, "mediaType", ["audio", "video"]), !this._joinInfo)
            throw new vE(TE.INVALID_OPERATION, "Can't subscribe stream, not joined");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState)
            throw new vE(TE.INVALID_OPERATION, "Can't subscribe stream in ".concat(this.connectionState, " state"));
          if (!this._users.find((t3) => t3 === e2)) {
            const t3 = new vE(TE.INVALID_REMOTE_USER, "user is not in the channel");
            throw NE.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", this user is not in the channel")), t3;
          }
          if (!e2.hasAudio && !e2.hasVideo) {
            const t3 = new vE(TE.INVALID_REMOTE_USER, "user is not published");
            throw NE.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", user is not published")), t3;
          }
          if (!(i2 || ("audio" !== t2 || e2.hasAudio && void 0 !== e2._audioSSRC) && ("video" !== t2 || e2.hasVideo && void 0 !== e2._videoSSRC))) {
            const i3 = new vE(TE.REMOTE_USER_IS_NOT_PUBLISHED);
            throw NE.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, " with mediaType ").concat(t2, ", remote track is not published")), i3;
          }
          const r2 = "audio" === t2 ? e2._audioSSRC : e2._videoSSRC, n2 = "audio" === t2 ? e2._audioOrtc : e2._videoOrtc, o2 = "video" === t2 ? e2._rtxSsrcId : void 0, s2 = { stream_type: "audio" === t2 ? yg.AUDIO : yg.VIDEO, ssrcId: r2 }, a2 = await this._subscribeMutex.lock();
          NE.info("[".concat(this._clientId, "] subscribe user ").concat(e2.uid, ", mediaType: ").concat(t2));
          try {
            if (await this._p2pChannel.hasRemoteMediaWithLock(e2, t2))
              await this._p2pChannel.unmuteRemote(e2, t2);
            else
              try {
                pR.markSubscribeStart(this.store.clientId, r2), this.store.subscribe(e2.uid, t2, Date.now()), await this._p2pChannel.subscribe(e2, t2, r2, o2, n2);
                try {
                  await this._gateway.subscribe(e2.uid, s2, true);
                } catch (i4) {
                  if ((null == i4 ? void 0 : i4.code) !== TE.WS_ABORT)
                    throw await this._p2pChannel.unsubscribe(e2, t2), i4;
                  await this._p2pChannel.unsubscribe(e2, t2, true), this._p2pChannel.setPendingRemoteMedia(e2, t2);
                }
                this.store.subscribe(e2.uid, t2, void 0, Date.now()), this._p2pChannel.reportSubscribeEvent(true, null, e2, t2);
              } catch (i4) {
                throw this._p2pChannel.reportSubscribeEvent(false, null == i4 ? void 0 : i4.code, e2, t2), i4;
              }
            NE.info("[".concat(this._clientId, "] subscribe success user ").concat(e2.uid, ", mediaType: ").concat(t2)), this._defaultStreamFallbackType && this.setStreamFallbackOption(e2.uid, this._defaultStreamFallbackType).catch((e3) => {
              NE.warning("[".concat(this._clientId, "] auto set fallback failed"), e3);
            });
            const i3 = "audio" === t2 ? e2._audioTrack : e2._videoTrack;
            if (!i3)
              throw new vE(TE.UNEXPECTED_ERROR, "can not find remote track in user object");
            return i3;
          } catch (t3) {
            throw NE.error("[".concat(this._clientId, "] subscribe user ").concat(e2.uid, " error"), t3), t3;
          } finally {
            a2();
          }
        }
        async massSubscribe(e2) {
          if (Zf(e2, "subscribeList"), !this._joinInfo)
            throw new vE(TE.INVALID_OPERATION, "Can't subscribe stream, not joined");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState)
            throw new vE(TE.INVALID_OPERATION, "Can't subscribe stream in ".concat(this.connectionState, " state"));
          const t2 = Date.now(), i2 = /* @__PURE__ */ new Map(), r2 = await this._subscribeMutex.lock();
          NE.info("[".concat(this._clientId, "]start massSubscribe user ").concat(e2.map((e3) => {
            let { user: t3, mediaType: i3 } = e3;
            return "user: ".concat(null == t3 ? void 0 : t3.uid, ", mediaType: ").concat(i3);
          }).join("; ")));
          const n2 = (e2 = [...e2]).map((e3) => {
            let { user: t3, mediaType: i3 } = e3;
            return { user: t3, mediaType: i3 };
          }), o2 = await this._p2pChannel.globalLock();
          try {
            var s2;
            for (let t3 = e2.length - 1; t3 >= 0; t3--) {
              const r3 = e2[t3], { user: o3, mediaType: s3 } = r3;
              if (Jf(s3, "mediaType", ["audio", "video"]), !o3) {
                const e3 = new vE(TE.INVALID_PARAMS, "user property does not exist in subscribeList item");
                throw NE.error("[".concat(this._clientId, "] user property does not exist in subscribeList item")), e3;
              }
              if (!this._users.find((e3) => e3 === o3)) {
                const i3 = new vE(TE.INVALID_REMOTE_USER, "user is not in the channel");
                NE.error("[".concat(this._clientId, "] can not massSubscribe ").concat(o3.uid, ", this user is not in the channel")), n2[t3].error = i3, e2.splice(t3, 1);
                continue;
              }
              if ("audio" === s3 && (!o3.hasAudio || void 0 === o3._audioSSRC) || "video" === s3 && (!o3.hasVideo || void 0 === o3._videoSSRC)) {
                const i3 = new vE(TE.REMOTE_USER_IS_NOT_PUBLISHED);
                NE.error("[".concat(this._clientId, "] can not subscribe ").concat(o3.uid, " with mediaType ").concat(s3, ", remote user is not published")), n2[t3].error = i3, e2.splice(t3, 1);
                continue;
              }
              const a3 = dg.Video | dg.LwoVideo, c2 = i2.get(o3);
              if (c2) {
                if ("video" === s3 ? c2 & a3 : c2 & dg.Audio) {
                  e2.splice(t3, 1), NE.warning("repeat massSubscribe user:".concat(o3.uid, ", mediaType:").concat(s3, " twice"));
                  continue;
                }
                i2.set(o3, c2 | ("video" === s3 ? a3 : dg.Audio));
              } else
                i2.set(o3, "video" === s3 ? a3 : dg.Audio);
            }
            for (let t3 = e2.length - 1; t3 >= 0; t3--) {
              const r3 = e2[t3], { user: n3, mediaType: o3 } = r3, s3 = dg.Video | dg.LwoVideo;
              if (this._p2pChannel.hasRemoteMedia(n3, o3)) {
                await this._p2pChannel.unmuteRemoteNoLock(n3, o3);
                const r4 = i2.get(n3);
                i2.set(n3, "video" === o3 ? r4 ^ s3 : r4 ^ dg.Audio), e2.splice(t3, 1);
              }
            }
            this.store.massSubscribe(e2.map((e3) => ({ userId: e3.user.uid, type: e3.mediaType })), t2);
            const a2 = zi(s2 = Array.from(i2.entries())).call(s2, (e3, t3) => {
              let [i3, r3] = t3;
              if (0 === r3)
                return e3;
              const n3 = { stream_id: i3.uid, stream_type: r3 };
              return r3 & dg.Audio && (n3.audio_ssrc = i3._audioSSRC), r3 & dg.Video && (n3.video_ssrc = i3._videoSSRC), e3.push(n3), e3;
            }, []);
            try {
              e2.length > 0 && await this._p2pChannel.massSubscribeNoLock(e2.map((e3) => {
                let { user: t3, mediaType: i4 } = e3;
                return { user: t3, mediaType: i4, ssrcId: i4 === yg.VIDEO ? t3._videoSSRC : t3._audioSSRC, rtxSsrcId: t3._rtxSsrcId };
              }));
              const i3 = /* @__PURE__ */ new Map();
              if (a2.length > 0) {
                const e3 = await this._gateway.subscribeAll(a2, true);
                ((null == e3 ? void 0 : e3.users) || []).forEach((e4) => {
                  let { stream_id: t3, video_error_code: r3, audio_error_code: n3, error_code: o3 } = e4;
                  (r3 || n3 || o3) && i3.set(t3, { video_error_code: r3, audio_error_code: n3, error_code: o3 });
                });
              }
              if (Array.from(i3.entries()).length > 0) {
                const e3 = Array.from(i3.entries()).map((e4) => {
                  let t3, [i4, r3] = e4;
                  r3.error_code || r3.video_error_code && r3.audio_error_code ? t3 = void 0 : r3.video_error_code ? t3 = yg.VIDEO : r3.audio_error_code && (t3 = yg.AUDIO);
                  return { user: this.remoteUsers.find((e5) => e5.uid === i4), mediaType: t3 };
                });
                await this._p2pChannel.massUnsubscribeNoLock(e3);
              }
              for (const e3 of n2) {
                const t3 = i3.get(e3.user.uid);
                if (t3) {
                  const i4 = t3.error_code || "audio" === e3.mediaType && t3.audio_error_code || "video" === e3.mediaType && t3.video_error_code;
                  if (i4) {
                    const t4 = zA(i4);
                    NE.error("user:".concat(e3.user.uid, " mediaType:").concat(e3.mediaType, " has massSubscribe error ").concat(t4.desc)), e3.error = new vE(TE.SUBSCRIBE_FAILED, "code ".concat(i4, ": ").concat(t4.desc));
                  }
                }
                e3.error || ("video" === e3.mediaType ? e3.track = e3.user.videoTrack : e3.track = e3.user.audioTrack);
              }
              return this.store.massSubscribe(n2.filter((e3) => !e3.error).map((e3) => ({ userId: e3.user.uid, type: e3.mediaType })), void 0, Date.now()), n2.forEach((e3) => {
                var i4;
                IT.subscribe(this.store.sessionId, { succ: !!e3.error, ec: (null === (i4 = e3.error) || void 0 === i4 ? void 0 : i4.code) || null, video: e3.mediaType === yg.VIDEO, audio: e3.mediaType === yg.AUDIO, peerid: e3.user.uid, subscribeRequestid: e3.mediaType === yg.VIDEO ? e3.user._videoSSRC : e3.user._audioSSRC, p2pid: this.store.p2pId, eventElapse: Math.floor(performance.now() - t2) }, true);
              }), NE.info("[".concat(this._clientId, "] massSubscribe success ").concat(e2.map((e3) => {
                let { user: t3, mediaType: i4 } = e3;
                return "user: ".concat(null == t3 ? void 0 : t3.uid, ", mediaType: ").concat(i4);
              }).join("; "))), n2;
            } catch (t3) {
              throw await this._p2pChannel.massUnsubscribeNoLock(e2), t3;
            }
          } finally {
            o2(), r2();
          }
        }
        async unsubscribe(e2, t2) {
          if (t2 && Jf(t2, "mediaType", ["audio", "video"]), !this._joinInfo)
            throw new vE(TE.INVALID_OPERATION, "Can't unsubscribe stream, haven't joined yet!");
          if (!this._users.find((t3) => t3 === e2)) {
            const t3 = new vE(TE.INVALID_REMOTE_USER, "user is not in the channel");
            throw NE.error("[".concat(this._clientId, "] can not unsubscribe ").concat(e2.uid, ", user is not in the channel")), t3;
          }
          NE.info("[".concat(this._clientId, "] unsubscribe uid: ").concat(e2.uid, ", mediaType: ").concat(t2));
          try {
            const i2 = await this._p2pChannel.unsubscribe(e2, t2);
            i2 && await this._gateway.unsubscribe(i2, e2.uid), NE.info("[".concat(this._clientId, "] unsubscribe success uid: ").concat(e2.uid, ", mediaType: ").concat(t2));
          } catch (t3) {
            if (t3.code === TE.DISCONNECT_P2P)
              return void NE.warning("disconnecting p2p, abort unsubscribe request.");
            throw NE.error("[".concat(this._clientId, "] unsubscribe user ").concat(e2.uid, " error"), t3.toString()), t3;
          }
        }
        async massUnsubscribe(e2) {
          if (Zf(e2, "unsubscribeList"), !this._joinInfo)
            throw new vE(TE.INVALID_OPERATION, "Can't unsubscribeAll stream, haven't joined yet!");
          NE.info("[".concat(this._clientId, "] start massUnsubscribe ").concat(e2.map((e3) => {
            let { user: t3, mediaType: i2 } = e3;
            return "user: ".concat(null == t3 ? void 0 : t3.uid, ", mediaType: ").concat(i2, ";");
          }).join())), e2 = [...e2];
          const t2 = /* @__PURE__ */ new Map();
          for (let i2 = e2.length - 1; i2 >= 0; i2--) {
            const { user: r2, mediaType: n2 } = e2[i2];
            if (!r2) {
              const e3 = new vE(TE.INVALID_PARAMS, "user property does not exist in unsubscribeList item");
              throw NE.error("[".concat(this._clientId, "] user property does not exist in unsubscribeList item")), e3;
            }
            Jf(n2, "mediaType", ["video", "audio", void 0]);
            if (!this._users.find((e3) => e3 === r2)) {
              NE.warning("[".concat(this._clientId, "] can not unsubscribe ").concat(r2.uid, ", user is not in the channel")), e2.splice(i2, 1);
              continue;
            }
            const o2 = dg.Video | dg.LwoVideo;
            if (t2.has(r2)) {
              const s2 = t2.get(r2);
              let a2;
              switch (n2) {
                case "video":
                  a2 = s2 & o2;
                  break;
                case "audio":
                  a2 = s2 & dg.Audio;
                  break;
                default:
                  a2 = s2 & (dg.Audio | o2);
              }
              if (a2) {
                NE.warning("repeat massUnsubscribe user:".concat(r2.uid, ",mediaType:").concat(n2, " twice.")), e2.splice(i2, 1);
                continue;
              }
              n2 ? "audio" === n2 ? t2.set(r2, s2 | dg.Audio) : "video" === n2 && t2.set(r2, s2 | o2) : t2.set(r2, s2 | dg.Audio | o2);
            } else
              n2 ? "audio" === n2 ? t2.set(r2, dg.Audio) : "video" === n2 && t2.set(r2, o2) : t2.set(r2, dg.Audio | o2);
          }
          try {
            const t3 = await this._p2pChannel.massUnsubscribe(e2);
            t3 && await this._gateway.massUnsubscribe(t3), NE.info("[".concat(this._clientId, "] massUnsubscribe success ").concat(e2.map((e3) => {
              let { user: t4, mediaType: i2 } = e3;
              return "user: ".concat(null == t4 ? void 0 : t4.uid, ", mediaType: ").concat(i2, ";");
            }).join()));
          } catch (e3) {
            if (e3.code === TE.DISCONNECT_P2P)
              return void NE.warning("disconnecting p2p, abort unsubscribe request.");
            throw NE.error("[".concat(this._clientId, "] massUnsubscribe error"), e3.toString()), e3;
          }
        }
        setLowStreamParameter(e2) {
          !function(e3) {
            if (!e3)
              throw new vE(TE.INVALID_PARAMS);
            tm(e3.width) || zf(e3.width, "streamParameter.width"), tm(e3.height) || zf(e3.height, "streamParameter.height"), tm(e3.framerate) || zf(e3.framerate, "streamParameter.framerate"), tm(e3.bitrate) || Xf(e3.bitrate, "streamParameter.bitrate");
          }(e2), (!e2.width && e2.height || e2.width && !e2.height) && NE.warning("[".concat(this._clientId, "] The width and height parameters take effect only when both are set")), NE.info("[".concat(this._clientId, "] set low stream parameter to"), JSON.stringify(e2));
          const t2 = this._configDistribute.getLowStreamConfigDistribute();
          t2 && t2.bitrate && e2.bitrate && t2.bitrate < e2.bitrate && (e2.bitrate = t2.bitrate), this._lowStreamParameter = e2;
        }
        async enableDualStream() {
          if (!jg().supportDualStream)
            throw IT.streamSwitch(this._sessionId, { lts: Date.now(), isdual: true, succ: false }), new vE(TE.NOT_SUPPORTED, "Your browser is not support dual stream");
          if (this._isDualStreamEnabled)
            throw new vE(TE.INVALID_OPERATION, "Dual stream is already enabled");
          if (this._p2pChannel.canPublishLowStream())
            try {
              await this._publishLowStream();
            } catch (e2) {
              throw IT.streamSwitch(this._sessionId, { lts: Date.now(), isdual: true, succ: false }), e2;
            }
          this._isDualStreamEnabled = true, IT.streamSwitch(this._sessionId, { lts: Date.now(), isdual: true, succ: true }), NE.info("[".concat(this._clientId, "] enable dual stream"));
        }
        async disableDualStream() {
          if (this._isDualStreamEnabled) {
            if (!this._joinInfo)
              throw new vE(TE.INVALID_OPERATION, "Can't publish stream, haven't joined yet!");
            if (this._p2pChannel.getLocalMedia(Cg.LocalVideoLowTrack))
              try {
                const e2 = await this._p2pChannel.unpublishLowStream();
                e2 && await this._gateway.unpublish(e2, this._joinInfo.stringUid || this._joinInfo.uid);
              } catch (e2) {
                throw IT.streamSwitch(this._sessionId, { lts: Date.now(), isdual: false, succ: false }), e2;
              }
            this._isDualStreamEnabled = false, IT.streamSwitch(this._sessionId, { lts: Date.now(), isdual: false, succ: true }), NE.info("[".concat(this._clientId, "] disable dual stream"));
          }
        }
        async setClientRole(e2, t2) {
          if (function(e3) {
            Jf(e3, "role", ["audience", "host"]);
          }(e2), t2 && jm(t2), "rtc" === this._mode)
            throw NE.warning("[".concat(this._clientId, "]rtc mode can not use setClientRole")), new vE(TE.INVALID_OPERATION, "rtc mode can not use setClientRole");
          if (t2 && t2.level && "host" === e2)
            throw new vE(TE.INVALID_OPERATION, "host mode can not set audience latency level");
          if ("audience" === e2 && this._p2pChannel.hasLocalMedia())
            throw new vE(TE.INVALID_OPERATION, "can not set client role to audience when publishing stream");
          await this._gateway.setClientRole(e2, t2), NE.info("[".concat(this._clientId, "] set client role to ").concat(e2, ", level: ").concat(t2 && t2.level));
        }
        setProxyServer(e2, t2) {
          if (Qf(e2, "proxyServer"), !t2) {
            if ("DISCONNECTED" !== this.connectionState)
              throw new vE(TE.INVALID_OPERATION, "Set proxy server before join channel");
            if ("disabled" !== this._cloudProxyServerMode || this._useLocalAccessPoint)
              throw new vE(TE.INVALID_OPERATION, "You have already set the proxy");
          }
          this._proxyServer = e2, IT.setProxyServer(this._proxyServer), NE.setProxyServer(this._proxyServer), NE.info("[".concat(this._clientId, "] Set proxy server ").concat(t2 ? "by initialize call" : "", " success."));
        }
        setTurnServer(e2, t2) {
          if (Array.isArray(e2) || (e2 = [e2]), !t2) {
            if ("DISCONNECTED" !== this.connectionState)
              throw new vE(TE.INVALID_OPERATION, "Set turn server before join channel");
            if ("disabled" !== this._cloudProxyServerMode || this._useLocalAccessPoint)
              throw new vE(TE.INVALID_OPERATION, "You have already set the proxy");
          }
          if (xm(e2))
            return this._turnServer = { servers: e2, mode: "original-manual" }, void NE.info("[".concat(this._clientId, "] Set original turnserver ").concat(t2 ? "by initialize call" : "", " success: ").concat(e2.map((e3) => e3.urls).join(","), "."));
          e2.forEach((e3) => Vm(e3)), this._turnServer = { servers: e2, mode: "manual" }, NE.info("[".concat(this._clientId, "] Set turnserver ").concat(t2 ? "by initialize call" : "", " success."));
        }
        setLicense(e2) {
          if ("DISCONNECTED" !== this.connectionState) {
            throw new vE(TE.INVALID_OPERATION, "you should set license before join channel");
          }
          if (Qf(e2, "license", 32, 32), !/^[A-Za-z\d]+$/.test(e2))
            throw new vE(TE.INVALID_PARAMS, "license should only contains characters from A-Z a-z 0-9");
          this._license = e2, NE.info("[".concat(this._clientId, "] set license success"), e2);
        }
        startProxyServer(e2) {
          if ("DISCONNECTED" !== this.connectionState)
            throw new vE(TE.INVALID_OPERATION, "Start proxy server before join channel");
          if (this._proxyServer || "manual" === this._turnServer.mode || this._useLocalAccessPoint)
            throw new vE(TE.INVALID_OPERATION, "You have already set the proxy");
          const t2 = [3, 4, 5];
          let i2;
          switch (void 0 === e2 && (e2 = 3), e2) {
            case 1:
            case 2:
              throw new vE(TE.NOT_SUPPORTED, "proxy mode 1/2 has been deprecated and not supported.");
            case 3:
              i2 = "proxy3";
              break;
            case 4:
              i2 = "proxy4";
              break;
            case 5:
              i2 = "proxy5";
              break;
            default:
              throw new vE(TE.INVALID_PARAMS, "proxy server mode must be ".concat(t2.join("|")));
          }
          this._cloudProxyServerMode = i2, this.store.cloudProxyServerMode = i2, NE.info("[".concat(this._clientId, "] set cloud proxy server mode to"), this._cloudProxyServerMode);
        }
        stopProxyServer() {
          if ("DISCONNECTED" !== this.connectionState)
            throw new vE(TE.INVALID_OPERATION, "Stop proxy server after leave channel");
          IT.setProxyServer(), NE.setProxyServer(), this._cloudProxyServerMode = "disabled", this.store.cloudProxyServerMode = "disabled", NE.info("[".concat(this._clientId, "] set cloud proxy server mode to"), this._cloudProxyServerMode), this._proxyServer = void 0, this._turnServer = { mode: "auto", servers: [] };
        }
        setLocalAccessPointsV2(e2) {
          if (!e2.accessPoints)
            throw new vE(TE.INVALID_PARAMS, "accessPoints is required.");
          Zf(e2.accessPoints.serverList, "accessPoints.serverList"), Qf(e2.accessPoints.domain, "accessPoints.domain");
          const t2 = (e3, t3) => {
            Xf(e3, t3, 0, 65535, true);
          };
          let i2 = 443;
          if (e2.accessPoints.port && (t2(e2.accessPoints.port, "accessPoints.port"), i2 = e2.accessPoints.port), this._proxyServer || "disabled" !== this._cloudProxyServerMode)
            throw new vE(TE.INVALID_OPERATION, "set local access point failed, You have already set the cloud proxy");
          HE("CLOSE_AFB_FOR_LOCAL_AP") && (WE("JOIN_WITH_FALLBACK_SIGNAL_PROXY", false), WE("JOIN_WITH_FALLBACK_MEDIA_PROXY", false));
          const r2 = /^((\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/, n2 = e2.accessPoints.domain, o2 = e2.accessPoints.serverList.map((e3) => r2.test(e3) ? "".concat(e3.replace(/\./g, "-"), ".").concat(n2) : e3), s2 = o2.map((e3) => "".concat(e3, ":").concat(i2));
          this._useLocalAccessPoint = true, this._setLocalAPVersion = 2, WE("WEBCS_DOMAIN", s2), WE("WEBCS_DOMAIN_BACKUP_LIST", s2), WE("GATEWAY_DOMAINS", [n2]), e2.report && e2.report.hostname && Array.isArray(e2.report.hostname) && e2.report.hostname.length ? (Zf(e2.report.hostname, "report.hostname"), WE("EVENT_REPORT_DOMAIN", e2.report.hostname[0]), WE("EVENT_REPORT_BACKUP_DOMAIN", e2.report.hostname[1] || e2.report.hostname[0])) : (WE("EVENT_REPORT_DOMAIN", o2[0]), WE("EVENT_REPORT_BACKUP_DOMAIN", o2[1] || o2[0]));
          let a2 = 6443;
          e2.report && e2.report.port && (t2(e2.report.port, "report.port"), a2 = e2.report.port), WE("STATS_COLLECTOR_PORT", a2), e2.report ? WE("ENABLE_EVENT_REPORT", true) : WE("ENABLE_EVENT_REPORT", false);
          let c2 = "";
          e2.log && e2.log.hostname && Array.isArray(e2.log.hostname) && e2.log.hostname.length ? (Zf(e2.log.hostname, "log.hostname"), c2 = e2.log.hostname[0]) : c2 = o2[0];
          let d2 = 6444;
          e2.log && e2.log.port && (t2(e2.log.port, "log.port"), d2 = e2.log.port), WE("LOG_UPLOAD_SERVER", "".concat(c2, ":").concat(d2));
          let u2 = [];
          e2.cds && e2.cds.hostname && Array.isArray(e2.cds.hostname) && e2.cds.hostname.length ? (Zf(e2.cds.hostname, "cds.hostname"), u2 = e2.cds.hostname) : u2 = o2;
          let l2 = 443;
          e2.cds && e2.cds.port && (t2(e2.cds.port, "cds.port"), l2 = e2.cds.port), WE("CDS_AP", u2.map((e3) => "".concat(e3, ":").concat(l2))), e2.cds ? WE("ENABLE_CONFIG_DISTRIBUTE", true) : WE("ENABLE_CONFIG_DISTRIBUTE", false), NE.info("set local access point v2 success");
        }
        setLocalAccessPoints(e2, t2) {
          if (Zf(e2, "serverList"), Qf(t2, "domain"), this._proxyServer || "disabled" !== this._cloudProxyServerMode)
            throw new vE(TE.INVALID_OPERATION, "set local access point failed, You have already set the cloud proxy");
          const i2 = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/;
          e2 = e2.map((e3) => i2.test(e3) ? "".concat(e3.replace(/\./g, "-"), ".").concat(t2) : e3), this._useLocalAccessPoint = true, this._setLocalAPVersion = 1, WE("WEBCS_DOMAIN", e2), WE("WEBCS_DOMAIN_BACKUP_LIST", e2), WE("GATEWAY_DOMAINS", [t2]), WE("EVENT_REPORT_DOMAIN", e2[0]), WE("EVENT_REPORT_BACKUP_DOMAIN", e2[1] || e2[0]), WE("LOG_UPLOAD_SERVER", "".concat(e2[0], ":6444")), NE.info("set local access point success");
        }
        async setRemoteDefaultVideoStreamType(e2) {
          if (Jf(e2, "streamType", [0, 1]), this._remoteDefaultVideoStreamType = e2, this._joinInfo)
            try {
              await this._gateway.setDefaultRemoteVideoStreamType(e2), this._joinInfo.defaultVideoStream = this._remoteDefaultVideoStreamType;
            } catch (e3) {
              throw NE.error("[".concat(this._clientId, "] set default remote video stream type error"), e3.toString()), e3;
            }
          else
            NE.debug("haven't joined yet, cache remoteDefaultVideoStreamType ".concat(e2));
        }
        async setRemoteVideoStreamType(e2, t2) {
          Jf(t2, "streamType", [0, 1]);
          try {
            await this._gateway.setRemoteVideoStreamType(e2, t2), setTimeout(() => {
              const t3 = this._users.find((t4) => t4.uid === e2);
              t3 && t3.videoTrack && t3.videoTrack.updateMediaStreamTrackResolution();
            }, 2e3);
          } catch (e3) {
            throw NE.error("[".concat(this._clientId, "] set remote video stream type error"), e3.toString()), e3;
          }
          NE.info("[".concat(this._clientId, "] set remote ").concat(e2, " video stream type to ").concat(t2)), this._remoteStreamTypeCacheMap.set(e2, t2);
        }
        async setStreamFallbackOption(e2, t2) {
          Jf(t2, "fallbackType", [0, 1, 2]);
          try {
            await this._gateway.setStreamFallbackOption(e2, t2);
          } catch (e3) {
            throw NE.error("[".concat(this._clientId, "] set stream fallback option"), e3.toString()), e3;
          }
          NE.info("[".concat(this._clientId, "] set remote ").concat(e2, " stream fallback type to ").concat(t2)), this._streamFallbackTypeCacheMap.set(e2, t2);
        }
        setEncryptionConfig(e2, t2, i2) {
          !function(e3) {
            Jf(e3, "encryptionMode", ["aes-128-xts", "aes-256-xts", "aes-128-ecb", "sm4-128-ecb", "aes-128-gcm", "aes-256-gcm", "aes-128-gcm2", "aes-256-gcm2", "none"]);
          }(e2), Qf(t2, "secret");
          if (["aes-128-gcm2", "aes-256-gcm2"].includes(e2)) {
            if (!i2 || !(i2 instanceof Uint8Array && 32 === i2.length))
              throw new vE(TE.INVALID_PARAMS, "salt must be an Uint8Array and exactly equal to 32 bytes");
          } else if (i2)
            throw new vE(TE.INVALID_PARAMS, "current encrypt mode does not need salt");
          new RegExp(`^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*,.<>?/:;'"|{}\\[\\]])(?=.{8,})`).test(t2) || NE.warning("The secret is not strong:\n      The secret must contain at least 1 lowercase alphabetical character,\n      The secret must contain at least 1 uppercase alphabetical character,\n      The secret must contain at least 1 numeric character,\n      The secret must contain at least one special character,\n      The secret must be eight characters or longer.\n      "), this._encryptionMode = e2, this._encryptionSecret = t2, i2 && (this._encryptionSalt = QR(i2));
        }
        async renewToken(e2) {
          if (Qf(e2, "token", 1, 2047), !this._key || !this._joinInfo)
            throw new vE(TE.INVALID_OPERATION, "renewToken should not be called before user join");
          const t2 = this._key;
          this._key = e2, this._joinInfo && (this._joinInfo.token = e2);
          const i2 = await this._renewTokenMutex.lock();
          try {
            if (HE("USE_NEW_TOKEN")) {
              NE.debug("start renew token with ticket from unilbs");
              const t3 = await BO(this._joinInfo, this._axiosCancelSource.token, this._config.httpRetryConfig || RE);
              NE.debug("[".concat(this._clientId, "] get ticket from unilbs success")), await this._gateway.renewToken({ token: e2, ticket: t3 });
            } else
              NE.debug("start renew token without ticket"), await this._gateway.renewToken({ token: e2 });
            NE.debug("[".concat(this._clientId, "] renewToken success"));
          } catch (e3) {
            throw this._key = t2, this._joinInfo.token = t2, NE.error("[".concat(this._clientId, "] renewToken failed"), e3.toString()), e3;
          } finally {
            i2();
          }
        }
        enableAudioVolumeIndicator() {
          this._audioVolumeIndicationInterval ? NE.warning("you have already enabled audio volume indicator!") : this._audioVolumeIndicationInterval = window.setInterval(() => {
            const e2 = this._p2pChannel.getAudioLevels();
            this.emit(Am.VOLUME_INDICATOR, e2);
          }, HE("AUDIO_VOLUME_INDICATION_INTERVAL") || 2e3);
        }
        getRTCStats() {
          const e2 = this._statsCollector.getRTCStats(), t2 = this._gateway.getInChannelInfo();
          return e2.Duration = Math.round(t2.duration / 1e3), e2;
        }
        async startLiveStreaming(e2, t2) {
          if (!t2) {
            if ("h264" !== this._codec)
              throw new vE(TE.LIVE_STREAMING_INVALID_RAW_STREAM, "raw streaming is only support h264");
            if (!this._p2pChannel.hasLocalMedia())
              throw new vE(TE.LIVE_STREAMING_INVALID_RAW_STREAM, "can not find stream to raw streaming");
          }
          if (this._liveRawStreamingClient && this._liveRawStreamingClient.hasUrl(e2) || this._liveTranscodeStreamingClient && this._liveTranscodeStreamingClient.hasUrl(e2))
            throw new vE(TE.LIVE_STREAMING_TASK_CONFLICT);
          const i2 = t2 ? Ym.TRANSCODE : Ym.RAW;
          return this._createLiveStreamingClient(i2).startLiveStreamingTask(e2, i2);
        }
        setLiveTranscoding(e2) {
          return this._createLiveStreamingClient(Ym.TRANSCODE).setTranscodingConfig(e2);
        }
        async stopLiveStreaming(e2) {
          const t2 = [this._liveRawStreamingClient, this._liveTranscodeStreamingClient].filter((t3) => t3 && t3.hasUrl(e2));
          if (!t2.length)
            throw new vE(TE.INVALID_PARAMS, "can not find live streaming url to stop");
          await Cl.all(t2.map((t3) => t3 && t3.stopLiveStreamingTask(e2)));
        }
        async addInjectStreamUrl(e2, t2) {
          if (!this._joinInfo)
            throw new vE(TE.INVALID_OPERATION, "can not addInjectStreamUrl, no joininfo");
          const i2 = this._createLiveStreamingClient(Ym.INJECT);
          i2.setInjectStreamConfig(t2, 0), await i2.startLiveStreamingTask(e2, Ym.INJECT);
        }
        async removeInjectStreamUrl() {
          var e2;
          const t2 = this._createLiveStreamingClient(Ym.INJECT), i2 = Array.from(zv(e2 = t2.streamingTasks).call(e2)).find((e3) => e3.mode === Ym.INJECT);
          if (!this._joinInfo || !i2)
            throw new vE(TE.INVALID_OPERATION, "can remove addInjectStreamUrl, no joininfo or inject task");
          await t2.stopLiveStreamingTask(i2.url);
        }
        async startChannelMediaRelay(e2) {
          ZO(e2);
          const t2 = this._createChannelMediaRelayClient();
          await t2.startChannelMediaRelay(e2);
        }
        async updateChannelMediaRelay(e2) {
          ZO(e2);
          const t2 = this._createChannelMediaRelayClient();
          await t2.updateChannelMediaRelay(e2);
        }
        async stopChannelMediaRelay() {
          const e2 = this._createChannelMediaRelayClient();
          await e2.stopChannelMediaRelay();
        }
        sendStreamMessage(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (!this._joinInfo)
            throw new vE(TE.INVALID_OPERATION, "can not send data stream, not joined");
          if ("string" == typeof e2) {
            e2 = new TextEncoder().encode(e2);
          }
          if (new Blob([e2]).size > 1024)
            throw new vE(TE.INVALID_PARAMS, "stream message out of range.");
          return this._gateway.signal.request(Nm.DATA_STREAM, { payload: QR(e2) }, !t2);
        }
        sendMetadata(e2) {
          if (!this._joinInfo)
            throw new vE(TE.INVALID_OPERATION, "can not send metadata, not joined");
          if (new Blob([e2]).size > 1024)
            throw new vE(TE.METADATA_OUT_OF_RANGE);
          return this._gateway.signal.request(Nm.SEND_METADATA, { session_id: this._joinInfo.sid, metadata: QR(e2) });
        }
        async sendCustomReportMessage(e2) {
          if (Array.isArray(e2) || (e2 = [e2]), e2.forEach(dm), !this._joinInfo)
            throw new vE(TE.INVALID_OPERATION, "can not send custom report, not joined");
          await IT.sendCustomReportMessage(this._joinInfo.sid, e2);
        }
        getLocalAudioStats() {
          return this._statsCollector.getLocalAudioTrackStats();
        }
        getRemoteAudioStats() {
          return this._statsCollector.getRemoteAudioTrackStats();
        }
        getLocalVideoStats() {
          return this._statsCollector.getLocalVideoTrackStats();
        }
        getRemoteVideoStats() {
          return this._statsCollector.getRemoteVideoTrackStats();
        }
        getRemoteNetworkQuality() {
          return this._statsCollector.getRemoteNetworkQualityStats();
        }
        async pickSVCLayer(e2, t2) {
          Jf(t2.spatialLayer, "spatialLayer", [0, 1, 2, 3]), Jf(t2.temporalLayer, "temporalLayer", [0, 1, 2, 3]);
          try {
            await this._gateway.pickSVCLayer(e2, t2);
          } catch (e3) {
            throw NE.error("[".concat(this._clientId, "] pick SVC layer failed"), e3.toString()), e3;
          }
        }
        _reset() {
          if (NE.debug("[".concat(this._clientId, "] reset client")), this._axiosCancelSource.cancel(), this._axiosCancelSource = fE.CancelToken.source(), this._streamFallbackTypeCacheMap = /* @__PURE__ */ new Map(), this._remoteStreamTypeCacheMap = /* @__PURE__ */ new Map(), this._configDistribute.stopGetConfigDistribute(), this._joinInfo = void 0, this._proxyServer = void 0, this._defaultStreamFallbackType = void 0, this._sessionId = null, this.store.sessionId = null, this._statsCollector.reset(), this._key = void 0, this._appId = void 0, this._uid = void 0, this.store.uid = void 0, this._channelName = void 0, this._encryptionMode = "none", this._encryptionSecret = null, this._encryptionSalt = null, this._users.forEach((e2) => {
            e2._audioTrack && e2._audioTrack._destroy(), e2._videoTrack && e2._videoTrack._destroy();
          }), this._users = [], this._audioVolumeIndicationInterval && (window.clearInterval(this._audioVolumeIndicationInterval), this._audioVolumeIndicationInterval = void 0), "fallback" === this._cloudProxyServerMode && (this._cloudProxyServerMode = "disabled", this.store.cloudProxyServerMode = "disabled"), this._p2pChannel.reset(), this._publishMutex = new OT("client-publish"), this._subscribeMutex = new OT("client-subscribe"), this._networkQualityInterval && (window.clearInterval(this._networkQualityInterval), this._networkQualityInterval = void 0), this._injectStreamingClient && (this._injectStreamingClient.terminate(), this._injectStreamingClient.removeAllListeners(), this._injectStreamingClient = void 0), this._liveRawStreamingClient && (this._liveRawStreamingClient.terminate(), this._liveRawStreamingClient.removeAllListeners(), this._liveRawStreamingClient = void 0), this._liveTranscodeStreamingClient && (this._liveTranscodeStreamingClient.terminate(), this._liveTranscodeStreamingClient.removeAllListeners(), this._liveTranscodeStreamingClient = void 0), this._channelMediaRelayClient && (this._channelMediaRelayClient.dispose(), this._channelMediaRelayClient = void 0), this._inspect)
            try {
              this._inspect.close(), this._inspect = void 0;
            } catch (e2) {
            }
        }
        _startSession(e2, t2) {
          const i2 = e2 || UR();
          e2 ? NE.debug("[".concat(this._clientId, "] new Session ").concat(i2)) : NE.debug("[".concat(this._clientId, "] renewSession ").concat(this._sessionId, " => ").concat(i2)), this._sessionId = i2, this.store.sessionId = i2, t2 ? IT.sessionInit(this._sessionId, { lts: (/* @__PURE__ */ new Date()).getTime(), cname: t2.channel, appid: t2.appId, mode: this._mode }) : this._joinInfo ? IT.sessionInit(this._sessionId, { lts: (/* @__PURE__ */ new Date()).getTime(), cname: this._joinInfo.cname, appid: this._joinInfo.appId, mode: this._mode }) : this._gateway.joinInfo && IT.sessionInit(this._sessionId, { lts: (/* @__PURE__ */ new Date()).getTime(), cname: this._gateway.joinInfo.cname, appid: this._gateway.joinInfo.appId, mode: this._mode }), this._joinInfo && (this._joinInfo.sid = i2), this._gateway.joinInfo && (this._gateway.joinInfo.sid = i2);
        }
        async _publishHighStream(e2) {
          if (!this._joinInfo || void 0 === this._uid)
            throw new vE(TE.INVALID_OPERATION, "Can't publish stream, haven't joined yet!");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState)
            throw new vE(TE.INVALID_OPERATION, "can not publish stream in ".concat(this.connectionState, " state"));
          if ("auto" === this._turnServer.mode && HE("FORCE_TURN") && !HE("TURN_ENABLE_TCP") && !HE("TURN_ENABLE_UDP"))
            throw new vE(TE.UNEXPECTED_ERROR, "force TURN With No TURN Configuration");
          NE.debug("[".concat(this._clientId, "] publish high stream"));
          try {
            const i2 = await this._p2pChannel.publish(e2, this._isDualStreamEnabled, this._lowStreamParameter), r2 = (await i2.next()).value;
            if (r2) {
              var t2;
              let e3;
              try {
                e3 = await this._gateway.publish(this._uid, r2, true);
              } catch (e4) {
                if (e4.code !== TE.DISCONNECT_P2P)
                  throw i2.throw(e4), e4;
              }
              await i2.next((null === (t2 = e3) || void 0 === t2 ? void 0 : t2.ortc) || []);
            }
            this._p2pChannel.reportPublishEvent(true, null);
            for (const t3 of e2)
              t3 instanceof Ew && t3._encoderConfig && this._gateway.setVideoProfile(t3._encoderConfig), !t3.muted && t3.enabled || await this._p2pChannel.muteLocalTrack(t3);
          } catch (t3) {
            if (this._p2pChannel.reportPublishEvent(false, null == t3 ? void 0 : t3.code, e2), (null == t3 ? void 0 : t3.code) === TE.WS_ABORT)
              return;
            throw t3;
          }
        }
        async _publishLowStream() {
          if (!this._joinInfo || void 0 === this._uid)
            throw new vE(TE.INVALID_OPERATION, "Can't publish stream, haven't joined yet!");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState)
            throw new vE(TE.INVALID_OPERATION, "can not publish stream in ".concat(this.connectionState, " state"));
          NE.debug("[".concat(this._clientId, "] publish low stream"));
          const e2 = this._configDistribute.getLowStreamConfigDistribute();
          e2 && e2.bitrate && (this._lowStreamParameter || (this._lowStreamParameter = { width: 160, height: 120, framerate: 15, bitrate: 50 }), this._lowStreamParameter && this._lowStreamParameter.bitrate && e2.bitrate < this._lowStreamParameter.bitrate && (this._lowStreamParameter.bitrate = e2.bitrate));
          try {
            const e3 = await this._p2pChannel.publishLowStream(this._lowStreamParameter), i2 = (await e3.next()).value;
            if (i2) {
              var t2;
              let r2;
              try {
                r2 = await this._gateway.publish(this._uid, i2, true);
              } catch (t3) {
                if (t3.code !== TE.DISCONNECT_P2P)
                  throw e3.throw(t3), t3;
              }
              e3.next((null === (t2 = r2) || void 0 === t2 ? void 0 : t2.ortc) || []), this._p2pChannel.reportPublishEvent(true, null, void 0, true);
            }
          } catch (e3) {
            if (this._p2pChannel.reportPublishEvent(false, null == e3 ? void 0 : e3.code, void 0, true), (null == e3 ? void 0 : e3.code) === TE.WS_ABORT)
              return;
            throw e3;
          }
        }
        _createLiveStreamingClient(e2) {
          if (!this._joinInfo || !this._appId) {
            return new vE(TE.INVALID_OPERATION, "can not create live streaming client, please join channel first").throw();
          }
          const t2 = () => new zO(this._joinInfo, this._config.websocketRetryConfig || RE, this._config.httpRetryConfig || RE), i2 = (e3) => {
            e3.onLiveStreamError = (e4, t3) => {
              IT.reportApiInvoke(this._sessionId, { name: Em.ON_LIVE_STREAM_ERROR, options: [e4, t3], tag: fm.TRACER }).onSuccess(), this.emit(Am.LIVE_STREAMING_ERROR, e4, t3);
            }, e3.onLiveStreamWarning = (e4, t3) => {
              IT.reportApiInvoke(this._sessionId, { name: Em.ON_LIVE_STREAM_WARNING, options: [e4, t3], tag: fm.TRACER }).onSuccess(), this.emit(Am.LIVE_STREAMING_WARNING, e4, t3);
            }, e3.on(eg.REQUEST_WORKER_MANAGER_LIST, (e4, t3, i3) => {
              if (!this._joinInfo)
                return i3(new vE(TE.INVALID_OPERATION, "can not find join info to get worker manager"));
              jO(e4, this._joinInfo, this._axiosCancelSource.token, RE).then(t3).catch(i3);
            });
          };
          switch (e2) {
            case Ym.RAW:
              return this._liveRawStreamingClient || (this._liveRawStreamingClient = t2(), i2(this._liveRawStreamingClient)), this._liveRawStreamingClient;
            case Ym.TRANSCODE:
              return this._liveTranscodeStreamingClient || (this._liveTranscodeStreamingClient = t2(), i2(this._liveTranscodeStreamingClient)), this._liveTranscodeStreamingClient;
            case Ym.INJECT:
              return this._injectStreamingClient || (this._injectStreamingClient = t2(), this._injectStreamingClient.on(eg.REQUEST_WORKER_MANAGER_LIST, (e3, t3, i3) => {
                if (!this._joinInfo)
                  return i3(new vE(TE.INVALID_OPERATION, "can not find join info to get worker manager"));
                jO(e3, this._joinInfo, this._axiosCancelSource.token, RE).then(t3).catch(i3);
              }), this._injectStreamingClient.onInjectStatusChange = (e3, t3, i3) => {
                this.emit(Am.INJECT_STREAM_STATUS, e3, t3, i3);
              }), this._injectStreamingClient;
          }
        }
        _createChannelMediaRelayClient() {
          if (!this._joinInfo) {
            return new vE(TE.INVALID_OPERATION, "can not create channel media relay client, please join channel first").throw();
          }
          return this._channelMediaRelayClient || (this._channelMediaRelayClient = new eb(this._joinInfo, this._clientId, this._config.websocketRetryConfig || RE, this._config.httpRetryConfig || RE), this._channelMediaRelayClient.on("state", (e2) => {
            e2 === og.RELAY_STATE_FAILURE && this._channelMediaRelayClient && this._channelMediaRelayClient.dispose(), this.emit(Am.CHANNEL_MEDIA_RELAY_STATE, e2);
          }), this._channelMediaRelayClient.on("event", (e2) => {
            this.emit(Am.CHANNEL_MEDIA_RELAY_EVENT, e2);
          })), this._channelMediaRelayClient;
        }
        _handleGatewayEvents() {
          this._gateway.on(cg.DISCONNECT_P2P, async () => {
            await this._p2pChannel.disconnectForReconnect();
          }), this._gateway.on(cg.CONNECTION_STATE_CHANGE, (e2, t2, i2) => {
            var r2;
            if (i2 === Cm.FALLBACK)
              return;
            const n2 = () => {
              this.emit(Am.CONNECTION_STATE_CHANGE, e2, t2, i2);
            };
            if (IT.reportApiInvoke(this._sessionId || (null === (r2 = this._gateway.joinInfo) || void 0 === r2 ? void 0 : r2.sid) || null, { name: Em.CONNECTION_STATE_CHANGE, options: [e2, t2, i2], tag: fm.TRACER }).onSuccess(JSON.stringify({ cur: e2, prev: t2, reason: i2 })), NE.info("[".concat(this._clientId, "] connection state change: ").concat(t2, " -> ").concat(e2)), "DISCONNECTED" === e2)
              return this._reset(), void n2();
            if ("RECONNECTING" === e2)
              this._users.forEach((e3) => {
                e3._trust_in_room_ = false, e3._trust_audio_enabled_state_ = false, e3._trust_video_enabled_state_ = false, e3._trust_audio_mute_state_ = false, e3._trust_video_mute_state_ = false, e3._trust_audio_stream_added_state_ = false, e3._trust_video_stream_added_state_ = false, e3._audioSSRC = void 0, e3._videoSSRC = void 0, e3._videoOrtc = void 0, e3._audioOrtc = void 0, e3._cname = void 0, e3._rtxSsrcId = void 0;
              }), this._userOfflineTimeout && window.clearTimeout(this._userOfflineTimeout), this._streamRemovedTimeout && window.clearTimeout(this._streamRemovedTimeout), this._userOfflineTimeout = void 0, this._streamRemovedTimeout = void 0;
            else if ("CONNECTED" === e2) {
              var o2;
              this._streamFallbackTypeCacheMap.forEach((e3, t3) => {
                this._gateway.setStreamFallbackOption(t3, e3).catch((e4) => {
                  NE.warning("[".concat(this._clientId, "] auto set stream fallback option failed"), e4);
                });
              }), this._remoteStreamTypeCacheMap.forEach((e3, t3) => {
                this._gateway.setRemoteVideoStreamType(t3, e3).catch((e4) => {
                  NE.warning("[".concat(this._clientId, "] auto set remote stream type failed"), e4);
                });
              }), void 0 !== this._remoteDefaultVideoStreamType && void 0 === (null === (o2 = this._joinInfo) || void 0 === o2 ? void 0 : o2.defaultVideoStream) && this.setRemoteDefaultVideoStreamType(this._remoteDefaultVideoStreamType).then(() => {
                NE.debug("[".concat(this._clientId, "] setRemoteDefaultVideoStreamType after gateway connected"));
              }).catch((e3) => {
                NE.error("[".concat(this._clientId, "] setRemoteDefaultVideoStreamType after gateway failed, ").concat(e3));
              }), this._p2pChannel.republish(), this._userOfflineTimeout = window.setTimeout(() => {
                if ("CONNECTED" !== this.connectionState)
                  return;
                this._userOfflineTimeout = void 0;
                this._users.filter((e3) => !e3._trust_in_room_).forEach((e3) => {
                  NE.debug("[".concat(this._clientId, "] user offline timeout, emit user offline ").concat(e3.uid)), this._handleUserOffline({ uid: e3.uid });
                });
              }, 3e3), this._streamRemovedTimeout = window.setTimeout(() => {
                "CONNECTED" === this.connectionState && (this._streamRemovedTimeout = void 0, this._users.forEach((e3) => {
                  e3._trust_audio_mute_state_ || (NE.debug("[".concat(this._clientId, "] auto dispatch audio unmute event ").concat(e3.uid)), this._handleMuteStream(e3.uid, "audio", false)), e3._trust_video_mute_state_ || (NE.debug("[".concat(this._clientId, "] auto dispatch video unmute event ").concat(e3.uid)), this._handleMuteStream(e3.uid, "video", false)), e3._trust_audio_enabled_state_ || (NE.debug("[".concat(this._clientId, "] auto dispatch enable local audio ").concat(e3.uid)), this._handleSetStreamLocalEnable("audio", e3.uid, true)), e3._trust_video_enabled_state_ || (NE.debug("[".concat(this._clientId, "] auto dispatch enable local video ").concat(e3.uid)), this._handleSetStreamLocalEnable("video", e3.uid, true)), e3._trust_video_stream_added_state_ || (NE.debug("[".concat(this._clientId, "] auto dispatch reset video stream added ").concat(e3.uid)), this._handleResetAddStream(e3, "video")), e3._trust_audio_stream_added_state_ || (NE.debug("[".concat(this._clientId, "] auto dispatch reset audio stream added ").concat(e3.uid)), this._handleResetAddStream(e3, "audio")), e3._video_added_ || e3._audio_added_ || (NE.debug("[".concat(this._clientId, "] auto dispatch stream remove ").concat(e3.uid)), this._handleRemoveStream({ uid: e3.uid, uint_id: e3._uintid }));
                }));
              }, 1e3);
            }
            n2();
          }), this._gateway.on(cg.REQUEST_NEW_GATEWAY_LIST, (e2, t2) => {
            if (!this._joinInfo)
              return t2(new vE(TE.UNEXPECTED_ERROR, "can not recover, no join info"));
            kO(this._joinInfo, this._axiosCancelSource.token, this._config.httpRetryConfig || RE, this.store).then((t3) => {
              this._joinInfo && (this._joinInfo.apResponse = t3.gatewayInfo.res, this._joinInfo.gatewayAddrs = t3.gatewayInfo.gatewayAddrs, this._joinInfo.uni_lbs_ip = t3.gatewayInfo.uni_lbs_ip), e2(t3.gatewayInfo.gatewayAddrs.map((e3) => {
                if (this._joinInfo && this._joinInfo.proxyServer) {
                  const t4 = e3.address.split(":");
                  return "wss://".concat(this._joinInfo.proxyServer, "/ws/?h=").concat(t4[0], "&p=").concat(t4[1]);
                }
                return "wss://".concat(e3.address);
              }));
            }).catch(t2);
          }), this._gateway.on(cg.NETWORK_QUALITY, (e2) => {
            "normal" === this._networkQualitySensitivity && this.emit(Am.NETWORK_QUALITY, e2);
          }), this._gateway.on(cg.STREAM_TYPE_CHANGE, (e2, t2) => {
            this.emit(Am.STREAM_TYPE_CHANGED, e2, t2);
            IT.reportApiInvoke(this._sessionId, { name: Em.STREAM_TYPE_CHANGE, options: [e2, t2], tag: fm.TRACER }).onSuccess(JSON.stringify({ uid: e2, streamType: t2 }));
          }), this._gateway.on(cg.IS_P2P_DISCONNECTED, (e2) => {
            this._p2pChannel.isP2PDisconnected() ? e2(true) : this._p2pChannel.hasLocalMedia() || this._p2pChannel.hasRemoteMedia() ? e2(false) : e2(true);
          }), this._gateway.on(cg.NEED_RENEW_SESSION, () => {
            this._startSession();
          }), this._gateway.on(cg.REQUEST_P2P_CONNECTION_PARAMS, async (e2, t2, i2) => {
            try {
              t2(await this._p2pChannel.startP2PConnection(e2));
            } catch (e3) {
              i2(e3);
            }
          }), this._gateway.on(cg.JOIN_RESPONSE, (e2, t2) => {
            const { dtlsParameters: i2, iceParameters: r2, candidates: n2, rtpCapabilities: o2, setup: s2, cname: a2 } = kD(e2.ortc, t2);
            this._p2pChannel.connect(r2, i2, n2, o2, s2, a2);
          }), this._gateway.on(cg.REQUEST_DC_CONNECTION_PARAMS, (e2) => {
            e2(this._p2pChannel.getEstablishParams());
          }), this._gateway.on(cg.RESET_CONNECTION_EVENTS, () => {
            this._handleGatewaySignalEvents();
          }), this._gateway.on(cg.DATACHANNEL_FAILBACK, () => {
            this._joinGateway();
          }), this._gateway.on(cg.DATACHANNEL_PRECONNECT, async (e2, t2, i2, r2) => {
            var n2, o2, s2, a2, c2, d2;
            await this._p2pChannel.startP2PConnection({ turnServer: null === (n2 = this._joinInfo) || void 0 === n2 ? void 0 : n2.turnServer }, true);
            const u2 = function(e3, t3) {
              let i3;
              return t3 && t3.ip && "number" == typeof t3.port ? (i3 = [{ foundation: "udpcandidate", componentId: "1", transport: "udp", priority: "2103266323", connectionAddress: t3.ip, port: t3.port.toString(), type: "host", extension: {} }], NE.debug("Using remote candidate from AP ".concat(t3.ip, ":").concat(t3.port)), t3.ip6 && (i3.push({ foundation: "udpcandidate", componentId: "1", transport: "udp", priority: "2103266323", connectionAddress: t3.ip6, port: t3.port.toString(), type: "host", extension: {} }), NE.debug("Using IPV6 remote candidate from AP ".concat(t3.ip6, ":").concat(t3.port)))) : i3 = [{ foundation: "udpcandidate", componentId: "1", transport: "udp", priority: "2103266323", connectionAddress: e3.ip, port: e3.port.toString(), type: "host", extension: {} }], i3;
            }(e2, t2);
            return this._p2pChannel.preConnect({ iceUfrag: "".concat(null === (o2 = this._joinInfo) || void 0 === o2 ? void 0 : o2.apResponse.cid, "_").concat(null === (s2 = this._joinInfo) || void 0 === s2 ? void 0 : s2.apResponse.cert), icePwd: "".concat(null === (a2 = this._joinInfo) || void 0 === a2 ? void 0 : a2.apResponse.cid, "_").concat(null === (c2 = this._joinInfo) || void 0 === c2 ? void 0 : c2.apResponse.cert) }, { fingerprints: [{ hashFunction: "sha-256", fingerprint: null !== (d2 = HE("FINGERPRINT")) && void 0 !== d2 ? d2 : e2.fingerprint }] }, u2, { send: { audioCodecs: [], videoCodecs: [], audioExtensions: [], videoExtensions: [] }, recv: { audioCodecs: [], videoCodecs: [], audioExtensions: [], videoExtensions: [] } }, "active", "o/i14u9pJrxRKAsu").then(i2).catch(r2);
          });
        }
        _handleGatewaySignalEvents() {
          this._gateway.signal.on(Pm.ON_USER_ONLINE, this._handleUserOnline), this._gateway.signal.on(Pm.ON_USER_OFFLINE, this._handleUserOffline), this._gateway.signal.on(Pm.ON_ADD_AUDIO_STREAM, (e2) => this._handleAddAudioOrVideoStream("audio", e2.uid, e2.ssrcId, e2.cname, e2.uint_id, e2.ortc)), this._gateway.signal.on(Pm.ON_ADD_VIDEO_STREAM, (e2) => this._handleAddAudioOrVideoStream("video", e2.uid, e2.ssrcId, e2.cname, e2.uint_id, e2.ortc, e2.rtxSsrcId)), this._gateway.signal.on(Pm.ON_REMOVE_STREAM, this._handleRemoveStream), this._gateway.signal.on(Pm.ON_P2P_LOST, this._handleP2PLost), this._gateway.signal.on(Pm.MUTE_AUDIO, (e2) => this._handleMuteStream(e2.uid, "audio", true)), this._gateway.signal.on(Pm.UNMUTE_AUDIO, (e2) => this._handleMuteStream(e2.uid, "audio", false)), this._gateway.signal.on(Pm.MUTE_VIDEO, (e2) => this._handleMuteStream(e2.uid, "video", true)), this._gateway.signal.on(Pm.UNMUTE_VIDEO, (e2) => this._handleMuteStream(e2.uid, "video", false)), this._gateway.signal.on(Pm.RECEIVE_METADATA, (e2) => {
            const t2 = zR(e2.metadata);
            this.emit(Am.RECEIVE_METADATA, e2.uid, t2);
          }), this._gateway.signal.on(Pm.ON_DATA_STREAM, (e2) => {
            e2.seq && delete e2.seq, e2.payload = zR(e2.payload), this.emit(Am.STREAM_MESSAGE, e2.uid, e2.payload), this.onStreamMessage && this.onStreamMessage(e2);
          }), this._gateway.signal.on(Pm.ON_CRYPT_ERROR, () => {
            XR(() => {
              NE.warning("[".concat(this._clientId, "] on crypt error")), this.emit(Am.CRYPT_ERROR);
            }, this._sessionId);
          }), this._gateway.signal.on(Pm.ON_TOKEN_PRIVILEGE_WILL_EXPIRE, this._handleTokenWillExpire), this._gateway.signal.on(Pm.ON_TOKEN_PRIVILEGE_DID_EXPIRE, () => {
            NE.warning("[".concat(this._clientId, "] received message onTokenPrivilegeDidExpire, please get new token and join again")), this._gateway.leave(true), this.emit(Am.ON_TOKEN_PRIVILEGE_DID_EXPIRE), this._reset();
          }), this._gateway.signal.on(Pm.ON_STREAM_FALLBACK_UPDATE, (e2) => {
            NE.debug("[".concat(this._clientId, "] stream fallback peerId: ").concat(e2.stream_id, ", attr: ").concat(e2.stream_type)), this.emit(Am.STREAM_FALLBACK, e2.stream_id, 1 === e2.stream_type ? "fallback" : "recover");
          }), this._gateway.signal.on(Pm.ON_PUBLISH_STREAM, (e2) => {
            this.uid === this._uid && (this._p2pChannel.reportPublishEvent(true, null, void 0, false, JSON.stringify({ proxy: e2.proxy })), NE.info("[".concat(this._clientId, "] on publish stream, ").concat(JSON.stringify(e2))));
          }), this._gateway.signal.on(Pm.ENABLE_LOCAL_VIDEO, (e2) => {
            this._handleSetStreamLocalEnable("video", e2.uid, true);
          }), this._gateway.signal.on(Pm.DISABLE_LOCAL_VIDEO, (e2) => {
            this._handleSetStreamLocalEnable("video", e2.uid, false);
          }), this._gateway.signal.on(wm.REQUEST_TIMEOUT, (e2, t2) => {
            if (this._joinInfo)
              switch (e2) {
                case Nm.PUBLISH: {
                  if (!t2)
                    return;
                  const e3 = (t2 = t2).ortc;
                  if (e3) {
                    var i2, r2, n2, o2;
                    const s2 = e3.some((e4) => {
                      let { stream_type: t3 } = e4;
                      return t3 === ag.Audio;
                    }), a2 = e3.some((e4) => {
                      let { stream_type: t3 } = e4;
                      return t3 !== ag.Audio;
                    }), c2 = e3.some((e4) => {
                      let { stream_type: t3 } = e4;
                      return t3 === ag.Screen || t3 === ag.ScreenLow;
                    });
                    "offer" === t2.state && IT.publish(this._joinInfo.sid, { eventElapse: pR.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: false, ec: TE.TIMEOUT, audio: s2, video: a2, p2pid: t2.p2p_id, publishRequestid: this.store.pubId, screenshare: c2, audioName: s2 ? null === (i2 = e3.find((e4) => {
                      let { stream_type: t3 } = e4;
                      return t3 === ag.Audio;
                    })) || void 0 === i2 || null === (r2 = i2.ssrcs[0]) || void 0 === r2 ? void 0 : r2.ssrcId.toString() : void 0, videoName: a2 ? null === (n2 = e3.find((e4) => {
                      let { stream_type: t3 } = e4;
                      return t3 !== ag.Audio;
                    })) || void 0 === n2 || null === (o2 = n2.ssrcs[0]) || void 0 === o2 ? void 0 : o2.ssrcId.toString() : void 0 });
                  }
                  break;
                }
                case Nm.SUBSCRIBE:
                  (t2 = t2) && IT.subscribe(this._joinInfo.sid, { succ: false, ec: TE.TIMEOUT, audio: t2.stream_type === yg.AUDIO, video: t2.stream_type === yg.VIDEO, peerid: t2.stream_id, subscribeRequestid: t2.ssrcId, p2pid: this.store.p2pId, eventElapse: pR.measureFromSubscribeStart(this.store.clientId, t2.ssrcId) });
              }
          }), this._gateway.signal.on(Pm.ON_P2P_OK, (e2) => {
            this.uid, this._uid;
          }), this._gateway.signal.on(Pm.ON_PUBLISHED_USER_LIST, (e2) => {
            if (null == e2 || !e2.users)
              return;
            const t2 = [], i2 = [];
            for (const r2 of e2.users) {
              let e3 = this._users.find((e4) => e4.uid === r2.stream_id);
              e3 ? e3._trust_in_room_ = true : (e3 = new mw(r2.stream_id, r2.stream_id), this._users.push(e3), 0 === this.getListeners(Am.PUBLISHED_USER_LIST).length && (NE.debug("[".concat(this._clientId, "] user online"), r2.stream_id), this.emit(Am.USER_JOINED, e3)));
              const n2 = dg.Audio & r2.stream_type, o2 = (dg.Video | dg.LwoVideo) & r2.stream_type, s2 = n2 && e3.hasAudio, a2 = o2 && e3.hasVideo;
              o2 && (e3._trust_video_stream_added_state_ = true, e3._video_added_ = true, e3._videoSSRC = r2.video_ssrc), n2 && (e3._trust_audio_stream_added_state_ = true, e3._audio_added_ = true, e3._audioSSRC = r2.audio_ssrc), n2 && !s2 && 0 === this.getListeners(Am.PUBLISHED_USER_LIST).length && (NE.info("[".concat(this._clientId, "] remote user ").concat(e3.uid, " published audio")), this.emit(Am.USER_PUBLISHED, e3, "audio")), o2 && !a2 && 0 === this.getListeners(Am.PUBLISHED_USER_LIST).length && (NE.info("[".concat(this._clientId, "] remote user ").concat(e3.uid, " published video")), this.emit(Am.USER_PUBLISHED, e3, "video")), (n2 && !s2 || o2 && !a2) && t2.push(e3), o2 && this._p2pChannel.hasPendingRemoteMedia(e3, "video") && i2.push({ user: e3, mediaType: "video" }), n2 && this._p2pChannel.hasPendingRemoteMedia(e3, "audio") && i2.push({ user: e3, mediaType: "audio" });
            }
            i2.length > 0 && (NE.debug("[".concat(this._clientId, "] RE massSubscribe after reconnect ").concat(i2.map((e3) => "user: ".concat(e3.user.uid, ", mediaType: ").concat(e3.mediaType)).join("; "), " ")), this.massSubscribe(i2).catch((e3) => {
              NE.error("[".concat(this._clientId, "] mass resubscribe error"), e3.toString());
            })), this.getListeners(Am.PUBLISHED_USER_LIST).length > 0 ? (NE.info("[".concat(this._clientId, "] client emit user-list event, users: ").concat(t2.map((e3) => e3.uid).join(", "))), this.emit(Am.PUBLISHED_USER_LIST, t2)) : NE.info("[".concat(this._clientId, "] client not emit user-list event case there is no user-list listener, users: ").concat(t2.map((e3) => e3.uid).join(", ")));
          });
        }
        _handleP2PChannelEvents() {
          this._p2pChannel.on(Og.RequestMuteLocal, async (e2, t2, i2) => {
            if (this._joinInfo)
              try {
                await this._gateway.muteLocal(e2, this._joinInfo.stringUid || this._joinInfo.uid), t2();
              } catch (e3) {
                e3.code === TE.DISCONNECT_P2P ? t2() : i2(e3);
              }
            else
              t2();
          }), this._p2pChannel.on(Og.RequestUnmuteLocal, async (e2, t2, i2) => {
            if (this._joinInfo)
              try {
                await this._gateway.unmuteLocal(e2, this._joinInfo.stringUid || this._joinInfo.uid), t2();
              } catch (e3) {
                e3.code === TE.DISCONNECT_P2P ? t2() : i2(e3);
              }
            else
              t2();
          }), this._p2pChannel.on(Og.RequestRePublish, (e2, t2, i2) => {
            this.publish(e2, false).then(t2).catch(i2);
          }), this._p2pChannel.on(Og.RequestReSubscribe, async (e2, t2, i2) => {
            try {
              for (const { user: t3, kind: i3 } of e2)
                i3 === yg.VIDEO ? await this.subscribe(t3, "video") : await this.subscribe(t3, "audio");
              t2();
            } catch (e3) {
              i2(e3);
            }
          }), this._p2pChannel.on(Og.RequestUploadStats, (e2, t2) => {
            this._gateway.uploadStats(e2, t2);
          }), this._p2pChannel.on(Og.MediaReconnectStart, (e2) => {
            this.emit(Am.MEDIA_RECONNECT_START, e2);
          }), this._p2pChannel.on(Og.MediaReconnectEnd, (e2) => {
            this.emit(Am.MEDIA_RECONNECT_END, e2);
          }), this._p2pChannel.on(Og.NeedSignalRTT, (e2) => {
            e2(this._gateway.getSignalRTT());
          }), this._p2pChannel.on(Og.RequestRestartICE, async () => {
            const e2 = await this._p2pChannel.restartICE(), t2 = await e2.next();
            if (t2.done)
              return;
            const i2 = t2.value;
            let r2;
            try {
              r2 = await this._gateway.restartICE({ iceParameters: i2 });
            } catch (t3) {
              return void e2.throw(t3);
            }
            const { iceParameters: n2 } = function(e3) {
              const t3 = e3.iceParameters;
              return { iceParameters: { iceUfrag: t3.iceUfrag, icePwd: t3.icePwd } };
            }(r2);
            await e2.next({ remoteIceParameters: n2 });
          }), this._p2pChannel.on(Og.RequestReconnect, async () => {
            this._gateway.reconnect();
          }), this._p2pChannel.on(Og.RequestReconnectPC, async () => {
            var e2;
            const { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: r2 } = await this._p2pChannel.startP2PConnection({ turnServer: null === (e2 = this._joinInfo) || void 0 === e2 ? void 0 : e2.turnServer }), { gatewayEstablishParams: n2, gatewayAddress: o2 } = await this._gateway.reconnectPC({ iceParameters: t2, dtlsParameters: i2, rtpCapabilities: r2 }), { dtlsParameters: s2, iceParameters: a2, candidates: c2, rtpCapabilities: d2, setup: u2, cname: l2 } = kD(n2, o2);
            await this._p2pChannel.connect(a2, s2, c2, d2, u2, l2), await this._p2pChannel.republish(), await this._p2pChannel.reSubscribe();
          }), this._p2pChannel.on(Og.RequestUnpublishForReconnectPC, async (e2, t2, i2) => {
            this._joinInfo && void 0 !== this._uid ? (await this._gateway.unpublish(e2, this._uid), t2()) : i2();
          }), this._p2pChannel.on(Og.P2PLost, () => {
            this.emit(Am.P2P_LOST, this.store.uid);
          }), this._p2pChannel.on(Og.UpdateVideoEncoder, (e2) => {
            e2._encoderConfig && this._gateway.setVideoProfile(e2._encoderConfig);
          }), this._p2pChannel.on(Og.ConnectionTypeChange, (e2) => {
            this.emit(Am.IS_USING_CLOUD_PROXY, e2);
          }), this._p2pChannel.on(Og.RequestLowStreamParameter, (e2) => {
            e2(this._lowStreamParameter || { width: 160, height: 120, framerate: 15, bitrate: 50 });
          }), this._p2pChannel.on(Og.QueryClientConnectionState, (e2) => {
            e2(this.connectionState);
          });
        }
        getKeyMetrics() {
          return this.store.keyMetrics;
        }
        async enableContentInspect(e2) {
          if ("CONNECTED" !== this.connectionState || !this._joinInfo)
            throw new vE(TE.INVALID_OPERATION, "[".concat(this._clientId, "] Client did not join channel"));
          if (this._inspect)
            throw new vE(TE.INVALID_OPERATION, "[".concat(this._clientId, "] Inspect content service already in connecting/connected state"));
          if (!e2)
            throw new vE(TE.INVALID_PARAMS, "[".concat(this._clientId, "] inspectConfig is necessary"));
          if (!e2.inspectType || !Array.isArray(e2.inspectType))
            throw new vE(TE.INVALID_PARAMS, "[".concat(this._clientId, "] inspectConfig.inspectType is necessary and is an instance of Array."));
          {
            const t2 = [...new Set(e2.inspectType)];
            t2.forEach((e3) => {
              if (!["supervise", "moderation"].includes(e3))
                throw new vE(TE.INVALID_PARAMS, "[".concat(this._clientId, "] ").concat(e3, " is not a valid inspect type."));
            }), e2.inspectType = t2;
          }
          if (e2 && e2.extraInfo && e2.extraInfo.length > 1024)
            throw new vE(TE.INVALID_PARAMS, "[".concat(this._clientId, "] inspectConfig.extraInfo length cannot exceed 1024 bytes"));
          try {
            const t2 = new ak(e2);
            this._inspect = t2, this.handleVideoInspectEvents(this._inspect), await t2.init({ appId: this._joinInfo.appId, areaCode: "", cname: this._joinInfo.cname, sid: this._joinInfo.sid, token: this._joinInfo.token, uid: this._joinInfo.uid, cid: this._joinInfo.cid, vid: this._joinInfo.vid ? Number(this._joinInfo.vid) : 0 }, RE);
          } catch (e3) {
            throw Array.isArray(e3) ? e3[0] : e3;
          }
        }
        async disableContentInspect() {
          if (!this._inspect)
            throw new vE(TE.INVALID_OPERATION, "[".concat(this._clientId, "] inspectVideoContent not started"));
          try {
            this._inspect.close(), this._inspect = void 0;
          } catch (e2) {
            throw Array.isArray(e2) ? e2[0] : e2;
          }
        }
        handleVideoInspectEvents(e2) {
          e2.on(kg.CONNECTION_STATE_CHANGE, (t2, i2) => {
            switch (this.emit(Am.CONTENT_INSPECT_CONNECTION_STATE_CHANGE, t2, i2), i2) {
              case Pg.CONNECTED:
                if ("CONNECTED" !== this.connectionState)
                  return void this.emit(Am.CONTENT_INSPECT_ERROR, new vE(TE.OPERATION_ABORTED, "Content inspect was cancelled because it left the channel"));
                e2.inspectImage();
            }
          }), e2.on(kg.INSPECT_RESULT, (e3, t2) => {
            var i2;
            if ((null == t2 ? void 0 : t2.code) === TE.INVALID_OPERATION && "DISCONNECTED" === this.connectionState)
              return NE.debug("Stop inspect content because that has left channel"), null == this || null === (i2 = this._inspect) || void 0 === i2 || i2.close(), void (this._inspect = void 0);
            this.emit(Am.CONTENT_INSPECT_RESULT, e3, t2);
          }), e2.on(kg.CLIENT_LOCAL_VIDEO_TRACK, (e3) => {
            e3(this.localTracks.filter((e4) => "video" === e4.trackMediaType)[0]);
          });
        }
        getJoinChannelServiceRecords() {
          return NE.debug("getJoinChannelServiceRecords"), this.store.joinChannelServiceRecords;
        }
        async setPublishAudioFilterEnabled(e2) {
          qf(e2, "enabled"), WE("ENABLE_PUBLISH_AUDIO_FILTER", e2), this._joinInfo && await this._gateway.setPublishAudioFilterEnabled(e2);
        }
        _handleResetAddStream(e2, t2) {
          switch (t2) {
            case "audio":
              e2._audio_added_ = false, e2._trust_audio_stream_added_state_ = true;
              break;
            case "video":
              e2._video_added_ = false, e2._trust_video_stream_added_state_ = true;
          }
        }
      }).prototype, "leave", [ck], Object.getOwnPropertyDescriptor(Yk.prototype, "leave"), Yk.prototype), ZS(Yk.prototype, "publish", [dk], Object.getOwnPropertyDescriptor(Yk.prototype, "publish"), Yk.prototype), ZS(Yk.prototype, "unpublish", [uk], Object.getOwnPropertyDescriptor(Yk.prototype, "unpublish"), Yk.prototype), ZS(Yk.prototype, "subscribe", [lk], Object.getOwnPropertyDescriptor(Yk.prototype, "subscribe"), Yk.prototype), ZS(Yk.prototype, "massSubscribe", [hk], Object.getOwnPropertyDescriptor(Yk.prototype, "massSubscribe"), Yk.prototype), ZS(Yk.prototype, "unsubscribe", [pk], Object.getOwnPropertyDescriptor(Yk.prototype, "unsubscribe"), Yk.prototype), ZS(Yk.prototype, "massUnsubscribe", [_k], Object.getOwnPropertyDescriptor(Yk.prototype, "massUnsubscribe"), Yk.prototype), ZS(Yk.prototype, "setLowStreamParameter", [Ek], Object.getOwnPropertyDescriptor(Yk.prototype, "setLowStreamParameter"), Yk.prototype), ZS(Yk.prototype, "enableDualStream", [fk], Object.getOwnPropertyDescriptor(Yk.prototype, "enableDualStream"), Yk.prototype), ZS(Yk.prototype, "disableDualStream", [mk], Object.getOwnPropertyDescriptor(Yk.prototype, "disableDualStream"), Yk.prototype), ZS(Yk.prototype, "setClientRole", [gk], Object.getOwnPropertyDescriptor(Yk.prototype, "setClientRole"), Yk.prototype), ZS(Yk.prototype, "setProxyServer", [Sk], Object.getOwnPropertyDescriptor(Yk.prototype, "setProxyServer"), Yk.prototype), ZS(Yk.prototype, "setTurnServer", [Tk], Object.getOwnPropertyDescriptor(Yk.prototype, "setTurnServer"), Yk.prototype), ZS(Yk.prototype, "setLicense", [vk], Object.getOwnPropertyDescriptor(Yk.prototype, "setLicense"), Yk.prototype), ZS(Yk.prototype, "startProxyServer", [Rk], Object.getOwnPropertyDescriptor(Yk.prototype, "startProxyServer"), Yk.prototype), ZS(Yk.prototype, "stopProxyServer", [Ik], Object.getOwnPropertyDescriptor(Yk.prototype, "stopProxyServer"), Yk.prototype), ZS(Yk.prototype, "setLocalAccessPointsV2", [yk], Object.getOwnPropertyDescriptor(Yk.prototype, "setLocalAccessPointsV2"), Yk.prototype), ZS(Yk.prototype, "setLocalAccessPoints", [Ck], Object.getOwnPropertyDescriptor(Yk.prototype, "setLocalAccessPoints"), Yk.prototype), ZS(Yk.prototype, "setRemoteDefaultVideoStreamType", [Ak], Object.getOwnPropertyDescriptor(Yk.prototype, "setRemoteDefaultVideoStreamType"), Yk.prototype), ZS(Yk.prototype, "setRemoteVideoStreamType", [Ok], Object.getOwnPropertyDescriptor(Yk.prototype, "setRemoteVideoStreamType"), Yk.prototype), ZS(Yk.prototype, "setStreamFallbackOption", [bk], Object.getOwnPropertyDescriptor(Yk.prototype, "setStreamFallbackOption"), Yk.prototype), ZS(Yk.prototype, "setEncryptionConfig", [wk], Object.getOwnPropertyDescriptor(Yk.prototype, "setEncryptionConfig"), Yk.prototype), ZS(Yk.prototype, "renewToken", [Nk], Object.getOwnPropertyDescriptor(Yk.prototype, "renewToken"), Yk.prototype), ZS(Yk.prototype, "enableAudioVolumeIndicator", [Dk], Object.getOwnPropertyDescriptor(Yk.prototype, "enableAudioVolumeIndicator"), Yk.prototype), ZS(Yk.prototype, "startLiveStreaming", [Pk], Object.getOwnPropertyDescriptor(Yk.prototype, "startLiveStreaming"), Yk.prototype), ZS(Yk.prototype, "setLiveTranscoding", [Lk], Object.getOwnPropertyDescriptor(Yk.prototype, "setLiveTranscoding"), Yk.prototype), ZS(Yk.prototype, "stopLiveStreaming", [kk], Object.getOwnPropertyDescriptor(Yk.prototype, "stopLiveStreaming"), Yk.prototype), ZS(Yk.prototype, "addInjectStreamUrl", [Mk], Object.getOwnPropertyDescriptor(Yk.prototype, "addInjectStreamUrl"), Yk.prototype), ZS(Yk.prototype, "removeInjectStreamUrl", [Uk], Object.getOwnPropertyDescriptor(Yk.prototype, "removeInjectStreamUrl"), Yk.prototype), ZS(Yk.prototype, "startChannelMediaRelay", [xk], Object.getOwnPropertyDescriptor(Yk.prototype, "startChannelMediaRelay"), Yk.prototype), ZS(Yk.prototype, "updateChannelMediaRelay", [Vk], Object.getOwnPropertyDescriptor(Yk.prototype, "updateChannelMediaRelay"), Yk.prototype), ZS(Yk.prototype, "stopChannelMediaRelay", [jk], Object.getOwnPropertyDescriptor(Yk.prototype, "stopChannelMediaRelay"), Yk.prototype), ZS(Yk.prototype, "sendCustomReportMessage", [Fk], Object.getOwnPropertyDescriptor(Yk.prototype, "sendCustomReportMessage"), Yk.prototype), ZS(Yk.prototype, "pickSVCLayer", [Bk], Object.getOwnPropertyDescriptor(Yk.prototype, "pickSVCLayer"), Yk.prototype), ZS(Yk.prototype, "enableContentInspect", [Gk], Object.getOwnPropertyDescriptor(Yk.prototype, "enableContentInspect"), Yk.prototype), ZS(Yk.prototype, "disableContentInspect", [Wk], Object.getOwnPropertyDescriptor(Yk.prototype, "disableContentInspect"), Yk.prototype), ZS(Yk.prototype, "getJoinChannelServiceRecords", [Hk], Object.getOwnPropertyDescriptor(Yk.prototype, "getJoinChannelServiceRecords"), Yk.prototype), ZS(Yk.prototype, "setPublishAudioFilterEnabled", [Kk], Object.getOwnPropertyDescriptor(Yk.prototype, "setPublishAudioFilterEnabled"), Yk.prototype), Yk);
      class zk extends GT {
        set currentState(e2) {
          e2 !== this._currentState && (this._currentState = e2, this.emit(km.AUDIO_SOURCE_STATE_CHANGE, this._currentState));
        }
        get currentState() {
          return this._currentState;
        }
        constructor(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          super(), mp(this, "audioBuffer", void 0), mp(this, "sourceNode", void 0), mp(this, "startPlayTime", 0), mp(this, "startPlayOffset", 0), mp(this, "pausePlayTime", 0), mp(this, "options", void 0), mp(this, "currentLoopCount", 0), mp(this, "_currentState", "stopped"), this.audioBuffer = e2, this.options = t2, this.startPlayOffset = this.options.startPlayTime || 0;
        }
        createWebAudioDiagram() {
          return this.context.createGain();
        }
        get duration() {
          return this.audioBuffer.duration;
        }
        get currentTime() {
          return "stopped" === this.currentState ? 0 : "paused" === this.currentState ? this.pausePlayTime : (this.context.currentTime - this.startPlayTime + this.startPlayOffset) % this.audioBuffer.duration;
        }
        updateOptions(e2) {
          "stopped" === this.currentState ? (this.options = e2, this.startPlayOffset = this.options.startPlayTime || 0) : NE.warning("can not set audio source options");
        }
        startProcessAudioBuffer() {
          this.sourceNode && this.stopProcessAudioBuffer(), this.sourceNode = this.createSourceNode(), this.startSourceNode(), this.currentState = "playing";
        }
        pauseProcessAudioBuffer() {
          this.sourceNode && "playing" === this.currentState && (this.pausePlayTime = this.currentTime, this.sourceNode.onended = null, this.sourceNode.stop(), this.sourceNode.buffer = null, this.sourceNode = this.createSourceNode(), this.currentState = "paused");
        }
        seekAudioBuffer(e2) {
          this.sourceNode && (this.sourceNode.onended = null, "playing" === this.currentState && this.sourceNode.stop(), this.sourceNode = this.createSourceNode(), "playing" === this.currentState ? (this.startPlayOffset = e2, this.startSourceNode()) : "paused" === this.currentState && (this.pausePlayTime = e2));
        }
        resumeProcessAudioBuffer() {
          "paused" === this.currentState && this.sourceNode && (this.startPlayOffset = this.pausePlayTime, this.pausePlayTime = 0, this.startSourceNode(), this.currentState = "playing");
        }
        stopProcessAudioBuffer() {
          if (this.sourceNode) {
            this.sourceNode.onended = null;
            try {
              this.sourceNode.stop();
            } catch (e2) {
            }
            this.reset();
          }
        }
        startSourceNode() {
          this.sourceNode && this.sourceNode.buffer && (this.sourceNode.start(0, this.startPlayOffset), this.startPlayTime = this.context.currentTime, this.sourceNode.onended = this.handleSourceNodeEnded.bind(this));
        }
        createSourceNode() {
          const e2 = this.context.createBufferSource();
          return e2.buffer = this.audioBuffer, e2.loop = !!this.options.loop, e2.connect(this.outputNode), e2;
        }
        handleSourceNodeEnded() {
          if (this.currentLoopCount += 1, this.options.cycle && this.options.cycle > this.currentLoopCount)
            return this.startPlayOffset = 0, this.sourceNode = void 0, void this.startProcessAudioBuffer();
          this.reset();
        }
        reset() {
          this.startPlayOffset = this.options.startPlayTime || 0, this.currentState = "stopped", this.sourceNode && (this.sourceNode.disconnect(), this.sourceNode = void 0), this.currentLoopCount = 0;
        }
      }
      const Qk = /* @__PURE__ */ new Map();
      async function Zk(e2, t2) {
        let i2 = null;
        if ("string" == typeof e2) {
          const t3 = Qk.get(e2);
          if (t3)
            return NE.debug("use cached audio resource: ", e2), t3;
          try {
            i2 = (await yE(() => fE.get(e2, { responseType: "arraybuffer" }), void 0, void 0, { maxRetryCount: 3 })).data;
          } catch (e3) {
            throw new vE(TE.FETCH_AUDIO_FILE_FAILED, e3.toString());
          }
        } else {
          const t3 = new Cl((t4, i3) => {
            const r3 = new FileReader();
            r3.onload = (e3) => {
              e3.target ? t4(e3.target.result) : i3(new vE(TE.READ_LOCAL_AUDIO_FILE_ERROR));
            }, r3.onerror = () => {
              i3(new vE(TE.READ_LOCAL_AUDIO_FILE_ERROR));
            }, r3.readAsArrayBuffer(e2);
          });
          i2 = await t3;
        }
        const r2 = await function(e3) {
          const t3 = MT();
          return new Cl((i3, r3) => {
            t3.decodeAudioData(e3, (e4) => {
              i3(e4);
            }, (e4) => {
              r3(new vE(TE.DECODE_AUDIO_FILE_FAILED, e4.toString()));
            });
          });
        }(i2);
        return "string" == typeof e2 && t2 && Qk.set(e2, r2), r2;
      }
      function $k(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var r2 = Object.getOwnPropertySymbols(e2);
          t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, r2);
        }
        return i2;
      }
      function eM(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? $k(Object(i2), true).forEach(function(t3) {
            mp(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : $k(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function tM(e2, t2, i2, r2) {
        i2.optimizationMode && (r2 && r2.width && r2.height ? (i2.encoderConfig = eM(eM({}, r2), {}, { bitrateMin: r2.bitrateMin, bitrateMax: r2.bitrateMax }), "motion" !== i2.optimizationMode && "detail" !== i2.optimizationMode || (t2.contentHint = i2.optimizationMode, t2.contentHint === i2.optimizationMode ? NE.debug("[".concat(e2, "] set content hint to"), i2.optimizationMode) : NE.debug("[".concat(e2, "] set content hint failed")))) : NE.warning("[".concat(e2, "] can not apply optimization mode bitrate config, no encoderConfig")));
      }
      const iM = Bh().name;
      function rM(e2, t2, i2, r2) {
        let n2, o2 = 0, s2 = null;
        return new Cl((a2, c2) => {
          setTimeout(() => {
            n2 && (n2(), a2(o2));
          }, t2), n2 = VT(() => {
            !function() {
              o2 > r2 && n2 && (n2(), a2(o2));
              const t3 = i2.getContext("2d");
              if (!t3) {
                const e3 = new vE(TE.UNEXPECTED_ERROR, "can not get canvas 2d context.");
                return NE.error(e3.toString()), void c2(e3);
              }
              t3.drawImage(e2, 0, 0, 160, 120);
              const d2 = t3.getImageData(0, 0, i2.width, i2.height), u2 = Math.floor(d2.data.length / 3);
              if (s2) {
                for (let e3 = 0; e3 < u2; e3 += 3)
                  if (d2.data[e3] !== s2[e3])
                    return o2 += 1, void (s2 = d2.data);
                s2 = d2.data;
              } else
                s2 = d2.data;
            }();
          }, 30);
        });
      }
      class nM {
        constructor(e2, t2) {
          mp(this, "id", 0), mp(this, "element", void 0), mp(this, "peerPair", void 0), mp(this, "context", void 0), mp(this, "audioPlayerElement", void 0), mp(this, "audioTrack", void 0), nM.count += 1, this.id = nM.count, this.element = e2, this.context = t2;
        }
        initPeers() {
          this.peerPair = [new RTCPeerConnection(), new RTCPeerConnection()], this.peerPair[1].ontrack = (e2) => {
            const t2 = document.createElement("audio");
            t2.srcObject = new MediaStream([e2.track]), t2.play(), this.audioPlayerElement = t2;
          };
        }
        async switchSdp() {
          if (!this.peerPair)
            return;
          const e2 = async (e3, t3) => {
            const i2 = "offer" === t3 ? await e3.createOffer() : await e3.createAnswer();
            return await e3.setLocalDescription(i2), "complete" === e3.iceGatheringState ? e3.localDescription : new Cl((t4) => {
              e3.onicegatheringstatechange = () => {
                "complete" === e3.iceGatheringState && t4(e3.localDescription);
              };
            });
          }, t2 = async (e3, t3) => await e3.setRemoteDescription(t3);
          try {
            const i2 = await e2(this.peerPair[0], "offer");
            await t2(this.peerPair[1], i2);
            const r2 = await e2(this.peerPair[1], "answer");
            await t2(this.peerPair[0], r2);
          } catch (e3) {
            throw new vE(TE.LOCAL_AEC_ERROR, e3.toString()).print();
          }
        }
        async getTracksFromMediaElement(e2) {
          if (this.audioTrack)
            return this.audioTrack;
          let t2;
          try {
            e2 instanceof HTMLVideoElement && (e2.captureStream ? e2.captureStream() : e2.mozCaptureStream()), t2 = this.context.createMediaStreamDestination();
            this.context.createMediaElementSource(e2).connect(t2);
          } catch (e3) {
            throw new vE(TE.LOCAL_AEC_ERROR, e3.toString()).print();
          }
          if (!t2) {
            throw new vE(TE.LOCAL_AEC_ERROR, "no dest node when local aec").print();
          }
          const i2 = t2.stream.getAudioTracks()[0];
          return this.audioTrack = i2, i2;
        }
        getElement() {
          return this.element;
        }
        async startEchoCancellation() {
          this.context.resume(), this.peerPair && this.close(), this.initPeers();
          const e2 = this.element, t2 = await this.getTracksFromMediaElement(e2);
          this.peerPair && this.peerPair[0].addTrack(t2), await this.switchSdp();
        }
        close() {
          NE.debug("close echo cancellation unit, id is", this.id), this.audioPlayerElement && this.audioPlayerElement.pause(), this.peerPair && this.peerPair.forEach((e2) => {
            e2.close();
          }), this.peerPair = void 0, this.audioPlayerElement = void 0;
        }
      }
      var oM, sM;
      mp(nM, "count", 0);
      const aM = window.AudioContext || window.webkitAudioContext;
      const cM = new (oM = RT({ report: IT }), ZS((sM = class {
        constructor() {
          mp(this, "units", []), mp(this, "context", void 0);
        }
        processExternalMediaAEC(e2) {
          if (!this._doesEnvironmentNeedAEC())
            return NE.debug("the system does not need to process local aec"), -1;
          this.context || (this.context = new aM());
          let t2 = this.units.find((t3) => t3 && t3.getElement() === e2);
          return t2 || (t2 = new nM(e2, this.context), this.units.push(t2)), t2.startEchoCancellation(), NE.debug("start processing local audio echo cancellation, id is", t2.id), t2.id;
        }
        _doesEnvironmentNeedAEC() {
          return Bh().name !== xh.SAFARI;
        }
      }).prototype, "processExternalMediaAEC", [oM], Object.getOwnPropertyDescriptor(sM.prototype, "processExternalMediaAEC"), sM.prototype), sM)();
      WE("PROCESS_ID", "process-".concat(MR(8, ""), "-").concat(MR(4, ""), "-").concat(MR(4, ""), "-").concat(MR(4, ""), "-").concat(MR(12, ""))), function() {
        const e2 = Bh();
        Vg.getDisplayMedia = function(e3) {
          if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia)
            return true;
          return false;
        }(), Vg.getStreamFromExtension = e2.name === xh.CHROME && Number(e2.version) > 34, Vg.supportUnifiedPlan = function() {
          if (!window.RTCRtpTransceiver)
            return false;
          if (!("currentDirection" in RTCRtpTransceiver.prototype))
            return false;
          const e3 = new RTCPeerConnection();
          let t2 = false;
          try {
            e3.addTransceiver("audio"), t2 = true;
          } catch (e4) {
          }
          return e3.close(), t2;
        }(), Vg.supportMinBitrate = e2.name === xh.CHROME || e2.name === xh.EDGE, Vg.supportSetRtpSenderParameters = function() {
          const e3 = Bh();
          if (!window.RTCRtpSender || !window.RTCRtpSender.prototype.setParameters || !window.RTCRtpSender.prototype.getParameters)
            return false;
          return !!ap() || (!(!zh() && !Yh()) || e3.name === xh.FIREFOX && Number(e3.version) >= 64);
        }(), e2.name === xh.SAFARI && (Number(e2.version) >= 14 ? Vg.supportDualStream = true : Vg.supportDualStream = false), Vg.webAudioMediaStreamDest = function() {
          const e3 = Bh();
          if (e3.name === xh.SAFARI && Number(e3.version) < 12)
            return false;
          return true;
        }(), Vg.supportReplaceTrack = function() {
          if (!window.RTCRtpSender)
            return false;
          if ("function" == typeof RTCRtpSender.prototype.replaceTrack)
            return true;
          return false;
        }(), Vg.supportWebGL = "undefined" != typeof WebGLRenderingContext, Vg.supportRequestFrame = !!window.CanvasCaptureMediaStreamTrack, ap() || (Vg.webAudioWithAEC = true), Vg.supportShareAudio = function() {
          const e3 = Bh();
          if ((e3.os === Uh.WIN_10 || e3.os === Uh.WIN_81 || e3.os === Uh.WIN_7 || e3.os === Uh.LINUX || e3.os === Uh.MAC_OS) && e3.name === xh.CHROME && Number(e3.version) >= 74)
            return true;
          return false;
        }(), Vg.supportDualStreamEncoding = function() {
          const e3 = Bh();
          if (HE("DISABLE_WEBAUDIO"))
            return true;
          return "Safari" === e3.name && Number(e3.version) >= 14 || !!("Chrome" === e3.name && /Windows/i.test(e3.os || "") && Number(e3.version) >= 100 && HE("CHROME_DUAL_STREAM_USE_ENCODING"));
        }(), Vg.supportDataChannel = function() {
          if (function(e3) {
            const t2 = Bh();
            return !(t2.name !== xh.CHROME || !t2.osVersion) && Number(t2.version) >= e3;
          }(76) || function(e3) {
            const t2 = Bh();
            return !(t2.name !== xh.FIREFOX || !t2.osVersion) && Number(t2.version) >= e3;
          }(68) || function(e3) {
            const t2 = Bh();
            return !(t2.name !== xh.SAFARI || !t2.osVersion) && Number(t2.version) >= e3;
          }(14))
            return true;
          return false;
        }(), NE.info("browser compatibility", JSON.stringify(Vg), JSON.stringify(e2));
      }(), function() {
        let e2;
        try {
          e2 = window.localStorage.getItem("websdk_ng_global_parameter");
        } catch (e3) {
          return void NE.error("Error loading sdk config", e3.message);
        }
        if (e2)
          try {
            const t2 = JSON.parse(window.atob(e2)), i2 = Date.now();
            NE.debug("Loading global parameters from cache", t2), Object.keys(t2).forEach((e3) => {
              if (Object.prototype.hasOwnProperty.call(KE, e3)) {
                const { value: r2, expires: n2 } = t2[e3];
                if (n2 && n2 <= i2)
                  return;
                YE[e3] = r2, KE[e3] = r2;
              }
            });
          } catch (t2) {
            NE.error("Error loading mutableParamsCache: ".concat(e2), t2.message);
          }
      }();
      const dM = { __CLIENT_LIST__: ZE, __TRACK_LIST__: $E, VERSION: PE, BUILD: DE, setParameter: (e2, t2, i2) => {
        NE.debug("setParameter key:".concat(e2, ", value:").concat(JSON.stringify(t2))), WE(e2, t2, i2);
      }, getParameter: HE, getSupportedCodec: async function() {
        let e2 = { audio: [], video: [] };
        try {
          let t2 = new RTCPeerConnection();
          t2.addTransceiver("video", { direction: "recvonly" }), t2.addTransceiver("audio", { direction: "recvonly" });
          const i2 = (await t2.createOffer()).sdp;
          if (!i2)
            return e2;
          t2.close(), t2 = null, e2 = function(e3) {
            const t3 = { video: [], audio: [] };
            return e3.match(/ VP8/i) && t3.video.push("VP8"), e3.match(/ VP9/i) && t3.video.push("VP9"), e3.match(/ AV1/i) && t3.video.push("AV1"), e3.match(/ H264/i) && t3.video.push("H264"), e3.match(/ opus/i) && t3.audio.push("OPUS"), e3.match(/ PCMU/i) && t3.audio.push("PCMU"), e3.match(/ PCMA/i) && t3.audio.push("PCMA"), e3.match(/ G722/i) && t3.audio.push("G722"), t3;
          }(i2);
        } catch (e3) {
          throw new vE(TE.CREATE_OFFER_FAILED, e3.toString && e3.toString()).print();
        }
        return e2;
      }, checkSystemRequirements: function() {
        const e2 = IT.reportApiInvoke(null, { name: Em.CHECK_SYSTEM_REQUIREMENTS, options: [], tag: fm.TRACER });
        let t2 = false;
        try {
          const e3 = window.RTCPeerConnection, i3 = navigator.mediaDevices && navigator.mediaDevices.getUserMedia, r3 = window.WebSocket;
          t2 = !!(e3 && i3 && r3);
        } catch (e3) {
          return NE.error("check system requirement failed: ", e3), false;
        }
        let i2 = false;
        const r2 = Bh();
        r2.name === xh.CHROME && Number(r2.version) >= 58 && (!Jh() || qh()) && (i2 = true), r2.name === xh.FIREFOX && Number(r2.version) >= 56 && (i2 = true), r2.name === xh.OPERA && Number(r2.version) >= 45 && (i2 = true), r2.name === xh.SAFARI && Number(r2.version) >= 11 && (i2 = true), (op() || Bh().name === xh.QQ) && (i2 = true), NE.debug("checkSystemRequirements, api:", t2, "browser", i2);
        const n2 = t2 && i2;
        return e2.onSuccess(n2), n2;
      }, getDevices: function(e2) {
        return iv.enumerateDevices(true, true, e2);
      }, getMicrophones: function(e2) {
        return iv.getRecordingDevices(e2);
      }, getCameras: function(e2) {
        return iv.getCamerasDevices(e2);
      }, getElectronScreenSources: YT, getPlaybackDevices: function(e2) {
        return iv.getSpeakers(e2);
      }, createClient: function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { codec: "vp8", audioCodec: "opus", mode: "rtc" };
        const t2 = IT.reportApiInvoke(null, { name: Em.CREATE_CLIENT, options: [e2], tag: fm.TRACER });
        try {
          Um(e2);
        } catch (e3) {
          throw t2.onError(e3), e3;
        }
        return void 0 === e2.audioCodec && (e2.audioCodec = "opus"), t2.onSuccess(), new Xk(Jk(Jk({ forceWaitGatewayResponse: true }, e2), {}, { role: "rtc" === e2.mode ? "host" : e2.role }));
      }, createCameraVideoTrack: async function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { encoderConfig: "480p_1" };
        const t2 = IT.reportApiInvoke(null, { tag: fm.TRACER, name: Em.CREATE_CAM_VIDEO_TRACK, options: [eM({}, e2)] }), i2 = Nb(e2), r2 = MR(8, "track-cam-");
        let n2 = null;
        NE.info("start create camera video track with config", JSON.stringify(e2), "trackId", r2);
        try {
          n2 = (await ZT({ video: i2 }, r2)).getVideoTracks()[0] || null;
        } catch (e3) {
          throw t2.onError(e3), e3;
        }
        if (!n2) {
          const e3 = new vE(TE.UNEXPECTED_ERROR, "can not find track in media stream");
          return t2.onError(e3), e3.throw();
        }
        e2.optimizationMode && tM(r2, n2, e2, e2.encoderConfig && VE(e2.encoderConfig));
        const o2 = new fw(n2, e2, i2, e2.scalabiltyMode ? FE(e2.scalabiltyMode) : { numSpatialLayers: 1, numTemporalLayers: 1 }, e2.optimizationMode, r2);
        return t2.onSuccess(o2.getTrackId()), NE.info("create camera video success, trackId:", r2), o2;
      }, createCustomVideoTrack: function(e2) {
        const t2 = IT.reportApiInvoke(null, { tag: fm.TRACER, name: Em.CREATE_CUSTOM_VIDEO_TRACK, options: [e2] }), i2 = new Ew(e2.mediaStreamTrack, { bitrateMax: e2.bitrateMax, bitrateMin: e2.bitrateMin }, e2.scalabiltyMode ? FE(e2.scalabiltyMode) : { numSpatialLayers: 1, numTemporalLayers: 1 }, e2.optimizationMode);
        return t2.onSuccess(i2.getTrackId()), NE.info("create custom video track success with config", e2, "trackId", i2.getTrackId()), i2;
      }, createScreenVideoTrack: async function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "disable";
        const i2 = IT.reportApiInvoke(null, { tag: fm.TRACER, name: Em.CREATE_SCREEN_VIDEO_TRACK, options: [eM({}, e2), t2] });
        e2.encoderConfig ? "string" == typeof e2.encoderConfig || e2.encoderConfig.width && e2.encoderConfig.height || (e2.encoderConfig.width = { max: 1920 }, e2.encoderConfig.height = { max: 1080 }) : e2.encoderConfig = "1080p_2";
        const r2 = Db(e2), n2 = MR(8, "track-scr");
        let o2 = null, s2 = null;
        const a2 = jg();
        if (!a2.supportShareAudio && "enable" === t2) {
          const e3 = new vE(TE.NOT_SUPPORTED, "your browser or platform is not support share-screen with audio");
          return i2.onError(e3), e3.throw();
        }
        NE.info("start create screen video track with config", e2, "withAudio", t2, "trackId", n2);
        try {
          const e3 = await ZT({ screen: r2, screenAudio: "auto" === t2 ? a2.supportShareAudio : "enable" === t2 }, n2);
          o2 = e3.getVideoTracks()[0] || null, s2 = e3.getAudioTracks()[0] || null;
        } catch (e3) {
          throw i2.onError(e3), e3;
        }
        if (!o2) {
          const e3 = new vE(TE.UNEXPECTED_ERROR, "can not find track in media stream");
          return i2.onError(e3), e3.throw();
        }
        if (!s2 && "enable" === t2) {
          o2 && o2.stop();
          const e3 = new vE(TE.SHARE_AUDIO_NOT_ALLOWED);
          return i2.onError(e3), e3.throw();
        }
        e2.optimizationMode || (e2.optimizationMode = "detail"), e2.optimizationMode && (tM(n2, o2, e2, e2.encoderConfig && jE(e2.encoderConfig)), e2.encoderConfig && "string" != typeof e2.encoderConfig && (e2.encoderConfig.bitrateMin = e2.encoderConfig.bitrateMax));
        const c2 = new Ew(o2, e2.encoderConfig ? jE(e2.encoderConfig) : {}, e2.scalabiltyMode ? FE(e2.scalabiltyMode) : { numSpatialLayers: 1, numTemporalLayers: 1 }, e2.optimizationMode, n2, [lg.SCREEN_TRACK]);
        if (!s2)
          return i2.onSuccess(c2.getTrackId()), NE.info("create screen video track success", "video:", c2.getTrackId()), c2;
        const d2 = new aR(s2);
        return i2.onSuccess([c2.getTrackId(), d2.getTrackId()]), NE.info("create screen video track success", "video:", c2.getTrackId(), "audio:", d2.getTrackId()), [c2, d2];
      }, createMicrophoneAndCameraTracks: async function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { encoderConfig: "480p_1" };
        const i2 = IT.reportApiInvoke(null, { tag: fm.TRACER, name: Em.CREATE_MIC_AND_CAM_TRACKS, options: [e2, t2] }), r2 = Nb(t2), n2 = Pb(e2), o2 = MR(8, "track-mic-"), s2 = MR(8, "track-cam-");
        let a2 = null, c2 = null;
        NE.info("start create camera video track(".concat(s2, ") and microphone audio track(").concat(o2, ") with config, audio: ").concat(JSON.stringify(e2), ", video: ").concat(JSON.stringify(t2)));
        try {
          const e3 = await ZT({ audio: n2, video: r2 }, "".concat(o2, "-").concat(s2));
          a2 = e3.getAudioTracks()[0], c2 = e3.getVideoTracks()[0];
        } catch (e3) {
          throw i2.onError(e3), e3;
        }
        if (!a2 || !c2) {
          const e3 = new vE(TE.UNEXPECTED_ERROR, "can not find tracks in media stream");
          return i2.onError(e3), e3.throw();
        }
        t2.optimizationMode && tM(s2, c2, t2, t2.encoderConfig && VE(t2.encoderConfig));
        const d2 = new cR(a2, e2, n2, o2), u2 = new fw(c2, t2, r2, t2.scalabiltyMode ? FE(t2.scalabiltyMode) : { numSpatialLayers: 1, numTemporalLayers: 1 }, t2.optimizationMode, s2);
        return i2.onSuccess([d2.getTrackId(), u2.getTrackId()]), NE.info("create camera video track(".concat(s2, ") and microphone audio track(").concat(o2, ") success")), [d2, u2];
      }, createMicrophoneAudioTrack: async function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        const t2 = IT.reportApiInvoke(null, { tag: fm.TRACER, name: Em.CREATE_MIC_AUDIO_TRACK, options: [e2] }), i2 = Pb(e2), r2 = MR(8, "track-mic-");
        let n2 = null;
        NE.info("start create microphone audio track with config", JSON.stringify(e2), "trackId", r2);
        try {
          n2 = (await ZT({ audio: i2 }, r2)).getAudioTracks()[0] || null;
        } catch (e3) {
          throw t2.onError(e3), e3;
        }
        if (!n2) {
          const e3 = new vE(TE.UNEXPECTED_ERROR, "can not find track in media stream");
          return t2.onError(e3), e3.throw();
        }
        const o2 = new cR(n2, e2, i2, r2);
        return t2.onSuccess(o2.getTrackId()), NE.info("create microphone audio track success, trackId:", r2), o2;
      }, createCustomAudioTrack: function(e2) {
        const t2 = IT.reportApiInvoke(null, { tag: fm.TRACER, name: Em.CREATE_CUSTOM_AUDIO_TRACK, options: [e2] }), i2 = new aR(e2.mediaStreamTrack, e2.encoderConfig ? GE(e2.encoderConfig) : {});
        return NE.info("create custom audio track success with config", e2, "trackId", i2.getTrackId()), t2.onSuccess(i2.getTrackId()), i2;
      }, createBufferSourceAudioTrack: async function(e2) {
        const t2 = IT.reportApiInvoke(null, { tag: fm.TRACER, name: Em.CREATE_BUFFER_AUDIO_TRACK, options: [e2] });
        if (HE("DISABLE_WEBAUDIO"))
          throw new vE(TE.NOT_SUPPORTED, "can not create BufferSourceAudioTrack when WebAudio disabled");
        const i2 = MR(8, "track-buf-");
        NE.info("start create buffer source audio track with config", JSON.stringify(e2), "trackId", i2);
        const r2 = e2.source;
        if (!(e2.source instanceof AudioBuffer))
          try {
            e2.source = await Zk(e2.source, e2.cacheOnlineFile);
          } catch (e3) {
            return t2.onError(e3), e3.throw();
          }
        const n2 = new zk(e2.source), o2 = new dR(r2, n2, e2.encoderConfig ? GE(e2.encoderConfig) : {}, i2);
        return NE.info("create buffer source audio track success, trackId:", i2), t2.onSuccess(o2.getTrackId()), o2;
      }, setAppType: function(e2) {
        if (NE.debug("setAppType: ".concat(e2)), !(Number.isInteger(e2) && e2 >= 0))
          throw NE.debug("Invalid appType"), new vE(TE.INVALID_PARAMS, "invalid app type", e2);
        WE("APP_TYPE", Math.floor(e2));
      }, setLogLevel: function(e2) {
        NE.setLogLevel(e2);
      }, enableLogUpload: function() {
        HE("USE_NEW_LOG") ? WE("UPLOAD_LOG", true) : NE.enableLogUpload();
      }, disableLogUpload: function() {
        HE("USE_NEW_LOG") ? WE("UPLOAD_LOG", false) : NE.disableLogUpload();
      }, createChannelMediaRelayConfiguration: function() {
        return new QO();
      }, checkAudioTrackIsActive: async function(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5e3;
        const i2 = IT.reportApiInvoke(null, { tag: fm.TRACER, name: Em.CHECK_AUDIO_TRACK_IS_ACTIVE, options: [t2] });
        if (!(e2 instanceof aR || e2 instanceof WP)) {
          const e3 = new vE(TE.INVALID_TRACK, "the parameter is not a audio track");
          return i2.onError(e3), e3.throw();
        }
        t2 && t2 < 1e3 && (t2 = 1e3);
        const r2 = e2 instanceof aR ? e2.getTrackLabel() : "remote_track", n2 = e2.getVolumeLevel();
        let o2 = n2, s2 = n2;
        const a2 = Date.now();
        return new Cl((n3) => {
          const c2 = setInterval(() => {
            const d2 = e2.getVolumeLevel();
            o2 = d2 > o2 ? d2 : o2, s2 = d2 < s2 ? d2 : s2;
            const u2 = o2 - s2 > 1e-4, l2 = Date.now() - a2;
            if (u2 || l2 > t2) {
              clearInterval(c2);
              const t3 = u2, s3 = { duration: l2, deviceLabel: r2, maxVolumeLevel: o2, result: t3 };
              NE.info("[track-".concat(e2.getTrackId(), "] check audio track active completed. ").concat(JSON.stringify(s3))), i2.onSuccess(s3), n3(t3);
            }
          }, 200);
        });
      }, checkVideoTrackIsActive: async function(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5e3;
        const i2 = IT.reportApiInvoke(null, { tag: fm.TRACER, name: Em.CHECK_VIDEO_TRACK_IS_ACTIVE, options: [t2] });
        if (!(e2 instanceof Ew || e2 instanceof GP)) {
          const e3 = new vE(TE.INVALID_TRACK, "the parameter is not a video track");
          return i2.onError(e3), e3.throw();
        }
        const r2 = 4;
        t2 && t2 < 1e3 && (t2 = 1e3);
        const n2 = e2 instanceof Ew ? e2.getTrackLabel() : "remote_track", o2 = e2.getMediaStreamTrack(true), s2 = document.createElement("video");
        s2.style.width = "1px", s2.style.height = "1px", s2.setAttribute("muted", ""), s2.muted = true, s2.setAttribute("playsinline", ""), s2.controls = false, (zh() || Yh()) && (s2.style.opacity = "0.01", s2.style.position = "fixed", s2.style.left = "0", s2.style.top = "0", document.body.appendChild(s2)), s2.srcObject = new MediaStream([o2]), s2.play();
        const a2 = document.createElement("canvas");
        a2.width = 160, a2.height = 120;
        let c2 = 0, d2 = 0;
        try {
          const e3 = Date.now();
          c2 = await rM(s2, t2, a2, r2), d2 = Date.now() - e3;
        } catch (e3) {
          throw i2.onError(e3), e3;
        }
        iM === xh.SAFARI && (s2.pause(), s2.remove()), s2.srcObject = null;
        const u2 = c2 > r2, l2 = { duration: d2, changedPicNum: c2, deviceLabel: n2, result: u2 };
        return NE.info("[track-".concat(e2.getTrackId(), "] check video track active completed. ").concat(JSON.stringify(l2))), i2.onSuccess(l2), u2;
      }, setArea: function(e2) {
        const t2 = IT.reportApiInvoke(null, { name: Em.SET_AREA, options: e2, tag: fm.TRACER });
        try {
          let t3 = [];
          if ("string" == typeof e2 && (t3 = [e2]), Array.isArray(e2) && (e2.forEach((e3) => {
            if (!Sg.includes(e3))
              throw new vE(TE.INVALID_PARAMS, "invalid area code");
          }), t3 = e2), "[object Object]" === Object.prototype.toString.call(e2)) {
            const { areaCode: i3, excludedArea: r2 } = e2;
            if (!i3)
              throw new vE(TE.INVALID_PARAMS, "area code is needed");
            let n2 = i3;
            "string" == typeof i3 && (n2 = [i3]), t3 = r2 ? LO(n2, r2) : n2;
          }
          WE("AREAS", t3);
          const i2 = ((e3) => {
            const t4 = { CODE: "", WEBCS_DOMAIN: [], WEBCS_DOMAIN_BACKUP_LIST: [], PROXY_CS: [], CDS_AP: [], ACCOUNT_REGISTER: [], UAP_AP: [], EVENT_REPORT_DOMAIN: [], EVENT_REPORT_BACKUP_DOMAIN: [], LOG_UPLOAD_SERVER: [], PROXY_SERVER_TYPE3: [] };
            return e3.map((e4) => {
              const i3 = vg[e4], r2 = Object.keys(i3);
              r2 && r2.map((e5) => {
                "CODE" !== e5 && (t4[e5] = t4[e5].concat(i3[e5]));
              });
            }), t4;
          })(t3);
          Object.keys(i2).map((e3) => {
            if ("LOG_UPLOAD_SERVER" === e3 || "EVENT_REPORT_DOMAIN" === e3 || "EVENT_REPORT_BACKUP_DOMAIN" === e3 || "PROXY_SERVER_TYPE3" === e3) {
              WE(e3, i2[e3][0]);
            } else
              WE(e3, i2[e3]);
          }), NE.debug("set area success:", t3.join(","));
        } catch (e3) {
          throw t2.onError(e3), e3;
        }
        t2.onSuccess();
      }, audioElementPlayCenter: nv, processExternalMediaAEC: function(e2) {
        cM.processExternalMediaAEC(e2);
      }, registerExtensions: function(e2) {
        e2.forEach((e3) => {
          const t2 = e3;
          t2.__registered__ = true, t2.logger.hookLog = NE.extLog, t2.reporter.hookApiInvoke = IT.extApiInvoke, t2.parameters && Object.keys(t2.parameters).forEach((e4) => {
            t2.parameters[e4] = HE(e4);
          });
        });
      }, ChannelMediaRelayError: sg, ChannelMediaRelayEvent: ng, ChannelMediaRelayState: og, RemoteStreamFallbackType: pg, RemoteStreamType: hg, ConnectionDisconnectedReason: Cm, AudienceLatencyLevelType: ym, AREAS: fg }, uM = window || document;
      return Object.defineProperties(dM, { onAudioAutoplayFailed: { get: () => ET.onAudioAutoplayFailed, set: (e2) => {
        ET.onAudioAutoplayFailed = e2;
      } }, onAutoplayFailed: { get: () => ET.onAutoplayFailed, set: (e2) => {
        ET.onAutoplayFailed = e2;
      } }, _onSecurityPolicyViolation: { value: void 0, writable: true }, _cspEventHandlerPointer: { value: void 0, writable: true }, onSecurityPolicyViolation: { get: () => dM._onSecurityPolicyViolation, set(e2) {
        if (dM._onSecurityPolicyViolation = e2, !uM)
          return;
        const t2 = (e3) => {
          if (!(e3 && e3.blockedURI && dM.onSecurityPolicyViolation))
            return;
          const t3 = e3.blockedURI;
          HE("CSP_DETECTED_HOSTNAME_LIST").some((e4) => t3.includes(e4)) && dM.onSecurityPolicyViolation && "function" == typeof dM.onSecurityPolicyViolation && dM.onSecurityPolicyViolation(e3);
        }, i2 = dM._cspEventHandlerPointer;
        i2 && uM.removeEventListener("securitypolicyviolation", i2), e2 && "function" == typeof e2 && uM.addEventListener("securitypolicyviolation", t2), dM._cspEventHandlerPointer = t2;
      } } }), iv.on(gm.CAMERA_DEVICE_CHANGED, (e2) => {
        NE.info("camera device changed", JSON.stringify(e2)), dM.onCameraChanged && dM.onCameraChanged(e2);
      }), iv.on(gm.RECORDING_DEVICE_CHANGED, (e2) => {
        NE.info("microphone device changed", JSON.stringify(e2)), dM.onMicrophoneChanged && dM.onMicrophoneChanged(e2);
      }), iv.on(gm.PLAYOUT_DEVICE_CHANGED, (e2) => {
        NE.debug("playout device changed", JSON.stringify(e2)), dM.onPlaybackDeviceChanged && dM.onPlaybackDeviceChanged(e2);
      }), nv.onAutoplayFailed = () => {
        NE.info("detect audio element autoplay failed"), ET.onAudioAutoplayFailed && ET.onAudioAutoplayFailed();
      }, LT.on("autoplay-failed", () => {
        NE.info("detect webaudio autoplay failed"), ET.onAudioAutoplayFailed && ET.onAudioAutoplayFailed();
      }), window && (window.__ARTC__ = dM), dM;
    });
  }
});
export default require_AgoraRTC_N_production();
/*! Bundled license information:

agora-rtc-sdk-ng/AgoraRTC_N-production.js:
  (*! formdata-polyfill. MIT License. Jimmy W?rting <https://jimmy.warting.se/opensource> *)
  (*! *****************************************************************************
  	Copyright (c) Microsoft Corporation. All rights reserved.
  	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  	this file except in compliance with the License. You may obtain a copy of the
  	License at http://www.apache.org/licenses/LICENSE-2.0
  
  	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  	MERCHANTABLITY OR NON-INFRINGEMENT.
  
  	See the Apache Version 2.0 License for specific language governing permissions
  	and limitations under the License.
  	***************************************************************************** *)
*/
//# sourceMappingURL=agora-rtc-sdk-ng.js.map
